
ALDEBARAN_AHRS_CORE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001519c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000930  08015380  08015380  00025380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015cb0  08015cb0  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08015cb0  08015cb0  00025cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015cb8  08015cb8  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015cb8  08015cb8  00025cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015cbc  08015cbc  00025cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08015cc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029d0  20000200  08015ec0  00030200  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002bd0  08015ec0  00032bd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000339d9  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000589b  00000000  00000000  00063c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002048  00000000  00000000  000694a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e50  00000000  00000000  0006b4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024cbd  00000000  00000000  0006d340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000279fd  00000000  00000000  00091ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9b3e  00000000  00000000  000b99fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00193538  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a06c  00000000  00000000  0019358c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000200 	.word	0x20000200
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015364 	.word	0x08015364

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000204 	.word	0x20000204
 800021c:	08015364 	.word	0x08015364

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a4 	b.w	8001038 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468c      	mov	ip, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8083 	bne.w	8000e8a <__udivmoddi4+0x116>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d947      	bls.n	8000e1a <__udivmoddi4+0xa6>
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	b142      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	f1c2 0020 	rsb	r0, r2, #32
 8000d94:	fa24 f000 	lsr.w	r0, r4, r0
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4097      	lsls	r7, r2
 8000d9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000da0:	4094      	lsls	r4, r2
 8000da2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da6:	0c23      	lsrs	r3, r4, #16
 8000da8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dac:	fa1f fe87 	uxth.w	lr, r7
 8000db0:	fb08 c116 	mls	r1, r8, r6, ip
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x60>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc6:	f080 8119 	bcs.w	8000ffc <__udivmoddi4+0x288>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 8116 	bls.w	8000ffc <__udivmoddi4+0x288>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ddc:	fb08 3310 	mls	r3, r8, r0, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d909      	bls.n	8000e00 <__udivmoddi4+0x8c>
 8000dec:	193c      	adds	r4, r7, r4
 8000dee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df2:	f080 8105 	bcs.w	8001000 <__udivmoddi4+0x28c>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f240 8102 	bls.w	8001000 <__udivmoddi4+0x28c>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	443c      	add	r4, r7
 8000e00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e04:	eba4 040e 	sub.w	r4, r4, lr
 8000e08:	2600      	movs	r6, #0
 8000e0a:	b11d      	cbz	r5, 8000e14 <__udivmoddi4+0xa0>
 8000e0c:	40d4      	lsrs	r4, r2
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e9c5 4300 	strd	r4, r3, [r5]
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xaa>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f282 	clz	r2, r2
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d150      	bne.n	8000ec8 <__udivmoddi4+0x154>
 8000e26:	1bcb      	subs	r3, r1, r7
 8000e28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2c:	fa1f f887 	uxth.w	r8, r7
 8000e30:	2601      	movs	r6, #1
 8000e32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e36:	0c21      	lsrs	r1, r4, #16
 8000e38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb08 f30c 	mul.w	r3, r8, ip
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0xe4>
 8000e48:	1879      	adds	r1, r7, r1
 8000e4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0xe2>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	f200 80e9 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e56:	4684      	mov	ip, r0
 8000e58:	1ac9      	subs	r1, r1, r3
 8000e5a:	b2a3      	uxth	r3, r4
 8000e5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e68:	fb08 f800 	mul.w	r8, r8, r0
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x10c>
 8000e70:	193c      	adds	r4, r7, r4
 8000e72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x10a>
 8000e78:	45a0      	cmp	r8, r4
 8000e7a:	f200 80d9 	bhi.w	8001030 <__udivmoddi4+0x2bc>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	eba4 0408 	sub.w	r4, r4, r8
 8000e84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e88:	e7bf      	b.n	8000e0a <__udivmoddi4+0x96>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d909      	bls.n	8000ea2 <__udivmoddi4+0x12e>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	f000 80b1 	beq.w	8000ff6 <__udivmoddi4+0x282>
 8000e94:	2600      	movs	r6, #0
 8000e96:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	fab3 f683 	clz	r6, r3
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d14a      	bne.n	8000f40 <__udivmoddi4+0x1cc>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d302      	bcc.n	8000eb4 <__udivmoddi4+0x140>
 8000eae:	4282      	cmp	r2, r0
 8000eb0:	f200 80b8 	bhi.w	8001024 <__udivmoddi4+0x2b0>
 8000eb4:	1a84      	subs	r4, r0, r2
 8000eb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eba:	2001      	movs	r0, #1
 8000ebc:	468c      	mov	ip, r1
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d0a8      	beq.n	8000e14 <__udivmoddi4+0xa0>
 8000ec2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ed0:	4097      	lsls	r7, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eda:	40d9      	lsrs	r1, r3
 8000edc:	4330      	orrs	r0, r6
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee4:	fa1f f887 	uxth.w	r8, r7
 8000ee8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef0:	fb06 f108 	mul.w	r1, r6, r8
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	fa04 f402 	lsl.w	r4, r4, r2
 8000efa:	d909      	bls.n	8000f10 <__udivmoddi4+0x19c>
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f02:	f080 808d 	bcs.w	8001020 <__udivmoddi4+0x2ac>
 8000f06:	4299      	cmp	r1, r3
 8000f08:	f240 808a 	bls.w	8001020 <__udivmoddi4+0x2ac>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	443b      	add	r3, r7
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b281      	uxth	r1, r0
 8000f14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f20:	fb00 f308 	mul.w	r3, r0, r8
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x1c4>
 8000f28:	1879      	adds	r1, r7, r1
 8000f2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2e:	d273      	bcs.n	8001018 <__udivmoddi4+0x2a4>
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d971      	bls.n	8001018 <__udivmoddi4+0x2a4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4439      	add	r1, r7
 8000f38:	1acb      	subs	r3, r1, r3
 8000f3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3e:	e778      	b.n	8000e32 <__udivmoddi4+0xbe>
 8000f40:	f1c6 0c20 	rsb	ip, r6, #32
 8000f44:	fa03 f406 	lsl.w	r4, r3, r6
 8000f48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f4c:	431c      	orrs	r4, r3
 8000f4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f52:	fa01 f306 	lsl.w	r3, r1, r6
 8000f56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	0c3b      	lsrs	r3, r7, #16
 8000f62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f66:	fa1f f884 	uxth.w	r8, r4
 8000f6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f72:	fb09 fa08 	mul.w	sl, r9, r8
 8000f76:	458a      	cmp	sl, r1
 8000f78:	fa02 f206 	lsl.w	r2, r2, r6
 8000f7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x220>
 8000f82:	1861      	adds	r1, r4, r1
 8000f84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f88:	d248      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000f8a:	458a      	cmp	sl, r1
 8000f8c:	d946      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000f8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f92:	4421      	add	r1, r4
 8000f94:	eba1 010a 	sub.w	r1, r1, sl
 8000f98:	b2bf      	uxth	r7, r7
 8000f9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa6:	fb00 f808 	mul.w	r8, r0, r8
 8000faa:	45b8      	cmp	r8, r7
 8000fac:	d907      	bls.n	8000fbe <__udivmoddi4+0x24a>
 8000fae:	19e7      	adds	r7, r4, r7
 8000fb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb4:	d22e      	bcs.n	8001014 <__udivmoddi4+0x2a0>
 8000fb6:	45b8      	cmp	r8, r7
 8000fb8:	d92c      	bls.n	8001014 <__udivmoddi4+0x2a0>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4427      	add	r7, r4
 8000fbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc2:	eba7 0708 	sub.w	r7, r7, r8
 8000fc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fca:	454f      	cmp	r7, r9
 8000fcc:	46c6      	mov	lr, r8
 8000fce:	4649      	mov	r1, r9
 8000fd0:	d31a      	bcc.n	8001008 <__udivmoddi4+0x294>
 8000fd2:	d017      	beq.n	8001004 <__udivmoddi4+0x290>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x27a>
 8000fd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fda:	eb67 0701 	sbc.w	r7, r7, r1
 8000fde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fe2:	40f2      	lsrs	r2, r6
 8000fe4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe8:	40f7      	lsrs	r7, r6
 8000fea:	e9c5 2700 	strd	r2, r7, [r5]
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e70b      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e9      	b.n	8000dd4 <__udivmoddi4+0x60>
 8001000:	4618      	mov	r0, r3
 8001002:	e6fd      	b.n	8000e00 <__udivmoddi4+0x8c>
 8001004:	4543      	cmp	r3, r8
 8001006:	d2e5      	bcs.n	8000fd4 <__udivmoddi4+0x260>
 8001008:	ebb8 0e02 	subs.w	lr, r8, r2
 800100c:	eb69 0104 	sbc.w	r1, r9, r4
 8001010:	3801      	subs	r0, #1
 8001012:	e7df      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001014:	4608      	mov	r0, r1
 8001016:	e7d2      	b.n	8000fbe <__udivmoddi4+0x24a>
 8001018:	4660      	mov	r0, ip
 800101a:	e78d      	b.n	8000f38 <__udivmoddi4+0x1c4>
 800101c:	4681      	mov	r9, r0
 800101e:	e7b9      	b.n	8000f94 <__udivmoddi4+0x220>
 8001020:	4666      	mov	r6, ip
 8001022:	e775      	b.n	8000f10 <__udivmoddi4+0x19c>
 8001024:	4630      	mov	r0, r6
 8001026:	e74a      	b.n	8000ebe <__udivmoddi4+0x14a>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	4439      	add	r1, r7
 800102e:	e713      	b.n	8000e58 <__udivmoddi4+0xe4>
 8001030:	3802      	subs	r0, #2
 8001032:	443c      	add	r4, r7
 8001034:	e724      	b.n	8000e80 <__udivmoddi4+0x10c>
 8001036:	bf00      	nop

08001038 <__aeabi_idiv0>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <GNSS_Init>:
/*!
 * Structure initialization.
 * @param GNSS Pointer to main GNSS structure.
 * @param huart Pointer to uart handle.
 */
void GNSS_Init(GNSS_StateHandle *GNSS, UART_HandleTypeDef *huart) {
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	GNSS->huart = huart;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	601a      	str	r2, [r3, #0]
	GNSS->year = 0;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	GNSS->month = 0;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->day = 0;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->hour = 0;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	GNSS->min = 0;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	GNSS->sec = 0;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	GNSS->fixType = 0;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	GNSS->numSV = 0;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	GNSS->satCount = 0;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	GNSS->lon = 0;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	67da      	str	r2, [r3, #124]	; 0x7c
	GNSS->lat = 0;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	GNSS->height = 0;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	GNSS->hMSL = 0;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	GNSS->hAcc = 0;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	GNSS->vAcc = 0;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	GNSS->gSpeed = 0;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	GNSS->headMot = 0;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <GNSS_ParseBuffer>:

/*!
 * Searching for a header in data buffer and matching class and message ID to buffer data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseBuffer(GNSS_StateHandle *GNSS) {
 80010de:	b580      	push	{r7, lr}
 80010e0:	b084      	sub	sp, #16
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
	// [var]     = Header #1
	// [var + 1] = Header #2
	// [var + 2] = Class
	// [var + 3] = ID
	//***********************
	for (int var = 0; var <= 100; ++var) {
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	e069      	b.n	80011c0 <GNSS_ParseBuffer+0xe2>
		if (GNSS->uartWorkingBuffer[var] == 0xB5
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4413      	add	r3, r2
 80010f2:	3308      	adds	r3, #8
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2bb5      	cmp	r3, #181	; 0xb5
 80010f8:	d15f      	bne.n	80011ba <GNSS_ParseBuffer+0xdc>
			&& GNSS->uartWorkingBuffer[var + 1] == 0x62) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	3301      	adds	r3, #1
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	7a1b      	ldrb	r3, [r3, #8]
 8001104:	2b62      	cmp	r3, #98	; 0x62
 8001106:	d158      	bne.n	80011ba <GNSS_ParseBuffer+0xdc>

				if (GNSS->uartWorkingBuffer[var + 2] == 0x27
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	3302      	adds	r3, #2
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	4413      	add	r3, r2
 8001110:	7a1b      	ldrb	r3, [r3, #8]
 8001112:	2b27      	cmp	r3, #39	; 0x27
 8001114:	d10a      	bne.n	800112c <GNSS_ParseBuffer+0x4e>
						&& GNSS->uartWorkingBuffer[var + 3] == 0x03) { //Look at: 32.19.1.1 u-blox 8 Receiver description
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	3303      	adds	r3, #3
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	7a1b      	ldrb	r3, [r3, #8]
 8001120:	2b03      	cmp	r3, #3
 8001122:	d103      	bne.n	800112c <GNSS_ParseBuffer+0x4e>
					GNSS_ParseUniqID(GNSS);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 f887 	bl	8001238 <GNSS_ParseUniqID>
 800112a:	e046      	b.n	80011ba <GNSS_ParseBuffer+0xdc>

				} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3302      	adds	r3, #2
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	4413      	add	r3, r2
 8001134:	7a1b      	ldrb	r3, [r3, #8]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d10a      	bne.n	8001150 <GNSS_ParseBuffer+0x72>
						&& GNSS->uartWorkingBuffer[var + 3] == 0x21) { //Look at: 32.17.14.1 u-blox 8 Receiver description
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3303      	adds	r3, #3
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	7a1b      	ldrb	r3, [r3, #8]
 8001144:	2b21      	cmp	r3, #33	; 0x21
 8001146:	d103      	bne.n	8001150 <GNSS_ParseBuffer+0x72>
					GNSS_ParseNavigatorData(GNSS);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 fa99 	bl	8001680 <GNSS_ParseNavigatorData>
 800114e:	e034      	b.n	80011ba <GNSS_ParseBuffer+0xdc>

				} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3302      	adds	r3, #2
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	4413      	add	r3, r2
 8001158:	7a1b      	ldrb	r3, [r3, #8]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d10a      	bne.n	8001174 <GNSS_ParseBuffer+0x96>
						&& GNSS->uartWorkingBuffer[var + 3] == 0x07) { //Look at: 32.17.17.1 u-blox 8 Receiver description
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	3303      	adds	r3, #3
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	7a1b      	ldrb	r3, [r3, #8]
 8001168:	2b07      	cmp	r3, #7
 800116a:	d103      	bne.n	8001174 <GNSS_ParseBuffer+0x96>
					GNSS_ParsePVTData(GNSS);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f91b 	bl	80013a8 <GNSS_ParsePVTData>
 8001172:	e022      	b.n	80011ba <GNSS_ParseBuffer+0xdc>

				} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3302      	adds	r3, #2
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	7a1b      	ldrb	r3, [r3, #8]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d10a      	bne.n	8001198 <GNSS_ParseBuffer+0xba>
						&& GNSS->uartWorkingBuffer[var + 3] == 0x02) { //Look at: 32.17.15.1 u-blox 8 Receiver description
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3303      	adds	r3, #3
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	7a1b      	ldrb	r3, [r3, #8]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d103      	bne.n	8001198 <GNSS_ParseBuffer+0xba>
					GNSS_ParsePOSLLHData(GNSS);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 fabd 	bl	8001710 <GNSS_ParsePOSLLHData>
 8001196:	e010      	b.n	80011ba <GNSS_ParseBuffer+0xdc>

				} else if (GNSS->uartWorkingBuffer[var + 2] == 0x01
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	3302      	adds	r3, #2
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	7a1b      	ldrb	r3, [r3, #8]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d109      	bne.n	80011ba <GNSS_ParseBuffer+0xdc>
					    && GNSS->uartWorkingBuffer[var + 3] == 0x35) {  //Look at: 32.17.20.1 u-blox 8 Receiver description
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	3303      	adds	r3, #3
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	7a1b      	ldrb	r3, [r3, #8]
 80011b0:	2b35      	cmp	r3, #53	; 0x35
 80011b2:	d102      	bne.n	80011ba <GNSS_ParseBuffer+0xdc>
					GNSS_ParseNAVSATData(GNSS);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 fa99 	bl	80016ec <GNSS_ParseNAVSATData>
	for (int var = 0; var <= 100; ++var) {
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	3301      	adds	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2b64      	cmp	r3, #100	; 0x64
 80011c4:	dd92      	ble.n	80010ec <GNSS_ParseBuffer+0xe>
				}
		}
	}
}
 80011c6:	bf00      	nop
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <GNSS_GetUniqID>:

/*!
 * Make request for unique chip ID data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_GetUniqID(GNSS_StateHandle *GNSS) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, getDeviceID,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2208      	movs	r2, #8
 80011de:	4907      	ldr	r1, [pc, #28]	; (80011fc <GNSS_GetUniqID+0x2c>)
 80011e0:	4618      	mov	r0, r3
 80011e2:	f009 faff 	bl	800a7e4 <HAL_UART_Transmit_DMA>
			sizeof(getDeviceID) / sizeof(uint8_t));
	HAL_UART_Receive_IT(GNSS->huart, GNSS_Handle.uartWorkingBuffer, 17);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2211      	movs	r2, #17
 80011ec:	4904      	ldr	r1, [pc, #16]	; (8001200 <GNSS_GetUniqID+0x30>)
 80011ee:	4618      	mov	r0, r3
 80011f0:	f009 faa2 	bl	800a738 <HAL_UART_Receive_IT>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	08015514 	.word	0x08015514
 8001200:	20001c8c 	.word	0x20001c8c

08001204 <GNSS_GetPVTData>:

/*!
 * Make request for navigation position velocity time solution data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_GetPVTData(GNSS_StateHandle *GNSS) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, getPVTData,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2208      	movs	r2, #8
 8001212:	4907      	ldr	r1, [pc, #28]	; (8001230 <GNSS_GetPVTData+0x2c>)
 8001214:	4618      	mov	r0, r3
 8001216:	f009 fae5 	bl	800a7e4 <HAL_UART_Transmit_DMA>
			sizeof(getPVTData) / sizeof(uint8_t));
	HAL_UART_Receive_IT(GNSS->huart, GNSS_Handle.uartWorkingBuffer, 100);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2264      	movs	r2, #100	; 0x64
 8001220:	4904      	ldr	r1, [pc, #16]	; (8001234 <GNSS_GetPVTData+0x30>)
 8001222:	4618      	mov	r0, r3
 8001224:	f009 fa88 	bl	800a738 <HAL_UART_Receive_IT>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	0801551c 	.word	0x0801551c
 8001234:	20001c8c 	.word	0x20001c8c

08001238 <GNSS_ParseUniqID>:
/*!
 * Parse data to unique chip ID standard.
 * Look at: 32.19.1.1 u-blox 8 Receiver description
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseUniqID(GNSS_StateHandle *GNSS) {
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	for (int var = 0; var < 5; ++var) {
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	e00d      	b.n	8001262 <GNSS_ParseUniqID+0x2a>
		GNSS->uniqueID[var] = GNSS_Handle.uartWorkingBuffer[10 + var];
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	330a      	adds	r3, #10
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <GNSS_ParseUniqID+0x40>)
 800124c:	4413      	add	r3, r2
 800124e:	7a19      	ldrb	r1, [r3, #8]
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4413      	add	r3, r2
 8001256:	3304      	adds	r3, #4
 8001258:	460a      	mov	r2, r1
 800125a:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 5; ++var) {
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3301      	adds	r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2b04      	cmp	r3, #4
 8001266:	ddee      	ble.n	8001246 <GNSS_ParseUniqID+0xe>
	}
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20001c84 	.word	0x20001c84

0800127c <GNSS_SetMode>:

/*!
 * Changing the GNSS mode.
 * Look at: 32.10.19 u-blox 8 Receiver description
 */
void GNSS_SetMode(GNSS_StateHandle *GNSS, short gnssMode) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	807b      	strh	r3, [r7, #2]
	if (gnssMode == 0) {
 8001288:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d107      	bne.n	80012a0 <GNSS_SetMode+0x24>
		HAL_UART_Transmit_DMA(GNSS->huart, setPortableMode,sizeof(setPortableMode) / sizeof(uint8_t));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	222c      	movs	r2, #44	; 0x2c
 8001296:	493a      	ldr	r1, [pc, #232]	; (8001380 <GNSS_SetMode+0x104>)
 8001298:	4618      	mov	r0, r3
 800129a:	f009 faa3 	bl	800a7e4 <HAL_UART_Transmit_DMA>
	} else if (gnssMode == 8) {
		HAL_UART_Transmit_DMA(GNSS->huart, setWirstMode,sizeof(setWirstMode) / sizeof(uint8_t));
	} else if (gnssMode == 9) {
		HAL_UART_Transmit_DMA(GNSS->huart, setBikeMode,sizeof(setBikeMode) / sizeof(uint8_t));
	}
}
 800129e:	e06a      	b.n	8001376 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 1) {
 80012a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d107      	bne.n	80012b8 <GNSS_SetMode+0x3c>
		HAL_UART_Transmit_DMA(GNSS->huart, setStationaryMode,sizeof(setStationaryMode) / sizeof(uint8_t));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	222c      	movs	r2, #44	; 0x2c
 80012ae:	4935      	ldr	r1, [pc, #212]	; (8001384 <GNSS_SetMode+0x108>)
 80012b0:	4618      	mov	r0, r3
 80012b2:	f009 fa97 	bl	800a7e4 <HAL_UART_Transmit_DMA>
}
 80012b6:	e05e      	b.n	8001376 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 2) {
 80012b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d107      	bne.n	80012d0 <GNSS_SetMode+0x54>
		HAL_UART_Transmit_DMA(GNSS->huart, setPedestrianMode,sizeof(setPedestrianMode) / sizeof(uint8_t));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	222c      	movs	r2, #44	; 0x2c
 80012c6:	4930      	ldr	r1, [pc, #192]	; (8001388 <GNSS_SetMode+0x10c>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f009 fa8b 	bl	800a7e4 <HAL_UART_Transmit_DMA>
}
 80012ce:	e052      	b.n	8001376 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 3) {
 80012d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d107      	bne.n	80012e8 <GNSS_SetMode+0x6c>
		HAL_UART_Transmit_DMA(GNSS->huart, setAutomotiveMode,sizeof(setAutomotiveMode) / sizeof(uint8_t));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	222c      	movs	r2, #44	; 0x2c
 80012de:	492b      	ldr	r1, [pc, #172]	; (800138c <GNSS_SetMode+0x110>)
 80012e0:	4618      	mov	r0, r3
 80012e2:	f009 fa7f 	bl	800a7e4 <HAL_UART_Transmit_DMA>
}
 80012e6:	e046      	b.n	8001376 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 4) {
 80012e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d107      	bne.n	8001300 <GNSS_SetMode+0x84>
		HAL_UART_Transmit_DMA(GNSS->huart, setAutomotiveMode,sizeof(setAutomotiveMode) / sizeof(uint8_t));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	222c      	movs	r2, #44	; 0x2c
 80012f6:	4925      	ldr	r1, [pc, #148]	; (800138c <GNSS_SetMode+0x110>)
 80012f8:	4618      	mov	r0, r3
 80012fa:	f009 fa73 	bl	800a7e4 <HAL_UART_Transmit_DMA>
}
 80012fe:	e03a      	b.n	8001376 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 5) {
 8001300:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001304:	2b05      	cmp	r3, #5
 8001306:	d107      	bne.n	8001318 <GNSS_SetMode+0x9c>
		HAL_UART_Transmit_DMA(GNSS->huart, setAirbone1GMode,sizeof(setAirbone1GMode) / sizeof(uint8_t));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	222c      	movs	r2, #44	; 0x2c
 800130e:	4920      	ldr	r1, [pc, #128]	; (8001390 <GNSS_SetMode+0x114>)
 8001310:	4618      	mov	r0, r3
 8001312:	f009 fa67 	bl	800a7e4 <HAL_UART_Transmit_DMA>
}
 8001316:	e02e      	b.n	8001376 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 6) {
 8001318:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800131c:	2b06      	cmp	r3, #6
 800131e:	d107      	bne.n	8001330 <GNSS_SetMode+0xb4>
		HAL_UART_Transmit_DMA(GNSS->huart, setAirbone2GMode,sizeof(setAirbone2GMode) / sizeof(uint8_t));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	222c      	movs	r2, #44	; 0x2c
 8001326:	491b      	ldr	r1, [pc, #108]	; (8001394 <GNSS_SetMode+0x118>)
 8001328:	4618      	mov	r0, r3
 800132a:	f009 fa5b 	bl	800a7e4 <HAL_UART_Transmit_DMA>
}
 800132e:	e022      	b.n	8001376 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 7) {
 8001330:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001334:	2b07      	cmp	r3, #7
 8001336:	d107      	bne.n	8001348 <GNSS_SetMode+0xcc>
		HAL_UART_Transmit_DMA(GNSS->huart, setAirbone4GMode,sizeof(setAirbone4GMode) / sizeof(uint8_t));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	222c      	movs	r2, #44	; 0x2c
 800133e:	4916      	ldr	r1, [pc, #88]	; (8001398 <GNSS_SetMode+0x11c>)
 8001340:	4618      	mov	r0, r3
 8001342:	f009 fa4f 	bl	800a7e4 <HAL_UART_Transmit_DMA>
}
 8001346:	e016      	b.n	8001376 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 8) {
 8001348:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800134c:	2b08      	cmp	r3, #8
 800134e:	d107      	bne.n	8001360 <GNSS_SetMode+0xe4>
		HAL_UART_Transmit_DMA(GNSS->huart, setWirstMode,sizeof(setWirstMode) / sizeof(uint8_t));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	222c      	movs	r2, #44	; 0x2c
 8001356:	4911      	ldr	r1, [pc, #68]	; (800139c <GNSS_SetMode+0x120>)
 8001358:	4618      	mov	r0, r3
 800135a:	f009 fa43 	bl	800a7e4 <HAL_UART_Transmit_DMA>
}
 800135e:	e00a      	b.n	8001376 <GNSS_SetMode+0xfa>
	} else if (gnssMode == 9) {
 8001360:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001364:	2b09      	cmp	r3, #9
 8001366:	d106      	bne.n	8001376 <GNSS_SetMode+0xfa>
		HAL_UART_Transmit_DMA(GNSS->huart, setBikeMode,sizeof(setBikeMode) / sizeof(uint8_t));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	222c      	movs	r2, #44	; 0x2c
 800136e:	490c      	ldr	r1, [pc, #48]	; (80013a0 <GNSS_SetMode+0x124>)
 8001370:	4618      	mov	r0, r3
 8001372:	f009 fa37 	bl	800a7e4 <HAL_UART_Transmit_DMA>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	08015524 	.word	0x08015524
 8001384:	08015550 	.word	0x08015550
 8001388:	0801557c 	.word	0x0801557c
 800138c:	080155a8 	.word	0x080155a8
 8001390:	080155d4 	.word	0x080155d4
 8001394:	08015600 	.word	0x08015600
 8001398:	0801562c 	.word	0x0801562c
 800139c:	08015658 	.word	0x08015658
 80013a0:	08015684 	.word	0x08015684
 80013a4:	00000000 	.word	0x00000000

080013a8 <GNSS_ParsePVTData>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTData(GNSS_StateHandle *GNSS) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	uShort.bytes[0] = GNSS_Handle.uartWorkingBuffer[10];
 80013b0:	4b95      	ldr	r3, [pc, #596]	; (8001608 <GNSS_ParsePVTData+0x260>)
 80013b2:	7c9a      	ldrb	r2, [r3, #18]
 80013b4:	4b95      	ldr	r3, [pc, #596]	; (800160c <GNSS_ParsePVTData+0x264>)
 80013b6:	701a      	strb	r2, [r3, #0]
	GNSS->yearBytes[0]=GNSS_Handle.uartWorkingBuffer[10];
 80013b8:	4b93      	ldr	r3, [pc, #588]	; (8001608 <GNSS_ParsePVTData+0x260>)
 80013ba:	7c9a      	ldrb	r2, [r3, #18]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	uShort.bytes[1] = GNSS_Handle.uartWorkingBuffer[11];
 80013c2:	4b91      	ldr	r3, [pc, #580]	; (8001608 <GNSS_ParsePVTData+0x260>)
 80013c4:	7cda      	ldrb	r2, [r3, #19]
 80013c6:	4b91      	ldr	r3, [pc, #580]	; (800160c <GNSS_ParsePVTData+0x264>)
 80013c8:	705a      	strb	r2, [r3, #1]
	GNSS->yearBytes[1]=GNSS_Handle.uartWorkingBuffer[11];
 80013ca:	4b8f      	ldr	r3, [pc, #572]	; (8001608 <GNSS_ParsePVTData+0x260>)
 80013cc:	7cda      	ldrb	r2, [r3, #19]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	GNSS->year = uShort.uShort;
 80013d4:	4b8d      	ldr	r3, [pc, #564]	; (800160c <GNSS_ParsePVTData+0x264>)
 80013d6:	881a      	ldrh	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	GNSS->month = GNSS_Handle.uartWorkingBuffer[12];
 80013de:	4b8a      	ldr	r3, [pc, #552]	; (8001608 <GNSS_ParsePVTData+0x260>)
 80013e0:	7d1a      	ldrb	r2, [r3, #20]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->day = GNSS_Handle.uartWorkingBuffer[13];
 80013e8:	4b87      	ldr	r3, [pc, #540]	; (8001608 <GNSS_ParsePVTData+0x260>)
 80013ea:	7d5a      	ldrb	r2, [r3, #21]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->hour = GNSS_Handle.uartWorkingBuffer[14];
 80013f2:	4b85      	ldr	r3, [pc, #532]	; (8001608 <GNSS_ParsePVTData+0x260>)
 80013f4:	7d9a      	ldrb	r2, [r3, #22]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	GNSS->min = GNSS_Handle.uartWorkingBuffer[15];
 80013fc:	4b82      	ldr	r3, [pc, #520]	; (8001608 <GNSS_ParsePVTData+0x260>)
 80013fe:	7dda      	ldrb	r2, [r3, #23]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	GNSS->sec = GNSS_Handle.uartWorkingBuffer[16];
 8001406:	4b80      	ldr	r3, [pc, #512]	; (8001608 <GNSS_ParsePVTData+0x260>)
 8001408:	7e1a      	ldrb	r2, [r3, #24]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	GNSS->fixType = GNSS_Handle.uartWorkingBuffer[26];
 8001410:	4b7d      	ldr	r3, [pc, #500]	; (8001608 <GNSS_ParsePVTData+0x260>)
 8001412:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	GNSS->numSV = GNSS_Handle.uartWorkingBuffer[29];
 800141c:	4b7a      	ldr	r3, [pc, #488]	; (8001608 <GNSS_ParsePVTData+0x260>)
 800141e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

	for (int var = 0; var < 4; ++var) {
 8001428:	2300      	movs	r3, #0
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
 800142c:	e017      	b.n	800145e <GNSS_ParsePVTData+0xb6>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 30];
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	331e      	adds	r3, #30
 8001432:	4a75      	ldr	r2, [pc, #468]	; (8001608 <GNSS_ParsePVTData+0x260>)
 8001434:	4413      	add	r3, r2
 8001436:	7a19      	ldrb	r1, [r3, #8]
 8001438:	4a75      	ldr	r2, [pc, #468]	; (8001610 <GNSS_ParsePVTData+0x268>)
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	4413      	add	r3, r2
 800143e:	460a      	mov	r2, r1
 8001440:	701a      	strb	r2, [r3, #0]
		GNSS->lonBytes[var]= GNSS_Handle.uartWorkingBuffer[var + 30];
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	331e      	adds	r3, #30
 8001446:	4a70      	ldr	r2, [pc, #448]	; (8001608 <GNSS_ParsePVTData+0x260>)
 8001448:	4413      	add	r3, r2
 800144a:	7a19      	ldrb	r1, [r3, #8]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	4413      	add	r3, r2
 8001452:	3380      	adds	r3, #128	; 0x80
 8001454:	460a      	mov	r2, r1
 8001456:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	3301      	adds	r3, #1
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	2b03      	cmp	r3, #3
 8001462:	dde4      	ble.n	800142e <GNSS_ParsePVTData+0x86>
	}
	GNSS->lon = iLong.iLong;
 8001464:	4b6a      	ldr	r3, [pc, #424]	; (8001610 <GNSS_ParsePVTData+0x268>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	67da      	str	r2, [r3, #124]	; 0x7c
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 800146c:	4b68      	ldr	r3, [pc, #416]	; (8001610 <GNSS_ParsePVTData+0x268>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001478:	eddf 6a66 	vldr	s13, [pc, #408]	; 8001614 <GNSS_ParsePVTData+0x26c>
 800147c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	for (int var = 0; var < 4; ++var) {
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
 800148a:	e017      	b.n	80014bc <GNSS_ParsePVTData+0x114>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 34];
 800148c:	6a3b      	ldr	r3, [r7, #32]
 800148e:	3322      	adds	r3, #34	; 0x22
 8001490:	4a5d      	ldr	r2, [pc, #372]	; (8001608 <GNSS_ParsePVTData+0x260>)
 8001492:	4413      	add	r3, r2
 8001494:	7a19      	ldrb	r1, [r3, #8]
 8001496:	4a5e      	ldr	r2, [pc, #376]	; (8001610 <GNSS_ParsePVTData+0x268>)
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	4413      	add	r3, r2
 800149c:	460a      	mov	r2, r1
 800149e:	701a      	strb	r2, [r3, #0]
		GNSS->latBytes[var]=GNSS_Handle.uartWorkingBuffer[var + 34];
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	3322      	adds	r3, #34	; 0x22
 80014a4:	4a58      	ldr	r2, [pc, #352]	; (8001608 <GNSS_ParsePVTData+0x260>)
 80014a6:	4413      	add	r3, r2
 80014a8:	7a19      	ldrb	r1, [r3, #8]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	4413      	add	r3, r2
 80014b0:	3388      	adds	r3, #136	; 0x88
 80014b2:	460a      	mov	r2, r1
 80014b4:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	3301      	adds	r3, #1
 80014ba:	623b      	str	r3, [r7, #32]
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	dde4      	ble.n	800148c <GNSS_ParsePVTData+0xe4>
	}
	GNSS->lat = iLong.iLong;
 80014c2:	4b53      	ldr	r3, [pc, #332]	; (8001610 <GNSS_ParsePVTData+0x268>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 80014cc:	4b50      	ldr	r3, [pc, #320]	; (8001610 <GNSS_ParsePVTData+0x268>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	ee07 3a90 	vmov	s15, r3
 80014d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014d8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001614 <GNSS_ParsePVTData+0x26c>
 80014dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
	for (int var = 0; var < 4; ++var) {
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	e00c      	b.n	8001506 <GNSS_ParsePVTData+0x15e>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 38];
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	3326      	adds	r3, #38	; 0x26
 80014f0:	4a45      	ldr	r2, [pc, #276]	; (8001608 <GNSS_ParsePVTData+0x260>)
 80014f2:	4413      	add	r3, r2
 80014f4:	7a19      	ldrb	r1, [r3, #8]
 80014f6:	4a46      	ldr	r2, [pc, #280]	; (8001610 <GNSS_ParsePVTData+0x268>)
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	4413      	add	r3, r2
 80014fc:	460a      	mov	r2, r1
 80014fe:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	3301      	adds	r3, #1
 8001504:	61fb      	str	r3, [r7, #28]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	2b03      	cmp	r3, #3
 800150a:	ddef      	ble.n	80014ec <GNSS_ParsePVTData+0x144>
	}
	GNSS->height = iLong.iLong;
 800150c:	4b40      	ldr	r3, [pc, #256]	; (8001610 <GNSS_ParsePVTData+0x268>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	for (int var = 0; var < 4; ++var) {
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	e017      	b.n	800154c <GNSS_ParsePVTData+0x1a4>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 42];
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	332a      	adds	r3, #42	; 0x2a
 8001520:	4a39      	ldr	r2, [pc, #228]	; (8001608 <GNSS_ParsePVTData+0x260>)
 8001522:	4413      	add	r3, r2
 8001524:	7a19      	ldrb	r1, [r3, #8]
 8001526:	4a3a      	ldr	r2, [pc, #232]	; (8001610 <GNSS_ParsePVTData+0x268>)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	4413      	add	r3, r2
 800152c:	460a      	mov	r2, r1
 800152e:	701a      	strb	r2, [r3, #0]
		GNSS->hMSLBytes[var] = GNSS_Handle.uartWorkingBuffer[var + 42];
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	332a      	adds	r3, #42	; 0x2a
 8001534:	4a34      	ldr	r2, [pc, #208]	; (8001608 <GNSS_ParsePVTData+0x260>)
 8001536:	4413      	add	r3, r2
 8001538:	7a19      	ldrb	r1, [r3, #8]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	4413      	add	r3, r2
 8001540:	339c      	adds	r3, #156	; 0x9c
 8001542:	460a      	mov	r2, r1
 8001544:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	3301      	adds	r3, #1
 800154a:	61bb      	str	r3, [r7, #24]
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2b03      	cmp	r3, #3
 8001550:	dde4      	ble.n	800151c <GNSS_ParsePVTData+0x174>
	}
	GNSS->hMSL = iLong.iLong;
 8001552:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <GNSS_ParsePVTData+0x268>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	for (int var = 0; var < 4; ++var) {
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	e00c      	b.n	800157c <GNSS_ParsePVTData+0x1d4>
		uLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 46];
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	332e      	adds	r3, #46	; 0x2e
 8001566:	4a28      	ldr	r2, [pc, #160]	; (8001608 <GNSS_ParsePVTData+0x260>)
 8001568:	4413      	add	r3, r2
 800156a:	7a19      	ldrb	r1, [r3, #8]
 800156c:	4a2a      	ldr	r2, [pc, #168]	; (8001618 <GNSS_ParsePVTData+0x270>)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	4413      	add	r3, r2
 8001572:	460a      	mov	r2, r1
 8001574:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3301      	adds	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	2b03      	cmp	r3, #3
 8001580:	ddef      	ble.n	8001562 <GNSS_ParsePVTData+0x1ba>
	}
	GNSS->hAcc = uLong.uLong;
 8001582:	4b25      	ldr	r3, [pc, #148]	; (8001618 <GNSS_ParsePVTData+0x270>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (int var = 0; var < 4; ++var) {
 800158c:	2300      	movs	r3, #0
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	e00c      	b.n	80015ac <GNSS_ParsePVTData+0x204>
		uLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 50];
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	3332      	adds	r3, #50	; 0x32
 8001596:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <GNSS_ParsePVTData+0x260>)
 8001598:	4413      	add	r3, r2
 800159a:	7a19      	ldrb	r1, [r3, #8]
 800159c:	4a1e      	ldr	r2, [pc, #120]	; (8001618 <GNSS_ParsePVTData+0x270>)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4413      	add	r3, r2
 80015a2:	460a      	mov	r2, r1
 80015a4:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	3301      	adds	r3, #1
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	ddef      	ble.n	8001592 <GNSS_ParsePVTData+0x1ea>
	}
	GNSS->vAcc = uLong.uLong;
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <GNSS_ParsePVTData+0x270>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (int var = 0; var < 4; ++var) {
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	e017      	b.n	80015f2 <GNSS_ParsePVTData+0x24a>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 66];
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3342      	adds	r3, #66	; 0x42
 80015c6:	4a10      	ldr	r2, [pc, #64]	; (8001608 <GNSS_ParsePVTData+0x260>)
 80015c8:	4413      	add	r3, r2
 80015ca:	7a19      	ldrb	r1, [r3, #8]
 80015cc:	4a10      	ldr	r2, [pc, #64]	; (8001610 <GNSS_ParsePVTData+0x268>)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4413      	add	r3, r2
 80015d2:	460a      	mov	r2, r1
 80015d4:	701a      	strb	r2, [r3, #0]
		GNSS->gSpeedBytes[var] = GNSS_Handle.uartWorkingBuffer[var + 66];
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3342      	adds	r3, #66	; 0x42
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <GNSS_ParsePVTData+0x260>)
 80015dc:	4413      	add	r3, r2
 80015de:	7a19      	ldrb	r1, [r3, #8]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4413      	add	r3, r2
 80015e6:	33ac      	adds	r3, #172	; 0xac
 80015e8:	460a      	mov	r2, r1
 80015ea:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	3301      	adds	r3, #1
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	dde4      	ble.n	80015c2 <GNSS_ParsePVTData+0x21a>
	}
	GNSS->gSpeed = iLong.iLong;
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <GNSS_ParsePVTData+0x268>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	for (int var = 0; var < 4; ++var) {
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	e016      	b.n	8001636 <GNSS_ParsePVTData+0x28e>
 8001608:	20001c84 	.word	0x20001c84
 800160c:	20001c7c 	.word	0x20001c7c
 8001610:	20001c80 	.word	0x20001c80
 8001614:	4b189680 	.word	0x4b189680
 8001618:	20001d3c 	.word	0x20001d3c
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 70];
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	3346      	adds	r3, #70	; 0x46
 8001620:	4a15      	ldr	r2, [pc, #84]	; (8001678 <GNSS_ParsePVTData+0x2d0>)
 8001622:	4413      	add	r3, r2
 8001624:	7a19      	ldrb	r1, [r3, #8]
 8001626:	4a15      	ldr	r2, [pc, #84]	; (800167c <GNSS_ParsePVTData+0x2d4>)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	4413      	add	r3, r2
 800162c:	460a      	mov	r2, r1
 800162e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	3301      	adds	r3, #1
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	2b03      	cmp	r3, #3
 800163a:	ddef      	ble.n	800161c <GNSS_ParsePVTData+0x274>
	}
	GNSS->headMot = iLong.iLong * 1e-5; // todo I'm not sure this good options.
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <GNSS_ParsePVTData+0x2d4>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ff97 	bl	8000574 <__aeabi_i2d>
 8001646:	a30a      	add	r3, pc, #40	; (adr r3, 8001670 <GNSS_ParsePVTData+0x2c8>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7fe fffc 	bl	8000648 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f7ff faa6 	bl	8000ba8 <__aeabi_d2iz>
 800165c:	4602      	mov	r2, r0
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001664:	bf00      	nop
 8001666:	3728      	adds	r7, #40	; 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	f3af 8000 	nop.w
 8001670:	88e368f1 	.word	0x88e368f1
 8001674:	3ee4f8b5 	.word	0x3ee4f8b5
 8001678:	20001c84 	.word	0x20001c84
 800167c:	20001c80 	.word	0x20001c80

08001680 <GNSS_ParseNavigatorData>:
/*!
 * Parse data to UTC time solution standard.
 * Look at: 32.17.30.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseNavigatorData(GNSS_StateHandle *GNSS) {
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	uShort.bytes[0] = GNSS_Handle.uartWorkingBuffer[18];
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <GNSS_ParseNavigatorData+0x64>)
 800168a:	7e9a      	ldrb	r2, [r3, #26]
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <GNSS_ParseNavigatorData+0x68>)
 800168e:	701a      	strb	r2, [r3, #0]
	uShort.bytes[1] = GNSS_Handle.uartWorkingBuffer[19];
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <GNSS_ParseNavigatorData+0x64>)
 8001692:	7eda      	ldrb	r2, [r3, #27]
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <GNSS_ParseNavigatorData+0x68>)
 8001696:	705a      	strb	r2, [r3, #1]
	GNSS->year = uShort.uShort;
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <GNSS_ParseNavigatorData+0x68>)
 800169a:	881a      	ldrh	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	GNSS->month = GNSS_Handle.uartWorkingBuffer[20];
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <GNSS_ParseNavigatorData+0x64>)
 80016a4:	7f1a      	ldrb	r2, [r3, #28]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->day = GNSS_Handle.uartWorkingBuffer[21];
 80016ac:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <GNSS_ParseNavigatorData+0x64>)
 80016ae:	7f5a      	ldrb	r2, [r3, #29]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->hour = GNSS_Handle.uartWorkingBuffer[22];
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <GNSS_ParseNavigatorData+0x64>)
 80016b8:	7f9a      	ldrb	r2, [r3, #30]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	GNSS->min = GNSS_Handle.uartWorkingBuffer[23];
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <GNSS_ParseNavigatorData+0x64>)
 80016c2:	7fda      	ldrb	r2, [r3, #31]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	GNSS->sec = GNSS_Handle.uartWorkingBuffer[24];
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <GNSS_ParseNavigatorData+0x64>)
 80016cc:	f893 2020 	ldrb.w	r2, [r3, #32]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20001c84 	.word	0x20001c84
 80016e8:	20001c7c 	.word	0x20001c7c

080016ec <GNSS_ParseNAVSATData>:

void GNSS_ParseNAVSATData(GNSS_StateHandle *GNSS) {
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	GNSS->satCount = GNSS_Handle.uartWorkingBuffer[11];
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <GNSS_ParseNAVSATData+0x20>)
 80016f6:	7cda      	ldrb	r2, [r3, #19]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20001c84 	.word	0x20001c84

08001710 <GNSS_ParsePOSLLHData>:
/*!
 * Parse data to geodetic position solution standard.
 * Look at: 32.17.14.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePOSLLHData(GNSS_StateHandle *GNSS) {
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	for (int var = 0; var < 4; ++var) {
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
 800171c:	e00c      	b.n	8001738 <GNSS_ParsePOSLLHData+0x28>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 10];
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	330a      	adds	r3, #10
 8001722:	4a55      	ldr	r2, [pc, #340]	; (8001878 <GNSS_ParsePOSLLHData+0x168>)
 8001724:	4413      	add	r3, r2
 8001726:	7a19      	ldrb	r1, [r3, #8]
 8001728:	4a54      	ldr	r2, [pc, #336]	; (800187c <GNSS_ParsePOSLLHData+0x16c>)
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	4413      	add	r3, r2
 800172e:	460a      	mov	r2, r1
 8001730:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3301      	adds	r3, #1
 8001736:	61fb      	str	r3, [r7, #28]
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	2b03      	cmp	r3, #3
 800173c:	ddef      	ble.n	800171e <GNSS_ParsePOSLLHData+0xe>
	}
	GNSS->lon = iLong.iLong;
 800173e:	4b4f      	ldr	r3, [pc, #316]	; (800187c <GNSS_ParsePOSLLHData+0x16c>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	67da      	str	r2, [r3, #124]	; 0x7c
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 8001746:	4b4d      	ldr	r3, [pc, #308]	; (800187c <GNSS_ParsePOSLLHData+0x16c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001752:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8001880 <GNSS_ParsePOSLLHData+0x170>
 8001756:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

	for (int var = 0; var < 4; ++var) {
 8001760:	2300      	movs	r3, #0
 8001762:	61bb      	str	r3, [r7, #24]
 8001764:	e00c      	b.n	8001780 <GNSS_ParsePOSLLHData+0x70>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 14];
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	330e      	adds	r3, #14
 800176a:	4a43      	ldr	r2, [pc, #268]	; (8001878 <GNSS_ParsePOSLLHData+0x168>)
 800176c:	4413      	add	r3, r2
 800176e:	7a19      	ldrb	r1, [r3, #8]
 8001770:	4a42      	ldr	r2, [pc, #264]	; (800187c <GNSS_ParsePOSLLHData+0x16c>)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	4413      	add	r3, r2
 8001776:	460a      	mov	r2, r1
 8001778:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	3301      	adds	r3, #1
 800177e:	61bb      	str	r3, [r7, #24]
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	2b03      	cmp	r3, #3
 8001784:	ddef      	ble.n	8001766 <GNSS_ParsePOSLLHData+0x56>
	}
	GNSS->lat = iLong.iLong;
 8001786:	4b3d      	ldr	r3, [pc, #244]	; (800187c <GNSS_ParsePOSLLHData+0x16c>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 8001790:	4b3a      	ldr	r3, [pc, #232]	; (800187c <GNSS_ParsePOSLLHData+0x16c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	ee07 3a90 	vmov	s15, r3
 8001798:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800179c:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001880 <GNSS_ParsePOSLLHData+0x170>
 80017a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

	for (int var = 0; var < 4; ++var) {
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	e00c      	b.n	80017ca <GNSS_ParsePOSLLHData+0xba>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 18];
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	3312      	adds	r3, #18
 80017b4:	4a30      	ldr	r2, [pc, #192]	; (8001878 <GNSS_ParsePOSLLHData+0x168>)
 80017b6:	4413      	add	r3, r2
 80017b8:	7a19      	ldrb	r1, [r3, #8]
 80017ba:	4a30      	ldr	r2, [pc, #192]	; (800187c <GNSS_ParsePOSLLHData+0x16c>)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	4413      	add	r3, r2
 80017c0:	460a      	mov	r2, r1
 80017c2:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	3301      	adds	r3, #1
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	ddef      	ble.n	80017b0 <GNSS_ParsePOSLLHData+0xa0>
	}
	GNSS->height = iLong.iLong;
 80017d0:	4b2a      	ldr	r3, [pc, #168]	; (800187c <GNSS_ParsePOSLLHData+0x16c>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	for (int var = 0; var < 4; ++var) {
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	e00c      	b.n	80017fa <GNSS_ParsePOSLLHData+0xea>
		iLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 22];
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	3316      	adds	r3, #22
 80017e4:	4a24      	ldr	r2, [pc, #144]	; (8001878 <GNSS_ParsePOSLLHData+0x168>)
 80017e6:	4413      	add	r3, r2
 80017e8:	7a19      	ldrb	r1, [r3, #8]
 80017ea:	4a24      	ldr	r2, [pc, #144]	; (800187c <GNSS_ParsePOSLLHData+0x16c>)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4413      	add	r3, r2
 80017f0:	460a      	mov	r2, r1
 80017f2:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	3301      	adds	r3, #1
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	ddef      	ble.n	80017e0 <GNSS_ParsePOSLLHData+0xd0>
	}
	GNSS->hMSL = iLong.iLong;
 8001800:	4b1e      	ldr	r3, [pc, #120]	; (800187c <GNSS_ParsePOSLLHData+0x16c>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	for (int var = 0; var < 4; ++var) {
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	e00c      	b.n	800182a <GNSS_ParsePOSLLHData+0x11a>
		uLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 26];
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	331a      	adds	r3, #26
 8001814:	4a18      	ldr	r2, [pc, #96]	; (8001878 <GNSS_ParsePOSLLHData+0x168>)
 8001816:	4413      	add	r3, r2
 8001818:	7a19      	ldrb	r1, [r3, #8]
 800181a:	4a1a      	ldr	r2, [pc, #104]	; (8001884 <GNSS_ParsePOSLLHData+0x174>)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	460a      	mov	r2, r1
 8001822:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	3301      	adds	r3, #1
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2b03      	cmp	r3, #3
 800182e:	ddef      	ble.n	8001810 <GNSS_ParsePOSLLHData+0x100>
	}
	GNSS->hAcc = uLong.uLong;
 8001830:	4b14      	ldr	r3, [pc, #80]	; (8001884 <GNSS_ParsePOSLLHData+0x174>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (int var = 0; var < 4; ++var) {
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	e00c      	b.n	800185a <GNSS_ParsePOSLLHData+0x14a>
		uLong.bytes[var] = GNSS_Handle.uartWorkingBuffer[var + 30];
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	331e      	adds	r3, #30
 8001844:	4a0c      	ldr	r2, [pc, #48]	; (8001878 <GNSS_ParsePOSLLHData+0x168>)
 8001846:	4413      	add	r3, r2
 8001848:	7a19      	ldrb	r1, [r3, #8]
 800184a:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <GNSS_ParsePOSLLHData+0x174>)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	4413      	add	r3, r2
 8001850:	460a      	mov	r2, r1
 8001852:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	3301      	adds	r3, #1
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	2b03      	cmp	r3, #3
 800185e:	ddef      	ble.n	8001840 <GNSS_ParsePOSLLHData+0x130>
	}
	GNSS->vAcc = uLong.uLong;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <GNSS_ParsePOSLLHData+0x174>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 800186a:	bf00      	nop
 800186c:	3724      	adds	r7, #36	; 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20001c84 	.word	0x20001c84
 800187c:	20001c80 	.word	0x20001c80
 8001880:	4b189680 	.word	0x4b189680
 8001884:	20001d3c 	.word	0x20001d3c

08001888 <GNSS_LoadConfig>:

/*!
 *  Sends the basic configuration: Activation of the UBX standard, change of NMEA version to 4.10 and turn on of the Galileo system.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_LoadConfig(GNSS_StateHandle *GNSS) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(GNSS->huart, configUBX,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	221c      	movs	r2, #28
 8001896:	490f      	ldr	r1, [pc, #60]	; (80018d4 <GNSS_LoadConfig+0x4c>)
 8001898:	4618      	mov	r0, r3
 800189a:	f008 ffa3 	bl	800a7e4 <HAL_UART_Transmit_DMA>
			sizeof(configUBX) / sizeof(uint8_t));
	HAL_Delay(250);
 800189e:	20fa      	movs	r0, #250	; 0xfa
 80018a0:	f005 fce2 	bl	8007268 <HAL_Delay>
	HAL_UART_Transmit_DMA(GNSS->huart, setNMEA410,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	221c      	movs	r2, #28
 80018aa:	490b      	ldr	r1, [pc, #44]	; (80018d8 <GNSS_LoadConfig+0x50>)
 80018ac:	4618      	mov	r0, r3
 80018ae:	f008 ff99 	bl	800a7e4 <HAL_UART_Transmit_DMA>
			sizeof(setNMEA410) / sizeof(uint8_t));
	HAL_Delay(250);
 80018b2:	20fa      	movs	r0, #250	; 0xfa
 80018b4:	f005 fcd8 	bl	8007268 <HAL_Delay>
	HAL_UART_Transmit_DMA(GNSS->huart, setGNSS,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	222c      	movs	r2, #44	; 0x2c
 80018be:	4907      	ldr	r1, [pc, #28]	; (80018dc <GNSS_LoadConfig+0x54>)
 80018c0:	4618      	mov	r0, r3
 80018c2:	f008 ff8f 	bl	800a7e4 <HAL_UART_Transmit_DMA>
			sizeof(setGNSS) / sizeof(uint8_t));
	HAL_Delay(250);
 80018c6:	20fa      	movs	r0, #250	; 0xfa
 80018c8:	f005 fcce 	bl	8007268 <HAL_Delay>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	080154b0 	.word	0x080154b0
 80018d8:	080154cc 	.word	0x080154cc
 80018dc:	080154e8 	.word	0x080154e8

080018e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of AHRS_Update */
  AHRS_UpdateHandle = osThreadNew(StartAHRS_UpdateTask, NULL, &AHRS_Update_attributes);
 80018e4:	4a10      	ldr	r2, [pc, #64]	; (8001928 <MX_FREERTOS_Init+0x48>)
 80018e6:	2100      	movs	r1, #0
 80018e8:	4810      	ldr	r0, [pc, #64]	; (800192c <MX_FREERTOS_Init+0x4c>)
 80018ea:	f00b f865 	bl	800c9b8 <osThreadNew>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4a0f      	ldr	r2, [pc, #60]	; (8001930 <MX_FREERTOS_Init+0x50>)
 80018f2:	6013      	str	r3, [r2, #0]

  /* creation of BMP388 */
  BMP388Handle = osThreadNew(StartBMP388Task, NULL, &BMP388_attributes);
 80018f4:	4a0f      	ldr	r2, [pc, #60]	; (8001934 <MX_FREERTOS_Init+0x54>)
 80018f6:	2100      	movs	r1, #0
 80018f8:	480f      	ldr	r0, [pc, #60]	; (8001938 <MX_FREERTOS_Init+0x58>)
 80018fa:	f00b f85d 	bl	800c9b8 <osThreadNew>
 80018fe:	4603      	mov	r3, r0
 8001900:	4a0e      	ldr	r2, [pc, #56]	; (800193c <MX_FREERTOS_Init+0x5c>)
 8001902:	6013      	str	r3, [r2, #0]

  /* creation of GNSS */
  GNSSHandle = osThreadNew(StartGNSSTask, NULL, &GNSS_attributes);
 8001904:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <MX_FREERTOS_Init+0x60>)
 8001906:	2100      	movs	r1, #0
 8001908:	480e      	ldr	r0, [pc, #56]	; (8001944 <MX_FREERTOS_Init+0x64>)
 800190a:	f00b f855 	bl	800c9b8 <osThreadNew>
 800190e:	4603      	mov	r3, r0
 8001910:	4a0d      	ldr	r2, [pc, #52]	; (8001948 <MX_FREERTOS_Init+0x68>)
 8001912:	6013      	str	r3, [r2, #0]

  /* creation of MPU9250 */
  MPU9250Handle = osThreadNew(StartMPU9250Task, NULL, &MPU9250_attributes);
 8001914:	4a0d      	ldr	r2, [pc, #52]	; (800194c <MX_FREERTOS_Init+0x6c>)
 8001916:	2100      	movs	r1, #0
 8001918:	480d      	ldr	r0, [pc, #52]	; (8001950 <MX_FREERTOS_Init+0x70>)
 800191a:	f00b f84d 	bl	800c9b8 <osThreadNew>
 800191e:	4603      	mov	r3, r0
 8001920:	4a0c      	ldr	r2, [pc, #48]	; (8001954 <MX_FREERTOS_Init+0x74>)
 8001922:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}
 8001928:	080156b0 	.word	0x080156b0
 800192c:	08001959 	.word	0x08001959
 8001930:	20001d80 	.word	0x20001d80
 8001934:	080156d4 	.word	0x080156d4
 8001938:	08001b11 	.word	0x08001b11
 800193c:	20001d74 	.word	0x20001d74
 8001940:	080156f8 	.word	0x080156f8
 8001944:	08001b2d 	.word	0x08001b2d
 8001948:	20001d8c 	.word	0x20001d8c
 800194c:	0801571c 	.word	0x0801571c
 8001950:	08001b8d 	.word	0x08001b8d
 8001954:	20001d70 	.word	0x20001d70

08001958 <StartAHRS_UpdateTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartAHRS_UpdateTask */
void StartAHRS_UpdateTask(void *argument)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAHRS_UpdateTask */
  /* Infinite loop */
  for(;;)
  {
	  //Update variables from BMP388
	  pressure = BMP388.Pressure;
 8001960:	4b55      	ldr	r3, [pc, #340]	; (8001ab8 <StartAHRS_UpdateTask+0x160>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a55      	ldr	r2, [pc, #340]	; (8001abc <StartAHRS_UpdateTask+0x164>)
 8001966:	6013      	str	r3, [r2, #0]
	  temperature = BMP388.Temperature;
 8001968:	4b53      	ldr	r3, [pc, #332]	; (8001ab8 <StartAHRS_UpdateTask+0x160>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	4a54      	ldr	r2, [pc, #336]	; (8001ac0 <StartAHRS_UpdateTask+0x168>)
 800196e:	6013      	str	r3, [r2, #0]
	  baroAltitude = BMP388.Altitude;
 8001970:	4b51      	ldr	r3, [pc, #324]	; (8001ab8 <StartAHRS_UpdateTask+0x160>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	4a53      	ldr	r2, [pc, #332]	; (8001ac4 <StartAHRS_UpdateTask+0x16c>)
 8001976:	6013      	str	r3, [r2, #0]

	  //Update variables from MPU9255
	  pitch = MPU9255.pitch;
 8001978:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <StartAHRS_UpdateTask+0x170>)
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	4a53      	ldr	r2, [pc, #332]	; (8001acc <StartAHRS_UpdateTask+0x174>)
 800197e:	6013      	str	r3, [r2, #0]
	  yaw = MPU9255.yaw;
 8001980:	4b51      	ldr	r3, [pc, #324]	; (8001ac8 <StartAHRS_UpdateTask+0x170>)
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	4a52      	ldr	r2, [pc, #328]	; (8001ad0 <StartAHRS_UpdateTask+0x178>)
 8001986:	6013      	str	r3, [r2, #0]
	  roll= MPU9255.roll;
 8001988:	4b4f      	ldr	r3, [pc, #316]	; (8001ac8 <StartAHRS_UpdateTask+0x170>)
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	4a51      	ldr	r2, [pc, #324]	; (8001ad4 <StartAHRS_UpdateTask+0x17c>)
 800198e:	6013      	str	r3, [r2, #0]

	  //Update variables from GPS
	  latitude = GNSS_Handle.fLat;
 8001990:	4b51      	ldr	r3, [pc, #324]	; (8001ad8 <StartAHRS_UpdateTask+0x180>)
 8001992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001996:	4a51      	ldr	r2, [pc, #324]	; (8001adc <StartAHRS_UpdateTask+0x184>)
 8001998:	6013      	str	r3, [r2, #0]
	  longitude = (GNSS_Handle.lon / 10000000.0);
 800199a:	4b4f      	ldr	r3, [pc, #316]	; (8001ad8 <StartAHRS_UpdateTask+0x180>)
 800199c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fde8 	bl	8000574 <__aeabi_i2d>
 80019a4:	a342      	add	r3, pc, #264	; (adr r3, 8001ab0 <StartAHRS_UpdateTask+0x158>)
 80019a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019aa:	f7fe ff77 	bl	800089c <__aeabi_ddiv>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	f7ff f93f 	bl	8000c38 <__aeabi_d2f>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a48      	ldr	r2, [pc, #288]	; (8001ae0 <StartAHRS_UpdateTask+0x188>)
 80019be:	6013      	str	r3, [r2, #0]
	  gpsAltitude = (GNSS_Handle.height / 1000.0);
 80019c0:	4b45      	ldr	r3, [pc, #276]	; (8001ad8 <StartAHRS_UpdateTask+0x180>)
 80019c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fdd4 	bl	8000574 <__aeabi_i2d>
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	4b44      	ldr	r3, [pc, #272]	; (8001ae4 <StartAHRS_UpdateTask+0x18c>)
 80019d2:	f7fe ff63 	bl	800089c <__aeabi_ddiv>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f7ff f92b 	bl	8000c38 <__aeabi_d2f>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4a40      	ldr	r2, [pc, #256]	; (8001ae8 <StartAHRS_UpdateTask+0x190>)
 80019e6:	6013      	str	r3, [r2, #0]
	  gpsAltitudeMSL = (GNSS_Handle.hMSL / 1000.0);
 80019e8:	4b3b      	ldr	r3, [pc, #236]	; (8001ad8 <StartAHRS_UpdateTask+0x180>)
 80019ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fdc0 	bl	8000574 <__aeabi_i2d>
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	4b3a      	ldr	r3, [pc, #232]	; (8001ae4 <StartAHRS_UpdateTask+0x18c>)
 80019fa:	f7fe ff4f 	bl	800089c <__aeabi_ddiv>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f7ff f917 	bl	8000c38 <__aeabi_d2f>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4a37      	ldr	r2, [pc, #220]	; (8001aec <StartAHRS_UpdateTask+0x194>)
 8001a0e:	6013      	str	r3, [r2, #0]
	  speed = GNSS_Handle.gSpeed;
 8001a10:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <StartAHRS_UpdateTask+0x180>)
 8001a12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1e:	4b34      	ldr	r3, [pc, #208]	; (8001af0 <StartAHRS_UpdateTask+0x198>)
 8001a20:	edc3 7a00 	vstr	s15, [r3]
	  fix = GNSS_Handle.fixType;
 8001a24:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <StartAHRS_UpdateTask+0x180>)
 8001a26:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a32:	4b30      	ldr	r3, [pc, #192]	; (8001af4 <StartAHRS_UpdateTask+0x19c>)
 8001a34:	edc3 7a00 	vstr	s15, [r3]
	  fixPrint = fix;
 8001a38:	4b2e      	ldr	r3, [pc, #184]	; (8001af4 <StartAHRS_UpdateTask+0x19c>)
 8001a3a:	edd3 7a00 	vldr	s15, [r3]
 8001a3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a42:	ee17 2a90 	vmov	r2, s15
 8001a46:	4b2c      	ldr	r3, [pc, #176]	; (8001af8 <StartAHRS_UpdateTask+0x1a0>)
 8001a48:	601a      	str	r2, [r3, #0]
	  satellites = GNSS_Handle.numSV;
 8001a4a:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <StartAHRS_UpdateTask+0x180>)
 8001a4c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001a50:	ee07 3a90 	vmov	s15, r3
 8001a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a58:	4b28      	ldr	r3, [pc, #160]	; (8001afc <StartAHRS_UpdateTask+0x1a4>)
 8001a5a:	edc3 7a00 	vstr	s15, [r3]
	  day = GNSS_Handle.day;
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <StartAHRS_UpdateTask+0x180>)
 8001a60:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <StartAHRS_UpdateTask+0x1a8>)
 8001a6e:	edc3 7a00 	vstr	s15, [r3]
	  month = GNSS_Handle.month;
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <StartAHRS_UpdateTask+0x180>)
 8001a74:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001a78:	ee07 3a90 	vmov	s15, r3
 8001a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a80:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <StartAHRS_UpdateTask+0x1ac>)
 8001a82:	edc3 7a00 	vstr	s15, [r3]
	  year = GNSS_Handle.year;
 8001a86:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <StartAHRS_UpdateTask+0x180>)
 8001a88:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8001a8c:	ee07 3a90 	vmov	s15, r3
 8001a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a94:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <StartAHRS_UpdateTask+0x1b0>)
 8001a96:	edc3 7a00 	vstr	s15, [r3]
		  printf("********************************\r\n");
		  printTimer = HAL_GetTick();
	  }
	*/

	  printTimer++;
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <StartAHRS_UpdateTask+0x1b4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	4a1a      	ldr	r2, [pc, #104]	; (8001b0c <StartAHRS_UpdateTask+0x1b4>)
 8001aa2:	6013      	str	r3, [r2, #0]

    osDelay(1);
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	f00b f819 	bl	800cadc <osDelay>
	  pressure = BMP388.Pressure;
 8001aaa:	e759      	b.n	8001960 <StartAHRS_UpdateTask+0x8>
 8001aac:	f3af 8000 	nop.w
 8001ab0:	00000000 	.word	0x00000000
 8001ab4:	416312d0 	.word	0x416312d0
 8001ab8:	20001dc0 	.word	0x20001dc0
 8001abc:	20001d84 	.word	0x20001d84
 8001ac0:	20001d7c 	.word	0x20001d7c
 8001ac4:	20001dbc 	.word	0x20001dbc
 8001ac8:	20001d40 	.word	0x20001d40
 8001acc:	20001db0 	.word	0x20001db0
 8001ad0:	20001dac 	.word	0x20001dac
 8001ad4:	20001db4 	.word	0x20001db4
 8001ad8:	20001c84 	.word	0x20001c84
 8001adc:	20001da0 	.word	0x20001da0
 8001ae0:	20001d90 	.word	0x20001d90
 8001ae4:	408f4000 	.word	0x408f4000
 8001ae8:	20001dcc 	.word	0x20001dcc
 8001aec:	20001db8 	.word	0x20001db8
 8001af0:	20001da8 	.word	0x20001da8
 8001af4:	20001d98 	.word	0x20001d98
 8001af8:	20001d88 	.word	0x20001d88
 8001afc:	20001d94 	.word	0x20001d94
 8001b00:	20001da4 	.word	0x20001da4
 8001b04:	20001d78 	.word	0x20001d78
 8001b08:	20001d9c 	.word	0x20001d9c
 8001b0c:	2000021c 	.word	0x2000021c

08001b10 <StartBMP388Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBMP388Task */
void StartBMP388Task(void *argument)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBMP388Task */
  /* Infinite loop */
  for(;;)
  {
	  BMP388_Read(&BMP388);
 8001b18:	4803      	ldr	r0, [pc, #12]	; (8001b28 <StartBMP388Task+0x18>)
 8001b1a:	f001 fd6d 	bl	80035f8 <BMP388_Read>

    osDelay(1);
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f00a ffdc 	bl	800cadc <osDelay>
	  BMP388_Read(&BMP388);
 8001b24:	e7f8      	b.n	8001b18 <StartBMP388Task+0x8>
 8001b26:	bf00      	nop
 8001b28:	20001dc0 	.word	0x20001dc0

08001b2c <StartGNSSTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGNSSTask */
void StartGNSSTask(void *argument)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGNSSTask */
  /* Infinite loop */
  for(;;)
  {
	if ((HAL_GetTick() - gpsTimer) > 300) {
 8001b34:	f005 fb8c 	bl	8007250 <HAL_GetTick>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <StartGNSSTask+0x58>)
 8001b3c:	6812      	ldr	r2, [r2, #0]
 8001b3e:	1a9b      	subs	r3, r3, r2
 8001b40:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b44:	d914      	bls.n	8001b70 <StartGNSSTask+0x44>

		GNSS_GetUniqID(&GNSS_Handle);
 8001b46:	4810      	ldr	r0, [pc, #64]	; (8001b88 <StartGNSSTask+0x5c>)
 8001b48:	f7ff fb42 	bl	80011d0 <GNSS_GetUniqID>
		GNSS_ParseBuffer(&GNSS_Handle);
 8001b4c:	480e      	ldr	r0, [pc, #56]	; (8001b88 <StartGNSSTask+0x5c>)
 8001b4e:	f7ff fac6 	bl	80010de <GNSS_ParseBuffer>
		HAL_Delay(250);
 8001b52:	20fa      	movs	r0, #250	; 0xfa
 8001b54:	f005 fb88 	bl	8007268 <HAL_Delay>

		GNSS_GetPVTData(&GNSS_Handle);
 8001b58:	480b      	ldr	r0, [pc, #44]	; (8001b88 <StartGNSSTask+0x5c>)
 8001b5a:	f7ff fb53 	bl	8001204 <GNSS_GetPVTData>
		GNSS_ParseBuffer(&GNSS_Handle);
 8001b5e:	480a      	ldr	r0, [pc, #40]	; (8001b88 <StartGNSSTask+0x5c>)
 8001b60:	f7ff fabd 	bl	80010de <GNSS_ParseBuffer>

		gpsTimer = HAL_GetTick();
 8001b64:	f005 fb74 	bl	8007250 <HAL_GetTick>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <StartGNSSTask+0x58>)
 8001b6e:	601a      	str	r2, [r3, #0]
	}
	gpsTimer++;
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <StartGNSSTask+0x58>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	3301      	adds	r3, #1
 8001b76:	4a03      	ldr	r2, [pc, #12]	; (8001b84 <StartGNSSTask+0x58>)
 8001b78:	6013      	str	r3, [r2, #0]
    osDelay(1);
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f00a ffae 	bl	800cadc <osDelay>
	if ((HAL_GetTick() - gpsTimer) > 300) {
 8001b80:	e7d8      	b.n	8001b34 <StartGNSSTask+0x8>
 8001b82:	bf00      	nop
 8001b84:	20000220 	.word	0x20000220
 8001b88:	20001c84 	.word	0x20001c84

08001b8c <StartMPU9250Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMPU9250Task */
void StartMPU9250Task(void *argument)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMPU9250Task */
  /* Infinite loop */
  for(;;)
  {
	  readAll(&hi2c2, &MPU9255);
 8001b94:	4903      	ldr	r1, [pc, #12]	; (8001ba4 <StartMPU9250Task+0x18>)
 8001b96:	4804      	ldr	r0, [pc, #16]	; (8001ba8 <StartMPU9250Task+0x1c>)
 8001b98:	f002 f87e 	bl	8003c98 <readAll>

    osDelay(1);
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f00a ff9d 	bl	800cadc <osDelay>
	  readAll(&hi2c2, &MPU9255);
 8001ba2:	e7f7      	b.n	8001b94 <StartMPU9250Task+0x8>
 8001ba4:	20001d40 	.word	0x20001d40
 8001ba8:	20002884 	.word	0x20002884

08001bac <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f001 fbda 	bl	8003372 <null_ptr_check>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8001bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d13a      	bne.n	8001c40 <bmp3_init+0x94>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	7a1b      	ldrb	r3, [r3, #8]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d003      	beq.n	8001bda <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	729a      	strb	r2, [r3, #10]
 8001bd8:	e002      	b.n	8001be0 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	729a      	strb	r2, [r3, #10]
        }


	/* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8001be0:	f107 010e 	add.w	r1, r7, #14
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	2000      	movs	r0, #0
 8001bea:	f000 f82f 	bl	8001c4c <bmp3_get_regs>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	73fb      	strb	r3, [r7, #15]
	
        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8001bf2:	f107 010e 	add.w	r1, r7, #14
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f000 f826 	bl	8001c4c <bmp3_get_regs>
 8001c00:	4603      	mov	r3, r0
 8001c02:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8001c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d119      	bne.n	8001c40 <bmp3_init+0x94>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8001c0c:	7bbb      	ldrb	r3, [r7, #14]
 8001c0e:	2b50      	cmp	r3, #80	; 0x50
 8001c10:	d002      	beq.n	8001c18 <bmp3_init+0x6c>
 8001c12:	7bbb      	ldrb	r3, [r7, #14]
 8001c14:	2b60      	cmp	r3, #96	; 0x60
 8001c16:	d111      	bne.n	8001c3c <bmp3_init+0x90>
            {
                dev->chip_id = chip_id;
 8001c18:	7bba      	ldrb	r2, [r7, #14]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f9a6 	bl	8001f70 <bmp3_soft_reset>
 8001c24:	4603      	mov	r3, r0
 8001c26:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8001c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d107      	bne.n	8001c40 <bmp3_init+0x94>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 fb46 	bl	80022c2 <get_calib_data>
 8001c36:	4603      	mov	r3, r0
 8001c38:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8001c3a:	e001      	b.n	8001c40 <bmp3_init+0x94>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8001c3c:	23f9      	movs	r3, #249	; 0xf9
 8001c3e:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8001c4c:	b5b0      	push	{r4, r5, r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	4603      	mov	r3, r0
 8001c5a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001c5c:	6838      	ldr	r0, [r7, #0]
 8001c5e:	f001 fb88 	bl	8003372 <null_ptr_check>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8001c68:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d170      	bne.n	8001d52 <bmp3_get_regs+0x106>
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d06d      	beq.n	8001d52 <bmp3_get_regs+0x106>
    {
 8001c76:	466b      	mov	r3, sp
 8001c78:	461d      	mov	r5, r3
        uint32_t temp_len = len + dev->dummy_byte;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	7a9b      	ldrb	r3, [r3, #10]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	7a9b      	ldrb	r3, [r3, #10]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	18d4      	adds	r4, r2, r3
 8001c90:	4623      	mov	r3, r4
 8001c92:	3b01      	subs	r3, #1
 8001c94:	61bb      	str	r3, [r7, #24]
 8001c96:	4620      	mov	r0, r4
 8001c98:	f04f 0100 	mov.w	r1, #0
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	00cb      	lsls	r3, r1, #3
 8001ca6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001caa:	00c2      	lsls	r2, r0, #3
 8001cac:	4620      	mov	r0, r4
 8001cae:	f04f 0100 	mov.w	r1, #0
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	00cb      	lsls	r3, r1, #3
 8001cbc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001cc0:	00c2      	lsls	r2, r0, #3
 8001cc2:	1de3      	adds	r3, r4, #7
 8001cc4:	08db      	lsrs	r3, r3, #3
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	ebad 0d03 	sub.w	sp, sp, r3
 8001ccc:	466b      	mov	r3, sp
 8001cce:	3300      	adds	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	7a1b      	ldrb	r3, [r3, #8]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d025      	beq.n	8001d26 <bmp3_get_regs+0xda>
        {
            reg_addr = reg_addr | 0x80;
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ce0:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68dc      	ldr	r4, [r3, #12]
 8001ce6:	6979      	ldr	r1, [r7, #20]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	7bf8      	ldrb	r0, [r7, #15]
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	47a0      	blx	r4
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfe:	e00d      	b.n	8001d1c <bmp3_get_regs+0xd0>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	7a9b      	ldrb	r3, [r3, #10]
 8001d04:	461a      	mov	r2, r3
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	441a      	add	r2, r3
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	440b      	add	r3, r1
 8001d10:	6979      	ldr	r1, [r7, #20]
 8001d12:	5c8a      	ldrb	r2, [r1, r2]
 8001d14:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	3301      	adds	r3, #1
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d3ed      	bcc.n	8001d00 <bmp3_get_regs+0xb4>
 8001d24:	e00b      	b.n	8001d3e <bmp3_get_regs+0xf2>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	68dc      	ldr	r4, [r3, #12]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	7bf8      	ldrb	r0, [r7, #15]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	68b9      	ldr	r1, [r7, #8]
 8001d34:	47a0      	blx	r4
 8001d36:	4603      	mov	r3, r0
 8001d38:	461a      	mov	r2, r3
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <bmp3_get_regs+0x102>
        {
            rslt = BMP3_E_COMM_FAIL;
 8001d48:	23fe      	movs	r3, #254	; 0xfe
 8001d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001d4e:	46ad      	mov	sp, r5
    {
 8001d50:	e002      	b.n	8001d58 <bmp3_get_regs+0x10c>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001d52:	23ff      	movs	r3, #255	; 0xff
 8001d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }

    return rslt;
 8001d58:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3728      	adds	r7, #40	; 0x28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bdb0      	pop	{r4, r5, r7, pc}

08001d64 <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8001d64:	b5b0      	push	{r4, r5, r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	466b      	mov	r3, sp
 8001d74:	461d      	mov	r5, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	005c      	lsls	r4, r3, #1
 8001d7a:	4623      	mov	r3, r4
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	4620      	mov	r0, r4
 8001d82:	f04f 0100 	mov.w	r1, #0
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	00cb      	lsls	r3, r1, #3
 8001d90:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d94:	00c2      	lsls	r2, r0, #3
 8001d96:	4620      	mov	r0, r4
 8001d98:	f04f 0100 	mov.w	r1, #0
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	00cb      	lsls	r3, r1, #3
 8001da6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001daa:	00c2      	lsls	r2, r0, #3
 8001dac:	1de3      	adds	r3, r4, #7
 8001dae:	08db      	lsrs	r3, r3, #3
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	ebad 0d03 	sub.w	sp, sp, r3
 8001db6:	466b      	mov	r3, sp
 8001db8:	3300      	adds	r3, #0
 8001dba:	613b      	str	r3, [r7, #16]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001dbc:	6838      	ldr	r0, [r7, #0]
 8001dbe:	f001 fad8 	bl	8003372 <null_ptr_check>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	76fb      	strb	r3, [r7, #27]

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001dc6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d14c      	bne.n	8001e68 <bmp3_set_regs+0x104>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d049      	beq.n	8001e68 <bmp3_set_regs+0x104>
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d046      	beq.n	8001e68 <bmp3_set_regs+0x104>
    {
        if (len != 0)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d040      	beq.n	8001e62 <bmp3_set_regs+0xfe>
        {
            temp_buff[0] = reg_data[0];
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	781a      	ldrb	r2, [r3, #0]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	7a1b      	ldrb	r3, [r3, #8]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d114      	bne.n	8001e1a <bmp3_set_regs+0xb6>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	76bb      	strb	r3, [r7, #26]
 8001df4:	e00d      	b.n	8001e12 <bmp3_set_regs+0xae>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001df6:	7ebb      	ldrb	r3, [r7, #26]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	781a      	ldrb	r2, [r3, #0]
 8001dfe:	7ebb      	ldrb	r3, [r7, #26]
 8001e00:	68f9      	ldr	r1, [r7, #12]
 8001e02:	440b      	add	r3, r1
 8001e04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001e0c:	7ebb      	ldrb	r3, [r7, #26]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	76bb      	strb	r3, [r7, #26]
 8001e12:	7ebb      	ldrb	r3, [r7, #26]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d8ed      	bhi.n	8001df6 <bmp3_set_regs+0x92>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d909      	bls.n	8001e34 <bmp3_set_regs+0xd0>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001e20:	6939      	ldr	r1, [r7, #16]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 fa70 	bl	800230c <interleave_reg_addr>
                temp_len = len * 2;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	e001      	b.n	8001e38 <bmp3_set_regs+0xd4>
            }
            else
            {
                temp_len = len;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	61fb      	str	r3, [r7, #28]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	691c      	ldr	r4, [r3, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	7818      	ldrb	r0, [r3, #0]
 8001e40:	6939      	ldr	r1, [r7, #16]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	69fa      	ldr	r2, [r7, #28]
 8001e48:	47a0      	blx	r4
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <bmp3_set_regs+0x10a>
            {
                rslt = BMP3_E_COMM_FAIL;
 8001e5c:	23fe      	movs	r3, #254	; 0xfe
 8001e5e:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 8001e60:	e005      	b.n	8001e6e <bmp3_set_regs+0x10a>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 8001e62:	23fa      	movs	r3, #250	; 0xfa
 8001e64:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 8001e66:	e002      	b.n	8001e6e <bmp3_set_regs+0x10a>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001e68:	23ff      	movs	r3, #255	; 0xff
 8001e6a:	76fb      	strb	r3, [r7, #27]
 8001e6c:	e000      	b.n	8001e70 <bmp3_set_regs+0x10c>
        if (len != 0)
 8001e6e:	bf00      	nop
    }

    return rslt;
 8001e70:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001e74:	46ad      	mov	sp, r5
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3720      	adds	r7, #32
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bdb0      	pop	{r4, r5, r7, pc}

08001e7e <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d03a      	beq.n	8001f0a <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 8001e94:	68f9      	ldr	r1, [r7, #12]
 8001e96:	2006      	movs	r0, #6
 8001e98:	f001 fa53 	bl	8003342 <are_settings_changed>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d006      	beq.n	8001eb0 <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 fa96 	bl	80023d8 <set_pwr_ctrl_settings>
 8001eac:	4603      	mov	r3, r0
 8001eae:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 8001eb0:	68f9      	ldr	r1, [r7, #12]
 8001eb2:	20f0      	movs	r0, #240	; 0xf0
 8001eb4:	f001 fa45 	bl	8003342 <are_settings_changed>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d006      	beq.n	8001ecc <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 fad6 	bl	8002474 <set_odr_filter_settings>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 8001ecc:	68f9      	ldr	r1, [r7, #12]
 8001ece:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8001ed2:	f001 fa36 	bl	8003342 <are_settings_changed>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d006      	beq.n	8001eea <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	68b9      	ldr	r1, [r7, #8]
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 fb35 	bl	8002550 <set_int_ctrl_settings>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 8001eea:	68f9      	ldr	r1, [r7, #12]
 8001eec:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001ef0:	f001 fa27 	bl	8003342 <are_settings_changed>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d009      	beq.n	8001f0e <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 fba0 	bl	8002644 <set_advance_settings>
 8001f04:	4603      	mov	r3, r0
 8001f06:	75fb      	strb	r3, [r7, #23]
 8001f08:	e001      	b.n	8001f0e <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001f0a:	23ff      	movs	r3, #255	; 0xff
 8001f0c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001f0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <bmp3_get_status>:
 * @brief This API gets the command ready, data ready for pressure and
 * temperature and interrupt (fifo watermark, fifo full, data ready) and
 * error status from the sensor.
 */
int8_t bmp3_get_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (status != NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d01a      	beq.n	8001f60 <bmp3_get_status+0x46>
    {
        rslt = get_sensor_status(status, dev);
 8001f2a:	6839      	ldr	r1, [r7, #0]
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f001 fa44 	bl	80033ba <get_sensor_status>
 8001f32:	4603      	mov	r3, r0
 8001f34:	73fb      	strb	r3, [r7, #15]

        /* Proceed further if the earlier operation is fine */
        if (rslt == BMP3_OK)
 8001f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d112      	bne.n	8001f64 <bmp3_get_status+0x4a>
        {
            rslt = get_int_status(status, dev);
 8001f3e:	6839      	ldr	r1, [r7, #0]
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f001 fa7d 	bl	8003440 <get_int_status>
 8001f46:	4603      	mov	r3, r0
 8001f48:	73fb      	strb	r3, [r7, #15]

            /* Proceed further if the earlier operation is fine */
            if (rslt == BMP3_OK)
 8001f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d108      	bne.n	8001f64 <bmp3_get_status+0x4a>
            {
                /* Get the error status */
                rslt = get_err_status(status, dev);
 8001f52:	6839      	ldr	r1, [r7, #0]
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f001 faa1 	bl	800349c <get_err_status>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	73fb      	strb	r3, [r7, #15]
 8001f5e:	e001      	b.n	8001f64 <bmp3_get_status+0x4a>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001f60:	23ff      	movs	r3, #255	; 0xff
 8001f62:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 8001f78:	237e      	movs	r3, #126	; 0x7e
 8001f7a:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 8001f7c:	23b6      	movs	r3, #182	; 0xb6
 8001f7e:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 8001f80:	f107 010c 	add.w	r1, r7, #12
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	2003      	movs	r0, #3
 8001f8a:	f7ff fe5f 	bl	8001c4c <bmp3_get_regs>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 8001f92:	7b3b      	ldrb	r3, [r7, #12]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d02d      	beq.n	8001ff8 <bmp3_soft_reset+0x88>
 8001f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d129      	bne.n	8001ff8 <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001fa4:	f107 010d 	add.w	r1, r7, #13
 8001fa8:	f107 000e 	add.w	r0, r7, #14
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f7ff fed8 	bl	8001d64 <bmp3_set_regs>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8001fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d11b      	bne.n	8001ff8 <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6852      	ldr	r2, [r2, #4]
 8001fc8:	4611      	mov	r1, r2
 8001fca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001fce:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 8001fd0:	f107 010b 	add.w	r1, r7, #11
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	2002      	movs	r0, #2
 8001fda:	f7ff fe37 	bl	8001c4c <bmp3_get_regs>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 8001fe2:	7afb      	ldrb	r3, [r7, #11]
 8001fe4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d103      	bne.n	8001ff4 <bmp3_soft_reset+0x84>
 8001fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 8001ff4:	23fc      	movs	r3, #252	; 0xfc
 8001ff6:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800200e:	6838      	ldr	r0, [r7, #0]
 8002010:	f001 f9af 	bl	8003372 <null_ptr_check>
 8002014:	4603      	mov	r3, r0
 8002016:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 8002018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d139      	bne.n	8002094 <bmp3_set_op_mode+0x90>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d036      	beq.n	8002094 <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 800202c:	f107 030d 	add.w	r3, r7, #13
 8002030:	6839      	ldr	r1, [r7, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f838 	bl	80020a8 <bmp3_get_op_mode>
 8002038:	4603      	mov	r3, r0
 800203a:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 800203c:	7b7b      	ldrb	r3, [r7, #13]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d010      	beq.n	8002064 <bmp3_set_op_mode+0x60>
 8002042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10c      	bne.n	8002064 <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 800204a:	6838      	ldr	r0, [r7, #0]
 800204c:	f000 f8f7 	bl	800223e <put_device_to_sleep>
 8002050:	4603      	mov	r3, r0
 8002052:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	6852      	ldr	r2, [r2, #4]
 800205c:	4611      	mov	r1, r2
 800205e:	f241 3088 	movw	r0, #5000	; 0x1388
 8002062:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 8002064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d116      	bne.n	800209a <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 800206c:	7bbb      	ldrb	r3, [r7, #14]
 800206e:	2b03      	cmp	r3, #3
 8002070:	d106      	bne.n	8002080 <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 8002072:	6839      	ldr	r1, [r7, #0]
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f879 	bl	800216c <set_normal_mode>
 800207a:	4603      	mov	r3, r0
 800207c:	73fb      	strb	r3, [r7, #15]
    {
 800207e:	e00c      	b.n	800209a <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 8002080:	7bbb      	ldrb	r3, [r7, #14]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d109      	bne.n	800209a <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 8002086:	6839      	ldr	r1, [r7, #0]
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f8a2 	bl	80021d2 <write_power_mode>
 800208e:	4603      	mov	r3, r0
 8002090:	73fb      	strb	r3, [r7, #15]
    {
 8002092:	e002      	b.n	800209a <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8002094:	23ff      	movs	r3, #255	; 0xff
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	e000      	b.n	800209c <bmp3_set_op_mode+0x98>
    {
 800209a:	bf00      	nop
    }

    return rslt;
 800209c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d011      	beq.n	80020dc <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	2201      	movs	r2, #1
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	201b      	movs	r0, #27
 80020c0:	f7ff fdc4 	bl	8001c4c <bmp3_get_regs>
 80020c4:	4603      	mov	r3, r0
 80020c6:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	111b      	asrs	r3, r3, #4
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	701a      	strb	r2, [r3, #0]
 80020da:	e001      	b.n	80020e0 <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80020dc:	23ff      	movs	r3, #255	; 0xff
 80020de:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80020e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 80020fa:	2300      	movs	r3, #0
 80020fc:	623b      	str	r3, [r7, #32]
 80020fe:	2300      	movs	r3, #0
 8002100:	84bb      	strh	r3, [r7, #36]	; 0x24
    struct bmp3_uncomp_data uncomp_data = { 0 };
 8002102:	f107 0310 	add.w	r3, r7, #16
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]

    if (comp_data != NULL)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d021      	beq.n	800215a <bmp3_get_sensor_data+0x6e>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 8002116:	f107 0120 	add.w	r1, r7, #32
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2206      	movs	r2, #6
 800211e:	2004      	movs	r0, #4
 8002120:	f7ff fd94 	bl	8001c4c <bmp3_get_regs>
 8002124:	4603      	mov	r3, r0
 8002126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BMP3_OK)
 800212a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800212e:	2b00      	cmp	r3, #0
 8002130:	d116      	bne.n	8002160 <bmp3_get_sensor_data+0x74>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 8002132:	f107 0210 	add.w	r2, r7, #16
 8002136:	f107 0320 	add.w	r3, r7, #32
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fc71 	bl	8002a24 <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3318      	adds	r3, #24
 8002146:	f107 0110 	add.w	r1, r7, #16
 800214a:	7bf8      	ldrb	r0, [r7, #15]
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	f000 fca5 	bl	8002a9c <compensate_data>
 8002152:	4603      	mov	r3, r0
 8002154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002158:	e002      	b.n	8002160 <bmp3_get_sensor_data+0x74>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800215a:	23ff      	movs	r3, #255	; 0xff
 800215c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8002160:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002164:	4618      	mov	r0, r3
 8002166:	3728      	adds	r7, #40	; 0x28
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 8002176:	6839      	ldr	r1, [r7, #0]
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f888 	bl	800228e <validate_normal_mode_settings>
 800217e:	4603      	mov	r3, r0
 8002180:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 8002182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d11d      	bne.n	80021c6 <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 800218a:	6839      	ldr	r1, [r7, #0]
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f820 	bl	80021d2 <write_power_mode>
 8002192:	4603      	mov	r3, r0
 8002194:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8002196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d113      	bne.n	80021c6 <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 800219e:	f107 010e 	add.w	r1, r7, #14
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2201      	movs	r2, #1
 80021a6:	2002      	movs	r0, #2
 80021a8:	f7ff fd50 	bl	8001c4c <bmp3_get_regs>
 80021ac:	4603      	mov	r3, r0
 80021ae:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 80021b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d106      	bne.n	80021c6 <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 80021b8:	7bbb      	ldrb	r3, [r7, #14]
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 80021c2:	23fb      	movs	r3, #251	; 0xfb
 80021c4:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80021c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80021dc:	231b      	movs	r3, #27
 80021de:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 80021e6:	7b78      	ldrb	r0, [r7, #13]
 80021e8:	f107 010c 	add.w	r1, r7, #12
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f7ff fd2c 	bl	8001c4c <bmp3_get_regs>
 80021f4:	4603      	mov	r3, r0
 80021f6:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 80021f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d118      	bne.n	8002232 <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 8002200:	7b3b      	ldrb	r3, [r7, #12]
 8002202:	b25b      	sxtb	r3, r3
 8002204:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002208:	b25a      	sxtb	r2, r3
 800220a:	7bbb      	ldrb	r3, [r7, #14]
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	b25b      	sxtb	r3, r3
 8002210:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002214:	b25b      	sxtb	r3, r3
 8002216:	4313      	orrs	r3, r2
 8002218:	b25b      	sxtb	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 800221e:	f107 010c 	add.w	r1, r7, #12
 8002222:	f107 000d 	add.w	r0, r7, #13
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2201      	movs	r2, #1
 800222a:	f7ff fd9b 	bl	8001d64 <bmp3_set_regs>
 800222e:	4603      	mov	r3, r0
 8002230:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002232:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8002246:	231b      	movs	r3, #27
 8002248:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 800224a:	f107 010d 	add.w	r1, r7, #13
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	201b      	movs	r0, #27
 8002254:	f7ff fcfa 	bl	8001c4c <bmp3_get_regs>
 8002258:	4603      	mov	r3, r0
 800225a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800225c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10e      	bne.n	8002282 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 8002264:	7b7b      	ldrb	r3, [r7, #13]
 8002266:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800226a:	b2db      	uxtb	r3, r3
 800226c:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 800226e:	f107 010d 	add.w	r1, r7, #13
 8002272:	f107 000e 	add.w	r0, r7, #14
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f7ff fd73 	bl	8001d64 <bmp3_set_regs>
 800227e:	4603      	mov	r3, r0
 8002280:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002282:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b084      	sub	sp, #16
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 8002298:	6839      	ldr	r1, [r7, #0]
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 fa25 	bl	80026ea <get_odr_filter_settings>
 80022a0:	4603      	mov	r3, r0
 80022a2:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80022a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d104      	bne.n	80022b6 <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 fa39 	bl	8002724 <validate_osr_and_odr_settings>
 80022b2:	4603      	mov	r3, r0
 80022b4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80022b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b088      	sub	sp, #32
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 80022ca:	2331      	movs	r3, #49	; 0x31
 80022cc:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 80022ce:	2300      	movs	r3, #0
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	f107 030c 	add.w	r3, r7, #12
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	60da      	str	r2, [r3, #12]
 80022e0:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 80022e2:	f107 0108 	add.w	r1, r7, #8
 80022e6:	7ff8      	ldrb	r0, [r7, #31]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2215      	movs	r2, #21
 80022ec:	f7ff fcae 	bl	8001c4c <bmp3_get_regs>
 80022f0:	4603      	mov	r3, r0
 80022f2:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 80022f4:	f107 0308 	add.w	r3, r7, #8
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 fc40 	bl	8002b80 <parse_calib_data>

    return rslt;
 8002300:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3720      	adds	r7, #32
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 800231a:	2301      	movs	r3, #1
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e015      	b.n	800234c <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	441a      	add	r2, r3
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	3b01      	subs	r3, #1
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	440b      	add	r3, r1
 8002330:	7812      	ldrb	r2, [r2, #0]
 8002332:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	441a      	add	r2, r3
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	68b9      	ldr	r1, [r7, #8]
 8002340:	440b      	add	r3, r1
 8002342:	7812      	ldrb	r2, [r2, #0]
 8002344:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	3301      	adds	r3, #1
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d3e5      	bcc.n	8002320 <interleave_reg_addr+0x14>
    }
}
 8002354:	bf00      	nop
 8002356:	bf00      	nop
 8002358:	371c      	adds	r7, #28
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8002362:	b480      	push	{r7}
 8002364:	b085      	sub	sp, #20
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	b2da      	uxtb	r2, r3
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 8002382:	7bfb      	ldrb	r3, [r7, #15]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	10db      	asrs	r3, r3, #3
 800238c:	b2db      	uxtb	r3, r3
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	b2da      	uxtb	r2, r3
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	3301      	adds	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	4413      	add	r3, r2
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	3302      	adds	r3, #2
 80023b4:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	4413      	add	r3, r2
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	105b      	asrs	r3, r3, #1
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	709a      	strb	r2, [r3, #2]
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80023e4:	231b      	movs	r3, #27
 80023e6:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80023e8:	7db8      	ldrb	r0, [r7, #22]
 80023ea:	f107 0115 	add.w	r1, r7, #21
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f7ff fc2b 	bl	8001c4c <bmp3_get_regs>
 80023f6:	4603      	mov	r3, r0
 80023f8:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 80023fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d132      	bne.n	8002468 <set_pwr_ctrl_settings+0x90>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00e      	beq.n	800242a <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 800240c:	7d7b      	ldrb	r3, [r7, #21]
 800240e:	b25b      	sxtb	r3, r3
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	b25a      	sxtb	r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	785b      	ldrb	r3, [r3, #1]
 800241a:	b25b      	sxtb	r3, r3
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	b25b      	sxtb	r3, r3
 8002422:	4313      	orrs	r3, r2
 8002424:	b25b      	sxtb	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00f      	beq.n	8002454 <set_pwr_ctrl_settings+0x7c>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 8002434:	7d7b      	ldrb	r3, [r7, #21]
 8002436:	b25b      	sxtb	r3, r3
 8002438:	f023 0302 	bic.w	r3, r3, #2
 800243c:	b25a      	sxtb	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	789b      	ldrb	r3, [r3, #2]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	b25b      	sxtb	r3, r3
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	b25b      	sxtb	r3, r3
 800244c:	4313      	orrs	r3, r2
 800244e:	b25b      	sxtb	r3, r3
 8002450:	b2db      	uxtb	r3, r3
 8002452:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8002454:	f107 0115 	add.w	r1, r7, #21
 8002458:	f107 0016 	add.w	r0, r7, #22
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f7ff fc80 	bl	8001d64 <bmp3_set_regs>
 8002464:	4603      	mov	r3, r0
 8002466:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002468:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	; 0x28
 8002478:	af02      	add	r7, sp, #8
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 8002480:	4b32      	ldr	r3, [pc, #200]	; (800254c <set_odr_filter_settings+0xd8>)
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	83bb      	strh	r3, [r7, #28]
 8002486:	2300      	movs	r3, #0
 8002488:	77bb      	strb	r3, [r7, #30]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 800248e:	f107 0118 	add.w	r1, r7, #24
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2204      	movs	r2, #4
 8002496:	201c      	movs	r0, #28
 8002498:	f7ff fbd8 	bl	8001c4c <bmp3_get_regs>
 800249c:	4603      	mov	r3, r0
 800249e:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 80024a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d14a      	bne.n	800253e <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 80024a8:	68f9      	ldr	r1, [r7, #12]
 80024aa:	2030      	movs	r0, #48	; 0x30
 80024ac:	f000 ff49 	bl	8003342 <are_settings_changed>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00b      	beq.n	80024ce <set_odr_filter_settings+0x5a>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 80024b6:	f107 0017 	add.w	r0, r7, #23
 80024ba:	f107 0218 	add.w	r2, r7, #24
 80024be:	f107 011c 	add.w	r1, r7, #28
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	4603      	mov	r3, r0
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 f9e3 	bl	8002894 <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 80024ce:	68f9      	ldr	r1, [r7, #12]
 80024d0:	2080      	movs	r0, #128	; 0x80
 80024d2:	f000 ff36 	bl	8003342 <are_settings_changed>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <set_odr_filter_settings+0x7a>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 80024dc:	f107 0217 	add.w	r2, r7, #23
 80024e0:	f107 0118 	add.w	r1, r7, #24
 80024e4:	f107 001c 	add.w	r0, r7, #28
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f000 fa2b 	bl	8002944 <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 80024ee:	68f9      	ldr	r1, [r7, #12]
 80024f0:	2040      	movs	r0, #64	; 0x40
 80024f2:	f000 ff26 	bl	8003342 <are_settings_changed>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <set_odr_filter_settings+0x9a>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 80024fc:	f107 0217 	add.w	r2, r7, #23
 8002500:	f107 0118 	add.w	r1, r7, #24
 8002504:	f107 001c 	add.w	r0, r7, #28
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f000 fa55 	bl	80029b8 <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b03      	cmp	r3, #3
 8002514:	d104      	bne.n	8002520 <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 8002516:	68b8      	ldr	r0, [r7, #8]
 8002518:	f000 f904 	bl	8002724 <validate_osr_and_odr_settings>
 800251c:	4603      	mov	r3, r0
 800251e:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 8002520:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 8002528:	7dfb      	ldrb	r3, [r7, #23]
 800252a:	461a      	mov	r2, r3
 800252c:	f107 0118 	add.w	r1, r7, #24
 8002530:	f107 001c 	add.w	r0, r7, #28
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f7ff fc15 	bl	8001d64 <bmp3_set_regs>
 800253a:	4603      	mov	r3, r0
 800253c:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 800253e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3720      	adds	r7, #32
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	080153a4 	.word	0x080153a4

08002550 <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 800255c:	2319      	movs	r3, #25
 800255e:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8002560:	7d78      	ldrb	r0, [r7, #21]
 8002562:	f107 0116 	add.w	r1, r7, #22
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f7ff fb6f 	bl	8001c4c <bmp3_get_regs>
 800256e:	4603      	mov	r3, r0
 8002570:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8002572:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d15e      	bne.n	8002638 <set_int_ctrl_settings+0xe8>
    {
        int_settings = settings->int_settings;
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	f107 0310 	add.w	r3, r7, #16
 8002580:	3207      	adds	r2, #7
 8002582:	6810      	ldr	r0, [r2, #0]
 8002584:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00d      	beq.n	80025ac <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8002590:	7dbb      	ldrb	r3, [r7, #22]
 8002592:	b25b      	sxtb	r3, r3
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	b25a      	sxtb	r2, r3
 800259a:	7c3b      	ldrb	r3, [r7, #16]
 800259c:	b25b      	sxtb	r3, r3
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	b25b      	sxtb	r3, r3
 80025a4:	4313      	orrs	r3, r2
 80025a6:	b25b      	sxtb	r3, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00e      	beq.n	80025d4 <set_int_ctrl_settings+0x84>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 80025b6:	7dbb      	ldrb	r3, [r7, #22]
 80025b8:	b25b      	sxtb	r3, r3
 80025ba:	f023 0302 	bic.w	r3, r3, #2
 80025be:	b25a      	sxtb	r2, r3
 80025c0:	7c7b      	ldrb	r3, [r7, #17]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	b25b      	sxtb	r3, r3
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	b25b      	sxtb	r3, r3
 80025cc:	4313      	orrs	r3, r2
 80025ce:	b25b      	sxtb	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00e      	beq.n	80025fc <set_int_ctrl_settings+0xac>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 80025de:	7dbb      	ldrb	r3, [r7, #22]
 80025e0:	b25b      	sxtb	r3, r3
 80025e2:	f023 0304 	bic.w	r3, r3, #4
 80025e6:	b25a      	sxtb	r2, r3
 80025e8:	7cbb      	ldrb	r3, [r7, #18]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	b25b      	sxtb	r3, r3
 80025f4:	4313      	orrs	r3, r2
 80025f6:	b25b      	sxtb	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00e      	beq.n	8002624 <set_int_ctrl_settings+0xd4>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 8002606:	7dbb      	ldrb	r3, [r7, #22]
 8002608:	b25b      	sxtb	r3, r3
 800260a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800260e:	b25a      	sxtb	r2, r3
 8002610:	7cfb      	ldrb	r3, [r7, #19]
 8002612:	019b      	lsls	r3, r3, #6
 8002614:	b25b      	sxtb	r3, r3
 8002616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261a:	b25b      	sxtb	r3, r3
 800261c:	4313      	orrs	r3, r2
 800261e:	b25b      	sxtb	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8002624:	f107 0116 	add.w	r1, r7, #22
 8002628:	f107 0015 	add.w	r0, r7, #21
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f7ff fb98 	bl	8001d64 <bmp3_set_regs>
 8002634:	4603      	mov	r3, r0
 8002636:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002638:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	f107 0310 	add.w	r3, r7, #16
 8002656:	320b      	adds	r2, #11
 8002658:	8812      	ldrh	r2, [r2, #0]
 800265a:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 800265c:	231a      	movs	r3, #26
 800265e:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8002660:	7db8      	ldrb	r0, [r7, #22]
 8002662:	f107 0115 	add.w	r1, r7, #21
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f7ff faef 	bl	8001c4c <bmp3_get_regs>
 800266e:	4603      	mov	r3, r0
 8002670:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8002672:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d131      	bne.n	80026de <set_advance_settings+0x9a>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00e      	beq.n	80026a2 <set_advance_settings+0x5e>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8002684:	7d7b      	ldrb	r3, [r7, #21]
 8002686:	b25b      	sxtb	r3, r3
 8002688:	f023 0302 	bic.w	r3, r3, #2
 800268c:	b25a      	sxtb	r2, r3
 800268e:	7c3b      	ldrb	r3, [r7, #16]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	b25b      	sxtb	r3, r3
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	b25b      	sxtb	r3, r3
 800269a:	4313      	orrs	r3, r2
 800269c:	b25b      	sxtb	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00e      	beq.n	80026ca <set_advance_settings+0x86>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 80026ac:	7d7b      	ldrb	r3, [r7, #21]
 80026ae:	b25b      	sxtb	r3, r3
 80026b0:	f023 0304 	bic.w	r3, r3, #4
 80026b4:	b25a      	sxtb	r2, r3
 80026b6:	7c7b      	ldrb	r3, [r7, #17]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	b25b      	sxtb	r3, r3
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	b25b      	sxtb	r3, r3
 80026c2:	4313      	orrs	r3, r2
 80026c4:	b25b      	sxtb	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80026ca:	f107 0115 	add.w	r1, r7, #21
 80026ce:	f107 0016 	add.w	r0, r7, #22
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f7ff fb45 	bl	8001d64 <bmp3_set_regs>
 80026da:	4603      	mov	r3, r0
 80026dc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80026de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 80026f4:	f107 0108 	add.w	r1, r7, #8
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	2204      	movs	r2, #4
 80026fc:	201c      	movs	r0, #28
 80026fe:	f7ff faa5 	bl	8001c4c <bmp3_get_regs>
 8002702:	4603      	mov	r3, r0
 8002704:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	1cda      	adds	r2, r3, #3
 800270a:	f107 0308 	add.w	r3, r7, #8
 800270e:	4611      	mov	r1, r2
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fe26 	bl	8002362 <parse_odr_filter_settings>

    return rslt;
 8002716:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b098      	sub	sp, #96	; 0x60
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 800272c:	23ea      	movs	r3, #234	; 0xea
 800272e:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8002734:	4a1b      	ldr	r2, [pc, #108]	; (80027a4 <validate_osr_and_odr_settings+0x80>)
 8002736:	f107 030c 	add.w	r3, r7, #12
 800273a:	4611      	mov	r1, r2
 800273c:	2248      	movs	r2, #72	; 0x48
 800273e:	4618      	mov	r0, r3
 8002740:	f00c ff8f 	bl	800f662 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	785b      	ldrb	r3, [r3, #1]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d006      	beq.n	800275a <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f841 	bl	80027d4 <calculate_press_meas_time>
 8002752:	4602      	mov	r2, r0
 8002754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002756:	4413      	add	r3, r2
 8002758:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (settings->temp_en)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	789b      	ldrb	r3, [r3, #2]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d006      	beq.n	8002770 <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f866 	bl	8002834 <calculate_temp_meas_time>
 8002768:	4602      	mov	r2, r0
 800276a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800276c:	4413      	add	r3, r2
 800276e:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8002770:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002774:	4413      	add	r3, r2
 8002776:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	799b      	ldrb	r3, [r3, #6]
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002782:	4413      	add	r3, r2
 8002784:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002788:	4619      	mov	r1, r3
 800278a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800278c:	f000 f80c 	bl	80027a8 <verify_meas_time_and_odr_duration>
 8002790:	4603      	mov	r3, r0
 8002792:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 8002796:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800279a:	4618      	mov	r0, r3
 800279c:	3760      	adds	r7, #96	; 0x60
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	080153a8 	.word	0x080153a8

080027a8 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d202      	bcs.n	80027c0 <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	e001      	b.n	80027c4 <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 80027c0:	23fd      	movs	r3, #253	; 0xfd
 80027c2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80027c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	f107 030c 	add.w	r3, r7, #12
 80027e2:	3203      	adds	r2, #3
 80027e4:	6810      	ldr	r0, [r2, #0]
 80027e6:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 80027f4:	7b3b      	ldrb	r3, [r7, #12]
 80027f6:	4618      	mov	r0, r3
 80027f8:	ed97 0b06 	vldr	d0, [r7, #24]
 80027fc:	f000 fd7c 	bl	80032f8 <pow_bmp3>
 8002800:	ed87 0a05 	vstr	s0, [r7, #20]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8002804:	edd7 7a05 	vldr	s15, [r7, #20]
 8002808:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800282c <calculate_press_meas_time+0x58>
 800280c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002810:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002830 <calculate_press_meas_time+0x5c>
 8002814:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800281c:	ee17 3a90 	vmov	r3, s15
 8002820:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8002822:	693b      	ldr	r3, [r7, #16]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3720      	adds	r7, #32
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	44fa0000 	.word	0x44fa0000
 8002830:	43c40000 	.word	0x43c40000

08002834 <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	f107 030c 	add.w	r3, r7, #12
 8002842:	3203      	adds	r2, #3
 8002844:	6810      	ldr	r0, [r2, #0]
 8002846:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002850:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8002854:	7b7b      	ldrb	r3, [r7, #13]
 8002856:	4618      	mov	r0, r3
 8002858:	ed97 0b06 	vldr	d0, [r7, #24]
 800285c:	f000 fd4c 	bl	80032f8 <pow_bmp3>
 8002860:	ed87 0a05 	vstr	s0, [r7, #20]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8002864:	edd7 7a05 	vldr	s15, [r7, #20]
 8002868:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800288c <calculate_temp_meas_time+0x58>
 800286c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002870:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002890 <calculate_temp_meas_time+0x5c>
 8002874:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800287c:	ee17 3a90 	vmov	r3, s15
 8002880:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8002882:	693b      	ldr	r3, [r7, #16]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3720      	adds	r7, #32
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	44fa0000 	.word	0x44fa0000
 8002890:	439c8000 	.word	0x439c8000

08002894 <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 80028a2:	6a3a      	ldr	r2, [r7, #32]
 80028a4:	f107 0314 	add.w	r3, r7, #20
 80028a8:	3203      	adds	r2, #3
 80028aa:	6810      	ldr	r0, [r2, #0]
 80028ac:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d03f      	beq.n	8002938 <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d013      	beq.n	80028ea <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	b25b      	sxtb	r3, r3
 80028c8:	f023 0307 	bic.w	r3, r3, #7
 80028cc:	b25a      	sxtb	r2, r3
 80028ce:	7d3b      	ldrb	r3, [r7, #20]
 80028d0:	b25b      	sxtb	r3, r3
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	b25b      	sxtb	r3, r3
 80028d8:	4313      	orrs	r3, r2
 80028da:	b25a      	sxtb	r2, r3
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	4619      	mov	r1, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	440b      	add	r3, r1
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d014      	beq.n	800291e <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	b25b      	sxtb	r3, r3
 80028fa:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80028fe:	b25a      	sxtb	r2, r3
 8002900:	7d7b      	ldrb	r3, [r7, #21]
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	b25b      	sxtb	r3, r3
 8002906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800290a:	b25b      	sxtb	r3, r3
 800290c:	4313      	orrs	r3, r2
 800290e:	b25a      	sxtb	r2, r3
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4619      	mov	r1, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	440b      	add	r3, r1
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4413      	add	r3, r2
 8002928:	221c      	movs	r2, #28
 800292a:	701a      	strb	r2, [r3, #0]
        (*len)++;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	3301      	adds	r3, #1
 8002932:	b2da      	uxtb	r2, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	701a      	strb	r2, [r3, #0]
    }
}
 8002938:	bf00      	nop
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 8002944:	b480      	push	{r7}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	3303      	adds	r3, #3
 8002956:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	78db      	ldrb	r3, [r3, #3]
 800295c:	2b11      	cmp	r3, #17
 800295e:	d902      	bls.n	8002966 <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2211      	movs	r2, #17
 8002964:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	3301      	adds	r3, #1
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	b25b      	sxtb	r3, r3
 800296e:	f023 031f 	bic.w	r3, r3, #31
 8002972:	b25a      	sxtb	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	78db      	ldrb	r3, [r3, #3]
 8002978:	b25b      	sxtb	r3, r3
 800297a:	f003 031f 	and.w	r3, r3, #31
 800297e:	b25b      	sxtb	r3, r3
 8002980:	4313      	orrs	r3, r2
 8002982:	b25a      	sxtb	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	4619      	mov	r1, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	440b      	add	r3, r1
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4413      	add	r3, r2
 800299c:	221d      	movs	r2, #29
 800299e:	701a      	strb	r2, [r3, #0]
    (*len)++;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	3301      	adds	r3, #1
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	701a      	strb	r2, [r3, #0]
}
 80029ac:	bf00      	nop
 80029ae:	371c      	adds	r7, #28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	3203      	adds	r2, #3
 80029ce:	6810      	ldr	r0, [r2, #0]
 80029d0:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	3303      	adds	r3, #3
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	b25b      	sxtb	r3, r3
 80029da:	f023 030e 	bic.w	r3, r3, #14
 80029de:	b25a      	sxtb	r2, r3
 80029e0:	7dbb      	ldrb	r3, [r7, #22]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	b25b      	sxtb	r3, r3
 80029e6:	f003 030e 	and.w	r3, r3, #14
 80029ea:	b25b      	sxtb	r3, r3
 80029ec:	4313      	orrs	r3, r2
 80029ee:	b25a      	sxtb	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	4619      	mov	r1, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	440b      	add	r3, r1
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4413      	add	r3, r2
 8002a08:	221f      	movs	r2, #31
 8002a0a:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	701a      	strb	r2, [r3, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	371c      	adds	r7, #28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3301      	adds	r3, #1
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3302      	adds	r3, #2
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	041b      	lsls	r3, r3, #16
 8002a46:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	461a      	mov	r2, r3
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	6839      	ldr	r1, [r7, #0]
 8002a5a:	e9c1 2300 	strd	r2, r3, [r1]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3303      	adds	r3, #3
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	021b      	lsls	r3, r3, #8
 8002a6e:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3305      	adds	r3, #5
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	041b      	lsls	r3, r3, #16
 8002a78:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	461a      	mov	r2, r3
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	6839      	ldr	r1, [r7, #0]
 8002a8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8002a90:	bf00      	nop
 8002a92:	371c      	adds	r7, #28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d05a      	beq.n	8002b6c <compensate_data+0xd0>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d057      	beq.n	8002b6c <compensate_data+0xd0>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d054      	beq.n	8002b6c <compensate_data+0xd0>
    {
        /* If pressure and temperature component is selected */
        if (sensor_comp == BMP3_PRESS_TEMP)
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d115      	bne.n	8002af4 <compensate_data+0x58>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation
             */

            /* Compensate pressure and temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 fa1e 	bl	8002f10 <compensate_temperature>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP3_OK)
 8002ad8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d148      	bne.n	8002b72 <compensate_data+0xd6>
            {
                rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3308      	adds	r3, #8
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fa8d 	bl	8003008 <compensate_pressure>
 8002aee:	4603      	mov	r3, r0
 8002af0:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8002af2:	e03e      	b.n	8002b72 <compensate_data+0xd6>
            }
        }
        else if (sensor_comp == BMP3_PRESS)
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d116      	bne.n	8002b28 <compensate_data+0x8c>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation.
             * As only pressure is enabled in 'sensor_comp', after calculating
             * compensated temperature, assign it to zero.
             */
            (void)compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	68b9      	ldr	r1, [r7, #8]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fa05 	bl	8002f10 <compensate_temperature>
            comp_data->temperature = 0;
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	e9c1 2300 	strd	r2, r3, [r1]

            /* Compensate the pressure data */
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3308      	adds	r3, #8
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fa73 	bl	8003008 <compensate_pressure>
 8002b22:	4603      	mov	r3, r0
 8002b24:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8002b26:	e024      	b.n	8002b72 <compensate_data+0xd6>
        }
        else if (sensor_comp == BMP3_TEMP)
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d10f      	bne.n	8002b4e <compensate_data+0xb2>
        {
            /* Compensate the temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	68b9      	ldr	r1, [r7, #8]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 f9eb 	bl	8002f10 <compensate_temperature>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	75fb      	strb	r3, [r7, #23]

            /*
             * As only temperature is enabled in 'sensor_comp'
             * make compensated pressure as zero
             */
            comp_data->pressure = 0;
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8002b4c:	e011      	b.n	8002b72 <compensate_data+0xd6>
        }
        else
        {
            comp_data->pressure = 0;
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	e9c1 2302 	strd	r2, r3, [r1, #8]
            comp_data->temperature = 0;
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	e9c1 2300 	strd	r2, r3, [r1]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8002b6a:	e002      	b.n	8002b72 <compensate_data+0xd6>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8002b6c:	23ff      	movs	r3, #255	; 0xff
 8002b6e:	75fb      	strb	r3, [r7, #23]
 8002b70:	e000      	b.n	8002b74 <compensate_data+0xd8>
        if (sensor_comp == BMP3_PRESS_TEMP)
 8002b72:	bf00      	nop
    }

    return rslt;
 8002b74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	3390      	adds	r3, #144	; 0x90
 8002b8e:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	3318      	adds	r3, #24
 8002b94:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	4ba4      	ldr	r3, [pc, #656]	; (8002e2c <parse_calib_data+0x2ac>)
 8002b9c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	b21a      	sxth	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	b21b      	sxth	r3, r3
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	b21b      	sxth	r3, r3
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd fcc8 	bl	8000554 <__aeabi_ui2d>
 8002bc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bc8:	f7fd fe68 	bl	800089c <__aeabi_ddiv>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	6939      	ldr	r1, [r7, #16]
 8002bd2:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3303      	adds	r3, #3
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	021b      	lsls	r3, r3, #8
 8002bde:	b21a      	sxth	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3302      	adds	r3, #2
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	b21b      	sxth	r3, r3
 8002be8:	4313      	orrs	r3, r2
 8002bea:	b21b      	sxth	r3, r3
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	4b8e      	ldr	r3, [pc, #568]	; (8002e30 <parse_calib_data+0x2b0>)
 8002bf8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	885b      	ldrh	r3, [r3, #2]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fd fca7 	bl	8000554 <__aeabi_ui2d>
 8002c06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c0a:	f7fd fe47 	bl	800089c <__aeabi_ddiv>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	6939      	ldr	r1, [r7, #16]
 8002c14:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	b25a      	sxtb	r2, r3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	4b82      	ldr	r3, [pc, #520]	; (8002e34 <parse_calib_data+0x2b4>)
 8002c2a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fd fc9d 	bl	8000574 <__aeabi_i2d>
 8002c3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c3e:	f7fd fe2d 	bl	800089c <__aeabi_ddiv>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	6939      	ldr	r1, [r7, #16]
 8002c48:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3306      	adds	r3, #6
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	021b      	lsls	r3, r3, #8
 8002c54:	b21a      	sxth	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3305      	adds	r3, #5
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	b21b      	sxth	r3, r3
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	b21a      	sxth	r2, r3
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	4b73      	ldr	r3, [pc, #460]	; (8002e38 <parse_calib_data+0x2b8>)
 8002c6c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002c76:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fc7a 	bl	8000574 <__aeabi_i2d>
 8002c80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c84:	f7fd fe0a 	bl	800089c <__aeabi_ddiv>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	6939      	ldr	r1, [r7, #16]
 8002c8e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3308      	adds	r3, #8
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	021b      	lsls	r3, r3, #8
 8002c9a:	b21a      	sxth	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3307      	adds	r3, #7
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	b21b      	sxth	r3, r3
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	b21a      	sxth	r2, r3
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	4b62      	ldr	r3, [pc, #392]	; (8002e3c <parse_calib_data+0x2bc>)
 8002cb2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002cbc:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fc57 	bl	8000574 <__aeabi_i2d>
 8002cc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cca:	f7fd fde7 	bl	800089c <__aeabi_ddiv>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	6939      	ldr	r1, [r7, #16]
 8002cd4:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3309      	adds	r3, #9
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	b25a      	sxtb	r2, r3
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	4b55      	ldr	r3, [pc, #340]	; (8002e40 <parse_calib_data+0x2c0>)
 8002cea:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fd fc3d 	bl	8000574 <__aeabi_i2d>
 8002cfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cfe:	f7fd fdcd 	bl	800089c <__aeabi_ddiv>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	6939      	ldr	r1, [r7, #16]
 8002d08:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	330a      	adds	r3, #10
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	b25a      	sxtb	r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	4b49      	ldr	r3, [pc, #292]	; (8002e44 <parse_calib_data+0x2c4>)
 8002d1e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fd fc23 	bl	8000574 <__aeabi_i2d>
 8002d2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d32:	f7fd fdb3 	bl	800089c <__aeabi_ddiv>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	6939      	ldr	r1, [r7, #16]
 8002d3c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	330c      	adds	r3, #12
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	b21a      	sxth	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	330b      	adds	r3, #11
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	b21b      	sxth	r3, r3
 8002d52:	4313      	orrs	r3, r2
 8002d54:	b21b      	sxth	r3, r3
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002d64:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	899b      	ldrh	r3, [r3, #12]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fd fbf1 	bl	8000554 <__aeabi_ui2d>
 8002d72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d76:	f7fd fd91 	bl	800089c <__aeabi_ddiv>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	6939      	ldr	r1, [r7, #16]
 8002d80:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	330e      	adds	r3, #14
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	021b      	lsls	r3, r3, #8
 8002d8c:	b21a      	sxth	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	330d      	adds	r3, #13
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	b21b      	sxth	r3, r3
 8002d96:	4313      	orrs	r3, r2
 8002d98:	b21b      	sxth	r3, r3
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	4b28      	ldr	r3, [pc, #160]	; (8002e48 <parse_calib_data+0x2c8>)
 8002da6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	89db      	ldrh	r3, [r3, #14]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fd fbd0 	bl	8000554 <__aeabi_ui2d>
 8002db4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002db8:	f7fd fd70 	bl	800089c <__aeabi_ddiv>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	6939      	ldr	r1, [r7, #16]
 8002dc2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	330f      	adds	r3, #15
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	b25a      	sxtb	r2, r3
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <parse_calib_data+0x2cc>)
 8002dd8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd fbc6 	bl	8000574 <__aeabi_i2d>
 8002de8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dec:	f7fd fd56 	bl	800089c <__aeabi_ddiv>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	6939      	ldr	r1, [r7, #16]
 8002df6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3310      	adds	r3, #16
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	b25a      	sxtb	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <parse_calib_data+0x2d0>)
 8002e0c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fd fbac 	bl	8000574 <__aeabi_i2d>
 8002e1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e20:	f7fd fd3c 	bl	800089c <__aeabi_ddiv>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	6939      	ldr	r1, [r7, #16]
 8002e2a:	e013      	b.n	8002e54 <parse_calib_data+0x2d4>
 8002e2c:	3f700000 	.word	0x3f700000
 8002e30:	41d00000 	.word	0x41d00000
 8002e34:	42f00000 	.word	0x42f00000
 8002e38:	41300000 	.word	0x41300000
 8002e3c:	41c00000 	.word	0x41c00000
 8002e40:	41f00000 	.word	0x41f00000
 8002e44:	42400000 	.word	0x42400000
 8002e48:	40500000 	.word	0x40500000
 8002e4c:	40700000 	.word	0x40700000
 8002e50:	40e00000 	.word	0x40e00000
 8002e54:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3312      	adds	r3, #18
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	021b      	lsls	r3, r3, #8
 8002e60:	b21a      	sxth	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3311      	adds	r3, #17
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	b21b      	sxth	r3, r3
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	b21a      	sxth	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	4b25      	ldr	r3, [pc, #148]	; (8002f0c <parse_calib_data+0x38c>)
 8002e78:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fd fb76 	bl	8000574 <__aeabi_i2d>
 8002e88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e8c:	f7fd fd06 	bl	800089c <__aeabi_ddiv>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	6939      	ldr	r1, [r7, #16]
 8002e96:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3313      	adds	r3, #19
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	b25a      	sxtb	r2, r3
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <parse_calib_data+0x38c>)
 8002eac:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fd fb5c 	bl	8000574 <__aeabi_i2d>
 8002ebc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ec0:	f7fd fcec 	bl	800089c <__aeabi_ddiv>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	6939      	ldr	r1, [r7, #16]
 8002eca:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3314      	adds	r3, #20
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	b25a      	sxtb	r2, r3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 8002ee2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fd fb41 	bl	8000574 <__aeabi_i2d>
 8002ef2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ef6:	f7fd fcd1 	bl	800089c <__aeabi_ddiv>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	6939      	ldr	r1, [r7, #16]
 8002f00:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8002f04:	bf00      	nop
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	42f00000 	.word	0x42f00000

08002f10 <compensate_temperature>:
 * For e.g. Returns temperature 24.26 deg Celsius
 */
static int8_t compensate_temperature(double *temperature,
                                     const struct bmp3_uncomp_data *uncomp_data,
                                     struct bmp3_calib_data *calib_data)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08c      	sub	sp, #48	; 0x30
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int64_t uncomp_temp = uncomp_data->temperature;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f28:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 8002f2c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f30:	f7fd fb5c 	bl	80005ec <__aeabi_l2d>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3a:	f7fd f9cd 	bl	80002d8 <__aeabi_dsub>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f4c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f50:	f7fd fb7a 	bl	8000648 <__aeabi_dmul>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8002f5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f64:	f7fd fb70 	bl	8000648 <__aeabi_dmul>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8002f76:	f7fd fb67 	bl	8000648 <__aeabi_dmul>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4619      	mov	r1, r3
 8002f82:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f86:	f7fd f9a9 	bl	80002dc <__adddf3>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* Returns compensated temperature */
    if (calib_data->quantized_calib_data.t_lin < BMP3_MIN_TEMP_DOUBLE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <compensate_temperature+0xec>)
 8002fa0:	f7fd fdc4 	bl	8000b2c <__aeabi_dcmplt>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d008      	beq.n	8002fbc <compensate_temperature+0xac>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MIN_TEMP_DOUBLE;
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <compensate_temperature+0xec>)
 8002fb2:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MIN_TEMP;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (calib_data->quantized_calib_data.t_lin > BMP3_MAX_TEMP_DOUBLE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <compensate_temperature+0xf0>)
 8002fc8:	f7fd fdce 	bl	8000b68 <__aeabi_dcmpgt>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d008      	beq.n	8002fe4 <compensate_temperature+0xd4>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MAX_TEMP_DOUBLE;
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	4b09      	ldr	r3, [pc, #36]	; (8003000 <compensate_temperature+0xf0>)
 8002fda:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MAX_TEMP;
 8002fde:	2304      	movs	r3, #4
 8002fe0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*temperature) = calib_data->quantized_calib_data.t_lin;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002fea:	68f9      	ldr	r1, [r7, #12]
 8002fec:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8002ff0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3730      	adds	r7, #48	; 0x30
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	c0440000 	.word	0xc0440000
 8003000:	40554000 	.word	0x40554000
 8003004:	00000000 	.word	0x00000000

08003008 <compensate_pressure>:
 * For e.g. returns pressure in Pascal p = 95305.295
 */
static int8_t compensate_pressure(double *pressure,
                                  const struct bmp3_uncomp_data *uncomp_data,
                                  const struct bmp3_calib_data *calib_data)
{
 8003008:	b5b0      	push	{r4, r5, r7, lr}
 800300a:	b096      	sub	sp, #88	; 0x58
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 800301e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003020:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003026:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800302a:	f7fd fb0d 	bl	8000648 <__aeabi_dmul>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 8003036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003038:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800303c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800303e:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8003042:	2002      	movs	r0, #2
 8003044:	eeb0 0a47 	vmov.f32	s0, s14
 8003048:	eef0 0a67 	vmov.f32	s1, s15
 800304c:	f000 f954 	bl	80032f8 <pow_bmp3>
 8003050:	ee10 3a10 	vmov	r3, s0
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd fa9f 	bl	8000598 <__aeabi_f2d>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4620      	mov	r0, r4
 8003060:	4629      	mov	r1, r5
 8003062:	f7fd faf1 	bl	8000648 <__aeabi_dmul>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 800306e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003070:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8003074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003076:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800307a:	2003      	movs	r0, #3
 800307c:	eeb0 0a47 	vmov.f32	s0, s14
 8003080:	eef0 0a67 	vmov.f32	s1, s15
 8003084:	f000 f938 	bl	80032f8 <pow_bmp3>
 8003088:	ee10 3a10 	vmov	r3, s0
 800308c:	4618      	mov	r0, r3
 800308e:	f7fd fa83 	bl	8000598 <__aeabi_f2d>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4620      	mov	r0, r4
 8003098:	4629      	mov	r1, r5
 800309a:	f7fd fad5 	bl	8000648 <__aeabi_dmul>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 80030a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030a8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80030ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030b0:	f7fd f914 	bl	80002dc <__adddf3>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4610      	mov	r0, r2
 80030ba:	4619      	mov	r1, r3
 80030bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80030c0:	f7fd f90c 	bl	80002dc <__adddf3>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030cc:	f7fd f906 	bl	80002dc <__adddf3>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 80030d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030da:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80030de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030e0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80030e4:	f7fd fab0 	bl	8000648 <__aeabi_dmul>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80030f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030f2:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80030f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030f8:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80030fc:	2002      	movs	r0, #2
 80030fe:	eeb0 0a47 	vmov.f32	s0, s14
 8003102:	eef0 0a67 	vmov.f32	s1, s15
 8003106:	f000 f8f7 	bl	80032f8 <pow_bmp3>
 800310a:	ee10 3a10 	vmov	r3, s0
 800310e:	4618      	mov	r0, r3
 8003110:	f7fd fa42 	bl	8000598 <__aeabi_f2d>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4620      	mov	r0, r4
 800311a:	4629      	mov	r1, r5
 800311c:	f7fd fa94 	bl	8000648 <__aeabi_dmul>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 8003128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800312a:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800312e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003130:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8003134:	2003      	movs	r0, #3
 8003136:	eeb0 0a47 	vmov.f32	s0, s14
 800313a:	eef0 0a67 	vmov.f32	s1, s15
 800313e:	f000 f8db 	bl	80032f8 <pow_bmp3>
 8003142:	ee10 3a10 	vmov	r3, s0
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd fa26 	bl	8000598 <__aeabi_f2d>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4620      	mov	r0, r4
 8003152:	4629      	mov	r1, r5
 8003154:	f7fd fa78 	bl	8000648 <__aeabi_dmul>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out2 = uncomp_data->pressure *
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003166:	4610      	mov	r0, r2
 8003168:	4619      	mov	r1, r3
 800316a:	f7fd fa37 	bl	80005dc <__aeabi_ul2d>
 800316e:	4604      	mov	r4, r0
 8003170:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 8003172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003174:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800317c:	f7fd f8ae 	bl	80002dc <__adddf3>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4610      	mov	r0, r2
 8003186:	4619      	mov	r1, r3
 8003188:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800318c:	f7fd f8a6 	bl	80002dc <__adddf3>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4610      	mov	r0, r2
 8003196:	4619      	mov	r1, r3
 8003198:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800319c:	f7fd f89e 	bl	80002dc <__adddf3>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 80031a4:	4620      	mov	r0, r4
 80031a6:	4629      	mov	r1, r5
 80031a8:	f7fd fa4e 	bl	8000648 <__aeabi_dmul>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ba:	4610      	mov	r0, r2
 80031bc:	4619      	mov	r1, r3
 80031be:	f7fd fa0d 	bl	80005dc <__aeabi_ul2d>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	2002      	movs	r0, #2
 80031c8:	ec43 2b10 	vmov	d0, r2, r3
 80031cc:	f000 f894 	bl	80032f8 <pow_bmp3>
 80031d0:	ee10 3a10 	vmov	r3, s0
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fd f9df 	bl	8000598 <__aeabi_f2d>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 80031e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031e4:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 80031e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ea:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80031ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031f0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80031f4:	f7fd fa28 	bl	8000648 <__aeabi_dmul>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4620      	mov	r0, r4
 80031fe:	4629      	mov	r1, r5
 8003200:	f7fd f86c 	bl	80002dc <__adddf3>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = partial_data1 * partial_data2;
 800320c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003210:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003214:	f7fd fa18 	bl	8000648 <__aeabi_dmul>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003226:	4610      	mov	r0, r2
 8003228:	4619      	mov	r1, r3
 800322a:	f7fd f9d7 	bl	80005dc <__aeabi_ul2d>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	2003      	movs	r0, #3
 8003234:	ec43 2b10 	vmov	d0, r2, r3
 8003238:	f000 f85e 	bl	80032f8 <pow_bmp3>
 800323c:	ee10 3a10 	vmov	r3, s0
 8003240:	4618      	mov	r0, r3
 8003242:	f7fd f9a9 	bl	8000598 <__aeabi_f2d>
 8003246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003248:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800324c:	f7fd f9fc 	bl	8000648 <__aeabi_dmul>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003258:	f7fd f840 	bl	80002dc <__adddf3>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 8003264:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003268:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800326c:	f7fd f836 	bl	80002dc <__adddf3>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003278:	f7fd f830 	bl	80002dc <__adddf3>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (comp_press < BMP3_MIN_PRES_DOUBLE)
 8003284:	a318      	add	r3, pc, #96	; (adr r3, 80032e8 <compensate_pressure+0x2e0>)
 8003286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800328e:	f7fd fc4d 	bl	8000b2c <__aeabi_dcmplt>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d007      	beq.n	80032a8 <compensate_pressure+0x2a0>
    {
        comp_press = BMP3_MIN_PRES_DOUBLE;
 8003298:	a313      	add	r3, pc, #76	; (adr r3, 80032e8 <compensate_pressure+0x2e0>)
 800329a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MIN_PRES;
 80032a2:	2305      	movs	r3, #5
 80032a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    if (comp_press > BMP3_MAX_PRES_DOUBLE)
 80032a8:	a311      	add	r3, pc, #68	; (adr r3, 80032f0 <compensate_pressure+0x2e8>)
 80032aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80032b2:	f7fd fc59 	bl	8000b68 <__aeabi_dcmpgt>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d007      	beq.n	80032cc <compensate_pressure+0x2c4>
    {
        comp_press = BMP3_MAX_PRES_DOUBLE;
 80032bc:	a30c      	add	r3, pc, #48	; (adr r3, 80032f0 <compensate_pressure+0x2e8>)
 80032be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MAX_PRES;
 80032c6:	2306      	movs	r3, #6
 80032c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    (*pressure) = comp_press;
 80032cc:	68f9      	ldr	r1, [r7, #12]
 80032ce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032d2:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 80032d6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3758      	adds	r7, #88	; 0x58
 80032de:	46bd      	mov	sp, r7
 80032e0:	bdb0      	pop	{r4, r5, r7, pc}
 80032e2:	bf00      	nop
 80032e4:	f3af 8000 	nop.w
 80032e8:	00000000 	.word	0x00000000
 80032ec:	40dd4c00 	.word	0x40dd4c00
 80032f0:	00000000 	.word	0x00000000
 80032f4:	40fe8480 	.word	0x40fe8480

080032f8 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	ed87 0b02 	vstr	d0, [r7, #8]
 8003302:	4603      	mov	r3, r0
 8003304:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 8003306:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800330a:	617b      	str	r3, [r7, #20]

    while (power != 0)
 800330c:	e00e      	b.n	800332c <pow_bmp3+0x34>
    {
        pow_output = (float) base * pow_output;
 800330e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003312:	f7fd fc91 	bl	8000c38 <__aeabi_d2f>
 8003316:	ee07 0a10 	vmov	s14, r0
 800331a:	edd7 7a05 	vldr	s15, [r7, #20]
 800331e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003322:	edc7 7a05 	vstr	s15, [r7, #20]
        power--;
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	3b01      	subs	r3, #1
 800332a:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1ed      	bne.n	800330e <pow_bmp3+0x16>
    }

    return pow_output;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	ee07 3a90 	vmov	s15, r3
}
 8003338:	eeb0 0a67 	vmov.f32	s0, s15
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 8003342:	b480      	push	{r7}
 8003344:	b085      	sub	sp, #20
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 800334c:	2300      	movs	r3, #0
 800334e:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	4013      	ands	r3, r2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 800335a:	2301      	movs	r3, #1
 800335c:	73fb      	strb	r3, [r7, #15]
 800335e:	e001      	b.n	8003364 <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8003360:	2300      	movs	r3, #0
 8003362:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 8003364:	7bfb      	ldrb	r3, [r7, #15]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 8003372:	b480      	push	{r7}
 8003374:	b085      	sub	sp, #20
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00f      	beq.n	80033a0 <null_ptr_check+0x2e>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00b      	beq.n	80033a0 <null_ptr_check+0x2e>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d007      	beq.n	80033a0 <null_ptr_check+0x2e>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800339c:	2b00      	cmp	r3, #0
 800339e:	d102      	bne.n	80033a6 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 80033a0:	23ff      	movs	r3, #255	; 0xff
 80033a2:	73fb      	strb	r3, [r7, #15]
 80033a4:	e001      	b.n	80033aa <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80033aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <get_sensor_status>:
/*!
 * @brief This API gets the command ready, data ready for pressure and
 * temperature, power on reset status from the sensor.
 */
static int8_t get_sensor_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;

    reg_addr = BMP3_REG_SENS_STATUS;
 80033c4:	2303      	movs	r3, #3
 80033c6:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80033c8:	f107 010d 	add.w	r1, r7, #13
 80033cc:	7bb8      	ldrb	r0, [r7, #14]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f7fe fc3b 	bl	8001c4c <bmp3_get_regs>
 80033d6:	4603      	mov	r3, r0
 80033d8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80033da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d128      	bne.n	8003434 <get_sensor_status+0x7a>
    {
        status->sensor.cmd_rdy = BMP3_GET_BITS(reg_data, BMP3_STATUS_CMD_RDY);
 80033e2:	7b7b      	ldrb	r3, [r7, #13]
 80033e4:	111b      	asrs	r3, r3, #4
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	70da      	strb	r2, [r3, #3]
        status->sensor.drdy_press = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_PRESS);
 80033f2:	7b7b      	ldrb	r3, [r7, #13]
 80033f4:	115b      	asrs	r3, r3, #5
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	711a      	strb	r2, [r3, #4]
        status->sensor.drdy_temp = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_TEMP);
 8003402:	7b7b      	ldrb	r3, [r7, #13]
 8003404:	119b      	asrs	r3, r3, #6
 8003406:	b2db      	uxtb	r3, r3
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	b2da      	uxtb	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	715a      	strb	r2, [r3, #5]
        reg_addr = BMP3_REG_EVENT;
 8003412:	2310      	movs	r3, #16
 8003414:	73bb      	strb	r3, [r7, #14]
        rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8003416:	f107 010d 	add.w	r1, r7, #13
 800341a:	7bb8      	ldrb	r0, [r7, #14]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	2201      	movs	r2, #1
 8003420:	f7fe fc14 	bl	8001c4c <bmp3_get_regs>
 8003424:	4603      	mov	r3, r0
 8003426:	73fb      	strb	r3, [r7, #15]
        status->pwr_on_rst = reg_data & 0x01;
 8003428:	7b7b      	ldrb	r3, [r7, #13]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	b2da      	uxtb	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	725a      	strb	r2, [r3, #9]
    }

    return rslt;
 8003434:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <get_int_status>:
/*!
 * @brief This API gets the interrupt (fifo watermark, fifo full, data ready)
 * status from the sensor.
 */
static int8_t get_int_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_INT_STATUS, &reg_data, 1, dev);
 800344a:	f107 010e 	add.w	r1, r7, #14
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2201      	movs	r2, #1
 8003452:	2011      	movs	r0, #17
 8003454:	f7fe fbfa 	bl	8001c4c <bmp3_get_regs>
 8003458:	4603      	mov	r3, r0
 800345a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800345c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d115      	bne.n	8003490 <get_int_status+0x50>
    {
        status->intr.fifo_wm = BMP3_GET_BITS_POS_0(reg_data, BMP3_INT_STATUS_FWTM);
 8003464:	7bbb      	ldrb	r3, [r7, #14]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	b2da      	uxtb	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	701a      	strb	r2, [r3, #0]
        status->intr.fifo_full = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_FFULL);
 8003470:	7bbb      	ldrb	r3, [r7, #14]
 8003472:	105b      	asrs	r3, r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	b2da      	uxtb	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	705a      	strb	r2, [r3, #1]
        status->intr.drdy = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_DRDY);
 8003480:	7bbb      	ldrb	r3, [r7, #14]
 8003482:	10db      	asrs	r3, r3, #3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	b2da      	uxtb	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	709a      	strb	r2, [r3, #2]
    }

    return rslt;
 8003490:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <get_err_status>:
/*!
 * @brief This API gets the fatal, command and configuration error
 * from the sensor.
 */
static int8_t get_err_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_ERR, &reg_data, 1, dev);
 80034a6:	f107 010e 	add.w	r1, r7, #14
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2201      	movs	r2, #1
 80034ae:	2002      	movs	r0, #2
 80034b0:	f7fe fbcc 	bl	8001c4c <bmp3_get_regs>
 80034b4:	4603      	mov	r3, r0
 80034b6:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80034b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d115      	bne.n	80034ec <get_err_status+0x50>
    {
        status->err.cmd = BMP3_GET_BITS_POS_0(reg_data, BMP3_ERR_FATAL);
 80034c0:	7bbb      	ldrb	r3, [r7, #14]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	71da      	strb	r2, [r3, #7]
        status->err.conf = BMP3_GET_BITS(reg_data, BMP3_ERR_CMD);
 80034cc:	7bbb      	ldrb	r3, [r7, #14]
 80034ce:	105b      	asrs	r3, r3, #1
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	721a      	strb	r2, [r3, #8]
        status->err.fatal = BMP3_GET_BITS(reg_data, BMP3_ERR_CONF);
 80034dc:	7bbb      	ldrb	r3, [r7, #14]
 80034de:	109b      	asrs	r3, r3, #2
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	719a      	strb	r2, [r3, #6]
    }

    return rslt;
 80034ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <bmp3_interface_init>:
struct bmp3_dev dev;
struct bmp3_data data = { 0 };
struct bmp3_settings settings = { 0 };
struct bmp3_status status = { { 0 } };

BMP3_INTF_RET_TYPE bmp3_interface_init(struct bmp3_dev *bmp3, uint8_t intf){
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	70fb      	strb	r3, [r7, #3]
    int8_t rslt = BMP3_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	73fb      	strb	r3, [r7, #15]

    if(bmp3 != NULL){
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d015      	beq.n	800353a <bmp3_interface_init+0x42>

        /* Bus configuration : I2C */
        if (intf == BMP3_I2C_INTF){
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d10b      	bne.n	800352c <bmp3_interface_init+0x34>

            dev_addr = BMP3_ADDR_I2C_SEC;
 8003514:	4b0e      	ldr	r3, [pc, #56]	; (8003550 <bmp3_interface_init+0x58>)
 8003516:	2277      	movs	r2, #119	; 0x77
 8003518:	701a      	strb	r2, [r3, #0]
            bmp3->read = SensorAPI_I2Cx_Read;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a0d      	ldr	r2, [pc, #52]	; (8003554 <bmp3_interface_init+0x5c>)
 800351e:	60da      	str	r2, [r3, #12]
            bmp3->write = SensorAPI_I2Cx_Write;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a0d      	ldr	r2, [pc, #52]	; (8003558 <bmp3_interface_init+0x60>)
 8003524:	611a      	str	r2, [r3, #16]
            bmp3->intf = BMP3_I2C_INTF;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	721a      	strb	r2, [r3, #8]
        }

        bmp3->delay_us = bmp3_delay_us;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a0b      	ldr	r2, [pc, #44]	; (800355c <bmp3_interface_init+0x64>)
 8003530:	615a      	str	r2, [r3, #20]
        bmp3->intf_ptr = &dev_addr;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a06      	ldr	r2, [pc, #24]	; (8003550 <bmp3_interface_init+0x58>)
 8003536:	605a      	str	r2, [r3, #4]
 8003538:	e001      	b.n	800353e <bmp3_interface_init+0x46>
    }

    else{rslt = BMP3_E_NULL_PTR;}
 800353a:	23ff      	movs	r3, #255	; 0xff
 800353c:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800353e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	20000224 	.word	0x20000224
 8003554:	08003759 	.word	0x08003759
 8003558:	080037a1 	.word	0x080037a1
 800355c:	08003721 	.word	0x08003721

08003560 <BMP388_init>:

void BMP388_init() {
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
    
    rslt = bmp3_interface_init(&dev, BMP3_I2C_INTF);
 8003564:	2101      	movs	r1, #1
 8003566:	481f      	ldr	r0, [pc, #124]	; (80035e4 <BMP388_init+0x84>)
 8003568:	f7ff ffc6 	bl	80034f8 <bmp3_interface_init>
 800356c:	4603      	mov	r3, r0
 800356e:	461a      	mov	r2, r3
 8003570:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <BMP388_init+0x88>)
 8003572:	701a      	strb	r2, [r3, #0]
    rslt = bmp3_init(&dev);
 8003574:	481b      	ldr	r0, [pc, #108]	; (80035e4 <BMP388_init+0x84>)
 8003576:	f7fe fb19 	bl	8001bac <bmp3_init>
 800357a:	4603      	mov	r3, r0
 800357c:	461a      	mov	r2, r3
 800357e:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <BMP388_init+0x88>)
 8003580:	701a      	strb	r2, [r3, #0]

    settings.int_settings.drdy_en = BMP3_ENABLE;
 8003582:	4b1a      	ldr	r3, [pc, #104]	; (80035ec <BMP388_init+0x8c>)
 8003584:	2201      	movs	r2, #1
 8003586:	729a      	strb	r2, [r3, #10]
    settings.press_en = BMP3_ENABLE;
 8003588:	4b18      	ldr	r3, [pc, #96]	; (80035ec <BMP388_init+0x8c>)
 800358a:	2201      	movs	r2, #1
 800358c:	705a      	strb	r2, [r3, #1]
    settings.temp_en = BMP3_ENABLE;
 800358e:	4b17      	ldr	r3, [pc, #92]	; (80035ec <BMP388_init+0x8c>)
 8003590:	2201      	movs	r2, #1
 8003592:	709a      	strb	r2, [r3, #2]

    settings.odr_filter.press_os = BMP3_OVERSAMPLING_8X;
 8003594:	4b15      	ldr	r3, [pc, #84]	; (80035ec <BMP388_init+0x8c>)
 8003596:	2203      	movs	r2, #3
 8003598:	70da      	strb	r2, [r3, #3]
    settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 800359a:	4b14      	ldr	r3, [pc, #80]	; (80035ec <BMP388_init+0x8c>)
 800359c:	2200      	movs	r2, #0
 800359e:	711a      	strb	r2, [r3, #4]
    settings.odr_filter.iir_filter = BMP3_IIR_FILTER_COEFF_3;
 80035a0:	4b12      	ldr	r3, [pc, #72]	; (80035ec <BMP388_init+0x8c>)
 80035a2:	2202      	movs	r2, #2
 80035a4:	715a      	strb	r2, [r3, #5]
    settings.odr_filter.odr = BMP3_ODR_50_HZ;
 80035a6:	4b11      	ldr	r3, [pc, #68]	; (80035ec <BMP388_init+0x8c>)
 80035a8:	2202      	movs	r2, #2
 80035aa:	719a      	strb	r2, [r3, #6]

    settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR |
 80035ac:	4b10      	ldr	r3, [pc, #64]	; (80035f0 <BMP388_init+0x90>)
 80035ae:	22be      	movs	r2, #190	; 0xbe
 80035b0:	701a      	strb	r2, [r3, #0]
    BMP3_SEL_DRDY_EN;

    rslt = bmp3_set_sensor_settings(settings_sel, &settings, &dev);
 80035b2:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <BMP388_init+0x90>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	4a0b      	ldr	r2, [pc, #44]	; (80035e4 <BMP388_init+0x84>)
 80035b8:	490c      	ldr	r1, [pc, #48]	; (80035ec <BMP388_init+0x8c>)
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe fc5f 	bl	8001e7e <bmp3_set_sensor_settings>
 80035c0:	4603      	mov	r3, r0
 80035c2:	461a      	mov	r2, r3
 80035c4:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <BMP388_init+0x88>)
 80035c6:	701a      	strb	r2, [r3, #0]

    settings.op_mode = BMP3_MODE_NORMAL;
 80035c8:	4b08      	ldr	r3, [pc, #32]	; (80035ec <BMP388_init+0x8c>)
 80035ca:	2203      	movs	r2, #3
 80035cc:	701a      	strb	r2, [r3, #0]

    rslt = bmp3_set_op_mode(&settings, &dev);
 80035ce:	4905      	ldr	r1, [pc, #20]	; (80035e4 <BMP388_init+0x84>)
 80035d0:	4806      	ldr	r0, [pc, #24]	; (80035ec <BMP388_init+0x8c>)
 80035d2:	f7fe fd17 	bl	8002004 <bmp3_set_op_mode>
 80035d6:	4603      	mov	r3, r0
 80035d8:	461a      	mov	r2, r3
 80035da:	4b03      	ldr	r3, [pc, #12]	; (80035e8 <BMP388_init+0x88>)
 80035dc:	701a      	strb	r2, [r3, #0]
}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20001dd0 	.word	0x20001dd0
 80035e8:	20000225 	.word	0x20000225
 80035ec:	20000238 	.word	0x20000238
 80035f0:	20001e80 	.word	0x20001e80
 80035f4:	00000000 	.word	0x00000000

080035f8 <BMP388_Read>:

void BMP388_Read(BMP388_t *DataStruct){
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
    rslt = bmp3_get_status(&status, &dev);
 8003600:	4941      	ldr	r1, [pc, #260]	; (8003708 <BMP388_Read+0x110>)
 8003602:	4842      	ldr	r0, [pc, #264]	; (800370c <BMP388_Read+0x114>)
 8003604:	f7fe fc89 	bl	8001f1a <bmp3_get_status>
 8003608:	4603      	mov	r3, r0
 800360a:	461a      	mov	r2, r3
 800360c:	4b40      	ldr	r3, [pc, #256]	; (8003710 <BMP388_Read+0x118>)
 800360e:	701a      	strb	r2, [r3, #0]

    /* Read temperature and pressure data iteratively based on data ready interrupt */
    //printf("Check %d\r\n", rslt);
    
    if ((rslt == BMP3_OK) && (status.intr.drdy == BMP3_ENABLE)){
 8003610:	4b3f      	ldr	r3, [pc, #252]	; (8003710 <BMP388_Read+0x118>)
 8003612:	f993 3000 	ldrsb.w	r3, [r3]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d163      	bne.n	80036e2 <BMP388_Read+0xea>
 800361a:	4b3c      	ldr	r3, [pc, #240]	; (800370c <BMP388_Read+0x114>)
 800361c:	789b      	ldrb	r3, [r3, #2]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d15f      	bne.n	80036e2 <BMP388_Read+0xea>
        * First parameter indicates the type of data to be read
        * BMP3_PRESS_TEMP : To read pressure and temperature data
        * BMP3_TEMP    : To read only temperature data
        * BMP3_PRESS       : To read only pressure data
        */
        rslt = bmp3_get_sensor_data(BMP3_PRESS_TEMP, &data, &dev);
 8003622:	4a39      	ldr	r2, [pc, #228]	; (8003708 <BMP388_Read+0x110>)
 8003624:	493b      	ldr	r1, [pc, #236]	; (8003714 <BMP388_Read+0x11c>)
 8003626:	2003      	movs	r0, #3
 8003628:	f7fe fd60 	bl	80020ec <bmp3_get_sensor_data>
 800362c:	4603      	mov	r3, r0
 800362e:	461a      	mov	r2, r3
 8003630:	4b37      	ldr	r3, [pc, #220]	; (8003710 <BMP388_Read+0x118>)
 8003632:	701a      	strb	r2, [r3, #0]

        /* NOTE : Read status register again to clear data ready interrupt status */
        rslt = bmp3_get_status(&status, &dev);
 8003634:	4934      	ldr	r1, [pc, #208]	; (8003708 <BMP388_Read+0x110>)
 8003636:	4835      	ldr	r0, [pc, #212]	; (800370c <BMP388_Read+0x114>)
 8003638:	f7fe fc6f 	bl	8001f1a <bmp3_get_status>
 800363c:	4603      	mov	r3, r0
 800363e:	461a      	mov	r2, r3
 8003640:	4b33      	ldr	r3, [pc, #204]	; (8003710 <BMP388_Read+0x118>)
 8003642:	701a      	strb	r2, [r3, #0]

        // Get pressure and temperature
        float pressure = data.pressure;
 8003644:	4b33      	ldr	r3, [pc, #204]	; (8003714 <BMP388_Read+0x11c>)
 8003646:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800364a:	4610      	mov	r0, r2
 800364c:	4619      	mov	r1, r3
 800364e:	f7fd faf3 	bl	8000c38 <__aeabi_d2f>
 8003652:	4603      	mov	r3, r0
 8003654:	617b      	str	r3, [r7, #20]
        float temperature = data.temperature;
 8003656:	4b2f      	ldr	r3, [pc, #188]	; (8003714 <BMP388_Read+0x11c>)
 8003658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365c:	4610      	mov	r0, r2
 800365e:	4619      	mov	r1, r3
 8003660:	f7fd faea 	bl	8000c38 <__aeabi_d2f>
 8003664:	4603      	mov	r3, r0
 8003666:	613b      	str	r3, [r7, #16]

        // Calculate altitude
        float atmospheric = pressure / 100.0f;
 8003668:	ed97 7a05 	vldr	s14, [r7, #20]
 800366c:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8003718 <BMP388_Read+0x120>
 8003670:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003674:	edc7 7a03 	vstr	s15, [r7, #12]
        float altitude = 44330.0 * (1.0 - pow(atmospheric / SEALEVELPRESSURE_HPA, 0.1903));
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f7fc ff8d 	bl	8000598 <__aeabi_f2d>
 800367e:	a31c      	add	r3, pc, #112	; (adr r3, 80036f0 <BMP388_Read+0xf8>)
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	f7fd f90a 	bl	800089c <__aeabi_ddiv>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	ec43 2b17 	vmov	d7, r2, r3
 8003690:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80036f8 <BMP388_Read+0x100>
 8003694:	eeb0 0a47 	vmov.f32	s0, s14
 8003698:	eef0 0a67 	vmov.f32	s1, s15
 800369c:	f010 fbf8 	bl	8013e90 <pow>
 80036a0:	ec53 2b10 	vmov	r2, r3, d0
 80036a4:	f04f 0000 	mov.w	r0, #0
 80036a8:	491c      	ldr	r1, [pc, #112]	; (800371c <BMP388_Read+0x124>)
 80036aa:	f7fc fe15 	bl	80002d8 <__aeabi_dsub>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4610      	mov	r0, r2
 80036b4:	4619      	mov	r1, r3
 80036b6:	a312      	add	r3, pc, #72	; (adr r3, 8003700 <BMP388_Read+0x108>)
 80036b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036bc:	f7fc ffc4 	bl	8000648 <__aeabi_dmul>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4610      	mov	r0, r2
 80036c6:	4619      	mov	r1, r3
 80036c8:	f7fd fab6 	bl	8000c38 <__aeabi_d2f>
 80036cc:	4603      	mov	r3, r0
 80036ce:	60bb      	str	r3, [r7, #8]

        DataStruct->Pressure = pressure;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	601a      	str	r2, [r3, #0]
        DataStruct->Temperature = temperature;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	605a      	str	r2, [r3, #4]
        DataStruct->Altitude = altitude;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	609a      	str	r2, [r3, #8]

    }
}
 80036e2:	bf00      	nop
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	f3af 8000 	nop.w
 80036f0:	00000000 	.word	0x00000000
 80036f4:	408faa00 	.word	0x408faa00
 80036f8:	1a36e2eb 	.word	0x1a36e2eb
 80036fc:	3fc85bc0 	.word	0x3fc85bc0
 8003700:	00000000 	.word	0x00000000
 8003704:	40e5a540 	.word	0x40e5a540
 8003708:	20001dd0 	.word	0x20001dd0
 800370c:	20000248 	.word	0x20000248
 8003710:	20000225 	.word	0x20000225
 8003714:	20000228 	.word	0x20000228
 8003718:	42c80000 	.word	0x42c80000
 800371c:	3ff00000 	.word	0x3ff00000

08003720 <bmp3_delay_us>:
		}
	}
}

void bmp3_delay_us(uint32_t period, void *intf_ptr)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
	uint32_t i;

	while(period--)
 800372a:	e008      	b.n	800373e <bmp3_delay_us+0x1e>
	{
		for(i = 0; i < 84; i++)
 800372c:	2300      	movs	r3, #0
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	e002      	b.n	8003738 <bmp3_delay_us+0x18>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	3301      	adds	r3, #1
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b53      	cmp	r3, #83	; 0x53
 800373c:	d9f9      	bls.n	8003732 <bmp3_delay_us+0x12>
	while(period--)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	1e5a      	subs	r2, r3, #1
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f1      	bne.n	800372c <bmp3_delay_us+0xc>
		{
			;
		}
	}
}
 8003748:	bf00      	nop
 800374a:	bf00      	nop
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <SensorAPI_I2Cx_Read>:
* Input          : I2C1 or I2C2, slave_address7, subaddress, Write Number
* Output         : None
* Return         : number of bytes transmitted
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t subaddress, uint8_t *pBuffer, uint16_t ReadNumbr, void *intf_ptr)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af02      	add	r7, sp, #8
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607b      	str	r3, [r7, #4]
 8003762:	4603      	mov	r3, r0
 8003764:	73fb      	strb	r3, [r7, #15]
 8003766:	4613      	mov	r3, r2
 8003768:	81bb      	strh	r3, [r7, #12]
	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, ADDR, &subaddress, 1, BUS_TIMEOUT);
 800376a:	f107 020f 	add.w	r2, r7, #15
 800376e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	2301      	movs	r3, #1
 8003776:	21ec      	movs	r1, #236	; 0xec
 8003778:	4808      	ldr	r0, [pc, #32]	; (800379c <SensorAPI_I2Cx_Read+0x44>)
 800377a:	f004 fbd3 	bl	8007f24 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, ADDR, pBuffer, ReadNumbr, BUS_TIMEOUT);
 800377e:	89bb      	ldrh	r3, [r7, #12]
 8003780:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003784:	9200      	str	r2, [sp, #0]
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	21ec      	movs	r1, #236	; 0xec
 800378a:	4804      	ldr	r0, [pc, #16]	; (800379c <SensorAPI_I2Cx_Read+0x44>)
 800378c:	f004 fcbe 	bl	800810c <HAL_I2C_Master_Receive>
	return 0;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20002884 	.word	0x20002884

080037a0 <SensorAPI_I2Cx_Write>:

int8_t SensorAPI_I2Cx_Write(uint8_t subaddress, uint8_t *pBuffer, uint16_t WriteNumbr, void *intf_ptr)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607b      	str	r3, [r7, #4]
 80037aa:	4603      	mov	r3, r0
 80037ac:	73fb      	strb	r3, [r7, #15]
 80037ae:	4613      	mov	r3, r2
 80037b0:	81bb      	strh	r3, [r7, #12]
	GTXBuffer[0] = subaddress;
 80037b2:	4a0c      	ldr	r2, [pc, #48]	; (80037e4 <SensorAPI_I2Cx_Write+0x44>)
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
 80037b6:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], pBuffer, WriteNumbr);
 80037b8:	89bb      	ldrh	r3, [r7, #12]
 80037ba:	461a      	mov	r2, r3
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	480a      	ldr	r0, [pc, #40]	; (80037e8 <SensorAPI_I2Cx_Write+0x48>)
 80037c0:	f00b ff4f 	bl	800f662 <memcpy>

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, ADDR, GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 80037c4:	89bb      	ldrh	r3, [r7, #12]
 80037c6:	3301      	adds	r3, #1
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037ce:	9200      	str	r2, [sp, #0]
 80037d0:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <SensorAPI_I2Cx_Write+0x44>)
 80037d2:	21ec      	movs	r1, #236	; 0xec
 80037d4:	4805      	ldr	r0, [pc, #20]	; (80037ec <SensorAPI_I2Cx_Write+0x4c>)
 80037d6:	f004 fba5 	bl	8007f24 <HAL_I2C_Master_Transmit>
	return 0;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20002684 	.word	0x20002684
 80037e8:	20002685 	.word	0x20002685
 80037ec:	20002884 	.word	0x20002884

080037f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80037f6:	4b16      	ldr	r3, [pc, #88]	; (8003850 <MX_DMA_Init+0x60>)
 80037f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fa:	4a15      	ldr	r2, [pc, #84]	; (8003850 <MX_DMA_Init+0x60>)
 80037fc:	f043 0304 	orr.w	r3, r3, #4
 8003800:	6493      	str	r3, [r2, #72]	; 0x48
 8003802:	4b13      	ldr	r3, [pc, #76]	; (8003850 <MX_DMA_Init+0x60>)
 8003804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	607b      	str	r3, [r7, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800380e:	4b10      	ldr	r3, [pc, #64]	; (8003850 <MX_DMA_Init+0x60>)
 8003810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003812:	4a0f      	ldr	r2, [pc, #60]	; (8003850 <MX_DMA_Init+0x60>)
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	6493      	str	r3, [r2, #72]	; 0x48
 800381a:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <MX_DMA_Init+0x60>)
 800381c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8003826:	2200      	movs	r2, #0
 8003828:	2105      	movs	r1, #5
 800382a:	200b      	movs	r0, #11
 800382c:	f003 fdf6 	bl	800741c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003830:	200b      	movs	r0, #11
 8003832:	f003 fe0d 	bl	8007450 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8003836:	2200      	movs	r2, #0
 8003838:	2105      	movs	r1, #5
 800383a:	200c      	movs	r0, #12
 800383c:	f003 fdee 	bl	800741c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003840:	200c      	movs	r0, #12
 8003842:	f003 fe05 	bl	8007450 <HAL_NVIC_EnableIRQ>

}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40021000 	.word	0x40021000

08003854 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b08a      	sub	sp, #40	; 0x28
 8003858:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800385a:	f107 0314 	add.w	r3, r7, #20
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	605a      	str	r2, [r3, #4]
 8003864:	609a      	str	r2, [r3, #8]
 8003866:	60da      	str	r2, [r3, #12]
 8003868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800386a:	4b2b      	ldr	r3, [pc, #172]	; (8003918 <MX_GPIO_Init+0xc4>)
 800386c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386e:	4a2a      	ldr	r2, [pc, #168]	; (8003918 <MX_GPIO_Init+0xc4>)
 8003870:	f043 0304 	orr.w	r3, r3, #4
 8003874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003876:	4b28      	ldr	r3, [pc, #160]	; (8003918 <MX_GPIO_Init+0xc4>)
 8003878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003882:	4b25      	ldr	r3, [pc, #148]	; (8003918 <MX_GPIO_Init+0xc4>)
 8003884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003886:	4a24      	ldr	r2, [pc, #144]	; (8003918 <MX_GPIO_Init+0xc4>)
 8003888:	f043 0320 	orr.w	r3, r3, #32
 800388c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800388e:	4b22      	ldr	r3, [pc, #136]	; (8003918 <MX_GPIO_Init+0xc4>)
 8003890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800389a:	4b1f      	ldr	r3, [pc, #124]	; (8003918 <MX_GPIO_Init+0xc4>)
 800389c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800389e:	4a1e      	ldr	r2, [pc, #120]	; (8003918 <MX_GPIO_Init+0xc4>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038a6:	4b1c      	ldr	r3, [pc, #112]	; (8003918 <MX_GPIO_Init+0xc4>)
 80038a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038b2:	4b19      	ldr	r3, [pc, #100]	; (8003918 <MX_GPIO_Init+0xc4>)
 80038b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b6:	4a18      	ldr	r2, [pc, #96]	; (8003918 <MX_GPIO_Init+0xc4>)
 80038b8:	f043 0302 	orr.w	r3, r3, #2
 80038bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038be:	4b16      	ldr	r3, [pc, #88]	; (8003918 <MX_GPIO_Init+0xc4>)
 80038c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	607b      	str	r3, [r7, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80038ca:	2200      	movs	r2, #0
 80038cc:	2120      	movs	r1, #32
 80038ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038d2:	f004 fa7f 	bl	8007dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80038d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80038dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80038e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80038e6:	f107 0314 	add.w	r3, r7, #20
 80038ea:	4619      	mov	r1, r3
 80038ec:	480b      	ldr	r0, [pc, #44]	; (800391c <MX_GPIO_Init+0xc8>)
 80038ee:	f004 f8ef 	bl	8007ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80038f2:	2320      	movs	r3, #32
 80038f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038f6:	2301      	movs	r3, #1
 80038f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fe:	2300      	movs	r3, #0
 8003900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003902:	f107 0314 	add.w	r3, r7, #20
 8003906:	4619      	mov	r1, r3
 8003908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800390c:	f004 f8e0 	bl	8007ad0 <HAL_GPIO_Init>

}
 8003910:	bf00      	nop
 8003912:	3728      	adds	r7, #40	; 0x28
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40021000 	.word	0x40021000
 800391c:	48000800 	.word	0x48000800

08003920 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003924:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <MX_I2C2_Init+0x74>)
 8003926:	4a1c      	ldr	r2, [pc, #112]	; (8003998 <MX_I2C2_Init+0x78>)
 8003928:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10802D9B;
 800392a:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <MX_I2C2_Init+0x74>)
 800392c:	4a1b      	ldr	r2, [pc, #108]	; (800399c <MX_I2C2_Init+0x7c>)
 800392e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003930:	4b18      	ldr	r3, [pc, #96]	; (8003994 <MX_I2C2_Init+0x74>)
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003936:	4b17      	ldr	r3, [pc, #92]	; (8003994 <MX_I2C2_Init+0x74>)
 8003938:	2201      	movs	r2, #1
 800393a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800393c:	4b15      	ldr	r3, [pc, #84]	; (8003994 <MX_I2C2_Init+0x74>)
 800393e:	2200      	movs	r2, #0
 8003940:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003942:	4b14      	ldr	r3, [pc, #80]	; (8003994 <MX_I2C2_Init+0x74>)
 8003944:	2200      	movs	r2, #0
 8003946:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003948:	4b12      	ldr	r3, [pc, #72]	; (8003994 <MX_I2C2_Init+0x74>)
 800394a:	2200      	movs	r2, #0
 800394c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800394e:	4b11      	ldr	r3, [pc, #68]	; (8003994 <MX_I2C2_Init+0x74>)
 8003950:	2200      	movs	r2, #0
 8003952:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003954:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <MX_I2C2_Init+0x74>)
 8003956:	2200      	movs	r2, #0
 8003958:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800395a:	480e      	ldr	r0, [pc, #56]	; (8003994 <MX_I2C2_Init+0x74>)
 800395c:	f004 fa52 	bl	8007e04 <HAL_I2C_Init>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003966:	f000 f92b 	bl	8003bc0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800396a:	2100      	movs	r1, #0
 800396c:	4809      	ldr	r0, [pc, #36]	; (8003994 <MX_I2C2_Init+0x74>)
 800396e:	f005 fa11 	bl	8008d94 <HAL_I2CEx_ConfigAnalogFilter>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003978:	f000 f922 	bl	8003bc0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800397c:	2100      	movs	r1, #0
 800397e:	4805      	ldr	r0, [pc, #20]	; (8003994 <MX_I2C2_Init+0x74>)
 8003980:	f005 fa53 	bl	8008e2a <HAL_I2CEx_ConfigDigitalFilter>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800398a:	f000 f919 	bl	8003bc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20002884 	.word	0x20002884
 8003998:	40005800 	.word	0x40005800
 800399c:	10802d9b 	.word	0x10802d9b

080039a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b09a      	sub	sp, #104	; 0x68
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	605a      	str	r2, [r3, #4]
 80039b2:	609a      	str	r2, [r3, #8]
 80039b4:	60da      	str	r2, [r3, #12]
 80039b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039b8:	f107 0310 	add.w	r3, r7, #16
 80039bc:	2244      	movs	r2, #68	; 0x44
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f00b fe5c 	bl	800f67e <memset>
  if(i2cHandle->Instance==I2C2)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a1f      	ldr	r2, [pc, #124]	; (8003a48 <HAL_I2C_MspInit+0xa8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d137      	bne.n	8003a40 <HAL_I2C_MspInit+0xa0>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80039d0:	2380      	movs	r3, #128	; 0x80
 80039d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80039d4:	2300      	movs	r3, #0
 80039d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039d8:	f107 0310 	add.w	r3, r7, #16
 80039dc:	4618      	mov	r0, r3
 80039de:	f006 f88b 	bl	8009af8 <HAL_RCCEx_PeriphCLKConfig>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80039e8:	f000 f8ea 	bl	8003bc0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ec:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <HAL_I2C_MspInit+0xac>)
 80039ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f0:	4a16      	ldr	r2, [pc, #88]	; (8003a4c <HAL_I2C_MspInit+0xac>)
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039f8:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <HAL_I2C_MspInit+0xac>)
 80039fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a08:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a0a:	2312      	movs	r3, #18
 8003a0c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a12:	2300      	movs	r3, #0
 8003a14:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003a16:	2304      	movs	r3, #4
 8003a18:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a1e:	4619      	mov	r1, r3
 8003a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a24:	f004 f854 	bl	8007ad0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003a28:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <HAL_I2C_MspInit+0xac>)
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2c:	4a07      	ldr	r2, [pc, #28]	; (8003a4c <HAL_I2C_MspInit+0xac>)
 8003a2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a32:	6593      	str	r3, [r2, #88]	; 0x58
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_I2C_MspInit+0xac>)
 8003a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003a40:	bf00      	nop
 8003a42:	3768      	adds	r7, #104	; 0x68
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40005800 	.word	0x40005800
 8003a4c:	40021000 	.word	0x40021000

08003a50 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	f04f 33ff 	mov.w	r3, #4294967295
 8003a64:	68b9      	ldr	r1, [r7, #8]
 8003a66:	4804      	ldr	r0, [pc, #16]	; (8003a78 <_write+0x28>)
 8003a68:	f006 fdd0 	bl	800a60c <HAL_UART_Transmit>
	return len;
 8003a6c:	687b      	ldr	r3, [r7, #4]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	2000299c 	.word	0x2000299c

08003a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a80:	f003 fbbb 	bl	80071fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a84:	f000 f842 	bl	8003b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a88:	f7ff fee4 	bl	8003854 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8003a8c:	f003 f9fc 	bl	8006e88 <MX_LPUART1_UART_Init>
  MX_DMA_Init();
 8003a90:	f7ff feae 	bl	80037f0 <MX_DMA_Init>
  MX_I2C2_Init();
 8003a94:	f7ff ff44 	bl	8003920 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8003a98:	f003 fa40 	bl	8006f1c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  //init BMP388
  BMP388_init();
 8003a9c:	f7ff fd60 	bl	8003560 <BMP388_init>
  printf("BMP388 Init OK \r\n");
 8003aa0:	4814      	ldr	r0, [pc, #80]	; (8003af4 <main+0x78>)
 8003aa2:	f00c fd37 	bl	8010514 <puts>

  //init MPU9255
  while (MPU9255_Init(&hi2c2) == 1);
 8003aa6:	bf00      	nop
 8003aa8:	4813      	ldr	r0, [pc, #76]	; (8003af8 <main+0x7c>)
 8003aaa:	f000 f88f 	bl	8003bcc <MPU9255_Init>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d0f9      	beq.n	8003aa8 <main+0x2c>
  printf("MPU9250 Init OK \r\n");
 8003ab4:	4811      	ldr	r0, [pc, #68]	; (8003afc <main+0x80>)
 8003ab6:	f00c fd2d 	bl	8010514 <puts>

  //init GNSS
  GNSS_Init(&GNSS_Handle, &huart1);
 8003aba:	4911      	ldr	r1, [pc, #68]	; (8003b00 <main+0x84>)
 8003abc:	4811      	ldr	r0, [pc, #68]	; (8003b04 <main+0x88>)
 8003abe:	f7fd fabd 	bl	800103c <GNSS_Init>
  HAL_Delay(1000);
 8003ac2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ac6:	f003 fbcf 	bl	8007268 <HAL_Delay>
  GNSS_LoadConfig(&GNSS_Handle);
 8003aca:	480e      	ldr	r0, [pc, #56]	; (8003b04 <main+0x88>)
 8003acc:	f7fd fedc 	bl	8001888 <GNSS_LoadConfig>
  GNSS_SetMode(&GNSS_Handle, Stationary);
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	480c      	ldr	r0, [pc, #48]	; (8003b04 <main+0x88>)
 8003ad4:	f7fd fbd2 	bl	800127c <GNSS_SetMode>
  printf("GNSS Init OK \r\n");
 8003ad8:	480b      	ldr	r0, [pc, #44]	; (8003b08 <main+0x8c>)
 8003ada:	f00c fd1b 	bl	8010514 <puts>
  HAL_Delay(250);
 8003ade:	20fa      	movs	r0, #250	; 0xfa
 8003ae0:	f003 fbc2 	bl	8007268 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003ae4:	f008 ff1e 	bl	800c924 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003ae8:	f7fd fefa 	bl	80018e0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003aec:	f008 ff3e 	bl	800c96c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003af0:	e7fe      	b.n	8003af0 <main+0x74>
 8003af2:	bf00      	nop
 8003af4:	080153f0 	.word	0x080153f0
 8003af8:	20002884 	.word	0x20002884
 8003afc:	08015404 	.word	0x08015404
 8003b00:	20002aec 	.word	0x20002aec
 8003b04:	20001c84 	.word	0x20001c84
 8003b08:	08015418 	.word	0x08015418

08003b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b094      	sub	sp, #80	; 0x50
 8003b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b12:	f107 0318 	add.w	r3, r7, #24
 8003b16:	2238      	movs	r2, #56	; 0x38
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f00b fdaf 	bl	800f67e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b20:	1d3b      	adds	r3, r7, #4
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	605a      	str	r2, [r3, #4]
 8003b28:	609a      	str	r2, [r3, #8]
 8003b2a:	60da      	str	r2, [r3, #12]
 8003b2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003b2e:	2000      	movs	r0, #0
 8003b30:	f005 f9c8 	bl	8008ec4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003b34:	2302      	movs	r3, #2
 8003b36:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b3e:	2340      	movs	r3, #64	; 0x40
 8003b40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b42:	2302      	movs	r3, #2
 8003b44:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b46:	2302      	movs	r3, #2
 8003b48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003b4a:	2304      	movs	r3, #4
 8003b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003b4e:	2355      	movs	r3, #85	; 0x55
 8003b50:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b52:	2302      	movs	r3, #2
 8003b54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003b56:	2302      	movs	r3, #2
 8003b58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b5e:	f107 0318 	add.w	r3, r7, #24
 8003b62:	4618      	mov	r0, r3
 8003b64:	f005 fa62 	bl	800902c <HAL_RCC_OscConfig>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003b6e:	f000 f827 	bl	8003bc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b72:	230f      	movs	r3, #15
 8003b74:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b76:	2303      	movs	r3, #3
 8003b78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003b86:	1d3b      	adds	r3, r7, #4
 8003b88:	2104      	movs	r1, #4
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f005 fd66 	bl	800965c <HAL_RCC_ClockConfig>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003b96:	f000 f813 	bl	8003bc0 <Error_Handler>
  }
}
 8003b9a:	bf00      	nop
 8003b9c:	3750      	adds	r7, #80	; 0x50
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb2:	d101      	bne.n	8003bb8 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003bb4:	f003 fb3a 	bl	800722c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003bb8:	bf00      	nop
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bc4:	b672      	cpsid	i
}
 8003bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bc8:	e7fe      	b.n	8003bc8 <Error_Handler+0x8>
	...

08003bcc <MPU9255_Init>:

//===================================================================================================================
//====== MAIN INIT FUNCTION
//===================================================================================================================

uint8_t MPU9255_Init(I2C_HandleTypeDef *I2Cx){
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af04      	add	r7, sp, #16
 8003bd2:	6078      	str	r0, [r7, #4]
	//pre-def. vars
	uint8_t readData;
	uint8_t writeData;

	//read MPU9255 WHOAMI
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, WHO_AM_I_MPU9250, 1, &readData, 1, i2c_timeout);
 8003bd4:	2364      	movs	r3, #100	; 0x64
 8003bd6:	9302      	str	r3, [sp, #8]
 8003bd8:	2301      	movs	r3, #1
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	f107 030f 	add.w	r3, r7, #15
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	2301      	movs	r3, #1
 8003be4:	2275      	movs	r2, #117	; 0x75
 8003be6:	21d0      	movs	r1, #208	; 0xd0
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f004 fc99 	bl	8008520 <HAL_I2C_Mem_Read>

	if (SerialDebugA) {printf("MPU -WHO AM I- is: (Must return 113) %d\r\n", readData);}

	if (readData == 113) {
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	2b71      	cmp	r3, #113	; 0x71
 8003bf2:	d13e      	bne.n	8003c72 <MPU9255_Init+0xa6>

		//Start by performing self test and reporting values
		MPU9250SelfTest(I2Cx, SelfTest);
 8003bf4:	4921      	ldr	r1, [pc, #132]	; (8003c7c <MPU9255_Init+0xb0>)
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f001 fc32 	bl	8005460 <MPU9250SelfTest>

		//Calibrate gyro and accelerometers, load biases in bias registers
		calibrateMPU9250(I2Cx, gyroBias, accelBias);
 8003bfc:	4a20      	ldr	r2, [pc, #128]	; (8003c80 <MPU9255_Init+0xb4>)
 8003bfe:	4921      	ldr	r1, [pc, #132]	; (8003c84 <MPU9255_Init+0xb8>)
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f001 f805 	bl	8004c10 <calibrateMPU9250>
		HAL_Delay(1000);
 8003c06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c0a:	f003 fb2d 	bl	8007268 <HAL_Delay>

		//init Gyro and Accelerometer
		initMPU9250(I2Cx);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 ff1c 	bl	8004a4c <initMPU9250>

		//enable Mag bypass
		writeData = 0x22;
 8003c14:	2322      	movs	r3, #34	; 0x22
 8003c16:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_PIN_CFG, 1, &writeData, 1, i2c_timeout);
 8003c18:	2364      	movs	r3, #100	; 0x64
 8003c1a:	9302      	str	r3, [sp, #8]
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	9301      	str	r3, [sp, #4]
 8003c20:	f107 030e 	add.w	r3, r7, #14
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	2301      	movs	r3, #1
 8003c28:	2237      	movs	r2, #55	; 0x37
 8003c2a:	21d0      	movs	r1, #208	; 0xd0
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f004 fb63 	bl	80082f8 <HAL_I2C_Mem_Write>

		//Read the WHO_AM_I register of the magnetometer
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_WHO_AM_I, 1, &readData, 1, i2c_timeout);// Read WHO_AM_I register for AK8963
 8003c32:	2364      	movs	r3, #100	; 0x64
 8003c34:	9302      	str	r3, [sp, #8]
 8003c36:	2301      	movs	r3, #1
 8003c38:	9301      	str	r3, [sp, #4]
 8003c3a:	f107 030f 	add.w	r3, r7, #15
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	2301      	movs	r3, #1
 8003c42:	2200      	movs	r2, #0
 8003c44:	2118      	movs	r1, #24
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f004 fc6a 	bl	8008520 <HAL_I2C_Mem_Read>
		if (SerialDebugA) {printf("MAG -WHO AM I- is: (Must return 72) %d\r\n", readData);}
		HAL_Delay(1000);
 8003c4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c50:	f003 fb0a 	bl	8007268 <HAL_Delay>

		//Get magnetometer calibration from AK8963 ROM
		initAK8963(I2Cx, magCalibration);  // Initialize device for active mode read of magnetometer
 8003c54:	490c      	ldr	r1, [pc, #48]	; (8003c88 <MPU9255_Init+0xbc>)
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fcb4 	bl	80045c4 <initAK8963>

		calibrateMag(I2Cx, magBias, magScale);
 8003c5c:	4a0b      	ldr	r2, [pc, #44]	; (8003c8c <MPU9255_Init+0xc0>)
 8003c5e:	490c      	ldr	r1, [pc, #48]	; (8003c90 <MPU9255_Init+0xc4>)
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 fd85 	bl	8004770 <calibrateMag>

		HAL_Delay(1000);
 8003c66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c6a:	f003 fafd 	bl	8007268 <HAL_Delay>
		return 0;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	e000      	b.n	8003c74 <MPU9255_Init+0xa8>
	}
	return 1; // Loop forever if communication doesn't happen
 8003c72:	2301      	movs	r3, #1
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	200028dc 	.word	0x200028dc
 8003c80:	2000026c 	.word	0x2000026c
 8003c84:	20000260 	.word	0x20000260
 8003c88:	20000254 	.word	0x20000254
 8003c8c:	20000284 	.word	0x20000284
 8003c90:	20000278 	.word	0x20000278
 8003c94:	00000000 	.word	0x00000000

08003c98 <readAll>:

void readAll(I2C_HandleTypeDef *I2Cx, MPU9255_t*DataStruct) {
 8003c98:	b5b0      	push	{r4, r5, r7, lr}
 8003c9a:	ed2d 8b04 	vpush	{d8-d9}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af04      	add	r7, sp, #16
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
	uint8_t Data;

	// If intPin goes high, all data registers have new data
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, INT_STATUS, 1, &Data, 1, i2c_timeout);
 8003ca6:	2364      	movs	r3, #100	; 0x64
 8003ca8:	9302      	str	r3, [sp, #8]
 8003caa:	2301      	movs	r3, #1
 8003cac:	9301      	str	r3, [sp, #4]
 8003cae:	f107 030f 	add.w	r3, r7, #15
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	223a      	movs	r2, #58	; 0x3a
 8003cb8:	21d0      	movs	r1, #208	; 0xd0
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f004 fc30 	bl	8008520 <HAL_I2C_Mem_Read>
	if (Data & 0x01) {  // On interrupt, check if data ready interrupt
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 80fc 	beq.w	8003ec4 <readAll+0x22c>
		readAccelData(I2Cx, accelCount);  // Read the x/y/z adc values
 8003ccc:	49c0      	ldr	r1, [pc, #768]	; (8003fd0 <readAll+0x338>)
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fbc6 	bl	8004460 <readAccelData>
		getAres();
 8003cd4:	f000 fb94 	bl	8004400 <getAres>

		// Now we'll calculate the accleration value into actual g's
		ax = (float)accelCount[0]*aRes; // - accelBias[0];  // get actual g value, this depends on scale being set
 8003cd8:	4bbd      	ldr	r3, [pc, #756]	; (8003fd0 <readAll+0x338>)
 8003cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cde:	ee07 3a90 	vmov	s15, r3
 8003ce2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ce6:	4bbb      	ldr	r3, [pc, #748]	; (8003fd4 <readAll+0x33c>)
 8003ce8:	edd3 7a00 	vldr	s15, [r3]
 8003cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf0:	4bb9      	ldr	r3, [pc, #740]	; (8003fd8 <readAll+0x340>)
 8003cf2:	edc3 7a00 	vstr	s15, [r3]
		ay = (float)accelCount[1]*aRes; // - accelBias[1];
 8003cf6:	4bb6      	ldr	r3, [pc, #728]	; (8003fd0 <readAll+0x338>)
 8003cf8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003cfc:	ee07 3a90 	vmov	s15, r3
 8003d00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d04:	4bb3      	ldr	r3, [pc, #716]	; (8003fd4 <readAll+0x33c>)
 8003d06:	edd3 7a00 	vldr	s15, [r3]
 8003d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d0e:	4bb3      	ldr	r3, [pc, #716]	; (8003fdc <readAll+0x344>)
 8003d10:	edc3 7a00 	vstr	s15, [r3]
		az = (float)accelCount[2]*aRes; // - accelBias[2];
 8003d14:	4bae      	ldr	r3, [pc, #696]	; (8003fd0 <readAll+0x338>)
 8003d16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d1a:	ee07 3a90 	vmov	s15, r3
 8003d1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d22:	4bac      	ldr	r3, [pc, #688]	; (8003fd4 <readAll+0x33c>)
 8003d24:	edd3 7a00 	vldr	s15, [r3]
 8003d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d2c:	4bac      	ldr	r3, [pc, #688]	; (8003fe0 <readAll+0x348>)
 8003d2e:	edc3 7a00 	vstr	s15, [r3]

		DataStruct->AccelX = ax;
 8003d32:	4ba9      	ldr	r3, [pc, #676]	; (8003fd8 <readAll+0x340>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	601a      	str	r2, [r3, #0]
		DataStruct->AccelY = ay;
 8003d3a:	4ba8      	ldr	r3, [pc, #672]	; (8003fdc <readAll+0x344>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	605a      	str	r2, [r3, #4]
		DataStruct->AccelZ = az;
 8003d42:	4ba7      	ldr	r3, [pc, #668]	; (8003fe0 <readAll+0x348>)
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	609a      	str	r2, [r3, #8]

		readGyroData(I2Cx, gyroCount);  // Read the x/y/z adc values
 8003d4a:	49a6      	ldr	r1, [pc, #664]	; (8003fe4 <readAll+0x34c>)
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fbba 	bl	80044c6 <readGyroData>
		getGres();
 8003d52:	f000 fb21 	bl	8004398 <getGres>

		// Calculate the gyro value into actual degrees per second
		gx = (float)gyroCount[0]*gRes;  // get actual gyro value, this depends on scale being set
 8003d56:	4ba3      	ldr	r3, [pc, #652]	; (8003fe4 <readAll+0x34c>)
 8003d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d5c:	ee07 3a90 	vmov	s15, r3
 8003d60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d64:	4ba0      	ldr	r3, [pc, #640]	; (8003fe8 <readAll+0x350>)
 8003d66:	edd3 7a00 	vldr	s15, [r3]
 8003d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d6e:	4b9f      	ldr	r3, [pc, #636]	; (8003fec <readAll+0x354>)
 8003d70:	edc3 7a00 	vstr	s15, [r3]
		gy = (float)gyroCount[1]*gRes;
 8003d74:	4b9b      	ldr	r3, [pc, #620]	; (8003fe4 <readAll+0x34c>)
 8003d76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003d7a:	ee07 3a90 	vmov	s15, r3
 8003d7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d82:	4b99      	ldr	r3, [pc, #612]	; (8003fe8 <readAll+0x350>)
 8003d84:	edd3 7a00 	vldr	s15, [r3]
 8003d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d8c:	4b98      	ldr	r3, [pc, #608]	; (8003ff0 <readAll+0x358>)
 8003d8e:	edc3 7a00 	vstr	s15, [r3]
		gz = (float)gyroCount[2]*gRes;
 8003d92:	4b94      	ldr	r3, [pc, #592]	; (8003fe4 <readAll+0x34c>)
 8003d94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d98:	ee07 3a90 	vmov	s15, r3
 8003d9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003da0:	4b91      	ldr	r3, [pc, #580]	; (8003fe8 <readAll+0x350>)
 8003da2:	edd3 7a00 	vldr	s15, [r3]
 8003da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003daa:	4b92      	ldr	r3, [pc, #584]	; (8003ff4 <readAll+0x35c>)
 8003dac:	edc3 7a00 	vstr	s15, [r3]

		DataStruct->GyroX = gx;
 8003db0:	4b8e      	ldr	r3, [pc, #568]	; (8003fec <readAll+0x354>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	60da      	str	r2, [r3, #12]
		DataStruct->GyroY = gy;
 8003db8:	4b8d      	ldr	r3, [pc, #564]	; (8003ff0 <readAll+0x358>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	611a      	str	r2, [r3, #16]
		DataStruct->GyroZ = gz;
 8003dc0:	4b8c      	ldr	r3, [pc, #560]	; (8003ff4 <readAll+0x35c>)
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	615a      	str	r2, [r3, #20]

		readMagData(I2Cx, magCount);  // Read the x/y/z adc values
 8003dc8:	498b      	ldr	r1, [pc, #556]	; (8003ff8 <readAll+0x360>)
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fbae 	bl	800452c <readMagData>
		getMres();
 8003dd0:	f000 fac4 	bl	800435c <getMres>

		// Calculate the magnetometer values in milliGauss
		// Include factory calibration per data sheet and user environmental corrections
		mx = (float)magCount[0]*mRes*magCalibration[0] - magBias[0];  // get actual magnetometer value, this depends on scale being set
 8003dd4:	4b88      	ldr	r3, [pc, #544]	; (8003ff8 <readAll+0x360>)
 8003dd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dda:	ee07 3a90 	vmov	s15, r3
 8003dde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003de2:	4b86      	ldr	r3, [pc, #536]	; (8003ffc <readAll+0x364>)
 8003de4:	edd3 7a00 	vldr	s15, [r3]
 8003de8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dec:	4b84      	ldr	r3, [pc, #528]	; (8004000 <readAll+0x368>)
 8003dee:	edd3 7a00 	vldr	s15, [r3]
 8003df2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003df6:	4b83      	ldr	r3, [pc, #524]	; (8004004 <readAll+0x36c>)
 8003df8:	edd3 7a00 	vldr	s15, [r3]
 8003dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e00:	4b81      	ldr	r3, [pc, #516]	; (8004008 <readAll+0x370>)
 8003e02:	edc3 7a00 	vstr	s15, [r3]
		my = (float)magCount[1]*mRes*magCalibration[1] - magBias[1];
 8003e06:	4b7c      	ldr	r3, [pc, #496]	; (8003ff8 <readAll+0x360>)
 8003e08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003e0c:	ee07 3a90 	vmov	s15, r3
 8003e10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e14:	4b79      	ldr	r3, [pc, #484]	; (8003ffc <readAll+0x364>)
 8003e16:	edd3 7a00 	vldr	s15, [r3]
 8003e1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e1e:	4b78      	ldr	r3, [pc, #480]	; (8004000 <readAll+0x368>)
 8003e20:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e28:	4b76      	ldr	r3, [pc, #472]	; (8004004 <readAll+0x36c>)
 8003e2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e32:	4b76      	ldr	r3, [pc, #472]	; (800400c <readAll+0x374>)
 8003e34:	edc3 7a00 	vstr	s15, [r3]
		mz = (float)magCount[2]*mRes*magCalibration[2] - magBias[2];
 8003e38:	4b6f      	ldr	r3, [pc, #444]	; (8003ff8 <readAll+0x360>)
 8003e3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e46:	4b6d      	ldr	r3, [pc, #436]	; (8003ffc <readAll+0x364>)
 8003e48:	edd3 7a00 	vldr	s15, [r3]
 8003e4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e50:	4b6b      	ldr	r3, [pc, #428]	; (8004000 <readAll+0x368>)
 8003e52:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e5a:	4b6a      	ldr	r3, [pc, #424]	; (8004004 <readAll+0x36c>)
 8003e5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e64:	4b6a      	ldr	r3, [pc, #424]	; (8004010 <readAll+0x378>)
 8003e66:	edc3 7a00 	vstr	s15, [r3]
		mx *= magScale[0];
 8003e6a:	4b6a      	ldr	r3, [pc, #424]	; (8004014 <readAll+0x37c>)
 8003e6c:	ed93 7a00 	vldr	s14, [r3]
 8003e70:	4b65      	ldr	r3, [pc, #404]	; (8004008 <readAll+0x370>)
 8003e72:	edd3 7a00 	vldr	s15, [r3]
 8003e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7a:	4b63      	ldr	r3, [pc, #396]	; (8004008 <readAll+0x370>)
 8003e7c:	edc3 7a00 	vstr	s15, [r3]
		my *= magScale[1];
 8003e80:	4b64      	ldr	r3, [pc, #400]	; (8004014 <readAll+0x37c>)
 8003e82:	ed93 7a01 	vldr	s14, [r3, #4]
 8003e86:	4b61      	ldr	r3, [pc, #388]	; (800400c <readAll+0x374>)
 8003e88:	edd3 7a00 	vldr	s15, [r3]
 8003e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e90:	4b5e      	ldr	r3, [pc, #376]	; (800400c <readAll+0x374>)
 8003e92:	edc3 7a00 	vstr	s15, [r3]
		mz *= magScale[2];
 8003e96:	4b5f      	ldr	r3, [pc, #380]	; (8004014 <readAll+0x37c>)
 8003e98:	ed93 7a02 	vldr	s14, [r3, #8]
 8003e9c:	4b5c      	ldr	r3, [pc, #368]	; (8004010 <readAll+0x378>)
 8003e9e:	edd3 7a00 	vldr	s15, [r3]
 8003ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ea6:	4b5a      	ldr	r3, [pc, #360]	; (8004010 <readAll+0x378>)
 8003ea8:	edc3 7a00 	vstr	s15, [r3]

		DataStruct->MagX = mx;
 8003eac:	4b56      	ldr	r3, [pc, #344]	; (8004008 <readAll+0x370>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	619a      	str	r2, [r3, #24]
		DataStruct->MagY = my;
 8003eb4:	4b55      	ldr	r3, [pc, #340]	; (800400c <readAll+0x374>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	61da      	str	r2, [r3, #28]
		DataStruct->MagZ = mz;
 8003ebc:	4b54      	ldr	r3, [pc, #336]	; (8004010 <readAll+0x378>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	621a      	str	r2, [r3, #32]
	}

	Now = HAL_GetTick();
 8003ec4:	f003 f9c4 	bl	8007250 <HAL_GetTick>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	4a53      	ldr	r2, [pc, #332]	; (8004018 <readAll+0x380>)
 8003ecc:	6013      	str	r3, [r2, #0]
	deltat = ((Now - lastUpdate)/1000.0f); // set integration time by time elapsed since last filter update
 8003ece:	4b52      	ldr	r3, [pc, #328]	; (8004018 <readAll+0x380>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	4b52      	ldr	r3, [pc, #328]	; (800401c <readAll+0x384>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	ee07 3a90 	vmov	s15, r3
 8003edc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ee0:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004020 <readAll+0x388>
 8003ee4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ee8:	4b4e      	ldr	r3, [pc, #312]	; (8004024 <readAll+0x38c>)
 8003eea:	edc3 7a00 	vstr	s15, [r3]
	lastUpdate = Now;
 8003eee:	4b4a      	ldr	r3, [pc, #296]	; (8004018 <readAll+0x380>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a4a      	ldr	r2, [pc, #296]	; (800401c <readAll+0x384>)
 8003ef4:	6013      	str	r3, [r2, #0]
	sum += deltat; // sum for averaging filter update rate
 8003ef6:	4b4c      	ldr	r3, [pc, #304]	; (8004028 <readAll+0x390>)
 8003ef8:	ed93 7a00 	vldr	s14, [r3]
 8003efc:	4b49      	ldr	r3, [pc, #292]	; (8004024 <readAll+0x38c>)
 8003efe:	edd3 7a00 	vldr	s15, [r3]
 8003f02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f06:	4b48      	ldr	r3, [pc, #288]	; (8004028 <readAll+0x390>)
 8003f08:	edc3 7a00 	vstr	s15, [r3]

	// Calculate quaternions based on Madgwick's filter
	//Since MPU9250's mag. and IMU modules are different and seperate (AK8963 and MPU6050), their...
	//...coordinate systems also different. So, to compensate this, order should be my - mx - mz
	//QuaternionUpdate(-ax, ay, az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
	QuaternionUpdate(ax, ay, az, gx*PI/180.0f, gy*PI/180.0f, gz*PI/180.0f,  my,  mx, mz);
 8003f0c:	4b32      	ldr	r3, [pc, #200]	; (8003fd8 <readAll+0x340>)
 8003f0e:	ed93 8a00 	vldr	s16, [r3]
 8003f12:	4b32      	ldr	r3, [pc, #200]	; (8003fdc <readAll+0x344>)
 8003f14:	edd3 8a00 	vldr	s17, [r3]
 8003f18:	4b31      	ldr	r3, [pc, #196]	; (8003fe0 <readAll+0x348>)
 8003f1a:	ed93 9a00 	vldr	s18, [r3]
 8003f1e:	4b33      	ldr	r3, [pc, #204]	; (8003fec <readAll+0x354>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fc fb38 	bl	8000598 <__aeabi_f2d>
 8003f28:	a327      	add	r3, pc, #156	; (adr r3, 8003fc8 <readAll+0x330>)
 8003f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2e:	f7fc fb8b 	bl	8000648 <__aeabi_dmul>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4610      	mov	r0, r2
 8003f38:	4619      	mov	r1, r3
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	4b3b      	ldr	r3, [pc, #236]	; (800402c <readAll+0x394>)
 8003f40:	f7fc fcac 	bl	800089c <__aeabi_ddiv>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4610      	mov	r0, r2
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	f7fc fe74 	bl	8000c38 <__aeabi_d2f>
 8003f50:	4604      	mov	r4, r0
 8003f52:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <readAll+0x358>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fc fb1e 	bl	8000598 <__aeabi_f2d>
 8003f5c:	a31a      	add	r3, pc, #104	; (adr r3, 8003fc8 <readAll+0x330>)
 8003f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f62:	f7fc fb71 	bl	8000648 <__aeabi_dmul>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	4b2e      	ldr	r3, [pc, #184]	; (800402c <readAll+0x394>)
 8003f74:	f7fc fc92 	bl	800089c <__aeabi_ddiv>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	f7fc fe5a 	bl	8000c38 <__aeabi_d2f>
 8003f84:	4605      	mov	r5, r0
 8003f86:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <readAll+0x35c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fc fb04 	bl	8000598 <__aeabi_f2d>
 8003f90:	a30d      	add	r3, pc, #52	; (adr r3, 8003fc8 <readAll+0x330>)
 8003f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f96:	f7fc fb57 	bl	8000648 <__aeabi_dmul>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	4b21      	ldr	r3, [pc, #132]	; (800402c <readAll+0x394>)
 8003fa8:	f7fc fc78 	bl	800089c <__aeabi_ddiv>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	f7fc fe40 	bl	8000c38 <__aeabi_d2f>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	4b14      	ldr	r3, [pc, #80]	; (800400c <readAll+0x374>)
 8003fbc:	edd3 7a00 	vldr	s15, [r3]
 8003fc0:	4b11      	ldr	r3, [pc, #68]	; (8004008 <readAll+0x370>)
 8003fc2:	ed93 7a00 	vldr	s14, [r3]
 8003fc6:	e033      	b.n	8004030 <readAll+0x398>
 8003fc8:	35f80991 	.word	0x35f80991
 8003fcc:	40092492 	.word	0x40092492
 8003fd0:	200028d4 	.word	0x200028d4
 8003fd4:	20002910 	.word	0x20002910
 8003fd8:	2000290c 	.word	0x2000290c
 8003fdc:	20002948 	.word	0x20002948
 8003fe0:	200028f8 	.word	0x200028f8
 8003fe4:	200028fc 	.word	0x200028fc
 8003fe8:	2000292c 	.word	0x2000292c
 8003fec:	20002944 	.word	0x20002944
 8003ff0:	200028f4 	.word	0x200028f4
 8003ff4:	20002924 	.word	0x20002924
 8003ff8:	20002938 	.word	0x20002938
 8003ffc:	20002940 	.word	0x20002940
 8004000:	20000254 	.word	0x20000254
 8004004:	20000278 	.word	0x20000278
 8004008:	2000294c 	.word	0x2000294c
 800400c:	20002904 	.word	0x20002904
 8004010:	20002930 	.word	0x20002930
 8004014:	20000284 	.word	0x20000284
 8004018:	2000029c 	.word	0x2000029c
 800401c:	20000298 	.word	0x20000298
 8004020:	447a0000 	.word	0x447a0000
 8004024:	20000290 	.word	0x20000290
 8004028:	20000294 	.word	0x20000294
 800402c:	40668000 	.word	0x40668000
 8004030:	4bb7      	ldr	r3, [pc, #732]	; (8004310 <readAll+0x678>)
 8004032:	edd3 6a00 	vldr	s13, [r3]
 8004036:	eeb0 4a66 	vmov.f32	s8, s13
 800403a:	eef0 3a47 	vmov.f32	s7, s14
 800403e:	eeb0 3a67 	vmov.f32	s6, s15
 8004042:	ee02 2a90 	vmov	s5, r2
 8004046:	ee02 5a10 	vmov	s4, r5
 800404a:	ee01 4a90 	vmov	s3, r4
 800404e:	eeb0 1a49 	vmov.f32	s2, s18
 8004052:	eef0 0a68 	vmov.f32	s1, s17
 8004056:	eeb0 0a48 	vmov.f32	s0, s16
 800405a:	f001 ff0d 	bl	8005e78 <QuaternionUpdate>

	// Convert quaternions to Euler angles
	a12 =   2.0f * (q[1] * q[2] + q[0] * q[3]);
 800405e:	4bad      	ldr	r3, [pc, #692]	; (8004314 <readAll+0x67c>)
 8004060:	ed93 7a01 	vldr	s14, [r3, #4]
 8004064:	4bab      	ldr	r3, [pc, #684]	; (8004314 <readAll+0x67c>)
 8004066:	edd3 7a02 	vldr	s15, [r3, #8]
 800406a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800406e:	4ba9      	ldr	r3, [pc, #676]	; (8004314 <readAll+0x67c>)
 8004070:	edd3 6a00 	vldr	s13, [r3]
 8004074:	4ba7      	ldr	r3, [pc, #668]	; (8004314 <readAll+0x67c>)
 8004076:	edd3 7a03 	vldr	s15, [r3, #12]
 800407a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800407e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004082:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004086:	4ba4      	ldr	r3, [pc, #656]	; (8004318 <readAll+0x680>)
 8004088:	edc3 7a00 	vstr	s15, [r3]
	a22 =   q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3];
 800408c:	4ba1      	ldr	r3, [pc, #644]	; (8004314 <readAll+0x67c>)
 800408e:	ed93 7a00 	vldr	s14, [r3]
 8004092:	4ba0      	ldr	r3, [pc, #640]	; (8004314 <readAll+0x67c>)
 8004094:	edd3 7a00 	vldr	s15, [r3]
 8004098:	ee27 7a27 	vmul.f32	s14, s14, s15
 800409c:	4b9d      	ldr	r3, [pc, #628]	; (8004314 <readAll+0x67c>)
 800409e:	edd3 6a01 	vldr	s13, [r3, #4]
 80040a2:	4b9c      	ldr	r3, [pc, #624]	; (8004314 <readAll+0x67c>)
 80040a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80040a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040b0:	4b98      	ldr	r3, [pc, #608]	; (8004314 <readAll+0x67c>)
 80040b2:	edd3 6a02 	vldr	s13, [r3, #8]
 80040b6:	4b97      	ldr	r3, [pc, #604]	; (8004314 <readAll+0x67c>)
 80040b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80040bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040c4:	4b93      	ldr	r3, [pc, #588]	; (8004314 <readAll+0x67c>)
 80040c6:	edd3 6a03 	vldr	s13, [r3, #12]
 80040ca:	4b92      	ldr	r3, [pc, #584]	; (8004314 <readAll+0x67c>)
 80040cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80040d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040d8:	4b90      	ldr	r3, [pc, #576]	; (800431c <readAll+0x684>)
 80040da:	edc3 7a00 	vstr	s15, [r3]
	a31 =   2.0f * (q[0] * q[1] + q[2] * q[3]);
 80040de:	4b8d      	ldr	r3, [pc, #564]	; (8004314 <readAll+0x67c>)
 80040e0:	ed93 7a00 	vldr	s14, [r3]
 80040e4:	4b8b      	ldr	r3, [pc, #556]	; (8004314 <readAll+0x67c>)
 80040e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80040ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040ee:	4b89      	ldr	r3, [pc, #548]	; (8004314 <readAll+0x67c>)
 80040f0:	edd3 6a02 	vldr	s13, [r3, #8]
 80040f4:	4b87      	ldr	r3, [pc, #540]	; (8004314 <readAll+0x67c>)
 80040f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80040fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004102:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004106:	4b86      	ldr	r3, [pc, #536]	; (8004320 <readAll+0x688>)
 8004108:	edc3 7a00 	vstr	s15, [r3]
	a32 =   2.0f * (q[1] * q[3] - q[0] * q[2]);
 800410c:	4b81      	ldr	r3, [pc, #516]	; (8004314 <readAll+0x67c>)
 800410e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004112:	4b80      	ldr	r3, [pc, #512]	; (8004314 <readAll+0x67c>)
 8004114:	edd3 7a03 	vldr	s15, [r3, #12]
 8004118:	ee27 7a27 	vmul.f32	s14, s14, s15
 800411c:	4b7d      	ldr	r3, [pc, #500]	; (8004314 <readAll+0x67c>)
 800411e:	edd3 6a00 	vldr	s13, [r3]
 8004122:	4b7c      	ldr	r3, [pc, #496]	; (8004314 <readAll+0x67c>)
 8004124:	edd3 7a02 	vldr	s15, [r3, #8]
 8004128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800412c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004130:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004134:	4b7b      	ldr	r3, [pc, #492]	; (8004324 <readAll+0x68c>)
 8004136:	edc3 7a00 	vstr	s15, [r3]
	a33 =   q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3];
 800413a:	4b76      	ldr	r3, [pc, #472]	; (8004314 <readAll+0x67c>)
 800413c:	ed93 7a00 	vldr	s14, [r3]
 8004140:	4b74      	ldr	r3, [pc, #464]	; (8004314 <readAll+0x67c>)
 8004142:	edd3 7a00 	vldr	s15, [r3]
 8004146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800414a:	4b72      	ldr	r3, [pc, #456]	; (8004314 <readAll+0x67c>)
 800414c:	edd3 6a01 	vldr	s13, [r3, #4]
 8004150:	4b70      	ldr	r3, [pc, #448]	; (8004314 <readAll+0x67c>)
 8004152:	edd3 7a01 	vldr	s15, [r3, #4]
 8004156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800415a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800415e:	4b6d      	ldr	r3, [pc, #436]	; (8004314 <readAll+0x67c>)
 8004160:	edd3 6a02 	vldr	s13, [r3, #8]
 8004164:	4b6b      	ldr	r3, [pc, #428]	; (8004314 <readAll+0x67c>)
 8004166:	edd3 7a02 	vldr	s15, [r3, #8]
 800416a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800416e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004172:	4b68      	ldr	r3, [pc, #416]	; (8004314 <readAll+0x67c>)
 8004174:	edd3 6a03 	vldr	s13, [r3, #12]
 8004178:	4b66      	ldr	r3, [pc, #408]	; (8004314 <readAll+0x67c>)
 800417a:	edd3 7a03 	vldr	s15, [r3, #12]
 800417e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004186:	4b68      	ldr	r3, [pc, #416]	; (8004328 <readAll+0x690>)
 8004188:	edc3 7a00 	vstr	s15, [r3]

	pitch = -asinf(a32);
 800418c:	4b65      	ldr	r3, [pc, #404]	; (8004324 <readAll+0x68c>)
 800418e:	edd3 7a00 	vldr	s15, [r3]
 8004192:	eeb0 0a67 	vmov.f32	s0, s15
 8004196:	f00f ff29 	bl	8013fec <asinf>
 800419a:	eef0 7a40 	vmov.f32	s15, s0
 800419e:	eef1 7a67 	vneg.f32	s15, s15
 80041a2:	4b62      	ldr	r3, [pc, #392]	; (800432c <readAll+0x694>)
 80041a4:	edc3 7a00 	vstr	s15, [r3]
	roll  = atan2f(a31, a33);
 80041a8:	4b5d      	ldr	r3, [pc, #372]	; (8004320 <readAll+0x688>)
 80041aa:	edd3 7a00 	vldr	s15, [r3]
 80041ae:	4b5e      	ldr	r3, [pc, #376]	; (8004328 <readAll+0x690>)
 80041b0:	ed93 7a00 	vldr	s14, [r3]
 80041b4:	eef0 0a47 	vmov.f32	s1, s14
 80041b8:	eeb0 0a67 	vmov.f32	s0, s15
 80041bc:	f00f ff48 	bl	8014050 <atan2f>
 80041c0:	eef0 7a40 	vmov.f32	s15, s0
 80041c4:	4b5a      	ldr	r3, [pc, #360]	; (8004330 <readAll+0x698>)
 80041c6:	edc3 7a00 	vstr	s15, [r3]
	yaw   = atan2f(a12, a22);
 80041ca:	4b53      	ldr	r3, [pc, #332]	; (8004318 <readAll+0x680>)
 80041cc:	edd3 7a00 	vldr	s15, [r3]
 80041d0:	4b52      	ldr	r3, [pc, #328]	; (800431c <readAll+0x684>)
 80041d2:	ed93 7a00 	vldr	s14, [r3]
 80041d6:	eef0 0a47 	vmov.f32	s1, s14
 80041da:	eeb0 0a67 	vmov.f32	s0, s15
 80041de:	f00f ff37 	bl	8014050 <atan2f>
 80041e2:	eef0 7a40 	vmov.f32	s15, s0
 80041e6:	4b53      	ldr	r3, [pc, #332]	; (8004334 <readAll+0x69c>)
 80041e8:	edc3 7a00 	vstr	s15, [r3]
	pitch *= 180.0f / PI;
 80041ec:	4b4f      	ldr	r3, [pc, #316]	; (800432c <readAll+0x694>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fc f9d1 	bl	8000598 <__aeabi_f2d>
 80041f6:	a344      	add	r3, pc, #272	; (adr r3, 8004308 <readAll+0x670>)
 80041f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fc:	f7fc fa24 	bl	8000648 <__aeabi_dmul>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4610      	mov	r0, r2
 8004206:	4619      	mov	r1, r3
 8004208:	f7fc fd16 	bl	8000c38 <__aeabi_d2f>
 800420c:	4603      	mov	r3, r0
 800420e:	4a47      	ldr	r2, [pc, #284]	; (800432c <readAll+0x694>)
 8004210:	6013      	str	r3, [r2, #0]
	yaw   *= 180.0f / PI;
 8004212:	4b48      	ldr	r3, [pc, #288]	; (8004334 <readAll+0x69c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f7fc f9be 	bl	8000598 <__aeabi_f2d>
 800421c:	a33a      	add	r3, pc, #232	; (adr r3, 8004308 <readAll+0x670>)
 800421e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004222:	f7fc fa11 	bl	8000648 <__aeabi_dmul>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4610      	mov	r0, r2
 800422c:	4619      	mov	r1, r3
 800422e:	f7fc fd03 	bl	8000c38 <__aeabi_d2f>
 8004232:	4603      	mov	r3, r0
 8004234:	4a3f      	ldr	r2, [pc, #252]	; (8004334 <readAll+0x69c>)
 8004236:	6013      	str	r3, [r2, #0]
	yaw   += 5.53f; // Declination
 8004238:	4b3e      	ldr	r3, [pc, #248]	; (8004334 <readAll+0x69c>)
 800423a:	edd3 7a00 	vldr	s15, [r3]
 800423e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8004338 <readAll+0x6a0>
 8004242:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004246:	4b3b      	ldr	r3, [pc, #236]	; (8004334 <readAll+0x69c>)
 8004248:	edc3 7a00 	vstr	s15, [r3]

	if(yaw < 0) yaw   += 360.0f; // Ensure yaw stays between 0 and 360
 800424c:	4b39      	ldr	r3, [pc, #228]	; (8004334 <readAll+0x69c>)
 800424e:	edd3 7a00 	vldr	s15, [r3]
 8004252:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425a:	d509      	bpl.n	8004270 <readAll+0x5d8>
 800425c:	4b35      	ldr	r3, [pc, #212]	; (8004334 <readAll+0x69c>)
 800425e:	edd3 7a00 	vldr	s15, [r3]
 8004262:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800433c <readAll+0x6a4>
 8004266:	ee77 7a87 	vadd.f32	s15, s15, s14
 800426a:	4b32      	ldr	r3, [pc, #200]	; (8004334 <readAll+0x69c>)
 800426c:	edc3 7a00 	vstr	s15, [r3]
	roll  *= 180.0f / PI;
 8004270:	4b2f      	ldr	r3, [pc, #188]	; (8004330 <readAll+0x698>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7fc f98f 	bl	8000598 <__aeabi_f2d>
 800427a:	a323      	add	r3, pc, #140	; (adr r3, 8004308 <readAll+0x670>)
 800427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004280:	f7fc f9e2 	bl	8000648 <__aeabi_dmul>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4610      	mov	r0, r2
 800428a:	4619      	mov	r1, r3
 800428c:	f7fc fcd4 	bl	8000c38 <__aeabi_d2f>
 8004290:	4603      	mov	r3, r0
 8004292:	4a27      	ldr	r2, [pc, #156]	; (8004330 <readAll+0x698>)
 8004294:	6013      	str	r3, [r2, #0]
	lin_ax = ax + a31;
 8004296:	4b2a      	ldr	r3, [pc, #168]	; (8004340 <readAll+0x6a8>)
 8004298:	ed93 7a00 	vldr	s14, [r3]
 800429c:	4b20      	ldr	r3, [pc, #128]	; (8004320 <readAll+0x688>)
 800429e:	edd3 7a00 	vldr	s15, [r3]
 80042a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042a6:	4b27      	ldr	r3, [pc, #156]	; (8004344 <readAll+0x6ac>)
 80042a8:	edc3 7a00 	vstr	s15, [r3]
	lin_ay = ay + a32;
 80042ac:	4b26      	ldr	r3, [pc, #152]	; (8004348 <readAll+0x6b0>)
 80042ae:	ed93 7a00 	vldr	s14, [r3]
 80042b2:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <readAll+0x68c>)
 80042b4:	edd3 7a00 	vldr	s15, [r3]
 80042b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042bc:	4b23      	ldr	r3, [pc, #140]	; (800434c <readAll+0x6b4>)
 80042be:	edc3 7a00 	vstr	s15, [r3]
	lin_az = az - a33;
 80042c2:	4b23      	ldr	r3, [pc, #140]	; (8004350 <readAll+0x6b8>)
 80042c4:	ed93 7a00 	vldr	s14, [r3]
 80042c8:	4b17      	ldr	r3, [pc, #92]	; (8004328 <readAll+0x690>)
 80042ca:	edd3 7a00 	vldr	s15, [r3]
 80042ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042d2:	4b20      	ldr	r3, [pc, #128]	; (8004354 <readAll+0x6bc>)
 80042d4:	edc3 7a00 	vstr	s15, [r3]


	DataStruct->yaw = yaw;
 80042d8:	4b16      	ldr	r3, [pc, #88]	; (8004334 <readAll+0x69c>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	62da      	str	r2, [r3, #44]	; 0x2c
	DataStruct->pitch = pitch;
 80042e0:	4b12      	ldr	r3, [pc, #72]	; (800432c <readAll+0x694>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	625a      	str	r2, [r3, #36]	; 0x24
	DataStruct->roll = roll;
 80042e8:	4b11      	ldr	r3, [pc, #68]	; (8004330 <readAll+0x698>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	629a      	str	r2, [r3, #40]	; 0x28

	sum = 0;
 80042f0:	4b19      	ldr	r3, [pc, #100]	; (8004358 <readAll+0x6c0>)
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
	}
 80042f8:	bf00      	nop
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	ecbd 8b04 	vpop	{d8-d9}
 8004302:	bdb0      	pop	{r4, r5, r7, pc}
 8004304:	f3af 8000 	nop.w
 8004308:	d0051a32 	.word	0xd0051a32
 800430c:	404ca2e8 	.word	0x404ca2e8
 8004310:	20002930 	.word	0x20002930
 8004314:	20000008 	.word	0x20000008
 8004318:	20002914 	.word	0x20002914
 800431c:	20002918 	.word	0x20002918
 8004320:	2000291c 	.word	0x2000291c
 8004324:	20002920 	.word	0x20002920
 8004328:	200028d0 	.word	0x200028d0
 800432c:	20001db0 	.word	0x20001db0
 8004330:	20001db4 	.word	0x20001db4
 8004334:	20001dac 	.word	0x20001dac
 8004338:	40b0f5c3 	.word	0x40b0f5c3
 800433c:	43b40000 	.word	0x43b40000
 8004340:	2000290c 	.word	0x2000290c
 8004344:	20002928 	.word	0x20002928
 8004348:	20002948 	.word	0x20002948
 800434c:	20002908 	.word	0x20002908
 8004350:	200028f8 	.word	0x200028f8
 8004354:	20002934 	.word	0x20002934
 8004358:	20000294 	.word	0x20000294

0800435c <getMres>:

//==========================================================================================================
//====== FUNCTIONS TO READ AND WRITE DATA FROM REGISTERS AND ALSO INITS KALMAN AND QUATERNION FILTERS ======
//==========================================================================================================

void getMres() {
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  switch (Mscale)
 8004360:	4b09      	ldr	r3, [pc, #36]	; (8004388 <getMres+0x2c>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <getMres+0x12>
 8004368:	2b01      	cmp	r3, #1
 800436a:	d004      	beq.n	8004376 <getMres+0x1a>
          break;
    case MFS_16BITS:
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}
 800436c:	e007      	b.n	800437e <getMres+0x22>
          mRes = 10.*4912./8190.; // Proper scale to return milliGauss
 800436e:	4b07      	ldr	r3, [pc, #28]	; (800438c <getMres+0x30>)
 8004370:	4a07      	ldr	r2, [pc, #28]	; (8004390 <getMres+0x34>)
 8004372:	601a      	str	r2, [r3, #0]
          break;
 8004374:	e003      	b.n	800437e <getMres+0x22>
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
 8004376:	4b05      	ldr	r3, [pc, #20]	; (800438c <getMres+0x30>)
 8004378:	4a06      	ldr	r2, [pc, #24]	; (8004394 <getMres+0x38>)
 800437a:	601a      	str	r2, [r3, #0]
          break;
 800437c:	bf00      	nop
}
 800437e:	bf00      	nop
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	20000002 	.word	0x20000002
 800438c:	20002940 	.word	0x20002940
 8004390:	40bfebff 	.word	0x40bfebff
 8004394:	3fbfebff 	.word	0x3fbfebff

08004398 <getGres>:

void getGres() {
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  switch (Gscale)
 800439c:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <getGres+0x50>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d81b      	bhi.n	80043dc <getGres+0x44>
 80043a4:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <getGres+0x14>)
 80043a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043aa:	bf00      	nop
 80043ac:	080043bd 	.word	0x080043bd
 80043b0:	080043c5 	.word	0x080043c5
 80043b4:	080043cd 	.word	0x080043cd
 80043b8:	080043d5 	.word	0x080043d5
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          gRes = 250.0/32768.0;
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <getGres+0x54>)
 80043be:	4a0c      	ldr	r2, [pc, #48]	; (80043f0 <getGres+0x58>)
 80043c0:	601a      	str	r2, [r3, #0]
          break;
 80043c2:	e00b      	b.n	80043dc <getGres+0x44>
    case GFS_500DPS:
          gRes = 500.0/32768.0;
 80043c4:	4b09      	ldr	r3, [pc, #36]	; (80043ec <getGres+0x54>)
 80043c6:	4a0b      	ldr	r2, [pc, #44]	; (80043f4 <getGres+0x5c>)
 80043c8:	601a      	str	r2, [r3, #0]
          break;
 80043ca:	e007      	b.n	80043dc <getGres+0x44>
    case GFS_1000DPS:
          gRes = 1000.0/32768.0;
 80043cc:	4b07      	ldr	r3, [pc, #28]	; (80043ec <getGres+0x54>)
 80043ce:	4a0a      	ldr	r2, [pc, #40]	; (80043f8 <getGres+0x60>)
 80043d0:	601a      	str	r2, [r3, #0]
          break;
 80043d2:	e003      	b.n	80043dc <getGres+0x44>
    case GFS_2000DPS:
          gRes = 2000.0/32768.0;
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <getGres+0x54>)
 80043d6:	4a09      	ldr	r2, [pc, #36]	; (80043fc <getGres+0x64>)
 80043d8:	601a      	str	r2, [r3, #0]
          break;
 80043da:	bf00      	nop
  }
}
 80043dc:	bf00      	nop
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	20000000 	.word	0x20000000
 80043ec:	2000292c 	.word	0x2000292c
 80043f0:	3bfa0000 	.word	0x3bfa0000
 80043f4:	3c7a0000 	.word	0x3c7a0000
 80043f8:	3cfa0000 	.word	0x3cfa0000
 80043fc:	3d7a0000 	.word	0x3d7a0000

08004400 <getAres>:

void getAres() {
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  switch (Ascale)
 8004404:	4b14      	ldr	r3, [pc, #80]	; (8004458 <getAres+0x58>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b03      	cmp	r3, #3
 800440a:	d81f      	bhi.n	800444c <getAres+0x4c>
 800440c:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <getAres+0x14>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	08004425 	.word	0x08004425
 8004418:	0800442f 	.word	0x0800442f
 800441c:	08004439 	.word	0x08004439
 8004420:	08004443 	.word	0x08004443
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
          aRes = 2.0/32768.0;
 8004424:	4b0d      	ldr	r3, [pc, #52]	; (800445c <getAres+0x5c>)
 8004426:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800442a:	601a      	str	r2, [r3, #0]
          break;
 800442c:	e00e      	b.n	800444c <getAres+0x4c>
    case AFS_4G:
          aRes = 4.0/32768.0;
 800442e:	4b0b      	ldr	r3, [pc, #44]	; (800445c <getAres+0x5c>)
 8004430:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8004434:	601a      	str	r2, [r3, #0]
          break;
 8004436:	e009      	b.n	800444c <getAres+0x4c>
    case AFS_8G:
          aRes = 8.0/32768.0;
 8004438:	4b08      	ldr	r3, [pc, #32]	; (800445c <getAres+0x5c>)
 800443a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800443e:	601a      	str	r2, [r3, #0]
          break;
 8004440:	e004      	b.n	800444c <getAres+0x4c>
    case AFS_16G:
          aRes = 16.0/32768.0;
 8004442:	4b06      	ldr	r3, [pc, #24]	; (800445c <getAres+0x5c>)
 8004444:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8004448:	601a      	str	r2, [r3, #0]
          break;
 800444a:	bf00      	nop
  }
}
 800444c:	bf00      	nop
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20000001 	.word	0x20000001
 800445c:	20002910 	.word	0x20002910

08004460 <readAccelData>:

//read raw Accelerometer values from registers
void readAccelData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af04      	add	r7, sp, #16
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint8_t rawAccelData[6];  // x/y/z accel register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawAccelData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 800446a:	2364      	movs	r3, #100	; 0x64
 800446c:	9302      	str	r3, [sp, #8]
 800446e:	2306      	movs	r3, #6
 8004470:	9301      	str	r3, [sp, #4]
 8004472:	f107 0308 	add.w	r3, r7, #8
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	2301      	movs	r3, #1
 800447a:	223b      	movs	r2, #59	; 0x3b
 800447c:	21d0      	movs	r1, #208	; 0xd0
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f004 f84e 	bl	8008520 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawAccelData[0] << 8) | rawAccelData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8004484:	7a3b      	ldrb	r3, [r7, #8]
 8004486:	021b      	lsls	r3, r3, #8
 8004488:	b21a      	sxth	r2, r3
 800448a:	7a7b      	ldrb	r3, [r7, #9]
 800448c:	b21b      	sxth	r3, r3
 800448e:	4313      	orrs	r3, r2
 8004490:	b21a      	sxth	r2, r3
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawAccelData[2] << 8) | rawAccelData[3];
 8004496:	7abb      	ldrb	r3, [r7, #10]
 8004498:	021b      	lsls	r3, r3, #8
 800449a:	b219      	sxth	r1, r3
 800449c:	7afb      	ldrb	r3, [r7, #11]
 800449e:	b21a      	sxth	r2, r3
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	3302      	adds	r3, #2
 80044a4:	430a      	orrs	r2, r1
 80044a6:	b212      	sxth	r2, r2
 80044a8:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawAccelData[4] << 8) | rawAccelData[5];
 80044aa:	7b3b      	ldrb	r3, [r7, #12]
 80044ac:	021b      	lsls	r3, r3, #8
 80044ae:	b219      	sxth	r1, r3
 80044b0:	7b7b      	ldrb	r3, [r7, #13]
 80044b2:	b21a      	sxth	r2, r3
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	3304      	adds	r3, #4
 80044b8:	430a      	orrs	r2, r1
 80044ba:	b212      	sxth	r2, r2
 80044bc:	801a      	strh	r2, [r3, #0]
	printf("Acc X: %d\r\n", destination[0]);
	printf("Acc Y: %d\r\n", destination[1]);
	printf("Acc Z: %d\r\n", destination[2]);
	printf("-------------------------\r\n");
  }
}
 80044be:	bf00      	nop
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <readGyroData>:

//read raw Gyro values from registers
void readGyroData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b088      	sub	sp, #32
 80044ca:	af04      	add	r7, sp, #16
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
  uint8_t rawGyroData[6];  // x/y/z gyro register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawGyroData[0], 6, i2c_timeout);  // Read the six raw data registers sequentially into data array
 80044d0:	2364      	movs	r3, #100	; 0x64
 80044d2:	9302      	str	r3, [sp, #8]
 80044d4:	2306      	movs	r3, #6
 80044d6:	9301      	str	r3, [sp, #4]
 80044d8:	f107 0308 	add.w	r3, r7, #8
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	2301      	movs	r3, #1
 80044e0:	2243      	movs	r2, #67	; 0x43
 80044e2:	21d0      	movs	r1, #208	; 0xd0
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f004 f81b 	bl	8008520 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawGyroData[0] << 8) | rawGyroData[1];  // Turn the MSB and LSB into a signed 16-bit value
 80044ea:	7a3b      	ldrb	r3, [r7, #8]
 80044ec:	021b      	lsls	r3, r3, #8
 80044ee:	b21a      	sxth	r2, r3
 80044f0:	7a7b      	ldrb	r3, [r7, #9]
 80044f2:	b21b      	sxth	r3, r3
 80044f4:	4313      	orrs	r3, r2
 80044f6:	b21a      	sxth	r2, r3
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawGyroData[2] << 8) | rawGyroData[3];
 80044fc:	7abb      	ldrb	r3, [r7, #10]
 80044fe:	021b      	lsls	r3, r3, #8
 8004500:	b219      	sxth	r1, r3
 8004502:	7afb      	ldrb	r3, [r7, #11]
 8004504:	b21a      	sxth	r2, r3
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	3302      	adds	r3, #2
 800450a:	430a      	orrs	r2, r1
 800450c:	b212      	sxth	r2, r2
 800450e:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawGyroData[4] << 8) | rawGyroData[5];
 8004510:	7b3b      	ldrb	r3, [r7, #12]
 8004512:	021b      	lsls	r3, r3, #8
 8004514:	b219      	sxth	r1, r3
 8004516:	7b7b      	ldrb	r3, [r7, #13]
 8004518:	b21a      	sxth	r2, r3
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	3304      	adds	r3, #4
 800451e:	430a      	orrs	r2, r1
 8004520:	b212      	sxth	r2, r2
 8004522:	801a      	strh	r2, [r3, #0]
	printf("Gyro X: %d\r\n", destination[0]);
	printf("Gyro Y: %d\r\n", destination[1]);
	printf("Gyro Z: %d\r\n", destination[2]);
	printf("---------------------------\r\n");
  }
}
 8004524:	bf00      	nop
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <readMagData>:

void readMagData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	; 0x28
 8004530:	af04      	add	r7, sp, #16
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]

	uint8_t readData;

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ST1, 1, &readData, 1, i2c_timeout);
 8004536:	2364      	movs	r3, #100	; 0x64
 8004538:	9302      	str	r3, [sp, #8]
 800453a:	2301      	movs	r3, #1
 800453c:	9301      	str	r3, [sp, #4]
 800453e:	f107 0316 	add.w	r3, r7, #22
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	2301      	movs	r3, #1
 8004546:	2202      	movs	r2, #2
 8004548:	2118      	movs	r1, #24
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f003 ffe8 	bl	8008520 <HAL_I2C_Mem_Read>
	if( (readData & 0x01) == 0x01 ){
 8004550:	7dbb      	ldrb	r3, [r7, #22]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d030      	beq.n	80045bc <readMagData+0x90>
		uint8_t rawMagData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_XOUT_L, 1, &rawMagData[0], 7, i2c_timeout);  // Read the six raw data and ST2 registers sequentially into data array
 800455a:	2364      	movs	r3, #100	; 0x64
 800455c:	9302      	str	r3, [sp, #8]
 800455e:	2307      	movs	r3, #7
 8004560:	9301      	str	r3, [sp, #4]
 8004562:	f107 030c 	add.w	r3, r7, #12
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	2301      	movs	r3, #1
 800456a:	2203      	movs	r2, #3
 800456c:	2118      	movs	r1, #24
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f003 ffd6 	bl	8008520 <HAL_I2C_Mem_Read>
		uint8_t c = rawMagData[6];
 8004574:	7cbb      	ldrb	r3, [r7, #18]
 8004576:	75fb      	strb	r3, [r7, #23]
		if(!(c & 0x08)) {
 8004578:	7dfb      	ldrb	r3, [r7, #23]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d11c      	bne.n	80045bc <readMagData+0x90>
			destination[0] = ((int16_t)rawMagData[1] << 8) | rawMagData[0] ;  // Turn the MSB and LSB into a signed 16-bit value
 8004582:	7b7b      	ldrb	r3, [r7, #13]
 8004584:	021b      	lsls	r3, r3, #8
 8004586:	b21a      	sxth	r2, r3
 8004588:	7b3b      	ldrb	r3, [r7, #12]
 800458a:	b21b      	sxth	r3, r3
 800458c:	4313      	orrs	r3, r2
 800458e:	b21a      	sxth	r2, r3
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	801a      	strh	r2, [r3, #0]
			destination[1] = ((int16_t)rawMagData[3] << 8) | rawMagData[2] ;  // Data stored as little Endian
 8004594:	7bfb      	ldrb	r3, [r7, #15]
 8004596:	021b      	lsls	r3, r3, #8
 8004598:	b219      	sxth	r1, r3
 800459a:	7bbb      	ldrb	r3, [r7, #14]
 800459c:	b21a      	sxth	r2, r3
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	3302      	adds	r3, #2
 80045a2:	430a      	orrs	r2, r1
 80045a4:	b212      	sxth	r2, r2
 80045a6:	801a      	strh	r2, [r3, #0]
			destination[2] = ((int16_t)rawMagData[5] << 8) | rawMagData[4] ;
 80045a8:	7c7b      	ldrb	r3, [r7, #17]
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	b219      	sxth	r1, r3
 80045ae:	7c3b      	ldrb	r3, [r7, #16]
 80045b0:	b21a      	sxth	r2, r3
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	3304      	adds	r3, #4
 80045b6:	430a      	orrs	r2, r1
 80045b8:	b212      	sxth	r2, r2
 80045ba:	801a      	strh	r2, [r3, #0]
				printf("Mag Z: %d\r\n", destination[2]);
				printf("-------------------------\r\n");
			}
		}
	}
}
 80045bc:	bf00      	nop
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <initAK8963>:

void initAK8963(I2C_HandleTypeDef *I2Cx, float * destination){
 80045c4:	b590      	push	{r4, r7, lr}
 80045c6:	b089      	sub	sp, #36	; 0x24
 80045c8:	af04      	add	r7, sp, #16
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  //First extract the factory calibration for each magnetometer axis
  // x/y/z gyro calibration data stored here
  uint8_t rawMagCalData[3];

  //Power down magnetometer
  writeData = 0x00;
 80045ce:	2300      	movs	r3, #0
 80045d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
 80045d2:	2364      	movs	r3, #100	; 0x64
 80045d4:	9302      	str	r3, [sp, #8]
 80045d6:	2301      	movs	r3, #1
 80045d8:	9301      	str	r3, [sp, #4]
 80045da:	f107 030f 	add.w	r3, r7, #15
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	2301      	movs	r3, #1
 80045e2:	220a      	movs	r2, #10
 80045e4:	2118      	movs	r1, #24
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f003 fe86 	bl	80082f8 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 80045ec:	2064      	movs	r0, #100	; 0x64
 80045ee:	f002 fe3b 	bl	8007268 <HAL_Delay>

  writeData = 0x0F;
 80045f2:	230f      	movs	r3, #15
 80045f4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Enter Fuse ROM access mode
 80045f6:	2364      	movs	r3, #100	; 0x64
 80045f8:	9302      	str	r3, [sp, #8]
 80045fa:	2301      	movs	r3, #1
 80045fc:	9301      	str	r3, [sp, #4]
 80045fe:	f107 030f 	add.w	r3, r7, #15
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	2301      	movs	r3, #1
 8004606:	220a      	movs	r2, #10
 8004608:	2118      	movs	r1, #24
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f003 fe74 	bl	80082f8 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8004610:	2064      	movs	r0, #100	; 0x64
 8004612:	f002 fe29 	bl	8007268 <HAL_Delay>


  HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ASAX, 1, &rawMagCalData[0], 3, i2c_timeout);// Read the x-, y-, and z-axis calibration values
 8004616:	2364      	movs	r3, #100	; 0x64
 8004618:	9302      	str	r3, [sp, #8]
 800461a:	2303      	movs	r3, #3
 800461c:	9301      	str	r3, [sp, #4]
 800461e:	f107 030c 	add.w	r3, r7, #12
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	2301      	movs	r3, #1
 8004626:	2210      	movs	r2, #16
 8004628:	2118      	movs	r1, #24
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f003 ff78 	bl	8008520 <HAL_I2C_Mem_Read>
  destination[0] =  (float)(rawMagCalData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 8004630:	7b3b      	ldrb	r3, [r7, #12]
 8004632:	3b80      	subs	r3, #128	; 0x80
 8004634:	ee07 3a90 	vmov	s15, r3
 8004638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800463c:	ee17 0a90 	vmov	r0, s15
 8004640:	f7fb ffaa 	bl	8000598 <__aeabi_f2d>
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	4b45      	ldr	r3, [pc, #276]	; (8004760 <initAK8963+0x19c>)
 800464a:	f7fc f927 	bl	800089c <__aeabi_ddiv>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	4610      	mov	r0, r2
 8004654:	4619      	mov	r1, r3
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	4b42      	ldr	r3, [pc, #264]	; (8004764 <initAK8963+0x1a0>)
 800465c:	f7fb fe3e 	bl	80002dc <__adddf3>
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	4610      	mov	r0, r2
 8004666:	4619      	mov	r1, r3
 8004668:	f7fc fae6 	bl	8000c38 <__aeabi_d2f>
 800466c:	4602      	mov	r2, r0
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	601a      	str	r2, [r3, #0]
  destination[1] =  (float)(rawMagCalData[1] - 128)/256. + 1.;
 8004672:	7b7b      	ldrb	r3, [r7, #13]
 8004674:	3b80      	subs	r3, #128	; 0x80
 8004676:	ee07 3a90 	vmov	s15, r3
 800467a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800467e:	ee17 0a90 	vmov	r0, s15
 8004682:	f7fb ff89 	bl	8000598 <__aeabi_f2d>
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	4b35      	ldr	r3, [pc, #212]	; (8004760 <initAK8963+0x19c>)
 800468c:	f7fc f906 	bl	800089c <__aeabi_ddiv>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4610      	mov	r0, r2
 8004696:	4619      	mov	r1, r3
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	4b31      	ldr	r3, [pc, #196]	; (8004764 <initAK8963+0x1a0>)
 800469e:	f7fb fe1d 	bl	80002dc <__adddf3>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	4610      	mov	r0, r2
 80046a8:	4619      	mov	r1, r3
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	1d1c      	adds	r4, r3, #4
 80046ae:	f7fc fac3 	bl	8000c38 <__aeabi_d2f>
 80046b2:	4603      	mov	r3, r0
 80046b4:	6023      	str	r3, [r4, #0]
  destination[2] =  (float)(rawMagCalData[2] - 128)/256. + 1.;
 80046b6:	7bbb      	ldrb	r3, [r7, #14]
 80046b8:	3b80      	subs	r3, #128	; 0x80
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046c2:	ee17 0a90 	vmov	r0, s15
 80046c6:	f7fb ff67 	bl	8000598 <__aeabi_f2d>
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	4b24      	ldr	r3, [pc, #144]	; (8004760 <initAK8963+0x19c>)
 80046d0:	f7fc f8e4 	bl	800089c <__aeabi_ddiv>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	4610      	mov	r0, r2
 80046da:	4619      	mov	r1, r3
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	4b20      	ldr	r3, [pc, #128]	; (8004764 <initAK8963+0x1a0>)
 80046e2:	f7fb fdfb 	bl	80002dc <__adddf3>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4610      	mov	r0, r2
 80046ec:	4619      	mov	r1, r3
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	f103 0408 	add.w	r4, r3, #8
 80046f4:	f7fc faa0 	bl	8000c38 <__aeabi_d2f>
 80046f8:	4603      	mov	r3, r0
 80046fa:	6023      	str	r3, [r4, #0]
	printf("Mag cal off Y: %f\r\n", destination[1]);
	printf("Mag cal off Z: %f\r\n", destination[2]);
	printf("-------------------------\r\n");
  }

  writeData = 0x00;
 80046fc:	2300      	movs	r3, #0
 80046fe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Power down magnetometer
 8004700:	2364      	movs	r3, #100	; 0x64
 8004702:	9302      	str	r3, [sp, #8]
 8004704:	2301      	movs	r3, #1
 8004706:	9301      	str	r3, [sp, #4]
 8004708:	f107 030f 	add.w	r3, r7, #15
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	2301      	movs	r3, #1
 8004710:	220a      	movs	r2, #10
 8004712:	2118      	movs	r1, #24
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f003 fdef 	bl	80082f8 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 800471a:	2064      	movs	r0, #100	; 0x64
 800471c:	f002 fda4 	bl	8007268 <HAL_Delay>

  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeData = Mscale << 4 | Mmode;
 8004720:	4b11      	ldr	r3, [pc, #68]	; (8004768 <initAK8963+0x1a4>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	b25a      	sxtb	r2, r3
 8004728:	4b10      	ldr	r3, [pc, #64]	; (800476c <initAK8963+0x1a8>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	b25b      	sxtb	r3, r3
 800472e:	4313      	orrs	r3, r2
 8004730:	b25b      	sxtb	r3, r3
 8004732:	b2db      	uxtb	r3, r3
 8004734:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Set magnetometer data resolution and sample ODR
 8004736:	2364      	movs	r3, #100	; 0x64
 8004738:	9302      	str	r3, [sp, #8]
 800473a:	2301      	movs	r3, #1
 800473c:	9301      	str	r3, [sp, #4]
 800473e:	f107 030f 	add.w	r3, r7, #15
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	2301      	movs	r3, #1
 8004746:	220a      	movs	r2, #10
 8004748:	2118      	movs	r1, #24
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f003 fdd4 	bl	80082f8 <HAL_I2C_Mem_Write>

//writeData = 0x16;
//HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
  HAL_Delay(10);
 8004750:	200a      	movs	r0, #10
 8004752:	f002 fd89 	bl	8007268 <HAL_Delay>

  if(SerialDebugA){printf("MAG Init Succesful! \r\n");}
}
 8004756:	bf00      	nop
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	bd90      	pop	{r4, r7, pc}
 800475e:	bf00      	nop
 8004760:	40700000 	.word	0x40700000
 8004764:	3ff00000 	.word	0x3ff00000
 8004768:	20000002 	.word	0x20000002
 800476c:	20000003 	.word	0x20000003

08004770 <calibrateMag>:

void calibrateMag(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 8004770:	b580      	push	{r7, lr}
 8004772:	b094      	sub	sp, #80	; 0x50
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]

  uint16_t ii = 0, sample_count = 0;
 800477c:	2300      	movs	r3, #0
 800477e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004782:	2300      	movs	r3, #0
 8004784:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
 8004788:	2300      	movs	r3, #0
 800478a:	63bb      	str	r3, [r7, #56]	; 0x38
 800478c:	2300      	movs	r3, #0
 800478e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004790:	2300      	movs	r3, #0
 8004792:	643b      	str	r3, [r7, #64]	; 0x40
 8004794:	2300      	movs	r3, #0
 8004796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004798:	2300      	movs	r3, #0
 800479a:	633b      	str	r3, [r7, #48]	; 0x30
 800479c:	2300      	movs	r3, #0
 800479e:	637b      	str	r3, [r7, #52]	; 0x34
  int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 80047a0:	4aa3      	ldr	r2, [pc, #652]	; (8004a30 <calibrateMag+0x2c0>)
 80047a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047aa:	6018      	str	r0, [r3, #0]
 80047ac:	3304      	adds	r3, #4
 80047ae:	8019      	strh	r1, [r3, #0]
 80047b0:	4aa0      	ldr	r2, [pc, #640]	; (8004a34 <calibrateMag+0x2c4>)
 80047b2:	f107 031c 	add.w	r3, r7, #28
 80047b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047ba:	6018      	str	r0, [r3, #0]
 80047bc:	3304      	adds	r3, #4
 80047be:	8019      	strh	r1, [r3, #0]
 80047c0:	2300      	movs	r3, #0
 80047c2:	82bb      	strh	r3, [r7, #20]
 80047c4:	2300      	movs	r3, #0
 80047c6:	82fb      	strh	r3, [r7, #22]
 80047c8:	2300      	movs	r3, #0
 80047ca:	833b      	strh	r3, [r7, #24]

  printf("Mag Calibration: Wave device in a figure eight until done!\r\n");
 80047cc:	489a      	ldr	r0, [pc, #616]	; (8004a38 <calibrateMag+0x2c8>)
 80047ce:	f00b fea1 	bl	8010514 <puts>
  HAL_Delay(4000);
 80047d2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80047d6:	f002 fd47 	bl	8007268 <HAL_Delay>

    // shoot for ~fifteen seconds of mag data
    if(Mmode == 0x02) sample_count = 128;  // at 8 Hz ODR, new mag data is available every 125 ms
 80047da:	4b98      	ldr	r3, [pc, #608]	; (8004a3c <calibrateMag+0x2cc>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d102      	bne.n	80047e8 <calibrateMag+0x78>
 80047e2:	2380      	movs	r3, #128	; 0x80
 80047e4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(Mmode == 0x06) sample_count = 1500;  // at 100 Hz ODR, new mag data is available every 10 ms
 80047e8:	4b94      	ldr	r3, [pc, #592]	; (8004a3c <calibrateMag+0x2cc>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b06      	cmp	r3, #6
 80047ee:	d103      	bne.n	80047f8 <calibrateMag+0x88>
 80047f0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80047f4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
   for(ii = 0; ii < sample_count; ii++) {
 80047f8:	2300      	movs	r3, #0
 80047fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80047fe:	e05d      	b.n	80048bc <calibrateMag+0x14c>
    readMagData(I2Cx, mag_temp);  // Read the mag data
 8004800:	f107 0314 	add.w	r3, r7, #20
 8004804:	4619      	mov	r1, r3
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f7ff fe90 	bl	800452c <readMagData>
    for (int jj = 0; jj < 3; jj++) {
 800480c:	2300      	movs	r3, #0
 800480e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004810:	e03e      	b.n	8004890 <calibrateMag+0x120>
      if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 8004812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800481a:	4413      	add	r3, r2
 800481c:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8004820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004828:	440b      	add	r3, r1
 800482a:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 800482e:	429a      	cmp	r2, r3
 8004830:	dd0d      	ble.n	800484e <calibrateMag+0xde>
 8004832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800483a:	4413      	add	r3, r2
 800483c:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8004840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004848:	440b      	add	r3, r1
 800484a:	f823 2c2c 	strh.w	r2, [r3, #-44]
      if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 800484e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004856:	4413      	add	r3, r2
 8004858:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 800485c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004864:	440b      	add	r3, r1
 8004866:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 800486a:	429a      	cmp	r2, r3
 800486c:	da0d      	bge.n	800488a <calibrateMag+0x11a>
 800486e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004876:	4413      	add	r3, r2
 8004878:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 800487c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004884:	440b      	add	r3, r1
 8004886:	f823 2c34 	strh.w	r2, [r3, #-52]
    for (int jj = 0; jj < 3; jj++) {
 800488a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800488c:	3301      	adds	r3, #1
 800488e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004892:	2b02      	cmp	r3, #2
 8004894:	ddbd      	ble.n	8004812 <calibrateMag+0xa2>
    }
    if(Mmode == 0x02) HAL_Delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 8004896:	4b69      	ldr	r3, [pc, #420]	; (8004a3c <calibrateMag+0x2cc>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b02      	cmp	r3, #2
 800489c:	d102      	bne.n	80048a4 <calibrateMag+0x134>
 800489e:	2087      	movs	r0, #135	; 0x87
 80048a0:	f002 fce2 	bl	8007268 <HAL_Delay>
    if(Mmode == 0x06) HAL_Delay(12);  // at 100 Hz ODR, new mag data is available every 10 ms
 80048a4:	4b65      	ldr	r3, [pc, #404]	; (8004a3c <calibrateMag+0x2cc>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b06      	cmp	r3, #6
 80048aa:	d102      	bne.n	80048b2 <calibrateMag+0x142>
 80048ac:	200c      	movs	r0, #12
 80048ae:	f002 fcdb 	bl	8007268 <HAL_Delay>
   for(ii = 0; ii < sample_count; ii++) {
 80048b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048b6:	3301      	adds	r3, #1
 80048b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80048bc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80048c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d39b      	bcc.n	8004800 <calibrateMag+0x90>
    }

    // Get hard iron correction
    mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 80048c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80048cc:	461a      	mov	r2, r3
 80048ce:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80048d2:	4413      	add	r3, r2
 80048d4:	0fda      	lsrs	r2, r3, #31
 80048d6:	4413      	add	r3, r2
 80048d8:	105b      	asrs	r3, r3, #1
 80048da:	63bb      	str	r3, [r7, #56]	; 0x38
    mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 80048dc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80048e0:	461a      	mov	r2, r3
 80048e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80048e6:	4413      	add	r3, r2
 80048e8:	0fda      	lsrs	r2, r3, #31
 80048ea:	4413      	add	r3, r2
 80048ec:	105b      	asrs	r3, r3, #1
 80048ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 80048f0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80048f4:	461a      	mov	r2, r3
 80048f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80048fa:	4413      	add	r3, r2
 80048fc:	0fda      	lsrs	r2, r3, #31
 80048fe:	4413      	add	r3, r2
 8004900:	105b      	asrs	r3, r3, #1
 8004902:	643b      	str	r3, [r7, #64]	; 0x40

    dest1[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 8004904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004906:	ee07 3a90 	vmov	s15, r3
 800490a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800490e:	4b4c      	ldr	r3, [pc, #304]	; (8004a40 <calibrateMag+0x2d0>)
 8004910:	edd3 7a00 	vldr	s15, [r3]
 8004914:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004918:	4b4a      	ldr	r3, [pc, #296]	; (8004a44 <calibrateMag+0x2d4>)
 800491a:	edd3 7a00 	vldr	s15, [r3]
 800491e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	edc3 7a00 	vstr	s15, [r3]
    dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 8004928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004932:	4b43      	ldr	r3, [pc, #268]	; (8004a40 <calibrateMag+0x2d0>)
 8004934:	edd3 7a00 	vldr	s15, [r3]
 8004938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800493c:	4b41      	ldr	r3, [pc, #260]	; (8004a44 <calibrateMag+0x2d4>)
 800493e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	3304      	adds	r3, #4
 8004946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494a:	edc3 7a00 	vstr	s15, [r3]
    dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 800494e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004950:	ee07 3a90 	vmov	s15, r3
 8004954:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004958:	4b39      	ldr	r3, [pc, #228]	; (8004a40 <calibrateMag+0x2d0>)
 800495a:	edd3 7a00 	vldr	s15, [r3]
 800495e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004962:	4b38      	ldr	r3, [pc, #224]	; (8004a44 <calibrateMag+0x2d4>)
 8004964:	edd3 7a02 	vldr	s15, [r3, #8]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	3308      	adds	r3, #8
 800496c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004970:	edc3 7a00 	vstr	s15, [r3]

    // Get soft iron correction estimate
    mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 8004974:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004978:	461a      	mov	r2, r3
 800497a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	0fda      	lsrs	r2, r3, #31
 8004982:	4413      	add	r3, r2
 8004984:	105b      	asrs	r3, r3, #1
 8004986:	62fb      	str	r3, [r7, #44]	; 0x2c
    mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
 8004988:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800498c:	461a      	mov	r2, r3
 800498e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	0fda      	lsrs	r2, r3, #31
 8004996:	4413      	add	r3, r2
 8004998:	105b      	asrs	r3, r3, #1
 800499a:	633b      	str	r3, [r7, #48]	; 0x30
    mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 800499c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80049a0:	461a      	mov	r2, r3
 80049a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	0fda      	lsrs	r2, r3, #31
 80049aa:	4413      	add	r3, r2
 80049ac:	105b      	asrs	r3, r3, #1
 80049ae:	637b      	str	r3, [r7, #52]	; 0x34

    float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 80049b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	441a      	add	r2, r3
 80049b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b8:	4413      	add	r3, r2
 80049ba:	ee07 3a90 	vmov	s15, r3
 80049be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049c2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    avg_rad /= 3.0;
 80049c6:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80049ca:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80049ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049d2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

    dest2[0] = avg_rad/((float)mag_scale[0]);
 80049d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d8:	ee07 3a90 	vmov	s15, r3
 80049dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049e0:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80049e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	edc3 7a00 	vstr	s15, [r3]
    dest2[1] = avg_rad/((float)mag_scale[1]);
 80049ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f0:	ee07 3a90 	vmov	s15, r3
 80049f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3304      	adds	r3, #4
 80049fc:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8004a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a04:	edc3 7a00 	vstr	s15, [r3]
    dest2[2] = avg_rad/((float)mag_scale[2]);
 8004a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a0a:	ee07 3a90 	vmov	s15, r3
 8004a0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3308      	adds	r3, #8
 8004a16:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8004a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a1e:	edc3 7a00 	vstr	s15, [r3]

    printf("Mag Calibration done!\r\n");
 8004a22:	4809      	ldr	r0, [pc, #36]	; (8004a48 <calibrateMag+0x2d8>)
 8004a24:	f00b fd76 	bl	8010514 <puts>
}
 8004a28:	bf00      	nop
 8004a2a:	3750      	adds	r7, #80	; 0x50
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	0801547c 	.word	0x0801547c
 8004a34:	08015484 	.word	0x08015484
 8004a38:	08015428 	.word	0x08015428
 8004a3c:	20000003 	.word	0x20000003
 8004a40:	20002940 	.word	0x20002940
 8004a44:	20000254 	.word	0x20000254
 8004a48:	08015464 	.word	0x08015464

08004a4c <initMPU9250>:


void initMPU9250(I2C_HandleTypeDef *I2Cx){
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b088      	sub	sp, #32
 8004a50:	af04      	add	r7, sp, #16
 8004a52:	6078      	str	r0, [r7, #4]
	//pre def. vars
	uint8_t readData;
	uint8_t writeData;

	//Wake up device
	writeData = 0x00;
 8004a54:	2300      	movs	r3, #0
 8004a56:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8004a58:	2364      	movs	r3, #100	; 0x64
 8004a5a:	9302      	str	r3, [sp, #8]
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	f107 030e 	add.w	r3, r7, #14
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	2301      	movs	r3, #1
 8004a68:	226b      	movs	r2, #107	; 0x6b
 8004a6a:	21d0      	movs	r1, #208	; 0xd0
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f003 fc43 	bl	80082f8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004a72:	2064      	movs	r0, #100	; 0x64
 8004a74:	f002 fbf8 	bl	8007268 <HAL_Delay>

	writeData = 0x01;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8004a7c:	2364      	movs	r3, #100	; 0x64
 8004a7e:	9302      	str	r3, [sp, #8]
 8004a80:	2301      	movs	r3, #1
 8004a82:	9301      	str	r3, [sp, #4]
 8004a84:	f107 030e 	add.w	r3, r7, #14
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	226b      	movs	r2, #107	; 0x6b
 8004a8e:	21d0      	movs	r1, #208	; 0xd0
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f003 fc31 	bl	80082f8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004a96:	2064      	movs	r0, #100	; 0x64
 8004a98:	f002 fbe6 	bl	8007268 <HAL_Delay>

	writeData = 0x03;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);
 8004aa0:	2364      	movs	r3, #100	; 0x64
 8004aa2:	9302      	str	r3, [sp, #8]
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	f107 030e 	add.w	r3, r7, #14
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	2301      	movs	r3, #1
 8004ab0:	221a      	movs	r2, #26
 8004ab2:	21d0      	movs	r1, #208	; 0xd0
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f003 fc1f 	bl	80082f8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004aba:	2064      	movs	r0, #100	; 0x64
 8004abc:	f002 fbd4 	bl	8007268 <HAL_Delay>

	writeData = 0x04;
 8004ac0:	2304      	movs	r3, #4
 8004ac2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);
 8004ac4:	2364      	movs	r3, #100	; 0x64
 8004ac6:	9302      	str	r3, [sp, #8]
 8004ac8:	2301      	movs	r3, #1
 8004aca:	9301      	str	r3, [sp, #4]
 8004acc:	f107 030e 	add.w	r3, r7, #14
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	2219      	movs	r2, #25
 8004ad6:	21d0      	movs	r1, #208	; 0xd0
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f003 fc0d 	bl	80082f8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004ade:	2064      	movs	r0, #100	; 0x64
 8004ae0:	f002 fbc2 	bl	8007268 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &readData, 1, i2c_timeout);
 8004ae4:	2364      	movs	r3, #100	; 0x64
 8004ae6:	9302      	str	r3, [sp, #8]
 8004ae8:	2301      	movs	r3, #1
 8004aea:	9301      	str	r3, [sp, #4]
 8004aec:	f107 030f 	add.w	r3, r7, #15
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	2301      	movs	r3, #1
 8004af4:	221b      	movs	r2, #27
 8004af6:	21d0      	movs	r1, #208	; 0xd0
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f003 fd11 	bl	8008520 <HAL_I2C_Mem_Read>
	readData = readData & ~0x03; // Clear Fchoice bits [1:0]
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	f023 0303 	bic.w	r3, r3, #3
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	73fb      	strb	r3, [r7, #15]
	readData = readData & ~0x18; // Clear GFS bits [4:3]
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	f023 0318 	bic.w	r3, r3, #24
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	73fb      	strb	r3, [r7, #15]
	readData = readData | Gscale << 3; // Set full scale range for the gyro
 8004b12:	4b3d      	ldr	r3, [pc, #244]	; (8004c08 <initMPU9250+0x1bc>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	b25a      	sxtb	r2, r3
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	b25b      	sxtb	r3, r3
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	b25b      	sxtb	r3, r3
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 8004b26:	2064      	movs	r0, #100	; 0x64
 8004b28:	f002 fb9e 	bl	8007268 <HAL_Delay>

	writeData = readData;
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 8004b30:	2364      	movs	r3, #100	; 0x64
 8004b32:	9302      	str	r3, [sp, #8]
 8004b34:	2301      	movs	r3, #1
 8004b36:	9301      	str	r3, [sp, #4]
 8004b38:	f107 030e 	add.w	r3, r7, #14
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	2301      	movs	r3, #1
 8004b40:	221b      	movs	r2, #27
 8004b42:	21d0      	movs	r1, #208	; 0xd0
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f003 fbd7 	bl	80082f8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004b4a:	2064      	movs	r0, #100	; 0x64
 8004b4c:	f002 fb8c 	bl	8007268 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &readData, 1, i2c_timeout);
 8004b50:	2364      	movs	r3, #100	; 0x64
 8004b52:	9302      	str	r3, [sp, #8]
 8004b54:	2301      	movs	r3, #1
 8004b56:	9301      	str	r3, [sp, #4]
 8004b58:	f107 030f 	add.w	r3, r7, #15
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	2301      	movs	r3, #1
 8004b60:	221c      	movs	r2, #28
 8004b62:	21d0      	movs	r1, #208	; 0xd0
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f003 fcdb 	bl	8008520 <HAL_I2C_Mem_Read>
	readData = readData & ~0x18;  // Clear AFS bits [4:3]
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	f023 0318 	bic.w	r3, r3, #24
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	73fb      	strb	r3, [r7, #15]
	readData = readData | Ascale << 3; // Set full scale range for the accelerometer
 8004b74:	4b25      	ldr	r3, [pc, #148]	; (8004c0c <initMPU9250+0x1c0>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	b25a      	sxtb	r2, r3
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	b25b      	sxtb	r3, r3
 8004b80:	4313      	orrs	r3, r2
 8004b82:	b25b      	sxtb	r3, r3
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
 8004b8a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8004b8c:	2364      	movs	r3, #100	; 0x64
 8004b8e:	9302      	str	r3, [sp, #8]
 8004b90:	2301      	movs	r3, #1
 8004b92:	9301      	str	r3, [sp, #4]
 8004b94:	f107 030e 	add.w	r3, r7, #14
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	221c      	movs	r2, #28
 8004b9e:	21d0      	movs	r1, #208	; 0xd0
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f003 fba9 	bl	80082f8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004ba6:	2064      	movs	r0, #100	; 0x64
 8004ba8:	f002 fb5e 	bl	8007268 <HAL_Delay>
	//**
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &readData, 1, i2c_timeout);
 8004bac:	2364      	movs	r3, #100	; 0x64
 8004bae:	9302      	str	r3, [sp, #8]
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	9301      	str	r3, [sp, #4]
 8004bb4:	f107 030f 	add.w	r3, r7, #15
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	2301      	movs	r3, #1
 8004bbc:	221d      	movs	r2, #29
 8004bbe:	21d0      	movs	r1, #208	; 0xd0
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f003 fcad 	bl	8008520 <HAL_I2C_Mem_Read>
	readData = readData & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	f023 030f 	bic.w	r3, r3, #15
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	73fb      	strb	r3, [r7, #15]
	readData = readData | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
 8004bd2:	f043 0303 	orr.w	r3, r3, #3
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	73fb      	strb	r3, [r7, #15]

	writeData = readData;
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);
 8004bde:	2364      	movs	r3, #100	; 0x64
 8004be0:	9302      	str	r3, [sp, #8]
 8004be2:	2301      	movs	r3, #1
 8004be4:	9301      	str	r3, [sp, #4]
 8004be6:	f107 030e 	add.w	r3, r7, #14
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	2301      	movs	r3, #1
 8004bee:	221d      	movs	r2, #29
 8004bf0:	21d0      	movs	r1, #208	; 0xd0
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f003 fb80 	bl	80082f8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004bf8:	2064      	movs	r0, #100	; 0x64
 8004bfa:	f002 fb35 	bl	8007268 <HAL_Delay>

	if(SerialDebugA){printf("MPU Init Succesful! \r\n");}
}
 8004bfe:	bf00      	nop
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20000000 	.word	0x20000000
 8004c0c:	20000001 	.word	0x20000001

08004c10 <calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b09e      	sub	sp, #120	; 0x78
 8004c14:	af04      	add	r7, sp, #16
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  //pre def. vars
  uint8_t writeData;

	uint8_t calibData[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c20:	2300      	movs	r3, #0
 8004c22:	643b      	str	r3, [r7, #64]	; 0x40
 8004c24:	2300      	movs	r3, #0
 8004c26:	647b      	str	r3, [r7, #68]	; 0x44
 8004c28:	2300      	movs	r3, #0
 8004c2a:	633b      	str	r3, [r7, #48]	; 0x30
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c30:	2300      	movs	r3, #0
 8004c32:	63bb      	str	r3, [r7, #56]	; 0x38

	// reset device
	writeData = 0x80;
 8004c34:	2380      	movs	r3, #128	; 0x80
 8004c36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Write a one to bit 7 reset bit; toggle reset device
 8004c3a:	2364      	movs	r3, #100	; 0x64
 8004c3c:	9302      	str	r3, [sp, #8]
 8004c3e:	2301      	movs	r3, #1
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	2301      	movs	r3, #1
 8004c4a:	226b      	movs	r2, #107	; 0x6b
 8004c4c:	21d0      	movs	r1, #208	; 0xd0
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f003 fb52 	bl	80082f8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004c54:	2064      	movs	r0, #100	; 0x64
 8004c56:	f002 fb07 	bl	8007268 <HAL_Delay>

	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeData = 0x01;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8004c60:	2364      	movs	r3, #100	; 0x64
 8004c62:	9302      	str	r3, [sp, #8]
 8004c64:	2301      	movs	r3, #1
 8004c66:	9301      	str	r3, [sp, #4]
 8004c68:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	2301      	movs	r3, #1
 8004c70:	226b      	movs	r2, #107	; 0x6b
 8004c72:	21d0      	movs	r1, #208	; 0xd0
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f003 fb3f 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_2, 1, &writeData, 1, i2c_timeout);
 8004c80:	2364      	movs	r3, #100	; 0x64
 8004c82:	9302      	str	r3, [sp, #8]
 8004c84:	2301      	movs	r3, #1
 8004c86:	9301      	str	r3, [sp, #4]
 8004c88:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	2301      	movs	r3, #1
 8004c90:	226c      	movs	r2, #108	; 0x6c
 8004c92:	21d0      	movs	r1, #208	; 0xd0
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f003 fb2f 	bl	80082f8 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 8004c9a:	20c8      	movs	r0, #200	; 0xc8
 8004c9c:	f002 fae4 	bl	8007268 <HAL_Delay>

	// Configure device for bias calculation
	writeData = 0x00;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_ENABLE, 1, &writeData, 1, i2c_timeout);// Disable all interrupts
 8004ca6:	2364      	movs	r3, #100	; 0x64
 8004ca8:	9302      	str	r3, [sp, #8]
 8004caa:	2301      	movs	r3, #1
 8004cac:	9301      	str	r3, [sp, #4]
 8004cae:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	2238      	movs	r2, #56	; 0x38
 8004cb8:	21d0      	movs	r1, #208	; 0xd0
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f003 fb1c 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable FIFO
 8004cc6:	2364      	movs	r3, #100	; 0x64
 8004cc8:	9302      	str	r3, [sp, #8]
 8004cca:	2301      	movs	r3, #1
 8004ccc:	9301      	str	r3, [sp, #4]
 8004cce:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	2223      	movs	r2, #35	; 0x23
 8004cd8:	21d0      	movs	r1, #208	; 0xd0
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f003 fb0c 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Turn on internal clock source
 8004ce6:	2364      	movs	r3, #100	; 0x64
 8004ce8:	9302      	str	r3, [sp, #8]
 8004cea:	2301      	movs	r3, #1
 8004cec:	9301      	str	r3, [sp, #4]
 8004cee:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	226b      	movs	r2, #107	; 0x6b
 8004cf8:	21d0      	movs	r1, #208	; 0xd0
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f003 fafc 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004d00:	2300      	movs	r3, #0
 8004d02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, I2C_MST_CTRL, 1, &writeData, 1, i2c_timeout);// Disable I2C master
 8004d06:	2364      	movs	r3, #100	; 0x64
 8004d08:	9302      	str	r3, [sp, #8]
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	9301      	str	r3, [sp, #4]
 8004d0e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	2301      	movs	r3, #1
 8004d16:	2224      	movs	r2, #36	; 0x24
 8004d18:	21d0      	movs	r1, #208	; 0xd0
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f003 faec 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004d20:	2300      	movs	r3, #0
 8004d22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Disable FIFO and I2C master modes
 8004d26:	2364      	movs	r3, #100	; 0x64
 8004d28:	9302      	str	r3, [sp, #8]
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	2301      	movs	r3, #1
 8004d36:	226a      	movs	r2, #106	; 0x6a
 8004d38:	21d0      	movs	r1, #208	; 0xd0
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f003 fadc 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = 0x0C;
 8004d40:	230c      	movs	r3, #12
 8004d42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Reset FIFO and DMP
 8004d46:	2364      	movs	r3, #100	; 0x64
 8004d48:	9302      	str	r3, [sp, #8]
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	9301      	str	r3, [sp, #4]
 8004d4e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	2301      	movs	r3, #1
 8004d56:	226a      	movs	r2, #106	; 0x6a
 8004d58:	21d0      	movs	r1, #208	; 0xd0
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f003 facc 	bl	80082f8 <HAL_I2C_Mem_Write>
	HAL_Delay(15);
 8004d60:	200f      	movs	r0, #15
 8004d62:	f002 fa81 	bl	8007268 <HAL_Delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeData = 0x01;
 8004d66:	2301      	movs	r3, #1
 8004d68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set low-pass filter to 188 Hz
 8004d6c:	2364      	movs	r3, #100	; 0x64
 8004d6e:	9302      	str	r3, [sp, #8]
 8004d70:	2301      	movs	r3, #1
 8004d72:	9301      	str	r3, [sp, #4]
 8004d74:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	221a      	movs	r2, #26
 8004d7e:	21d0      	movs	r1, #208	; 0xd0
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f003 fab9 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004d86:	2300      	movs	r3, #0
 8004d88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set sample rate to 1 kHz
 8004d8c:	2364      	movs	r3, #100	; 0x64
 8004d8e:	9302      	str	r3, [sp, #8]
 8004d90:	2301      	movs	r3, #1
 8004d92:	9301      	str	r3, [sp, #4]
 8004d94:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	2219      	movs	r2, #25
 8004d9e:	21d0      	movs	r1, #208	; 0xd0
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f003 faa9 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004da6:	2300      	movs	r3, #0
 8004da8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8004dac:	2364      	movs	r3, #100	; 0x64
 8004dae:	9302      	str	r3, [sp, #8]
 8004db0:	2301      	movs	r3, #1
 8004db2:	9301      	str	r3, [sp, #4]
 8004db4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	2301      	movs	r3, #1
 8004dbc:	221b      	movs	r2, #27
 8004dbe:	21d0      	movs	r1, #208	; 0xd0
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f003 fa99 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8004dcc:	2364      	movs	r3, #100	; 0x64
 8004dce:	9302      	str	r3, [sp, #8]
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	9301      	str	r3, [sp, #4]
 8004dd4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	2301      	movs	r3, #1
 8004ddc:	221c      	movs	r2, #28
 8004dde:	21d0      	movs	r1, #208	; 0xd0
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f003 fa89 	bl	80082f8 <HAL_I2C_Mem_Write>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8004de6:	2383      	movs	r3, #131	; 0x83
 8004de8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8004dec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004df0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeData = 0x40;
 8004df4:	2340      	movs	r3, #64	; 0x40
 8004df6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Enable FIFO
 8004dfa:	2364      	movs	r3, #100	; 0x64
 8004dfc:	9302      	str	r3, [sp, #8]
 8004dfe:	2301      	movs	r3, #1
 8004e00:	9301      	str	r3, [sp, #4]
 8004e02:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	2301      	movs	r3, #1
 8004e0a:	226a      	movs	r2, #106	; 0x6a
 8004e0c:	21d0      	movs	r1, #208	; 0xd0
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f003 fa72 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = 0x78;
 8004e14:	2378      	movs	r3, #120	; 0x78
 8004e16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8004e1a:	2364      	movs	r3, #100	; 0x64
 8004e1c:	9302      	str	r3, [sp, #8]
 8004e1e:	2301      	movs	r3, #1
 8004e20:	9301      	str	r3, [sp, #4]
 8004e22:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	2301      	movs	r3, #1
 8004e2a:	2223      	movs	r2, #35	; 0x23
 8004e2c:	21d0      	movs	r1, #208	; 0xd0
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f003 fa62 	bl	80082f8 <HAL_I2C_Mem_Write>
	HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8004e34:	2028      	movs	r0, #40	; 0x28
 8004e36:	f002 fa17 	bl	8007268 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeData = 0x00;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable gyro and accelerometer sensors for FIFO
 8004e40:	2364      	movs	r3, #100	; 0x64
 8004e42:	9302      	str	r3, [sp, #8]
 8004e44:	2301      	movs	r3, #1
 8004e46:	9301      	str	r3, [sp, #4]
 8004e48:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	2301      	movs	r3, #1
 8004e50:	2223      	movs	r2, #35	; 0x23
 8004e52:	21d0      	movs	r1, #208	; 0xd0
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f003 fa4f 	bl	80082f8 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_COUNTH, 1, &calibData[0], 2, i2c_timeout);// read FIFO sample count
 8004e5a:	2364      	movs	r3, #100	; 0x64
 8004e5c:	9302      	str	r3, [sp, #8]
 8004e5e:	2302      	movs	r3, #2
 8004e60:	9301      	str	r3, [sp, #4]
 8004e62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	2301      	movs	r3, #1
 8004e6a:	2272      	movs	r2, #114	; 0x72
 8004e6c:	21d0      	movs	r1, #208	; 0xd0
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f003 fb56 	bl	8008520 <HAL_I2C_Mem_Read>
	fifo_count = ((uint16_t)calibData[0] << 8) | calibData[1];
 8004e74:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004e78:	021b      	lsls	r3, r3, #8
 8004e7a:	b21a      	sxth	r2, r3
 8004e7c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004e80:	b21b      	sxth	r3, r3
 8004e82:	4313      	orrs	r3, r2
 8004e84:	b21b      	sxth	r3, r3
 8004e86:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8004e8a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8004e8e:	4a5a      	ldr	r2, [pc, #360]	; (8004ff8 <calibrateMPU9250+0x3e8>)
 8004e90:	fba2 2303 	umull	r2, r3, r2, r3
 8004e94:	08db      	lsrs	r3, r3, #3
 8004e96:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	for (ii = 0; ii < packet_count; ii++) {
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004ea0:	e077      	b.n	8004f92 <calibrateMPU9250+0x382>
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	833b      	strh	r3, [r7, #24]
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	837b      	strh	r3, [r7, #26]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	83bb      	strh	r3, [r7, #28]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	823b      	strh	r3, [r7, #16]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	827b      	strh	r3, [r7, #18]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_R_W, 1, &calibData[0], 12, i2c_timeout);
 8004eba:	2364      	movs	r3, #100	; 0x64
 8004ebc:	9302      	str	r3, [sp, #8]
 8004ebe:	230c      	movs	r3, #12
 8004ec0:	9301      	str	r3, [sp, #4]
 8004ec2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	2301      	movs	r3, #1
 8004eca:	2274      	movs	r2, #116	; 0x74
 8004ecc:	21d0      	movs	r1, #208	; 0xd0
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f003 fb26 	bl	8008520 <HAL_I2C_Mem_Read>

		//Form signed 16-bit integer for each sample in FIFO
		accel_temp[0] = (int16_t) (((int16_t)calibData[0] << 8) | calibData[1]  ) ;
 8004ed4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004ed8:	021b      	lsls	r3, r3, #8
 8004eda:	b21a      	sxth	r2, r3
 8004edc:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004ee0:	b21b      	sxth	r3, r3
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	b21b      	sxth	r3, r3
 8004ee6:	833b      	strh	r3, [r7, #24]
		accel_temp[1] = (int16_t) (((int16_t)calibData[2] << 8) | calibData[3]  ) ;
 8004ee8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004eec:	021b      	lsls	r3, r3, #8
 8004eee:	b21a      	sxth	r2, r3
 8004ef0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004ef4:	b21b      	sxth	r3, r3
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	b21b      	sxth	r3, r3
 8004efa:	837b      	strh	r3, [r7, #26]
		accel_temp[2] = (int16_t) (((int16_t)calibData[4] << 8) | calibData[5]  ) ;
 8004efc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004f00:	021b      	lsls	r3, r3, #8
 8004f02:	b21a      	sxth	r2, r3
 8004f04:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004f08:	b21b      	sxth	r3, r3
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	b21b      	sxth	r3, r3
 8004f0e:	83bb      	strh	r3, [r7, #28]
		gyro_temp[0]  = (int16_t) (((int16_t)calibData[6] << 8) | calibData[7]  ) ;
 8004f10:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8004f14:	021b      	lsls	r3, r3, #8
 8004f16:	b21a      	sxth	r2, r3
 8004f18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004f1c:	b21b      	sxth	r3, r3
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	b21b      	sxth	r3, r3
 8004f22:	823b      	strh	r3, [r7, #16]
		gyro_temp[1]  = (int16_t) (((int16_t)calibData[8] << 8) | calibData[9]  ) ;
 8004f24:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	b21a      	sxth	r2, r3
 8004f2c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8004f30:	b21b      	sxth	r3, r3
 8004f32:	4313      	orrs	r3, r2
 8004f34:	b21b      	sxth	r3, r3
 8004f36:	827b      	strh	r3, [r7, #18]
		gyro_temp[2]  = (int16_t) (((int16_t)calibData[10] << 8) | calibData[11]) ;
 8004f38:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	b21a      	sxth	r2, r3
 8004f40:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004f44:	b21b      	sxth	r3, r3
 8004f46:	4313      	orrs	r3, r2
 8004f48:	b21b      	sxth	r3, r3
 8004f4a:	82bb      	strh	r3, [r7, #20]

		//Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[0] += (int32_t) accel_temp[0];
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004f52:	4413      	add	r3, r2
 8004f54:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[1] += (int32_t) accel_temp[1];
 8004f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f58:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	637b      	str	r3, [r7, #52]	; 0x34
		accel_bias[2] += (int32_t) accel_temp[2];
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004f66:	4413      	add	r3, r2
 8004f68:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 8004f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f6c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004f70:	4413      	add	r3, r2
 8004f72:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8004f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f76:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8004f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f80:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004f84:	4413      	add	r3, r2
 8004f86:	647b      	str	r3, [r7, #68]	; 0x44
	for (ii = 0; ii < packet_count; ii++) {
 8004f88:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004f92:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8004f96:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d381      	bcc.n	8004ea2 <calibrateMPU9250+0x292>
	}

	//Normalize sums to get average count biases
	accel_bias[0] /= (int32_t) packet_count;
 8004f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fa0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004fa4:	fb92 f3f3 	sdiv	r3, r2, r3
 8004fa8:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[1] /= (int32_t) packet_count;
 8004faa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fac:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004fb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8004fb4:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias[2] /= (int32_t) packet_count;
 8004fb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fb8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004fbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8004fc0:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[0]  /= (int32_t) packet_count;
 8004fc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fc4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004fc8:	fb92 f3f3 	sdiv	r3, r2, r3
 8004fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[1]  /= (int32_t) packet_count;
 8004fce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fd0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004fd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8004fd8:	643b      	str	r3, [r7, #64]	; 0x40
	gyro_bias[2]  /= (int32_t) packet_count;
 8004fda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fdc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004fe0:	fb92 f3f3 	sdiv	r3, r2, r3
 8004fe4:	647b      	str	r3, [r7, #68]	; 0x44

	//Remove gravity from the z-axis accelerometer bias calculation
	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}
 8004fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	dd07      	ble.n	8004ffc <calibrateMPU9250+0x3ec>
 8004fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ff6:	e006      	b.n	8005006 <calibrateMPU9250+0x3f6>
 8004ff8:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 8004ffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ffe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005002:	4413      	add	r3, r2
 8005004:	63bb      	str	r3, [r7, #56]	; 0x38

	//Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	calibData[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8005006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005008:	425b      	negs	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	da00      	bge.n	8005010 <calibrateMPU9250+0x400>
 800500e:	3303      	adds	r3, #3
 8005010:	109b      	asrs	r3, r3, #2
 8005012:	121b      	asrs	r3, r3, #8
 8005014:	b2db      	uxtb	r3, r3
 8005016:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 800501a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501c:	425b      	negs	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	da00      	bge.n	8005024 <calibrateMPU9250+0x414>
 8005022:	3303      	adds	r3, #3
 8005024:	109b      	asrs	r3, r3, #2
 8005026:	b2db      	uxtb	r3, r3
 8005028:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 800502c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800502e:	425b      	negs	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	da00      	bge.n	8005036 <calibrateMPU9250+0x426>
 8005034:	3303      	adds	r3, #3
 8005036:	109b      	asrs	r3, r3, #2
 8005038:	121b      	asrs	r3, r3, #8
 800503a:	b2db      	uxtb	r3, r3
 800503c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (-gyro_bias[1]/4)       & 0xFF;
 8005040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005042:	425b      	negs	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	da00      	bge.n	800504a <calibrateMPU9250+0x43a>
 8005048:	3303      	adds	r3, #3
 800504a:	109b      	asrs	r3, r3, #2
 800504c:	b2db      	uxtb	r3, r3
 800504e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8005052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005054:	425b      	negs	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	da00      	bge.n	800505c <calibrateMPU9250+0x44c>
 800505a:	3303      	adds	r3, #3
 800505c:	109b      	asrs	r3, r3, #2
 800505e:	121b      	asrs	r3, r3, #8
 8005060:	b2db      	uxtb	r3, r3
 8005062:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (-gyro_bias[2]/4)       & 0xFF;
 8005066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005068:	425b      	negs	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	da00      	bge.n	8005070 <calibrateMPU9250+0x460>
 800506e:	3303      	adds	r3, #3
 8005070:	109b      	asrs	r3, r3, #2
 8005072:	b2db      	uxtb	r3, r3
 8005074:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push gyro biases to hardware registers
	writeData = calibData[0];
 8005078:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800507c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8005080:	2364      	movs	r3, #100	; 0x64
 8005082:	9302      	str	r3, [sp, #8]
 8005084:	2301      	movs	r3, #1
 8005086:	9301      	str	r3, [sp, #4]
 8005088:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	2301      	movs	r3, #1
 8005090:	2213      	movs	r2, #19
 8005092:	21d0      	movs	r1, #208	; 0xd0
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f003 f92f 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 800509a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800509e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80050a2:	2364      	movs	r3, #100	; 0x64
 80050a4:	9302      	str	r3, [sp, #8]
 80050a6:	2301      	movs	r3, #1
 80050a8:	9301      	str	r3, [sp, #4]
 80050aa:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	2301      	movs	r3, #1
 80050b2:	2214      	movs	r2, #20
 80050b4:	21d0      	movs	r1, #208	; 0xd0
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f003 f91e 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 80050bc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80050c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80050c4:	2364      	movs	r3, #100	; 0x64
 80050c6:	9302      	str	r3, [sp, #8]
 80050c8:	2301      	movs	r3, #1
 80050ca:	9301      	str	r3, [sp, #4]
 80050cc:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	2301      	movs	r3, #1
 80050d4:	2215      	movs	r2, #21
 80050d6:	21d0      	movs	r1, #208	; 0xd0
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f003 f90d 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 80050de:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80050e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80050e6:	2364      	movs	r3, #100	; 0x64
 80050e8:	9302      	str	r3, [sp, #8]
 80050ea:	2301      	movs	r3, #1
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	2301      	movs	r3, #1
 80050f6:	2216      	movs	r2, #22
 80050f8:	21d0      	movs	r1, #208	; 0xd0
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f003 f8fc 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8005100:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005104:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8005108:	2364      	movs	r3, #100	; 0x64
 800510a:	9302      	str	r3, [sp, #8]
 800510c:	2301      	movs	r3, #1
 800510e:	9301      	str	r3, [sp, #4]
 8005110:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	2301      	movs	r3, #1
 8005118:	2217      	movs	r2, #23
 800511a:	21d0      	movs	r1, #208	; 0xd0
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f003 f8eb 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8005122:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005126:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800512a:	2364      	movs	r3, #100	; 0x64
 800512c:	9302      	str	r3, [sp, #8]
 800512e:	2301      	movs	r3, #1
 8005130:	9301      	str	r3, [sp, #4]
 8005132:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	2301      	movs	r3, #1
 800513a:	2218      	movs	r2, #24
 800513c:	21d0      	movs	r1, #208	; 0xd0
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f003 f8da 	bl	80082f8 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 8005144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800514e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800515a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8005164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800516e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005172:	ee07 3a90 	vmov	s15, r3
 8005176:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	3304      	adds	r3, #4
 800517e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005182:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8005186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005188:	ee07 3a90 	vmov	s15, r3
 800518c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005190:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005194:	ee07 3a90 	vmov	s15, r3
 8005198:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	3308      	adds	r3, #8
 80051a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051a4:	edc3 7a00 	vstr	s15, [r3]

		printf("-------------------------\r\n");
	}

	//Construct the accelerometer biases for push to the hardware accelerometer bias registers.
	int32_t accel_bias_reg[3] = {0, 0, 0}; //A place to hold the factory accelerometer trim biases
 80051a8:	2300      	movs	r3, #0
 80051aa:	627b      	str	r3, [r7, #36]	; 0x24
 80051ac:	2300      	movs	r3, #0
 80051ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80051b0:	2300      	movs	r3, #0
 80051b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout); //Read factory accelerometer trim values
 80051b4:	2364      	movs	r3, #100	; 0x64
 80051b6:	9302      	str	r3, [sp, #8]
 80051b8:	2302      	movs	r3, #2
 80051ba:	9301      	str	r3, [sp, #4]
 80051bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	2301      	movs	r3, #1
 80051c4:	2277      	movs	r2, #119	; 0x77
 80051c6:	21d0      	movs	r1, #208	; 0xd0
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f003 f9a9 	bl	8008520 <HAL_I2C_Mem_Read>
	accel_bias_reg[0] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 80051ce:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80051d8:	4313      	orrs	r3, r2
 80051da:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 80051dc:	2364      	movs	r3, #100	; 0x64
 80051de:	9302      	str	r3, [sp, #8]
 80051e0:	2302      	movs	r3, #2
 80051e2:	9301      	str	r3, [sp, #4]
 80051e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	2301      	movs	r3, #1
 80051ec:	227a      	movs	r2, #122	; 0x7a
 80051ee:	21d0      	movs	r1, #208	; 0xd0
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f003 f995 	bl	8008520 <HAL_I2C_Mem_Read>
	accel_bias_reg[1] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 80051f6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80051fa:	021b      	lsls	r3, r3, #8
 80051fc:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8005200:	4313      	orrs	r3, r2
 8005202:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8005204:	2364      	movs	r3, #100	; 0x64
 8005206:	9302      	str	r3, [sp, #8]
 8005208:	2302      	movs	r3, #2
 800520a:	9301      	str	r3, [sp, #4]
 800520c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	2301      	movs	r3, #1
 8005214:	227d      	movs	r2, #125	; 0x7d
 8005216:	21d0      	movs	r1, #208	; 0xd0
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f003 f981 	bl	8008520 <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 800521e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005222:	021b      	lsls	r3, r3, #8
 8005224:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8005228:	4313      	orrs	r3, r2
 800522a:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint32_t mask = 1uL;
 800522c:	2301      	movs	r3, #1
 800522e:	65bb      	str	r3, [r7, #88]	; 0x58
	//Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = {0, 0, 0};
 8005230:	4a8a      	ldr	r2, [pc, #552]	; (800545c <calibrateMPU9250+0x84c>)
 8005232:	f107 0320 	add.w	r3, r7, #32
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	4611      	mov	r1, r2
 800523a:	8019      	strh	r1, [r3, #0]
 800523c:	3302      	adds	r3, #2
 800523e:	0c12      	lsrs	r2, r2, #16
 8005240:	701a      	strb	r2, [r3, #0]

	for(ii = 0; ii < 3; ii++) {
 8005242:	2300      	movs	r3, #0
 8005244:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005248:	e019      	b.n	800527e <calibrateMPU9250+0x66e>
		//If temperature compensation bit is set, record that fact in mask_bit
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01;
 800524a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8005254:	4413      	add	r3, r2
 8005256:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800525a:	461a      	mov	r2, r3
 800525c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800525e:	4013      	ands	r3, r2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d007      	beq.n	8005274 <calibrateMPU9250+0x664>
 8005264:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005268:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800526c:	4413      	add	r3, r2
 800526e:	2201      	movs	r2, #1
 8005270:	f803 2c48 	strb.w	r2, [r3, #-72]
	for(ii = 0; ii < 3; ii++) {
 8005274:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005278:	3301      	adds	r3, #1
 800527a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800527e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005282:	2b02      	cmp	r3, #2
 8005284:	d9e1      	bls.n	800524a <calibrateMPU9250+0x63a>
	}

	//Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); //Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8005286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528a:	2b00      	cmp	r3, #0
 800528c:	da00      	bge.n	8005290 <calibrateMPU9250+0x680>
 800528e:	3307      	adds	r3, #7
 8005290:	10db      	asrs	r3, r3, #3
 8005292:	425b      	negs	r3, r3
 8005294:	4413      	add	r3, r2
 8005296:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[1] -= (accel_bias[1]/8);
 8005298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800529a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529c:	2b00      	cmp	r3, #0
 800529e:	da00      	bge.n	80052a2 <calibrateMPU9250+0x692>
 80052a0:	3307      	adds	r3, #7
 80052a2:	10db      	asrs	r3, r3, #3
 80052a4:	425b      	negs	r3, r3
 80052a6:	4413      	add	r3, r2
 80052a8:	62bb      	str	r3, [r7, #40]	; 0x28
	accel_bias_reg[2] -= (accel_bias[2]/8);
 80052aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	da00      	bge.n	80052b4 <calibrateMPU9250+0x6a4>
 80052b2:	3307      	adds	r3, #7
 80052b4:	10db      	asrs	r3, r3, #3
 80052b6:	425b      	negs	r3, r3
 80052b8:	4413      	add	r3, r2
 80052ba:	62fb      	str	r3, [r7, #44]	; 0x2c

	calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	121b      	asrs	r3, r3, #8
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (accel_bias_reg[0])      & 0xFF;
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80052ce:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80052d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80052de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e0:	121b      	asrs	r3, r3, #8
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (accel_bias_reg[1])      & 0xFF;
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80052f0:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80052f4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80052f8:	4313      	orrs	r3, r2
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8005300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005302:	121b      	asrs	r3, r3, #8
 8005304:	b2db      	uxtb	r3, r3
 8005306:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (accel_bias_reg[2])      & 0xFF;
 800530a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530c:	b2db      	uxtb	r3, r3
 800530e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8005312:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005316:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800531a:	4313      	orrs	r3, r2
 800531c:	b2db      	uxtb	r3, r3
 800531e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push accelerometer biases to hardware registers
	writeData = calibData[0];
 8005322:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005326:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800532a:	2364      	movs	r3, #100	; 0x64
 800532c:	9302      	str	r3, [sp, #8]
 800532e:	2301      	movs	r3, #1
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	2301      	movs	r3, #1
 800533a:	2277      	movs	r2, #119	; 0x77
 800533c:	21d0      	movs	r1, #208	; 0xd0
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f002 ffda 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8005344:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005348:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 800534c:	2364      	movs	r3, #100	; 0x64
 800534e:	9302      	str	r3, [sp, #8]
 8005350:	2301      	movs	r3, #1
 8005352:	9301      	str	r3, [sp, #4]
 8005354:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	2301      	movs	r3, #1
 800535c:	2278      	movs	r2, #120	; 0x78
 800535e:	21d0      	movs	r1, #208	; 0xd0
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f002 ffc9 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8005366:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800536a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 800536e:	2364      	movs	r3, #100	; 0x64
 8005370:	9302      	str	r3, [sp, #8]
 8005372:	2301      	movs	r3, #1
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	2301      	movs	r3, #1
 800537e:	227a      	movs	r2, #122	; 0x7a
 8005380:	21d0      	movs	r1, #208	; 0xd0
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f002 ffb8 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 8005388:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800538c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8005390:	2364      	movs	r3, #100	; 0x64
 8005392:	9302      	str	r3, [sp, #8]
 8005394:	2301      	movs	r3, #1
 8005396:	9301      	str	r3, [sp, #4]
 8005398:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	2301      	movs	r3, #1
 80053a0:	227b      	movs	r2, #123	; 0x7b
 80053a2:	21d0      	movs	r1, #208	; 0xd0
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f002 ffa7 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 80053aa:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80053ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 80053b2:	2364      	movs	r3, #100	; 0x64
 80053b4:	9302      	str	r3, [sp, #8]
 80053b6:	2301      	movs	r3, #1
 80053b8:	9301      	str	r3, [sp, #4]
 80053ba:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	2301      	movs	r3, #1
 80053c2:	227d      	movs	r2, #125	; 0x7d
 80053c4:	21d0      	movs	r1, #208	; 0xd0
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f002 ff96 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 80053cc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80053d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 80053d4:	2364      	movs	r3, #100	; 0x64
 80053d6:	9302      	str	r3, [sp, #8]
 80053d8:	2301      	movs	r3, #1
 80053da:	9301      	str	r3, [sp, #4]
 80053dc:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	2301      	movs	r3, #1
 80053e4:	227e      	movs	r2, #126	; 0x7e
 80053e6:	21d0      	movs	r1, #208	; 0xd0
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f002 ff85 	bl	80082f8 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest2[0] = (float) accel_bias[0]/(float) accelsensitivity;
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	ee07 3a90 	vmov	s15, r3
 80053f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80053f8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80053fc:	ee07 3a90 	vmov	s15, r3
 8005400:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	edc3 7a00 	vstr	s15, [r3]
	dest2[1] = (float) accel_bias[1]/(float) accelsensitivity;
 800540e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005410:	ee07 3a90 	vmov	s15, r3
 8005414:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005418:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800541c:	ee07 3a90 	vmov	s15, r3
 8005420:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3304      	adds	r3, #4
 8005428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800542c:	edc3 7a00 	vstr	s15, [r3]
	dest2[2] = (float) accel_bias[2]/(float) accelsensitivity;
 8005430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800543a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3308      	adds	r3, #8
 800544a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800544e:	edc3 7a00 	vstr	s15, [r3]
		printf("Accel bias Y: %f\r\n", accelBiasY);
		printf("Accel bias Z: %f\r\n", accelBiasZ);

		printf("-------------------------\r\n");
	}
}
 8005452:	bf00      	nop
 8005454:	3768      	adds	r7, #104	; 0x68
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	0801548c 	.word	0x0801548c

08005460 <MPU9250SelfTest>:


// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(I2C_HandleTypeDef *I2Cx, float * destination) {
 8005460:	b5b0      	push	{r4, r5, r7, lr}
 8005462:	b0a8      	sub	sp, #160	; 0xa0
 8005464:	af04      	add	r7, sp, #16
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
	uint8_t writeData;

	uint8_t rawTestData[6] = {0, 0, 0, 0, 0, 0};
 800546a:	4aa4      	ldr	r2, [pc, #656]	; (80056fc <MPU9250SelfTest+0x29c>)
 800546c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005470:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005474:	6018      	str	r0, [r3, #0]
 8005476:	3304      	adds	r3, #4
 8005478:	8019      	strh	r1, [r3, #0]
	uint8_t selfTest[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 800547a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	605a      	str	r2, [r3, #4]
 8005484:	609a      	str	r2, [r3, #8]
 8005486:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	605a      	str	r2, [r3, #4]
 8005490:	609a      	str	r2, [r3, #8]
 8005492:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005496:	2200      	movs	r2, #0
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	605a      	str	r2, [r3, #4]
 800549c:	609a      	str	r2, [r3, #8]
 800549e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	605a      	str	r2, [r3, #4]
 80054a8:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 80054aa:	2300      	movs	r3, #0
 80054ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	writeData = 0x00;
 80054b0:	2300      	movs	r3, #0
 80054b2:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz
 80054b6:	2364      	movs	r3, #100	; 0x64
 80054b8:	9302      	str	r3, [sp, #8]
 80054ba:	2301      	movs	r3, #1
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	2301      	movs	r3, #1
 80054c6:	2219      	movs	r2, #25
 80054c8:	21d0      	movs	r1, #208	; 0xd0
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f002 ff14 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 80054d0:	2302      	movs	r3, #2
 80054d2:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 80054d6:	2364      	movs	r3, #100	; 0x64
 80054d8:	9302      	str	r3, [sp, #8]
 80054da:	2301      	movs	r3, #1
 80054dc:	9301      	str	r3, [sp, #4]
 80054de:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	2301      	movs	r3, #1
 80054e6:	221a      	movs	r2, #26
 80054e8:	21d0      	movs	r1, #208	; 0xd0
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f002 ff04 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 80054f0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80054f4:	00db      	lsls	r3, r3, #3
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the gyro to 250 dps
 80054fc:	2364      	movs	r3, #100	; 0x64
 80054fe:	9302      	str	r3, [sp, #8]
 8005500:	2301      	movs	r3, #1
 8005502:	9301      	str	r3, [sp, #4]
 8005504:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	2301      	movs	r3, #1
 800550c:	221b      	movs	r2, #27
 800550e:	21d0      	movs	r1, #208	; 0xd0
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f002 fef1 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8005516:	2302      	movs	r3, #2
 8005518:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 800551c:	2364      	movs	r3, #100	; 0x64
 800551e:	9302      	str	r3, [sp, #8]
 8005520:	2301      	movs	r3, #1
 8005522:	9301      	str	r3, [sp, #4]
 8005524:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	2301      	movs	r3, #1
 800552c:	221d      	movs	r2, #29
 800552e:	21d0      	movs	r1, #208	; 0xd0
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f002 fee1 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 8005536:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	b2db      	uxtb	r3, r3
 800553e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the accelerometer to 2 g
 8005542:	2364      	movs	r3, #100	; 0x64
 8005544:	9302      	str	r3, [sp, #8]
 8005546:	2301      	movs	r3, #1
 8005548:	9301      	str	r3, [sp, #4]
 800554a:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	2301      	movs	r3, #1
 8005552:	221c      	movs	r2, #28
 8005554:	21d0      	movs	r1, #208	; 0xd0
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f002 fece 	bl	80082f8 <HAL_I2C_Mem_Write>

	//get average current values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 800555c:	2300      	movs	r3, #0
 800555e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005562:	e066      	b.n	8005632 <MPU9250SelfTest+0x1d2>

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 8005564:	2364      	movs	r3, #100	; 0x64
 8005566:	9302      	str	r3, [sp, #8]
 8005568:	2306      	movs	r3, #6
 800556a:	9301      	str	r3, [sp, #4]
 800556c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	2301      	movs	r3, #1
 8005574:	223b      	movs	r2, #59	; 0x3b
 8005576:	21d0      	movs	r1, #208	; 0xd0
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f002 ffd1 	bl	8008520 <HAL_I2C_Mem_Read>
		aAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 800557e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005580:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8005584:	0212      	lsls	r2, r2, #8
 8005586:	b211      	sxth	r1, r2
 8005588:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 800558c:	b212      	sxth	r2, r2
 800558e:	430a      	orrs	r2, r1
 8005590:	b212      	sxth	r2, r2
 8005592:	4413      	add	r3, r2
 8005594:	653b      	str	r3, [r7, #80]	; 0x50
		aAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8005596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005598:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800559c:	0212      	lsls	r2, r2, #8
 800559e:	b211      	sxth	r1, r2
 80055a0:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80055a4:	b212      	sxth	r2, r2
 80055a6:	430a      	orrs	r2, r1
 80055a8:	b212      	sxth	r2, r2
 80055aa:	4413      	add	r3, r2
 80055ac:	657b      	str	r3, [r7, #84]	; 0x54
		aAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 80055ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055b0:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80055b4:	0212      	lsls	r2, r2, #8
 80055b6:	b211      	sxth	r1, r2
 80055b8:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80055bc:	b212      	sxth	r2, r2
 80055be:	430a      	orrs	r2, r1
 80055c0:	b212      	sxth	r2, r2
 80055c2:	4413      	add	r3, r2
 80055c4:	65bb      	str	r3, [r7, #88]	; 0x58

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 80055c6:	2364      	movs	r3, #100	; 0x64
 80055c8:	9302      	str	r3, [sp, #8]
 80055ca:	2306      	movs	r3, #6
 80055cc:	9301      	str	r3, [sp, #4]
 80055ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	2301      	movs	r3, #1
 80055d6:	2243      	movs	r2, #67	; 0x43
 80055d8:	21d0      	movs	r1, #208	; 0xd0
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f002 ffa0 	bl	8008520 <HAL_I2C_Mem_Read>
		gAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80055e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055e2:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80055e6:	0212      	lsls	r2, r2, #8
 80055e8:	b211      	sxth	r1, r2
 80055ea:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 80055ee:	b212      	sxth	r2, r2
 80055f0:	430a      	orrs	r2, r1
 80055f2:	b212      	sxth	r2, r2
 80055f4:	4413      	add	r3, r2
 80055f6:	65fb      	str	r3, [r7, #92]	; 0x5c
		gAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80055f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055fa:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80055fe:	0212      	lsls	r2, r2, #8
 8005600:	b211      	sxth	r1, r2
 8005602:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8005606:	b212      	sxth	r2, r2
 8005608:	430a      	orrs	r2, r1
 800560a:	b212      	sxth	r2, r2
 800560c:	4413      	add	r3, r2
 800560e:	663b      	str	r3, [r7, #96]	; 0x60
		gAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8005610:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005612:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8005616:	0212      	lsls	r2, r2, #8
 8005618:	b211      	sxth	r1, r2
 800561a:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800561e:	b212      	sxth	r2, r2
 8005620:	430a      	orrs	r2, r1
 8005622:	b212      	sxth	r2, r2
 8005624:	4413      	add	r3, r2
 8005626:	667b      	str	r3, [r7, #100]	; 0x64
	for( int ii = 0; ii < 200; ii++) {
 8005628:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800562c:	3301      	adds	r3, #1
 800562e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005632:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005636:	2bc7      	cmp	r3, #199	; 0xc7
 8005638:	dd94      	ble.n	8005564 <MPU9250SelfTest+0x104>
	}

	//Get average of 200 values and store as average current readings
	for (int ii =0; ii < 3; ii++) {
 800563a:	2300      	movs	r3, #0
 800563c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005640:	e030      	b.n	80056a4 <MPU9250SelfTest+0x244>
		aAvg[ii] /= 200;
 8005642:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800564c:	4413      	add	r3, r2
 800564e:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005652:	4a2b      	ldr	r2, [pc, #172]	; (8005700 <MPU9250SelfTest+0x2a0>)
 8005654:	fb82 1203 	smull	r1, r2, r2, r3
 8005658:	1192      	asrs	r2, r2, #6
 800565a:	17db      	asrs	r3, r3, #31
 800565c:	1ad2      	subs	r2, r2, r3
 800565e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8005668:	440b      	add	r3, r1
 800566a:	f843 2c40 	str.w	r2, [r3, #-64]
		gAvg[ii] /= 200;
 800566e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8005678:	4413      	add	r3, r2
 800567a:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800567e:	4a20      	ldr	r2, [pc, #128]	; (8005700 <MPU9250SelfTest+0x2a0>)
 8005680:	fb82 1203 	smull	r1, r2, r2, r3
 8005684:	1192      	asrs	r2, r2, #6
 8005686:	17db      	asrs	r3, r3, #31
 8005688:	1ad2      	subs	r2, r2, r3
 800568a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8005694:	440b      	add	r3, r1
 8005696:	f843 2c34 	str.w	r2, [r3, #-52]
	for (int ii =0; ii < 3; ii++) {
 800569a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800569e:	3301      	adds	r3, #1
 80056a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	ddca      	ble.n	8005642 <MPU9250SelfTest+0x1e2>
	}

	//Configure the accelerometer for self-test
	writeData = 0xE0;
 80056ac:	23e0      	movs	r3, #224	; 0xe0
 80056ae:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set accelerometer range to +/- 2 g
 80056b2:	2364      	movs	r3, #100	; 0x64
 80056b4:	9302      	str	r3, [sp, #8]
 80056b6:	2301      	movs	r3, #1
 80056b8:	9301      	str	r3, [sp, #4]
 80056ba:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	2301      	movs	r3, #1
 80056c2:	221c      	movs	r2, #28
 80056c4:	21d0      	movs	r1, #208	; 0xd0
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f002 fe16 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = 0xE0;
 80056cc:	23e0      	movs	r3, #224	; 0xe0
 80056ce:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 80056d2:	2364      	movs	r3, #100	; 0x64
 80056d4:	9302      	str	r3, [sp, #8]
 80056d6:	2301      	movs	r3, #1
 80056d8:	9301      	str	r3, [sp, #4]
 80056da:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	2301      	movs	r3, #1
 80056e2:	221b      	movs	r2, #27
 80056e4:	21d0      	movs	r1, #208	; 0xd0
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f002 fe06 	bl	80082f8 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 80056ec:	2019      	movs	r0, #25
 80056ee:	f001 fdbb 	bl	8007268 <HAL_Delay>

	//get average self-test values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 80056f2:	2300      	movs	r3, #0
 80056f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056f8:	e06b      	b.n	80057d2 <MPU9250SelfTest+0x372>
 80056fa:	bf00      	nop
 80056fc:	08015490 	.word	0x08015490
 8005700:	51eb851f 	.word	0x51eb851f

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 8005704:	2364      	movs	r3, #100	; 0x64
 8005706:	9302      	str	r3, [sp, #8]
 8005708:	2306      	movs	r3, #6
 800570a:	9301      	str	r3, [sp, #4]
 800570c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	2301      	movs	r3, #1
 8005714:	223b      	movs	r2, #59	; 0x3b
 8005716:	21d0      	movs	r1, #208	; 0xd0
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f002 ff01 	bl	8008520 <HAL_I2C_Mem_Read>
		aSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 800571e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005720:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8005724:	0212      	lsls	r2, r2, #8
 8005726:	b211      	sxth	r1, r2
 8005728:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 800572c:	b212      	sxth	r2, r2
 800572e:	430a      	orrs	r2, r1
 8005730:	b212      	sxth	r2, r2
 8005732:	4413      	add	r3, r2
 8005734:	647b      	str	r3, [r7, #68]	; 0x44
		aSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8005736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005738:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800573c:	0212      	lsls	r2, r2, #8
 800573e:	b211      	sxth	r1, r2
 8005740:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8005744:	b212      	sxth	r2, r2
 8005746:	430a      	orrs	r2, r1
 8005748:	b212      	sxth	r2, r2
 800574a:	4413      	add	r3, r2
 800574c:	64bb      	str	r3, [r7, #72]	; 0x48
		aSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 800574e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005750:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8005754:	0212      	lsls	r2, r2, #8
 8005756:	b211      	sxth	r1, r2
 8005758:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800575c:	b212      	sxth	r2, r2
 800575e:	430a      	orrs	r2, r1
 8005760:	b212      	sxth	r2, r2
 8005762:	4413      	add	r3, r2
 8005764:	64fb      	str	r3, [r7, #76]	; 0x4c

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 8005766:	2364      	movs	r3, #100	; 0x64
 8005768:	9302      	str	r3, [sp, #8]
 800576a:	2306      	movs	r3, #6
 800576c:	9301      	str	r3, [sp, #4]
 800576e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	2301      	movs	r3, #1
 8005776:	2243      	movs	r2, #67	; 0x43
 8005778:	21d0      	movs	r1, #208	; 0xd0
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f002 fed0 	bl	8008520 <HAL_I2C_Mem_Read>
		gSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8005780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005782:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8005786:	0212      	lsls	r2, r2, #8
 8005788:	b211      	sxth	r1, r2
 800578a:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 800578e:	b212      	sxth	r2, r2
 8005790:	430a      	orrs	r2, r1
 8005792:	b212      	sxth	r2, r2
 8005794:	4413      	add	r3, r2
 8005796:	63bb      	str	r3, [r7, #56]	; 0x38
		gSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8005798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800579a:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800579e:	0212      	lsls	r2, r2, #8
 80057a0:	b211      	sxth	r1, r2
 80057a2:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80057a6:	b212      	sxth	r2, r2
 80057a8:	430a      	orrs	r2, r1
 80057aa:	b212      	sxth	r2, r2
 80057ac:	4413      	add	r3, r2
 80057ae:	63fb      	str	r3, [r7, #60]	; 0x3c
		gSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 80057b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057b2:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80057b6:	0212      	lsls	r2, r2, #8
 80057b8:	b211      	sxth	r1, r2
 80057ba:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80057be:	b212      	sxth	r2, r2
 80057c0:	430a      	orrs	r2, r1
 80057c2:	b212      	sxth	r2, r2
 80057c4:	4413      	add	r3, r2
 80057c6:	643b      	str	r3, [r7, #64]	; 0x40
	for( int ii = 0; ii < 200; ii++) {
 80057c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057cc:	3301      	adds	r3, #1
 80057ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057d6:	2bc7      	cmp	r3, #199	; 0xc7
 80057d8:	dd94      	ble.n	8005704 <MPU9250SelfTest+0x2a4>
	}

	//Get average of 200 values and store as average self-test readings
	for (int ii =0; ii < 3; ii++) {
 80057da:	2300      	movs	r3, #0
 80057dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057e0:	e030      	b.n	8005844 <MPU9250SelfTest+0x3e4>
		aSTAvg[ii] /= 200;
 80057e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80057ec:	4413      	add	r3, r2
 80057ee:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80057f2:	4ae5      	ldr	r2, [pc, #916]	; (8005b88 <MPU9250SelfTest+0x728>)
 80057f4:	fb82 1203 	smull	r1, r2, r2, r3
 80057f8:	1192      	asrs	r2, r2, #6
 80057fa:	17db      	asrs	r3, r3, #31
 80057fc:	1ad2      	subs	r2, r2, r3
 80057fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8005808:	440b      	add	r3, r1
 800580a:	f843 2c4c 	str.w	r2, [r3, #-76]
		gSTAvg[ii] /= 200;
 800580e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8005818:	4413      	add	r3, r2
 800581a:	f853 3c58 	ldr.w	r3, [r3, #-88]
 800581e:	4ada      	ldr	r2, [pc, #872]	; (8005b88 <MPU9250SelfTest+0x728>)
 8005820:	fb82 1203 	smull	r1, r2, r2, r3
 8005824:	1192      	asrs	r2, r2, #6
 8005826:	17db      	asrs	r3, r3, #31
 8005828:	1ad2      	subs	r2, r2, r3
 800582a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8005834:	440b      	add	r3, r1
 8005836:	f843 2c58 	str.w	r2, [r3, #-88]
	for (int ii =0; ii < 3; ii++) {
 800583a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800583e:	3301      	adds	r3, #1
 8005840:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005844:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005848:	2b02      	cmp	r3, #2
 800584a:	ddca      	ble.n	80057e2 <MPU9250SelfTest+0x382>
	}

	//Configure the gyro and accelerometer for normal operation
	writeData = 0x00;
 800584c:	2300      	movs	r3, #0
 800584e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 8005852:	2364      	movs	r3, #100	; 0x64
 8005854:	9302      	str	r3, [sp, #8]
 8005856:	2301      	movs	r3, #1
 8005858:	9301      	str	r3, [sp, #4]
 800585a:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	2301      	movs	r3, #1
 8005862:	221c      	movs	r2, #28
 8005864:	21d0      	movs	r1, #208	; 0xd0
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f002 fd46 	bl	80082f8 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 800586c:	2300      	movs	r3, #0
 800586e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 8005872:	2364      	movs	r3, #100	; 0x64
 8005874:	9302      	str	r3, [sp, #8]
 8005876:	2301      	movs	r3, #1
 8005878:	9301      	str	r3, [sp, #4]
 800587a:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	2301      	movs	r3, #1
 8005882:	221b      	movs	r2, #27
 8005884:	21d0      	movs	r1, #208	; 0xd0
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f002 fd36 	bl	80082f8 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 800588c:	2019      	movs	r0, #25
 800588e:	f001 fceb 	bl	8007268 <HAL_Delay>

	//Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_ACCEL, 1, &selfTest[0], 1, i2c_timeout);// X-axis accel self-test results
 8005892:	2364      	movs	r3, #100	; 0x64
 8005894:	9302      	str	r3, [sp, #8]
 8005896:	2301      	movs	r3, #1
 8005898:	9301      	str	r3, [sp, #4]
 800589a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	2301      	movs	r3, #1
 80058a2:	220d      	movs	r2, #13
 80058a4:	21d0      	movs	r1, #208	; 0xd0
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f002 fe3a 	bl	8008520 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_ACCEL, 1, &selfTest[1], 1, i2c_timeout);// Y-axis accel self-test results
 80058ac:	2364      	movs	r3, #100	; 0x64
 80058ae:	9302      	str	r3, [sp, #8]
 80058b0:	2301      	movs	r3, #1
 80058b2:	9301      	str	r3, [sp, #4]
 80058b4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80058b8:	3301      	adds	r3, #1
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	2301      	movs	r3, #1
 80058be:	220e      	movs	r2, #14
 80058c0:	21d0      	movs	r1, #208	; 0xd0
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f002 fe2c 	bl	8008520 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_ACCEL, 1, &selfTest[2], 1, i2c_timeout);// Z-axis accel self-test results
 80058c8:	2364      	movs	r3, #100	; 0x64
 80058ca:	9302      	str	r3, [sp, #8]
 80058cc:	2301      	movs	r3, #1
 80058ce:	9301      	str	r3, [sp, #4]
 80058d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80058d4:	3302      	adds	r3, #2
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	2301      	movs	r3, #1
 80058da:	220f      	movs	r2, #15
 80058dc:	21d0      	movs	r1, #208	; 0xd0
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f002 fe1e 	bl	8008520 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_GYRO, 1, &selfTest[3], 1, i2c_timeout);// X-axis gyro self-test results
 80058e4:	2364      	movs	r3, #100	; 0x64
 80058e6:	9302      	str	r3, [sp, #8]
 80058e8:	2301      	movs	r3, #1
 80058ea:	9301      	str	r3, [sp, #4]
 80058ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80058f0:	3303      	adds	r3, #3
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	2301      	movs	r3, #1
 80058f6:	2200      	movs	r2, #0
 80058f8:	21d0      	movs	r1, #208	; 0xd0
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f002 fe10 	bl	8008520 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_GYRO, 1, &selfTest[4], 1, i2c_timeout);// Y-axis gyro self-test results
 8005900:	2364      	movs	r3, #100	; 0x64
 8005902:	9302      	str	r3, [sp, #8]
 8005904:	2301      	movs	r3, #1
 8005906:	9301      	str	r3, [sp, #4]
 8005908:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800590c:	3304      	adds	r3, #4
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	2301      	movs	r3, #1
 8005912:	2201      	movs	r2, #1
 8005914:	21d0      	movs	r1, #208	; 0xd0
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f002 fe02 	bl	8008520 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_GYRO, 1, &selfTest[5], 1, i2c_timeout);// Z-axis gyro self-test results
 800591c:	2364      	movs	r3, #100	; 0x64
 800591e:	9302      	str	r3, [sp, #8]
 8005920:	2301      	movs	r3, #1
 8005922:	9301      	str	r3, [sp, #4]
 8005924:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005928:	3305      	adds	r3, #5
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	2301      	movs	r3, #1
 800592e:	2202      	movs	r2, #2
 8005930:	21d0      	movs	r1, #208	; 0xd0
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f002 fdf4 	bl	8008520 <HAL_I2C_Mem_Read>

	//Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8005938:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800593c:	f640 223c 	movw	r2, #2620	; 0xa3c
 8005940:	fa02 f303 	lsl.w	r3, r2, r3
 8005944:	ee07 3a90 	vmov	s15, r3
 8005948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800594c:	ee17 0a90 	vmov	r0, s15
 8005950:	f7fa fe22 	bl	8000598 <__aeabi_f2d>
 8005954:	4604      	mov	r4, r0
 8005956:	460d      	mov	r5, r1
 8005958:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800595c:	ee07 3a90 	vmov	s15, r3
 8005960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005964:	ee17 0a90 	vmov	r0, s15
 8005968:	f7fa fe16 	bl	8000598 <__aeabi_f2d>
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	4b86      	ldr	r3, [pc, #536]	; (8005b8c <MPU9250SelfTest+0x72c>)
 8005972:	f7fa fcb1 	bl	80002d8 <__aeabi_dsub>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	ec43 2b17 	vmov	d7, r2, r3
 800597e:	eeb0 1a47 	vmov.f32	s2, s14
 8005982:	eef0 1a67 	vmov.f32	s3, s15
 8005986:	ed9f 0b7e 	vldr	d0, [pc, #504]	; 8005b80 <MPU9250SelfTest+0x720>
 800598a:	f00e fa81 	bl	8013e90 <pow>
 800598e:	ec53 2b10 	vmov	r2, r3, d0
 8005992:	4620      	mov	r0, r4
 8005994:	4629      	mov	r1, r5
 8005996:	f7fa fe57 	bl	8000648 <__aeabi_dmul>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4610      	mov	r0, r2
 80059a0:	4619      	mov	r1, r3
 80059a2:	f7fb f949 	bl	8000c38 <__aeabi_d2f>
 80059a6:	4603      	mov	r3, r0
 80059a8:	623b      	str	r3, [r7, #32]
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 80059aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80059ae:	f640 223c 	movw	r2, #2620	; 0xa3c
 80059b2:	fa02 f303 	lsl.w	r3, r2, r3
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059be:	ee17 0a90 	vmov	r0, s15
 80059c2:	f7fa fde9 	bl	8000598 <__aeabi_f2d>
 80059c6:	4604      	mov	r4, r0
 80059c8:	460d      	mov	r5, r1
 80059ca:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d6:	ee17 0a90 	vmov	r0, s15
 80059da:	f7fa fddd 	bl	8000598 <__aeabi_f2d>
 80059de:	f04f 0200 	mov.w	r2, #0
 80059e2:	4b6a      	ldr	r3, [pc, #424]	; (8005b8c <MPU9250SelfTest+0x72c>)
 80059e4:	f7fa fc78 	bl	80002d8 <__aeabi_dsub>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	ec43 2b17 	vmov	d7, r2, r3
 80059f0:	eeb0 1a47 	vmov.f32	s2, s14
 80059f4:	eef0 1a67 	vmov.f32	s3, s15
 80059f8:	ed9f 0b61 	vldr	d0, [pc, #388]	; 8005b80 <MPU9250SelfTest+0x720>
 80059fc:	f00e fa48 	bl	8013e90 <pow>
 8005a00:	ec53 2b10 	vmov	r2, r3, d0
 8005a04:	4620      	mov	r0, r4
 8005a06:	4629      	mov	r1, r5
 8005a08:	f7fa fe1e 	bl	8000648 <__aeabi_dmul>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4610      	mov	r0, r2
 8005a12:	4619      	mov	r1, r3
 8005a14:	f7fb f910 	bl	8000c38 <__aeabi_d2f>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	627b      	str	r3, [r7, #36]	; 0x24
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8005a1c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005a20:	f640 223c 	movw	r2, #2620	; 0xa3c
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	ee07 3a90 	vmov	s15, r3
 8005a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a30:	ee17 0a90 	vmov	r0, s15
 8005a34:	f7fa fdb0 	bl	8000598 <__aeabi_f2d>
 8005a38:	4604      	mov	r4, r0
 8005a3a:	460d      	mov	r5, r1
 8005a3c:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8005a40:	ee07 3a90 	vmov	s15, r3
 8005a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a48:	ee17 0a90 	vmov	r0, s15
 8005a4c:	f7fa fda4 	bl	8000598 <__aeabi_f2d>
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	4b4d      	ldr	r3, [pc, #308]	; (8005b8c <MPU9250SelfTest+0x72c>)
 8005a56:	f7fa fc3f 	bl	80002d8 <__aeabi_dsub>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	ec43 2b17 	vmov	d7, r2, r3
 8005a62:	eeb0 1a47 	vmov.f32	s2, s14
 8005a66:	eef0 1a67 	vmov.f32	s3, s15
 8005a6a:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8005b80 <MPU9250SelfTest+0x720>
 8005a6e:	f00e fa0f 	bl	8013e90 <pow>
 8005a72:	ec53 2b10 	vmov	r2, r3, d0
 8005a76:	4620      	mov	r0, r4
 8005a78:	4629      	mov	r1, r5
 8005a7a:	f7fa fde5 	bl	8000648 <__aeabi_dmul>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4610      	mov	r0, r2
 8005a84:	4619      	mov	r1, r3
 8005a86:	f7fb f8d7 	bl	8000c38 <__aeabi_d2f>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	62bb      	str	r3, [r7, #40]	; 0x28
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 8005a8e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005a92:	f640 223c 	movw	r2, #2620	; 0xa3c
 8005a96:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9a:	ee07 3a90 	vmov	s15, r3
 8005a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aa2:	ee17 0a90 	vmov	r0, s15
 8005aa6:	f7fa fd77 	bl	8000598 <__aeabi_f2d>
 8005aaa:	4604      	mov	r4, r0
 8005aac:	460d      	mov	r5, r1
 8005aae:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8005ab2:	ee07 3a90 	vmov	s15, r3
 8005ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aba:	ee17 0a90 	vmov	r0, s15
 8005abe:	f7fa fd6b 	bl	8000598 <__aeabi_f2d>
 8005ac2:	f04f 0200 	mov.w	r2, #0
 8005ac6:	4b31      	ldr	r3, [pc, #196]	; (8005b8c <MPU9250SelfTest+0x72c>)
 8005ac8:	f7fa fc06 	bl	80002d8 <__aeabi_dsub>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	ec43 2b17 	vmov	d7, r2, r3
 8005ad4:	eeb0 1a47 	vmov.f32	s2, s14
 8005ad8:	eef0 1a67 	vmov.f32	s3, s15
 8005adc:	ed9f 0b28 	vldr	d0, [pc, #160]	; 8005b80 <MPU9250SelfTest+0x720>
 8005ae0:	f00e f9d6 	bl	8013e90 <pow>
 8005ae4:	ec53 2b10 	vmov	r2, r3, d0
 8005ae8:	4620      	mov	r0, r4
 8005aea:	4629      	mov	r1, r5
 8005aec:	f7fa fdac 	bl	8000648 <__aeabi_dmul>
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	4610      	mov	r0, r2
 8005af6:	4619      	mov	r1, r3
 8005af8:	f7fb f89e 	bl	8000c38 <__aeabi_d2f>
 8005afc:	4603      	mov	r3, r0
 8005afe:	62fb      	str	r3, [r7, #44]	; 0x2c
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 8005b00:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005b04:	f640 223c 	movw	r2, #2620	; 0xa3c
 8005b08:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0c:	ee07 3a90 	vmov	s15, r3
 8005b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b14:	ee17 0a90 	vmov	r0, s15
 8005b18:	f7fa fd3e 	bl	8000598 <__aeabi_f2d>
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	460d      	mov	r5, r1
 8005b20:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8005b24:	ee07 3a90 	vmov	s15, r3
 8005b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b2c:	ee17 0a90 	vmov	r0, s15
 8005b30:	f7fa fd32 	bl	8000598 <__aeabi_f2d>
 8005b34:	f04f 0200 	mov.w	r2, #0
 8005b38:	4b14      	ldr	r3, [pc, #80]	; (8005b8c <MPU9250SelfTest+0x72c>)
 8005b3a:	f7fa fbcd 	bl	80002d8 <__aeabi_dsub>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	460b      	mov	r3, r1
 8005b42:	ec43 2b17 	vmov	d7, r2, r3
 8005b46:	eeb0 1a47 	vmov.f32	s2, s14
 8005b4a:	eef0 1a67 	vmov.f32	s3, s15
 8005b4e:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8005b80 <MPU9250SelfTest+0x720>
 8005b52:	f00e f99d 	bl	8013e90 <pow>
 8005b56:	ec53 2b10 	vmov	r2, r3, d0
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	f7fa fd73 	bl	8000648 <__aeabi_dmul>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	4610      	mov	r0, r2
 8005b68:	4619      	mov	r1, r3
 8005b6a:	f7fb f865 	bl	8000c38 <__aeabi_d2f>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	633b      	str	r3, [r7, #48]	; 0x30
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 8005b72:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005b76:	f640 223c 	movw	r2, #2620	; 0xa3c
 8005b7a:	e009      	b.n	8005b90 <MPU9250SelfTest+0x730>
 8005b7c:	f3af 8000 	nop.w
 8005b80:	c28f5c29 	.word	0xc28f5c29
 8005b84:	3ff028f5 	.word	0x3ff028f5
 8005b88:	51eb851f 	.word	0x51eb851f
 8005b8c:	3ff00000 	.word	0x3ff00000
 8005b90:	fa02 f303 	lsl.w	r3, r2, r3
 8005b94:	ee07 3a90 	vmov	s15, r3
 8005b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b9c:	ee17 0a90 	vmov	r0, s15
 8005ba0:	f7fa fcfa 	bl	8000598 <__aeabi_f2d>
 8005ba4:	4604      	mov	r4, r0
 8005ba6:	460d      	mov	r5, r1
 8005ba8:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8005bac:	ee07 3a90 	vmov	s15, r3
 8005bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb4:	ee17 0a90 	vmov	r0, s15
 8005bb8:	f7fa fcee 	bl	8000598 <__aeabi_f2d>
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	4bab      	ldr	r3, [pc, #684]	; (8005e70 <MPU9250SelfTest+0xa10>)
 8005bc2:	f7fa fb89 	bl	80002d8 <__aeabi_dsub>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	ec43 2b17 	vmov	d7, r2, r3
 8005bce:	eeb0 1a47 	vmov.f32	s2, s14
 8005bd2:	eef0 1a67 	vmov.f32	s3, s15
 8005bd6:	ed9f 0ba4 	vldr	d0, [pc, #656]	; 8005e68 <MPU9250SelfTest+0xa08>
 8005bda:	f00e f959 	bl	8013e90 <pow>
 8005bde:	ec53 2b10 	vmov	r2, r3, d0
 8005be2:	4620      	mov	r0, r4
 8005be4:	4629      	mov	r1, r5
 8005be6:	f7fa fd2f 	bl	8000648 <__aeabi_dmul>
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	4610      	mov	r0, r2
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	f7fb f821 	bl	8000c38 <__aeabi_d2f>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t testResults[6];

	//Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	//To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005bfe:	e092      	b.n	8005d26 <MPU9250SelfTest+0x8c6>
		testResults[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8005c00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8005c08:	4413      	add	r3, r2
 8005c0a:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8005c0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8005c16:	440b      	add	r3, r1
 8005c18:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	ee07 3a90 	vmov	s15, r3
 8005c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c26:	ee17 0a90 	vmov	r0, s15
 8005c2a:	f7fa fcb5 	bl	8000598 <__aeabi_f2d>
 8005c2e:	f04f 0200 	mov.w	r2, #0
 8005c32:	4b90      	ldr	r3, [pc, #576]	; (8005e74 <MPU9250SelfTest+0xa14>)
 8005c34:	f7fa fd08 	bl	8000648 <__aeabi_dmul>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4614      	mov	r4, r2
 8005c3e:	461d      	mov	r5, r3
 8005c40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8005c48:	4413      	add	r3, r2
 8005c4a:	3b70      	subs	r3, #112	; 0x70
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fa fca2 	bl	8000598 <__aeabi_f2d>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4620      	mov	r0, r4
 8005c5a:	4629      	mov	r1, r5
 8005c5c:	f7fa fe1e 	bl	800089c <__aeabi_ddiv>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4610      	mov	r0, r2
 8005c66:	4619      	mov	r1, r3
 8005c68:	f04f 0200 	mov.w	r2, #0
 8005c6c:	4b81      	ldr	r3, [pc, #516]	; (8005e74 <MPU9250SelfTest+0xa14>)
 8005c6e:	f7fa fb33 	bl	80002d8 <__aeabi_dsub>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4610      	mov	r0, r2
 8005c78:	4619      	mov	r1, r3
 8005c7a:	f7fa ffbd 	bl	8000bf8 <__aeabi_d2uiz>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8005c88:	440b      	add	r3, r1
 8005c8a:	f843 2c88 	str.w	r2, [r3, #-136]
		testResults[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8005c8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8005c96:	4413      	add	r3, r2
 8005c98:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8005c9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8005ca4:	440b      	add	r3, r1
 8005ca6:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	ee07 3a90 	vmov	s15, r3
 8005cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cb4:	ee17 0a90 	vmov	r0, s15
 8005cb8:	f7fa fc6e 	bl	8000598 <__aeabi_f2d>
 8005cbc:	f04f 0200 	mov.w	r2, #0
 8005cc0:	4b6c      	ldr	r3, [pc, #432]	; (8005e74 <MPU9250SelfTest+0xa14>)
 8005cc2:	f7fa fcc1 	bl	8000648 <__aeabi_dmul>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4614      	mov	r4, r2
 8005ccc:	461d      	mov	r5, r3
 8005cce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cd0:	3303      	adds	r3, #3
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8005cd8:	4413      	add	r3, r2
 8005cda:	3b70      	subs	r3, #112	; 0x70
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fa fc5a 	bl	8000598 <__aeabi_f2d>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4620      	mov	r0, r4
 8005cea:	4629      	mov	r1, r5
 8005cec:	f7fa fdd6 	bl	800089c <__aeabi_ddiv>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	f04f 0200 	mov.w	r2, #0
 8005cfc:	4b5d      	ldr	r3, [pc, #372]	; (8005e74 <MPU9250SelfTest+0xa14>)
 8005cfe:	f7fa faeb 	bl	80002d8 <__aeabi_dsub>
 8005d02:	4602      	mov	r2, r0
 8005d04:	460b      	mov	r3, r1
 8005d06:	4610      	mov	r0, r2
 8005d08:	4619      	mov	r1, r3
 8005d0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d0c:	1cdc      	adds	r4, r3, #3
 8005d0e:	f7fa ff73 	bl	8000bf8 <__aeabi_d2uiz>
 8005d12:	4602      	mov	r2, r0
 8005d14:	00a3      	lsls	r3, r4, #2
 8005d16:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8005d1a:	440b      	add	r3, r1
 8005d1c:	f843 2c88 	str.w	r2, [r3, #-136]
	for (int i = 0; i < 3; i++) {
 8005d20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d22:	3301      	adds	r3, #1
 8005d24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	f77f af69 	ble.w	8005c00 <MPU9250SelfTest+0x7a0>
		printf("Gyro Test Y: %f\r\n", testResultGyroY);
		printf("Gyro Test Z: %f\r\n", testResultGyroZ);
		printf("-------------------------\r\n");
	}

   for (int i = 0; i < 3; i++) {
 8005d2e:	2300      	movs	r3, #0
 8005d30:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d32:	e08e      	b.n	8005e52 <MPU9250SelfTest+0x9f2>
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8005d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8005d42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8005d4a:	440b      	add	r3, r1
 8005d4c:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	ee07 3a90 	vmov	s15, r3
 8005d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d5a:	ee17 0a90 	vmov	r0, s15
 8005d5e:	f7fa fc1b 	bl	8000598 <__aeabi_f2d>
 8005d62:	f04f 0200 	mov.w	r2, #0
 8005d66:	4b43      	ldr	r3, [pc, #268]	; (8005e74 <MPU9250SelfTest+0xa14>)
 8005d68:	f7fa fc6e 	bl	8000648 <__aeabi_dmul>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4614      	mov	r4, r2
 8005d72:	461d      	mov	r5, r3
 8005d74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8005d7c:	4413      	add	r3, r2
 8005d7e:	3b70      	subs	r3, #112	; 0x70
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fa fc08 	bl	8000598 <__aeabi_f2d>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	4629      	mov	r1, r5
 8005d90:	f7fa fd84 	bl	800089c <__aeabi_ddiv>
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4610      	mov	r0, r2
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	4b34      	ldr	r3, [pc, #208]	; (8005e74 <MPU9250SelfTest+0xa14>)
 8005da2:	f7fa fa99 	bl	80002d8 <__aeabi_dsub>
 8005da6:	4602      	mov	r2, r0
 8005da8:	460b      	mov	r3, r1
 8005daa:	4610      	mov	r0, r2
 8005dac:	4619      	mov	r1, r3
 8005dae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	18d4      	adds	r4, r2, r3
 8005db6:	f7fa ff3f 	bl	8000c38 <__aeabi_d2f>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	6023      	str	r3, [r4, #0]
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8005dbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8005dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8005dd4:	440b      	add	r3, r1
 8005dd6:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	ee07 3a90 	vmov	s15, r3
 8005de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005de4:	ee17 0a90 	vmov	r0, s15
 8005de8:	f7fa fbd6 	bl	8000598 <__aeabi_f2d>
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	4b20      	ldr	r3, [pc, #128]	; (8005e74 <MPU9250SelfTest+0xa14>)
 8005df2:	f7fa fc29 	bl	8000648 <__aeabi_dmul>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4614      	mov	r4, r2
 8005dfc:	461d      	mov	r5, r3
 8005dfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e00:	3303      	adds	r3, #3
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8005e08:	4413      	add	r3, r2
 8005e0a:	3b70      	subs	r3, #112	; 0x70
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fa fbc2 	bl	8000598 <__aeabi_f2d>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4620      	mov	r0, r4
 8005e1a:	4629      	mov	r1, r5
 8005e1c:	f7fa fd3e 	bl	800089c <__aeabi_ddiv>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4610      	mov	r0, r2
 8005e26:	4619      	mov	r1, r3
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	4b11      	ldr	r3, [pc, #68]	; (8005e74 <MPU9250SelfTest+0xa14>)
 8005e2e:	f7fa fa53 	bl	80002d8 <__aeabi_dsub>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4610      	mov	r0, r2
 8005e38:	4619      	mov	r1, r3
 8005e3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e3c:	3303      	adds	r3, #3
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	18d4      	adds	r4, r2, r3
 8005e44:	f7fa fef8 	bl	8000c38 <__aeabi_d2f>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	6023      	str	r3, [r4, #0]
   for (int i = 0; i < 3; i++) {
 8005e4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e4e:	3301      	adds	r3, #1
 8005e50:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	f77f af6d 	ble.w	8005d34 <MPU9250SelfTest+0x8d4>
   }
}
 8005e5a:	bf00      	nop
 8005e5c:	bf00      	nop
 8005e5e:	3790      	adds	r7, #144	; 0x90
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bdb0      	pop	{r4, r5, r7, pc}
 8005e64:	f3af 8000 	nop.w
 8005e68:	c28f5c29 	.word	0xc28f5c29
 8005e6c:	3ff028f5 	.word	0x3ff028f5
 8005e70:	3ff00000 	.word	0x3ff00000
 8005e74:	40590000 	.word	0x40590000

08005e78 <QuaternionUpdate>:

void QuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz){
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b0b2      	sub	sp, #200	; 0xc8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8005e82:	edc7 0a08 	vstr	s1, [r7, #32]
 8005e86:	ed87 1a07 	vstr	s2, [r7, #28]
 8005e8a:	edc7 1a06 	vstr	s3, [r7, #24]
 8005e8e:	ed87 2a05 	vstr	s4, [r7, #20]
 8005e92:	edc7 2a04 	vstr	s5, [r7, #16]
 8005e96:	ed87 3a03 	vstr	s6, [r7, #12]
 8005e9a:	edc7 3a02 	vstr	s7, [r7, #8]
 8005e9e:	ed87 4a01 	vstr	s8, [r7, #4]
    float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 8005ea2:	4b70      	ldr	r3, [pc, #448]	; (8006064 <QuaternionUpdate+0x1ec>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005eaa:	4b6e      	ldr	r3, [pc, #440]	; (8006064 <QuaternionUpdate+0x1ec>)
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005eb2:	4b6c      	ldr	r3, [pc, #432]	; (8006064 <QuaternionUpdate+0x1ec>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005eba:	4b6a      	ldr	r3, [pc, #424]	; (8006064 <QuaternionUpdate+0x1ec>)
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    float _2q1my;
    float _2q1mz;
    float _2q2mx;
    float _4bx;
    float _4bz;
    float _2q1 = 2.0f * q1;
 8005ec2:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005ec6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005eca:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
    float _2q2 = 2.0f * q2;
 8005ece:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005ed2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ed6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
    float _2q3 = 2.0f * q3;
 8005eda:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005ede:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ee2:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
    float _2q4 = 2.0f * q4;
 8005ee6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005eea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005eee:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
    float _2q1q3 = 2.0f * q1 * q3;
 8005ef2:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005ef6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005efa:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8005efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f02:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
    float _2q3q4 = 2.0f * q3 * q4;
 8005f06:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005f0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005f0e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f16:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
    float q1q1 = q1 * q1;
 8005f1a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005f1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005f22:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    float q1q2 = q1 * q2;
 8005f26:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8005f2a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f32:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
    float q1q3 = q1 * q3;
 8005f36:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8005f3a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f42:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    float q1q4 = q1 * q4;
 8005f46:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8005f4a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f52:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    float q2q2 = q2 * q2;
 8005f56:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005f5a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005f5e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    float q2q3 = q2 * q3;
 8005f62:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8005f66:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f6e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
    float q2q4 = q2 * q4;
 8005f72:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8005f76:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    float q3q3 = q3 * q3;
 8005f82:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005f86:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005f8a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    float q3q4 = q3 * q4;
 8005f8e:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8005f92:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    float q4q4 = q4 * q4;
 8005f9e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005fa2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005fa6:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

    // Normalise accelerometer measurement
    norm = sqrtf(ax * ax + ay * ay + az * az);
 8005faa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005fae:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005fb2:	edd7 7a08 	vldr	s15, [r7, #32]
 8005fb6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005fba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fbe:	edd7 7a07 	vldr	s15, [r7, #28]
 8005fc2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fca:	eeb0 0a67 	vmov.f32	s0, s15
 8005fce:	f00e f841 	bl	8014054 <sqrtf>
 8005fd2:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
    if (norm == 0.0f) return; // handle NaN
 8005fd6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005fda:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fe2:	f000 85b2 	beq.w	8006b4a <QuaternionUpdate+0xcd2>
    norm = 1.0f/norm;
 8005fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fea:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8005fee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ff2:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    ax *= norm;
 8005ff6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005ffa:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006002:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    ay *= norm;
 8006006:	ed97 7a08 	vldr	s14, [r7, #32]
 800600a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800600e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006012:	edc7 7a08 	vstr	s15, [r7, #32]
    az *= norm;
 8006016:	ed97 7a07 	vldr	s14, [r7, #28]
 800601a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800601e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006022:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalise magnetometer measurement
    norm = sqrtf(mx * mx + my * my + mz * mz);
 8006026:	edd7 7a03 	vldr	s15, [r7, #12]
 800602a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800602e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006032:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006036:	ee37 7a27 	vadd.f32	s14, s14, s15
 800603a:	edd7 7a01 	vldr	s15, [r7, #4]
 800603e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006046:	eeb0 0a67 	vmov.f32	s0, s15
 800604a:	f00e f803 	bl	8014054 <sqrtf>
 800604e:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
    if (norm == 0.0f) return; // handle NaN
 8006052:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006056:	eef5 7a40 	vcmp.f32	s15, #0.0
 800605a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800605e:	f000 8576 	beq.w	8006b4e <QuaternionUpdate+0xcd6>
 8006062:	e001      	b.n	8006068 <QuaternionUpdate+0x1f0>
 8006064:	20000008 	.word	0x20000008
    norm = 1.0f/norm;
 8006068:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800606c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8006070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006074:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    mx *= norm;
 8006078:	ed97 7a03 	vldr	s14, [r7, #12]
 800607c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006084:	edc7 7a03 	vstr	s15, [r7, #12]
    my *= norm;
 8006088:	ed97 7a02 	vldr	s14, [r7, #8]
 800608c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006094:	edc7 7a02 	vstr	s15, [r7, #8]
    mz *= norm;
 8006098:	ed97 7a01 	vldr	s14, [r7, #4]
 800609c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80060a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060a4:	edc7 7a01 	vstr	s15, [r7, #4]

    // Reference direction of Earth's magnetic field
    _2q1mx = 2.0f * q1 * mx;
 80060a8:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80060ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80060b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80060b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    _2q1my = 2.0f * q1 * my;
 80060bc:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80060c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80060c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80060c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060cc:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    _2q1mz = 2.0f * q1 * mz;
 80060d0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80060d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80060d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80060dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
    _2q2mx = 2.0f * q2 * mx;
 80060e4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80060e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80060ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80060f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060f4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 80060f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80060fc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006104:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8006108:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800610c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006110:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006114:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8006118:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800611c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006120:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006124:	edd7 6a03 	vldr	s13, [r7, #12]
 8006128:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800612c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006130:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006134:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8006138:	edd7 7a02 	vldr	s15, [r7, #8]
 800613c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006140:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8006144:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006148:	ee37 7a27 	vadd.f32	s14, s14, s15
 800614c:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8006150:	edd7 7a01 	vldr	s15, [r7, #4]
 8006154:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006158:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800615c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006160:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006164:	edd7 6a03 	vldr	s13, [r7, #12]
 8006168:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800616c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006170:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006174:	edd7 6a03 	vldr	s13, [r7, #12]
 8006178:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800617c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006184:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8006188:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800618c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006190:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006194:	edd7 6a02 	vldr	s13, [r7, #8]
 8006198:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800619c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061a4:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80061a8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80061ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061b4:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80061b8:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80061bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061c4:	edd7 6a02 	vldr	s13, [r7, #8]
 80061c8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80061cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061d4:	edd7 6a02 	vldr	s13, [r7, #8]
 80061d8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80061dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061e4:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80061e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80061ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80061f0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80061f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061fc:	edd7 6a02 	vldr	s13, [r7, #8]
 8006200:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8006204:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800620c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    _2bx = sqrtf(hx * hx + hy * hy);
 8006210:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006214:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006218:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800621c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006224:	eeb0 0a67 	vmov.f32	s0, s15
 8006228:	f00d ff14 	bl	8014054 <sqrtf>
 800622c:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    _2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 8006230:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006234:	eeb1 7a67 	vneg.f32	s14, s15
 8006238:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800623c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006240:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8006244:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8006248:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800624c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006250:	edd7 6a01 	vldr	s13, [r7, #4]
 8006254:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006258:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800625c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006260:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8006264:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006268:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800626c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006270:	edd7 6a01 	vldr	s13, [r7, #4]
 8006274:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006278:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800627c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006280:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8006284:	edd7 7a02 	vldr	s15, [r7, #8]
 8006288:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800628c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006294:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006298:	edd7 6a01 	vldr	s13, [r7, #4]
 800629c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80062a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062a8:	edd7 6a01 	vldr	s13, [r7, #4]
 80062ac:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80062b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062b8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    _4bx = 2.0f * _2bx;
 80062bc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80062c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80062c4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    _4bz = 2.0f * _2bz;
 80062c8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80062cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80062d0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

    // Gradient decent algorithm corrective step
    s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80062d4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80062d8:	eeb1 7a67 	vneg.f32	s14, s15
 80062dc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80062e0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80062e4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80062e8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80062ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80062f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80062f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062f8:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80062fc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006300:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006304:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006308:	edd7 7a08 	vldr	s15, [r7, #32]
 800630c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006310:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8006314:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006318:	ee37 7a27 	vadd.f32	s14, s14, s15
 800631c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8006320:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8006324:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006328:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800632c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006330:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006334:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8006338:	ee36 6a67 	vsub.f32	s12, s12, s15
 800633c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006340:	ee26 6a27 	vmul.f32	s12, s12, s15
 8006344:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8006348:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800634c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8006350:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006354:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8006358:	ee36 6a27 	vadd.f32	s12, s12, s15
 800635c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006360:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006364:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006368:	ee37 7a67 	vsub.f32	s14, s14, s15
 800636c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006370:	eef1 6a67 	vneg.f32	s13, s15
 8006374:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006378:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800637c:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8006380:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8006384:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006388:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800638c:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8006390:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8006394:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006398:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800639c:	ee26 6a27 	vmul.f32	s12, s12, s15
 80063a0:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80063a4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80063a8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80063ac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80063b0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80063b4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80063b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80063bc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80063c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063c8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80063cc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80063d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80063d4:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 80063d8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80063dc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80063e0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80063e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80063e8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80063ec:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80063f0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80063f4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80063f8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80063fc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006400:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8006404:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006408:	edd7 7a01 	vldr	s15, [r7, #4]
 800640c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006418:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 800641c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8006420:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006424:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006428:	ee37 7a67 	vsub.f32	s14, s14, s15
 800642c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006430:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006434:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8006438:	ee27 7a27 	vmul.f32	s14, s14, s15
 800643c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006440:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006444:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006448:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800644c:	edd7 7a08 	vldr	s15, [r7, #32]
 8006450:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006454:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8006458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800645c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006460:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8006464:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8006468:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800646c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006470:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006474:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006478:	ee36 6a67 	vsub.f32	s12, s12, s15
 800647c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006480:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006484:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006488:	edd7 7a07 	vldr	s15, [r7, #28]
 800648c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006494:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006498:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800649c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80064a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80064a4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80064a8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80064ac:	ee36 6a67 	vsub.f32	s12, s12, s15
 80064b0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80064b4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80064b8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80064bc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80064c0:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 80064c4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80064c8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80064cc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80064d0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80064d4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80064d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80064dc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80064e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064e8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80064ec:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80064f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80064f4:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80064f8:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80064fc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006500:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006504:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8006508:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800650c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006510:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006514:	ee26 6a27 	vmul.f32	s12, s12, s15
 8006518:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 800651c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8006520:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8006524:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006528:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800652c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006530:	edd7 7a02 	vldr	s15, [r7, #8]
 8006534:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800653c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006540:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8006544:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006548:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800654c:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8006550:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8006554:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006558:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800655c:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8006560:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8006564:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006568:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800656c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8006570:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8006574:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006578:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800657c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006580:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8006584:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006588:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800658c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006590:	edd7 7a01 	vldr	s15, [r7, #4]
 8006594:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800659c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065a0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80065a4:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80065a8:	eeb1 7a67 	vneg.f32	s14, s15
 80065ac:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80065b0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80065b4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80065b8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80065bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80065c0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80065c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065c8:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80065cc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80065d0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80065d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80065d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80065dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80065e0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80065e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065ec:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80065f0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80065f4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80065f8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80065fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006600:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006604:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006608:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800660c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006610:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006614:	edd7 7a07 	vldr	s15, [r7, #28]
 8006618:	ee76 7a67 	vsub.f32	s15, s12, s15
 800661c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006620:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006624:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006628:	eef1 6a67 	vneg.f32	s13, s15
 800662c:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8006630:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006634:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8006638:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800663c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006640:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006644:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8006648:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800664c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006650:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8006654:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006658:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800665c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8006660:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8006664:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8006668:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800666c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006670:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8006674:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006678:	edd7 7a03 	vldr	s15, [r7, #12]
 800667c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006680:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006684:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006688:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800668c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8006690:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006694:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8006698:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800669c:	ee66 7a27 	vmul.f32	s15, s12, s15
 80066a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80066a4:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 80066a8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80066ac:	ee36 6a67 	vsub.f32	s12, s12, s15
 80066b0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80066b4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80066b8:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80066bc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80066c0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80066c4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80066c8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80066cc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80066d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80066d4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80066d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066e0:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80066e4:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80066e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80066ec:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 80066f0:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80066f4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80066f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80066fc:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8006700:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8006704:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006708:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800670c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8006710:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8006714:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006718:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800671c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006720:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8006724:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006728:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800672c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006730:	edd7 7a01 	vldr	s15, [r7, #4]
 8006734:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800673c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006740:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8006744:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8006748:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800674c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006750:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006754:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006758:	ee37 7a67 	vsub.f32	s14, s14, s15
 800675c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8006760:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006764:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006768:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800676c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006770:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006774:	edd7 7a08 	vldr	s15, [r7, #32]
 8006778:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800677c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8006780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006784:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006788:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800678c:	eef1 6a67 	vneg.f32	s13, s15
 8006790:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006794:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006798:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800679c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80067a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80067a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80067a8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80067ac:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80067b0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80067b4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80067b8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80067bc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80067c0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80067c4:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 80067c8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80067cc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80067d0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80067d4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80067d8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80067dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80067e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80067e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80067ec:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80067f0:	eef1 6a67 	vneg.f32	s13, s15
 80067f4:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80067f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80067fc:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8006800:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8006804:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006808:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800680c:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8006810:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8006814:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006818:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800681c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8006820:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8006824:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8006828:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800682c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006830:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8006834:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006838:	edd7 7a02 	vldr	s15, [r7, #8]
 800683c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006844:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006848:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800684c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8006850:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006854:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8006858:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800685c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006860:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006864:	ee26 6a27 	vmul.f32	s12, s12, s15
 8006868:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800686c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006870:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8006874:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006878:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800687c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006880:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8006884:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006888:	edd7 7a01 	vldr	s15, [r7, #4]
 800688c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006898:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 800689c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80068a0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80068a4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80068a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80068ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068b0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80068b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80068b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068bc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80068c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80068c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068c8:	eeb0 0a67 	vmov.f32	s0, s15
 80068cc:	f00d fbc2 	bl	8014054 <sqrtf>
 80068d0:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
    norm = 1.0f/norm;
 80068d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068d8:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80068dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068e0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    s1 *= norm;
 80068e4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80068e8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80068ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068f0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    s2 *= norm;
 80068f4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80068f8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80068fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006900:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    s3 *= norm;
 8006904:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006908:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800690c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006910:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    s4 *= norm;
 8006914:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006918:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800691c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006920:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    // Compute rate of change of quaternion
    qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 8006924:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8006928:	eeb1 7a67 	vneg.f32	s14, s15
 800692c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006930:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006934:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8006938:	edd7 7a05 	vldr	s15, [r7, #20]
 800693c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006940:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006944:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8006948:	edd7 7a04 	vldr	s15, [r7, #16]
 800694c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006954:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006958:	ee27 7a87 	vmul.f32	s14, s15, s14
 800695c:	4b7e      	ldr	r3, [pc, #504]	; (8006b58 <QuaternionUpdate+0xce0>)
 800695e:	edd3 6a00 	vldr	s13, [r3]
 8006962:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800696a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800696e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 8006972:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8006976:	edd7 7a06 	vldr	s15, [r7, #24]
 800697a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800697e:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8006982:	edd7 7a04 	vldr	s15, [r7, #16]
 8006986:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800698a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800698e:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8006992:	edd7 7a05 	vldr	s15, [r7, #20]
 8006996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800699a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800699e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80069a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80069a6:	4b6c      	ldr	r3, [pc, #432]	; (8006b58 <QuaternionUpdate+0xce0>)
 80069a8:	edd3 6a00 	vldr	s13, [r3]
 80069ac:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80069b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069b8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 80069bc:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80069c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80069c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069c8:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 80069cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80069d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80069d8:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80069dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80069e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80069ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80069f0:	4b59      	ldr	r3, [pc, #356]	; (8006b58 <QuaternionUpdate+0xce0>)
 80069f2:	edd3 6a00 	vldr	s13, [r3]
 80069f6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80069fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a02:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 8006a06:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8006a0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8006a0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a12:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 8006a16:	edd7 7a05 	vldr	s15, [r7, #20]
 8006a1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a22:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8006a26:	edd7 7a06 	vldr	s15, [r7, #24]
 8006a2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006a36:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006a3a:	4b47      	ldr	r3, [pc, #284]	; (8006b58 <QuaternionUpdate+0xce0>)
 8006a3c:	edd3 6a00 	vldr	s13, [r3]
 8006a40:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006a44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a4c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

    // Integrate to yield quaternion
    q1 += qDot1 * deltat;
 8006a50:	4b42      	ldr	r3, [pc, #264]	; (8006b5c <QuaternionUpdate+0xce4>)
 8006a52:	ed93 7a00 	vldr	s14, [r3]
 8006a56:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a5e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8006a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a66:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
    q2 += qDot2 * deltat;
 8006a6a:	4b3c      	ldr	r3, [pc, #240]	; (8006b5c <QuaternionUpdate+0xce4>)
 8006a6c:	ed93 7a00 	vldr	s14, [r3]
 8006a70:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a78:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8006a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a80:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
    q3 += qDot3 * deltat;
 8006a84:	4b35      	ldr	r3, [pc, #212]	; (8006b5c <QuaternionUpdate+0xce4>)
 8006a86:	ed93 7a00 	vldr	s14, [r3]
 8006a8a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a92:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8006a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a9a:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
    q4 += qDot4 * deltat;
 8006a9e:	4b2f      	ldr	r3, [pc, #188]	; (8006b5c <QuaternionUpdate+0xce4>)
 8006aa0:	ed93 7a00 	vldr	s14, [r3]
 8006aa4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aac:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8006ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ab4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
    norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 8006ab8:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8006abc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006ac0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8006ac4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006ac8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006acc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8006ad0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006ad4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ad8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006adc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8006ae8:	f00d fab4 	bl	8014054 <sqrtf>
 8006aec:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
    norm = 1.0f/norm;
 8006af0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006af4:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8006af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006afc:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    q[0] = q1 * norm;
 8006b00:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8006b04:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b0c:	4b14      	ldr	r3, [pc, #80]	; (8006b60 <QuaternionUpdate+0xce8>)
 8006b0e:	edc3 7a00 	vstr	s15, [r3]
    q[1] = q2 * norm;
 8006b12:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8006b16:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b1e:	4b10      	ldr	r3, [pc, #64]	; (8006b60 <QuaternionUpdate+0xce8>)
 8006b20:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] = q3 * norm;
 8006b24:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8006b28:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b30:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <QuaternionUpdate+0xce8>)
 8006b32:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] = q4 * norm;
 8006b36:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8006b3a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b42:	4b07      	ldr	r3, [pc, #28]	; (8006b60 <QuaternionUpdate+0xce8>)
 8006b44:	edc3 7a03 	vstr	s15, [r3, #12]
 8006b48:	e002      	b.n	8006b50 <QuaternionUpdate+0xcd8>
    if (norm == 0.0f) return; // handle NaN
 8006b4a:	bf00      	nop
 8006b4c:	e000      	b.n	8006b50 <QuaternionUpdate+0xcd8>
    if (norm == 0.0f) return; // handle NaN
 8006b4e:	bf00      	nop

}
 8006b50:	37c8      	adds	r7, #200	; 0xc8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20000004 	.word	0x20000004
 8006b5c:	20000290 	.word	0x20000290
 8006b60:	20000008 	.word	0x20000008

08006b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b6a:	4b12      	ldr	r3, [pc, #72]	; (8006bb4 <HAL_MspInit+0x50>)
 8006b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b6e:	4a11      	ldr	r2, [pc, #68]	; (8006bb4 <HAL_MspInit+0x50>)
 8006b70:	f043 0301 	orr.w	r3, r3, #1
 8006b74:	6613      	str	r3, [r2, #96]	; 0x60
 8006b76:	4b0f      	ldr	r3, [pc, #60]	; (8006bb4 <HAL_MspInit+0x50>)
 8006b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	607b      	str	r3, [r7, #4]
 8006b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b82:	4b0c      	ldr	r3, [pc, #48]	; (8006bb4 <HAL_MspInit+0x50>)
 8006b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b86:	4a0b      	ldr	r2, [pc, #44]	; (8006bb4 <HAL_MspInit+0x50>)
 8006b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b8c:	6593      	str	r3, [r2, #88]	; 0x58
 8006b8e:	4b09      	ldr	r3, [pc, #36]	; (8006bb4 <HAL_MspInit+0x50>)
 8006b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b96:	603b      	str	r3, [r7, #0]
 8006b98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	210f      	movs	r1, #15
 8006b9e:	f06f 0001 	mvn.w	r0, #1
 8006ba2:	f000 fc3b 	bl	800741c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8006ba6:	f002 fa31 	bl	800900c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006baa:	bf00      	nop
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	40021000 	.word	0x40021000

08006bb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b08c      	sub	sp, #48	; 0x30
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8006bce:	4b2d      	ldr	r3, [pc, #180]	; (8006c84 <HAL_InitTick+0xcc>)
 8006bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd2:	4a2c      	ldr	r2, [pc, #176]	; (8006c84 <HAL_InitTick+0xcc>)
 8006bd4:	f043 0301 	orr.w	r3, r3, #1
 8006bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8006bda:	4b2a      	ldr	r3, [pc, #168]	; (8006c84 <HAL_InitTick+0xcc>)
 8006bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	60bb      	str	r3, [r7, #8]
 8006be4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006be6:	f107 020c 	add.w	r2, r7, #12
 8006bea:	f107 0310 	add.w	r3, r7, #16
 8006bee:	4611      	mov	r1, r2
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f002 ff09 	bl	8009a08 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006bf6:	f002 fedb 	bl	80099b0 <HAL_RCC_GetPCLK1Freq>
 8006bfa:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfe:	4a22      	ldr	r2, [pc, #136]	; (8006c88 <HAL_InitTick+0xd0>)
 8006c00:	fba2 2303 	umull	r2, r3, r2, r3
 8006c04:	0c9b      	lsrs	r3, r3, #18
 8006c06:	3b01      	subs	r3, #1
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8006c0a:	4b20      	ldr	r3, [pc, #128]	; (8006c8c <HAL_InitTick+0xd4>)
 8006c0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006c10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8006c12:	4b1e      	ldr	r3, [pc, #120]	; (8006c8c <HAL_InitTick+0xd4>)
 8006c14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006c18:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8006c1a:	4a1c      	ldr	r2, [pc, #112]	; (8006c8c <HAL_InitTick+0xd4>)
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8006c20:	4b1a      	ldr	r3, [pc, #104]	; (8006c8c <HAL_InitTick+0xd4>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c26:	4b19      	ldr	r3, [pc, #100]	; (8006c8c <HAL_InitTick+0xd4>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8006c2c:	4817      	ldr	r0, [pc, #92]	; (8006c8c <HAL_InitTick+0xd4>)
 8006c2e:	f003 f953 	bl	8009ed8 <HAL_TIM_Base_Init>
 8006c32:	4603      	mov	r3, r0
 8006c34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8006c38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d11b      	bne.n	8006c78 <HAL_InitTick+0xc0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8006c40:	4812      	ldr	r0, [pc, #72]	; (8006c8c <HAL_InitTick+0xd4>)
 8006c42:	f003 f9ab 	bl	8009f9c <HAL_TIM_Base_Start_IT>
 8006c46:	4603      	mov	r3, r0
 8006c48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8006c4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d111      	bne.n	8006c78 <HAL_InitTick+0xc0>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006c54:	201c      	movs	r0, #28
 8006c56:	f000 fbfb 	bl	8007450 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b0f      	cmp	r3, #15
 8006c5e:	d808      	bhi.n	8006c72 <HAL_InitTick+0xba>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8006c60:	2200      	movs	r2, #0
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	201c      	movs	r0, #28
 8006c66:	f000 fbd9 	bl	800741c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006c6a:	4a09      	ldr	r2, [pc, #36]	; (8006c90 <HAL_InitTick+0xd8>)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6013      	str	r3, [r2, #0]
 8006c70:	e002      	b.n	8006c78 <HAL_InitTick+0xc0>
      }
      else
      {
        status = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8006c78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3730      	adds	r7, #48	; 0x30
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	40021000 	.word	0x40021000
 8006c88:	431bde83 	.word	0x431bde83
 8006c8c:	20002950 	.word	0x20002950
 8006c90:	2000001c 	.word	0x2000001c

08006c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006c94:	b480      	push	{r7}
 8006c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006c98:	e7fe      	b.n	8006c98 <NMI_Handler+0x4>

08006c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006c9e:	e7fe      	b.n	8006c9e <HardFault_Handler+0x4>

08006ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006ca4:	e7fe      	b.n	8006ca4 <MemManage_Handler+0x4>

08006ca6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006caa:	e7fe      	b.n	8006caa <BusFault_Handler+0x4>

08006cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006cac:	b480      	push	{r7}
 8006cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006cb0:	e7fe      	b.n	8006cb0 <UsageFault_Handler+0x4>

08006cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006cb6:	bf00      	nop
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006cc4:	4802      	ldr	r0, [pc, #8]	; (8006cd0 <DMA1_Channel1_IRQHandler+0x10>)
 8006cc6:	f000 fdb4 	bl	8007832 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006cca:	bf00      	nop
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20002a8c 	.word	0x20002a8c

08006cd4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006cd8:	4802      	ldr	r0, [pc, #8]	; (8006ce4 <DMA1_Channel2_IRQHandler+0x10>)
 8006cda:	f000 fdaa 	bl	8007832 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8006cde:	bf00      	nop
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20002a2c 	.word	0x20002a2c

08006ce8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006cec:	4802      	ldr	r0, [pc, #8]	; (8006cf8 <TIM2_IRQHandler+0x10>)
 8006cee:	f003 f9bf 	bl	800a070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006cf2:	bf00      	nop
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20002950 	.word	0x20002950

08006cfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006d00:	4802      	ldr	r0, [pc, #8]	; (8006d0c <USART1_IRQHandler+0x10>)
 8006d02:	f003 fe01 	bl	800a908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006d06:	bf00      	nop
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	20002aec 	.word	0x20002aec

08006d10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006d10:	b480      	push	{r7}
 8006d12:	af00      	add	r7, sp, #0
	return 1;
 8006d14:	2301      	movs	r3, #1
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <_kill>:

int _kill(int pid, int sig)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006d2a:	f008 fb77 	bl	800f41c <__errno>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2216      	movs	r2, #22
 8006d32:	601a      	str	r2, [r3, #0]
	return -1;
 8006d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <_exit>:

void _exit (int status)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006d48:	f04f 31ff 	mov.w	r1, #4294967295
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7ff ffe7 	bl	8006d20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006d52:	e7fe      	b.n	8006d52 <_exit+0x12>

08006d54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d60:	2300      	movs	r3, #0
 8006d62:	617b      	str	r3, [r7, #20]
 8006d64:	e00a      	b.n	8006d7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006d66:	f3af 8000 	nop.w
 8006d6a:	4601      	mov	r1, r0
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	1c5a      	adds	r2, r3, #1
 8006d70:	60ba      	str	r2, [r7, #8]
 8006d72:	b2ca      	uxtb	r2, r1
 8006d74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	dbf0      	blt.n	8006d66 <_read+0x12>
	}

return len;
 8006d84:	687b      	ldr	r3, [r7, #4]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <_close>:
	}
	return len;
}

int _close(int file)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
	return -1;
 8006d96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006db6:	605a      	str	r2, [r3, #4]
	return 0;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <_isatty>:

int _isatty(int file)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b083      	sub	sp, #12
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
	return 1;
 8006dce:	2301      	movs	r3, #1
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
	return 0;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
	...

08006df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006e00:	4a14      	ldr	r2, [pc, #80]	; (8006e54 <_sbrk+0x5c>)
 8006e02:	4b15      	ldr	r3, [pc, #84]	; (8006e58 <_sbrk+0x60>)
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006e0c:	4b13      	ldr	r3, [pc, #76]	; (8006e5c <_sbrk+0x64>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d102      	bne.n	8006e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006e14:	4b11      	ldr	r3, [pc, #68]	; (8006e5c <_sbrk+0x64>)
 8006e16:	4a12      	ldr	r2, [pc, #72]	; (8006e60 <_sbrk+0x68>)
 8006e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006e1a:	4b10      	ldr	r3, [pc, #64]	; (8006e5c <_sbrk+0x64>)
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4413      	add	r3, r2
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d207      	bcs.n	8006e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006e28:	f008 faf8 	bl	800f41c <__errno>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	220c      	movs	r2, #12
 8006e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006e32:	f04f 33ff 	mov.w	r3, #4294967295
 8006e36:	e009      	b.n	8006e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006e38:	4b08      	ldr	r3, [pc, #32]	; (8006e5c <_sbrk+0x64>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006e3e:	4b07      	ldr	r3, [pc, #28]	; (8006e5c <_sbrk+0x64>)
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4413      	add	r3, r2
 8006e46:	4a05      	ldr	r2, [pc, #20]	; (8006e5c <_sbrk+0x64>)
 8006e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	20008000 	.word	0x20008000
 8006e58:	00000400 	.word	0x00000400
 8006e5c:	200002a0 	.word	0x200002a0
 8006e60:	20002bd0 	.word	0x20002bd0

08006e64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006e64:	b480      	push	{r7}
 8006e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006e68:	4b06      	ldr	r3, [pc, #24]	; (8006e84 <SystemInit+0x20>)
 8006e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e6e:	4a05      	ldr	r2, [pc, #20]	; (8006e84 <SystemInit+0x20>)
 8006e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006e78:	bf00      	nop
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	e000ed00 	.word	0xe000ed00

08006e88 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006e8c:	4b21      	ldr	r3, [pc, #132]	; (8006f14 <MX_LPUART1_UART_Init+0x8c>)
 8006e8e:	4a22      	ldr	r2, [pc, #136]	; (8006f18 <MX_LPUART1_UART_Init+0x90>)
 8006e90:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8006e92:	4b20      	ldr	r3, [pc, #128]	; (8006f14 <MX_LPUART1_UART_Init+0x8c>)
 8006e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006e98:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006e9a:	4b1e      	ldr	r3, [pc, #120]	; (8006f14 <MX_LPUART1_UART_Init+0x8c>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006ea0:	4b1c      	ldr	r3, [pc, #112]	; (8006f14 <MX_LPUART1_UART_Init+0x8c>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8006ea6:	4b1b      	ldr	r3, [pc, #108]	; (8006f14 <MX_LPUART1_UART_Init+0x8c>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006eac:	4b19      	ldr	r3, [pc, #100]	; (8006f14 <MX_LPUART1_UART_Init+0x8c>)
 8006eae:	220c      	movs	r2, #12
 8006eb0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006eb2:	4b18      	ldr	r3, [pc, #96]	; (8006f14 <MX_LPUART1_UART_Init+0x8c>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006eb8:	4b16      	ldr	r3, [pc, #88]	; (8006f14 <MX_LPUART1_UART_Init+0x8c>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006ebe:	4b15      	ldr	r3, [pc, #84]	; (8006f14 <MX_LPUART1_UART_Init+0x8c>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006ec4:	4b13      	ldr	r3, [pc, #76]	; (8006f14 <MX_LPUART1_UART_Init+0x8c>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006eca:	4812      	ldr	r0, [pc, #72]	; (8006f14 <MX_LPUART1_UART_Init+0x8c>)
 8006ecc:	f003 fb4e 	bl	800a56c <HAL_UART_Init>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8006ed6:	f7fc fe73 	bl	8003bc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006eda:	2100      	movs	r1, #0
 8006edc:	480d      	ldr	r0, [pc, #52]	; (8006f14 <MX_LPUART1_UART_Init+0x8c>)
 8006ede:	f005 fc12 	bl	800c706 <HAL_UARTEx_SetTxFifoThreshold>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8006ee8:	f7fc fe6a 	bl	8003bc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006eec:	2100      	movs	r1, #0
 8006eee:	4809      	ldr	r0, [pc, #36]	; (8006f14 <MX_LPUART1_UART_Init+0x8c>)
 8006ef0:	f005 fc47 	bl	800c782 <HAL_UARTEx_SetRxFifoThreshold>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d001      	beq.n	8006efe <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8006efa:	f7fc fe61 	bl	8003bc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8006efe:	4805      	ldr	r0, [pc, #20]	; (8006f14 <MX_LPUART1_UART_Init+0x8c>)
 8006f00:	f005 fbc8 	bl	800c694 <HAL_UARTEx_DisableFifoMode>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8006f0a:	f7fc fe59 	bl	8003bc0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8006f0e:	bf00      	nop
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	2000299c 	.word	0x2000299c
 8006f18:	40008000 	.word	0x40008000

08006f1c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006f20:	4b22      	ldr	r3, [pc, #136]	; (8006fac <MX_USART1_UART_Init+0x90>)
 8006f22:	4a23      	ldr	r2, [pc, #140]	; (8006fb0 <MX_USART1_UART_Init+0x94>)
 8006f24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006f26:	4b21      	ldr	r3, [pc, #132]	; (8006fac <MX_USART1_UART_Init+0x90>)
 8006f28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006f2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006f2e:	4b1f      	ldr	r3, [pc, #124]	; (8006fac <MX_USART1_UART_Init+0x90>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006f34:	4b1d      	ldr	r3, [pc, #116]	; (8006fac <MX_USART1_UART_Init+0x90>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006f3a:	4b1c      	ldr	r3, [pc, #112]	; (8006fac <MX_USART1_UART_Init+0x90>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006f40:	4b1a      	ldr	r3, [pc, #104]	; (8006fac <MX_USART1_UART_Init+0x90>)
 8006f42:	220c      	movs	r2, #12
 8006f44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f46:	4b19      	ldr	r3, [pc, #100]	; (8006fac <MX_USART1_UART_Init+0x90>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f4c:	4b17      	ldr	r3, [pc, #92]	; (8006fac <MX_USART1_UART_Init+0x90>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006f52:	4b16      	ldr	r3, [pc, #88]	; (8006fac <MX_USART1_UART_Init+0x90>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006f58:	4b14      	ldr	r3, [pc, #80]	; (8006fac <MX_USART1_UART_Init+0x90>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006f5e:	4b13      	ldr	r3, [pc, #76]	; (8006fac <MX_USART1_UART_Init+0x90>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006f64:	4811      	ldr	r0, [pc, #68]	; (8006fac <MX_USART1_UART_Init+0x90>)
 8006f66:	f003 fb01 	bl	800a56c <HAL_UART_Init>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006f70:	f7fc fe26 	bl	8003bc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f74:	2100      	movs	r1, #0
 8006f76:	480d      	ldr	r0, [pc, #52]	; (8006fac <MX_USART1_UART_Init+0x90>)
 8006f78:	f005 fbc5 	bl	800c706 <HAL_UARTEx_SetTxFifoThreshold>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006f82:	f7fc fe1d 	bl	8003bc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f86:	2100      	movs	r1, #0
 8006f88:	4808      	ldr	r0, [pc, #32]	; (8006fac <MX_USART1_UART_Init+0x90>)
 8006f8a:	f005 fbfa 	bl	800c782 <HAL_UARTEx_SetRxFifoThreshold>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006f94:	f7fc fe14 	bl	8003bc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006f98:	4804      	ldr	r0, [pc, #16]	; (8006fac <MX_USART1_UART_Init+0x90>)
 8006f9a:	f005 fb7b 	bl	800c694 <HAL_UARTEx_DisableFifoMode>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006fa4:	f7fc fe0c 	bl	8003bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006fa8:	bf00      	nop
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	20002aec 	.word	0x20002aec
 8006fb0:	40013800 	.word	0x40013800

08006fb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b09c      	sub	sp, #112	; 0x70
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fbc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	605a      	str	r2, [r3, #4]
 8006fc6:	609a      	str	r2, [r3, #8]
 8006fc8:	60da      	str	r2, [r3, #12]
 8006fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006fcc:	f107 0318 	add.w	r3, r7, #24
 8006fd0:	2244      	movs	r2, #68	; 0x44
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f008 fb52 	bl	800f67e <memset>
  if(uartHandle->Instance==LPUART1)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a6a      	ldr	r2, [pc, #424]	; (8007188 <HAL_UART_MspInit+0x1d4>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d137      	bne.n	8007054 <HAL_UART_MspInit+0xa0>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8006fe4:	2320      	movs	r3, #32
 8006fe6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006fec:	f107 0318 	add.w	r3, r7, #24
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f002 fd81 	bl	8009af8 <HAL_RCCEx_PeriphCLKConfig>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006ffc:	f7fc fde0 	bl	8003bc0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8007000:	4b62      	ldr	r3, [pc, #392]	; (800718c <HAL_UART_MspInit+0x1d8>)
 8007002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007004:	4a61      	ldr	r2, [pc, #388]	; (800718c <HAL_UART_MspInit+0x1d8>)
 8007006:	f043 0301 	orr.w	r3, r3, #1
 800700a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800700c:	4b5f      	ldr	r3, [pc, #380]	; (800718c <HAL_UART_MspInit+0x1d8>)
 800700e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	617b      	str	r3, [r7, #20]
 8007016:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007018:	4b5c      	ldr	r3, [pc, #368]	; (800718c <HAL_UART_MspInit+0x1d8>)
 800701a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800701c:	4a5b      	ldr	r2, [pc, #364]	; (800718c <HAL_UART_MspInit+0x1d8>)
 800701e:	f043 0301 	orr.w	r3, r3, #1
 8007022:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007024:	4b59      	ldr	r3, [pc, #356]	; (800718c <HAL_UART_MspInit+0x1d8>)
 8007026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	613b      	str	r3, [r7, #16]
 800702e:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8007030:	230c      	movs	r3, #12
 8007032:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007034:	2302      	movs	r3, #2
 8007036:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007038:	2300      	movs	r3, #0
 800703a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800703c:	2300      	movs	r3, #0
 800703e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8007040:	230c      	movs	r3, #12
 8007042:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007044:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007048:	4619      	mov	r1, r3
 800704a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800704e:	f000 fd3f 	bl	8007ad0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8007052:	e095      	b.n	8007180 <HAL_UART_MspInit+0x1cc>
  else if(uartHandle->Instance==USART1)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a4d      	ldr	r2, [pc, #308]	; (8007190 <HAL_UART_MspInit+0x1dc>)
 800705a:	4293      	cmp	r3, r2
 800705c:	f040 8090 	bne.w	8007180 <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007060:	2301      	movs	r3, #1
 8007062:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007064:	2300      	movs	r3, #0
 8007066:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007068:	f107 0318 	add.w	r3, r7, #24
 800706c:	4618      	mov	r0, r3
 800706e:	f002 fd43 	bl	8009af8 <HAL_RCCEx_PeriphCLKConfig>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8007078:	f7fc fda2 	bl	8003bc0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800707c:	4b43      	ldr	r3, [pc, #268]	; (800718c <HAL_UART_MspInit+0x1d8>)
 800707e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007080:	4a42      	ldr	r2, [pc, #264]	; (800718c <HAL_UART_MspInit+0x1d8>)
 8007082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007086:	6613      	str	r3, [r2, #96]	; 0x60
 8007088:	4b40      	ldr	r3, [pc, #256]	; (800718c <HAL_UART_MspInit+0x1d8>)
 800708a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800708c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007090:	60fb      	str	r3, [r7, #12]
 8007092:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007094:	4b3d      	ldr	r3, [pc, #244]	; (800718c <HAL_UART_MspInit+0x1d8>)
 8007096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007098:	4a3c      	ldr	r2, [pc, #240]	; (800718c <HAL_UART_MspInit+0x1d8>)
 800709a:	f043 0304 	orr.w	r3, r3, #4
 800709e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80070a0:	4b3a      	ldr	r3, [pc, #232]	; (800718c <HAL_UART_MspInit+0x1d8>)
 80070a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	60bb      	str	r3, [r7, #8]
 80070aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80070ac:	2330      	movs	r3, #48	; 0x30
 80070ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070b0:	2302      	movs	r3, #2
 80070b2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070b4:	2300      	movs	r3, #0
 80070b6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070b8:	2300      	movs	r3, #0
 80070ba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80070bc:	2307      	movs	r3, #7
 80070be:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80070c4:	4619      	mov	r1, r3
 80070c6:	4833      	ldr	r0, [pc, #204]	; (8007194 <HAL_UART_MspInit+0x1e0>)
 80070c8:	f000 fd02 	bl	8007ad0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80070cc:	4b32      	ldr	r3, [pc, #200]	; (8007198 <HAL_UART_MspInit+0x1e4>)
 80070ce:	4a33      	ldr	r2, [pc, #204]	; (800719c <HAL_UART_MspInit+0x1e8>)
 80070d0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80070d2:	4b31      	ldr	r3, [pc, #196]	; (8007198 <HAL_UART_MspInit+0x1e4>)
 80070d4:	2218      	movs	r2, #24
 80070d6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80070d8:	4b2f      	ldr	r3, [pc, #188]	; (8007198 <HAL_UART_MspInit+0x1e4>)
 80070da:	2200      	movs	r2, #0
 80070dc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80070de:	4b2e      	ldr	r3, [pc, #184]	; (8007198 <HAL_UART_MspInit+0x1e4>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80070e4:	4b2c      	ldr	r3, [pc, #176]	; (8007198 <HAL_UART_MspInit+0x1e4>)
 80070e6:	2280      	movs	r2, #128	; 0x80
 80070e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80070ea:	4b2b      	ldr	r3, [pc, #172]	; (8007198 <HAL_UART_MspInit+0x1e4>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80070f0:	4b29      	ldr	r3, [pc, #164]	; (8007198 <HAL_UART_MspInit+0x1e4>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80070f6:	4b28      	ldr	r3, [pc, #160]	; (8007198 <HAL_UART_MspInit+0x1e4>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80070fc:	4b26      	ldr	r3, [pc, #152]	; (8007198 <HAL_UART_MspInit+0x1e4>)
 80070fe:	2200      	movs	r2, #0
 8007100:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8007102:	4825      	ldr	r0, [pc, #148]	; (8007198 <HAL_UART_MspInit+0x1e4>)
 8007104:	f000 f9b2 	bl	800746c <HAL_DMA_Init>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <HAL_UART_MspInit+0x15e>
      Error_Handler();
 800710e:	f7fc fd57 	bl	8003bc0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a20      	ldr	r2, [pc, #128]	; (8007198 <HAL_UART_MspInit+0x1e4>)
 8007116:	67da      	str	r2, [r3, #124]	; 0x7c
 8007118:	4a1f      	ldr	r2, [pc, #124]	; (8007198 <HAL_UART_MspInit+0x1e4>)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800711e:	4b20      	ldr	r3, [pc, #128]	; (80071a0 <HAL_UART_MspInit+0x1ec>)
 8007120:	4a20      	ldr	r2, [pc, #128]	; (80071a4 <HAL_UART_MspInit+0x1f0>)
 8007122:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8007124:	4b1e      	ldr	r3, [pc, #120]	; (80071a0 <HAL_UART_MspInit+0x1ec>)
 8007126:	2219      	movs	r2, #25
 8007128:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800712a:	4b1d      	ldr	r3, [pc, #116]	; (80071a0 <HAL_UART_MspInit+0x1ec>)
 800712c:	2210      	movs	r2, #16
 800712e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007130:	4b1b      	ldr	r3, [pc, #108]	; (80071a0 <HAL_UART_MspInit+0x1ec>)
 8007132:	2200      	movs	r2, #0
 8007134:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007136:	4b1a      	ldr	r3, [pc, #104]	; (80071a0 <HAL_UART_MspInit+0x1ec>)
 8007138:	2280      	movs	r2, #128	; 0x80
 800713a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800713c:	4b18      	ldr	r3, [pc, #96]	; (80071a0 <HAL_UART_MspInit+0x1ec>)
 800713e:	2200      	movs	r2, #0
 8007140:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007142:	4b17      	ldr	r3, [pc, #92]	; (80071a0 <HAL_UART_MspInit+0x1ec>)
 8007144:	2200      	movs	r2, #0
 8007146:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8007148:	4b15      	ldr	r3, [pc, #84]	; (80071a0 <HAL_UART_MspInit+0x1ec>)
 800714a:	2200      	movs	r2, #0
 800714c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800714e:	4b14      	ldr	r3, [pc, #80]	; (80071a0 <HAL_UART_MspInit+0x1ec>)
 8007150:	2200      	movs	r2, #0
 8007152:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8007154:	4812      	ldr	r0, [pc, #72]	; (80071a0 <HAL_UART_MspInit+0x1ec>)
 8007156:	f000 f989 	bl	800746c <HAL_DMA_Init>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 8007160:	f7fc fd2e 	bl	8003bc0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a0e      	ldr	r2, [pc, #56]	; (80071a0 <HAL_UART_MspInit+0x1ec>)
 8007168:	679a      	str	r2, [r3, #120]	; 0x78
 800716a:	4a0d      	ldr	r2, [pc, #52]	; (80071a0 <HAL_UART_MspInit+0x1ec>)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8007170:	2200      	movs	r2, #0
 8007172:	2105      	movs	r1, #5
 8007174:	2025      	movs	r0, #37	; 0x25
 8007176:	f000 f951 	bl	800741c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800717a:	2025      	movs	r0, #37	; 0x25
 800717c:	f000 f968 	bl	8007450 <HAL_NVIC_EnableIRQ>
}
 8007180:	bf00      	nop
 8007182:	3770      	adds	r7, #112	; 0x70
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	40008000 	.word	0x40008000
 800718c:	40021000 	.word	0x40021000
 8007190:	40013800 	.word	0x40013800
 8007194:	48000800 	.word	0x48000800
 8007198:	20002a8c 	.word	0x20002a8c
 800719c:	40020008 	.word	0x40020008
 80071a0:	20002a2c 	.word	0x20002a2c
 80071a4:	4002001c 	.word	0x4002001c

080071a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80071a8:	480d      	ldr	r0, [pc, #52]	; (80071e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80071aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80071ac:	480d      	ldr	r0, [pc, #52]	; (80071e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80071ae:	490e      	ldr	r1, [pc, #56]	; (80071e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80071b0:	4a0e      	ldr	r2, [pc, #56]	; (80071ec <LoopForever+0xe>)
  movs r3, #0
 80071b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80071b4:	e002      	b.n	80071bc <LoopCopyDataInit>

080071b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80071b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80071b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80071ba:	3304      	adds	r3, #4

080071bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80071bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80071be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80071c0:	d3f9      	bcc.n	80071b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80071c2:	4a0b      	ldr	r2, [pc, #44]	; (80071f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80071c4:	4c0b      	ldr	r4, [pc, #44]	; (80071f4 <LoopForever+0x16>)
  movs r3, #0
 80071c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80071c8:	e001      	b.n	80071ce <LoopFillZerobss>

080071ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80071ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80071cc:	3204      	adds	r2, #4

080071ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80071ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80071d0:	d3fb      	bcc.n	80071ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80071d2:	f7ff fe47 	bl	8006e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80071d6:	f008 fa1d 	bl	800f614 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80071da:	f7fc fc4f 	bl	8003a7c <main>

080071de <LoopForever>:

LoopForever:
    b LoopForever
 80071de:	e7fe      	b.n	80071de <LoopForever>
  ldr   r0, =_estack
 80071e0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80071e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80071e8:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80071ec:	08015cc0 	.word	0x08015cc0
  ldr r2, =_sbss
 80071f0:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80071f4:	20002bd0 	.word	0x20002bd0

080071f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80071f8:	e7fe      	b.n	80071f8 <ADC1_2_IRQHandler>

080071fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b082      	sub	sp, #8
 80071fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007204:	2003      	movs	r0, #3
 8007206:	f000 f8fe 	bl	8007406 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800720a:	200f      	movs	r0, #15
 800720c:	f7ff fcd4 	bl	8006bb8 <HAL_InitTick>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	71fb      	strb	r3, [r7, #7]
 800721a:	e001      	b.n	8007220 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800721c:	f7ff fca2 	bl	8006b64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007220:	79fb      	ldrb	r3, [r7, #7]

}
 8007222:	4618      	mov	r0, r3
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800722c:	b480      	push	{r7}
 800722e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007230:	4b05      	ldr	r3, [pc, #20]	; (8007248 <HAL_IncTick+0x1c>)
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	4b05      	ldr	r3, [pc, #20]	; (800724c <HAL_IncTick+0x20>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4413      	add	r3, r2
 800723a:	4a03      	ldr	r2, [pc, #12]	; (8007248 <HAL_IncTick+0x1c>)
 800723c:	6013      	str	r3, [r2, #0]
}
 800723e:	bf00      	nop
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	20002b7c 	.word	0x20002b7c
 800724c:	20000020 	.word	0x20000020

08007250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007250:	b480      	push	{r7}
 8007252:	af00      	add	r7, sp, #0
  return uwTick;
 8007254:	4b03      	ldr	r3, [pc, #12]	; (8007264 <HAL_GetTick+0x14>)
 8007256:	681b      	ldr	r3, [r3, #0]
}
 8007258:	4618      	mov	r0, r3
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	20002b7c 	.word	0x20002b7c

08007268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007270:	f7ff ffee 	bl	8007250 <HAL_GetTick>
 8007274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007280:	d004      	beq.n	800728c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8007282:	4b09      	ldr	r3, [pc, #36]	; (80072a8 <HAL_Delay+0x40>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	4413      	add	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800728c:	bf00      	nop
 800728e:	f7ff ffdf 	bl	8007250 <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	429a      	cmp	r2, r3
 800729c:	d8f7      	bhi.n	800728e <HAL_Delay+0x26>
  {
  }
}
 800729e:	bf00      	nop
 80072a0:	bf00      	nop
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	20000020 	.word	0x20000020

080072ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80072bc:	4b0c      	ldr	r3, [pc, #48]	; (80072f0 <__NVIC_SetPriorityGrouping+0x44>)
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80072c8:	4013      	ands	r3, r2
 80072ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80072d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80072d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80072de:	4a04      	ldr	r2, [pc, #16]	; (80072f0 <__NVIC_SetPriorityGrouping+0x44>)
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	60d3      	str	r3, [r2, #12]
}
 80072e4:	bf00      	nop
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	e000ed00 	.word	0xe000ed00

080072f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80072f4:	b480      	push	{r7}
 80072f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80072f8:	4b04      	ldr	r3, [pc, #16]	; (800730c <__NVIC_GetPriorityGrouping+0x18>)
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	0a1b      	lsrs	r3, r3, #8
 80072fe:	f003 0307 	and.w	r3, r3, #7
}
 8007302:	4618      	mov	r0, r3
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	e000ed00 	.word	0xe000ed00

08007310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	4603      	mov	r3, r0
 8007318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800731a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800731e:	2b00      	cmp	r3, #0
 8007320:	db0b      	blt.n	800733a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007322:	79fb      	ldrb	r3, [r7, #7]
 8007324:	f003 021f 	and.w	r2, r3, #31
 8007328:	4907      	ldr	r1, [pc, #28]	; (8007348 <__NVIC_EnableIRQ+0x38>)
 800732a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800732e:	095b      	lsrs	r3, r3, #5
 8007330:	2001      	movs	r0, #1
 8007332:	fa00 f202 	lsl.w	r2, r0, r2
 8007336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800733a:	bf00      	nop
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	e000e100 	.word	0xe000e100

0800734c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	4603      	mov	r3, r0
 8007354:	6039      	str	r1, [r7, #0]
 8007356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800735c:	2b00      	cmp	r3, #0
 800735e:	db0a      	blt.n	8007376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	b2da      	uxtb	r2, r3
 8007364:	490c      	ldr	r1, [pc, #48]	; (8007398 <__NVIC_SetPriority+0x4c>)
 8007366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800736a:	0112      	lsls	r2, r2, #4
 800736c:	b2d2      	uxtb	r2, r2
 800736e:	440b      	add	r3, r1
 8007370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007374:	e00a      	b.n	800738c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	b2da      	uxtb	r2, r3
 800737a:	4908      	ldr	r1, [pc, #32]	; (800739c <__NVIC_SetPriority+0x50>)
 800737c:	79fb      	ldrb	r3, [r7, #7]
 800737e:	f003 030f 	and.w	r3, r3, #15
 8007382:	3b04      	subs	r3, #4
 8007384:	0112      	lsls	r2, r2, #4
 8007386:	b2d2      	uxtb	r2, r2
 8007388:	440b      	add	r3, r1
 800738a:	761a      	strb	r2, [r3, #24]
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	e000e100 	.word	0xe000e100
 800739c:	e000ed00 	.word	0xe000ed00

080073a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b089      	sub	sp, #36	; 0x24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f003 0307 	and.w	r3, r3, #7
 80073b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	f1c3 0307 	rsb	r3, r3, #7
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	bf28      	it	cs
 80073be:	2304      	movcs	r3, #4
 80073c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	3304      	adds	r3, #4
 80073c6:	2b06      	cmp	r3, #6
 80073c8:	d902      	bls.n	80073d0 <NVIC_EncodePriority+0x30>
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	3b03      	subs	r3, #3
 80073ce:	e000      	b.n	80073d2 <NVIC_EncodePriority+0x32>
 80073d0:	2300      	movs	r3, #0
 80073d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073d4:	f04f 32ff 	mov.w	r2, #4294967295
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	fa02 f303 	lsl.w	r3, r2, r3
 80073de:	43da      	mvns	r2, r3
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	401a      	ands	r2, r3
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80073e8:	f04f 31ff 	mov.w	r1, #4294967295
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	fa01 f303 	lsl.w	r3, r1, r3
 80073f2:	43d9      	mvns	r1, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073f8:	4313      	orrs	r3, r2
         );
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3724      	adds	r7, #36	; 0x24
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b082      	sub	sp, #8
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7ff ff4c 	bl	80072ac <__NVIC_SetPriorityGrouping>
}
 8007414:	bf00      	nop
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
 8007428:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800742a:	f7ff ff63 	bl	80072f4 <__NVIC_GetPriorityGrouping>
 800742e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	68b9      	ldr	r1, [r7, #8]
 8007434:	6978      	ldr	r0, [r7, #20]
 8007436:	f7ff ffb3 	bl	80073a0 <NVIC_EncodePriority>
 800743a:	4602      	mov	r2, r0
 800743c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007440:	4611      	mov	r1, r2
 8007442:	4618      	mov	r0, r3
 8007444:	f7ff ff82 	bl	800734c <__NVIC_SetPriority>
}
 8007448:	bf00      	nop
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	4603      	mov	r3, r0
 8007458:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800745a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800745e:	4618      	mov	r0, r3
 8007460:	f7ff ff56 	bl	8007310 <__NVIC_EnableIRQ>
}
 8007464:	bf00      	nop
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e08d      	b.n	800759a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	461a      	mov	r2, r3
 8007484:	4b47      	ldr	r3, [pc, #284]	; (80075a4 <HAL_DMA_Init+0x138>)
 8007486:	429a      	cmp	r2, r3
 8007488:	d80f      	bhi.n	80074aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	4b45      	ldr	r3, [pc, #276]	; (80075a8 <HAL_DMA_Init+0x13c>)
 8007492:	4413      	add	r3, r2
 8007494:	4a45      	ldr	r2, [pc, #276]	; (80075ac <HAL_DMA_Init+0x140>)
 8007496:	fba2 2303 	umull	r2, r3, r2, r3
 800749a:	091b      	lsrs	r3, r3, #4
 800749c:	009a      	lsls	r2, r3, #2
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a42      	ldr	r2, [pc, #264]	; (80075b0 <HAL_DMA_Init+0x144>)
 80074a6:	641a      	str	r2, [r3, #64]	; 0x40
 80074a8:	e00e      	b.n	80074c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	4b40      	ldr	r3, [pc, #256]	; (80075b4 <HAL_DMA_Init+0x148>)
 80074b2:	4413      	add	r3, r2
 80074b4:	4a3d      	ldr	r2, [pc, #244]	; (80075ac <HAL_DMA_Init+0x140>)
 80074b6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ba:	091b      	lsrs	r3, r3, #4
 80074bc:	009a      	lsls	r2, r3, #2
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a3c      	ldr	r2, [pc, #240]	; (80075b8 <HAL_DMA_Init+0x14c>)
 80074c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80074de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80074ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007504:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fa76 	bl	8007a0c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007528:	d102      	bne.n	8007530 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007538:	b2d2      	uxtb	r2, r2
 800753a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007544:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d010      	beq.n	8007570 <HAL_DMA_Init+0x104>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	2b04      	cmp	r3, #4
 8007554:	d80c      	bhi.n	8007570 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fa96 	bl	8007a88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007560:	2200      	movs	r2, #0
 8007562:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800756c:	605a      	str	r2, [r3, #4]
 800756e:	e008      	b.n	8007582 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	40020407 	.word	0x40020407
 80075a8:	bffdfff8 	.word	0xbffdfff8
 80075ac:	cccccccd 	.word	0xcccccccd
 80075b0:	40020000 	.word	0x40020000
 80075b4:	bffdfbf8 	.word	0xbffdfbf8
 80075b8:	40020400 	.word	0x40020400

080075bc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d101      	bne.n	80075dc <HAL_DMA_Start_IT+0x20>
 80075d8:	2302      	movs	r3, #2
 80075da:	e066      	b.n	80076aa <HAL_DMA_Start_IT+0xee>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d155      	bne.n	800769c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2202      	movs	r2, #2
 80075f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 0201 	bic.w	r2, r2, #1
 800760c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	68b9      	ldr	r1, [r7, #8]
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 f9bb 	bl	8007990 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761e:	2b00      	cmp	r3, #0
 8007620:	d008      	beq.n	8007634 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f042 020e 	orr.w	r2, r2, #14
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	e00f      	b.n	8007654 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 0204 	bic.w	r2, r2, #4
 8007642:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f042 020a 	orr.w	r2, r2, #10
 8007652:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d007      	beq.n	8007672 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800766c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007670:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007676:	2b00      	cmp	r3, #0
 8007678:	d007      	beq.n	800768a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007684:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007688:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f042 0201 	orr.w	r2, r2, #1
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	e005      	b.n	80076a8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80076a4:	2302      	movs	r3, #2
 80076a6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80076a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3718      	adds	r7, #24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b085      	sub	sp, #20
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d005      	beq.n	80076d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2204      	movs	r2, #4
 80076ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	73fb      	strb	r3, [r7, #15]
 80076d4:	e037      	b.n	8007746 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f022 020e 	bic.w	r2, r2, #14
 80076e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f022 0201 	bic.w	r2, r2, #1
 8007704:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770a:	f003 021f 	and.w	r2, r3, #31
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007712:	2101      	movs	r1, #1
 8007714:	fa01 f202 	lsl.w	r2, r1, r2
 8007718:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007722:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00c      	beq.n	8007746 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007736:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800773a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007744:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8007756:	7bfb      	ldrb	r3, [r7, #15]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800776c:	2300      	movs	r3, #0
 800776e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b02      	cmp	r3, #2
 800777a:	d00d      	beq.n	8007798 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2204      	movs	r2, #4
 8007780:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	73fb      	strb	r3, [r7, #15]
 8007796:	e047      	b.n	8007828 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f022 020e 	bic.w	r2, r2, #14
 80077a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 0201 	bic.w	r2, r2, #1
 80077b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077cc:	f003 021f 	and.w	r2, r3, #31
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d4:	2101      	movs	r1, #1
 80077d6:	fa01 f202 	lsl.w	r2, r1, r2
 80077da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80077e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00c      	beq.n	8007808 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007806:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781c:	2b00      	cmp	r3, #0
 800781e:	d003      	beq.n	8007828 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	4798      	blx	r3
    }
  }
  return status;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800784e:	f003 031f 	and.w	r3, r3, #31
 8007852:	2204      	movs	r2, #4
 8007854:	409a      	lsls	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	4013      	ands	r3, r2
 800785a:	2b00      	cmp	r3, #0
 800785c:	d026      	beq.n	80078ac <HAL_DMA_IRQHandler+0x7a>
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	f003 0304 	and.w	r3, r3, #4
 8007864:	2b00      	cmp	r3, #0
 8007866:	d021      	beq.n	80078ac <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0320 	and.w	r3, r3, #32
 8007872:	2b00      	cmp	r3, #0
 8007874:	d107      	bne.n	8007886 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f022 0204 	bic.w	r2, r2, #4
 8007884:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800788a:	f003 021f 	and.w	r2, r3, #31
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007892:	2104      	movs	r1, #4
 8007894:	fa01 f202 	lsl.w	r2, r1, r2
 8007898:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d071      	beq.n	8007986 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80078aa:	e06c      	b.n	8007986 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078b0:	f003 031f 	and.w	r3, r3, #31
 80078b4:	2202      	movs	r2, #2
 80078b6:	409a      	lsls	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	4013      	ands	r3, r2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d02e      	beq.n	800791e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	f003 0302 	and.w	r3, r3, #2
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d029      	beq.n	800791e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0320 	and.w	r3, r3, #32
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10b      	bne.n	80078f0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f022 020a 	bic.w	r2, r2, #10
 80078e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f4:	f003 021f 	and.w	r2, r3, #31
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fc:	2102      	movs	r1, #2
 80078fe:	fa01 f202 	lsl.w	r2, r1, r2
 8007902:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007910:	2b00      	cmp	r3, #0
 8007912:	d038      	beq.n	8007986 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800791c:	e033      	b.n	8007986 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007922:	f003 031f 	and.w	r3, r3, #31
 8007926:	2208      	movs	r2, #8
 8007928:	409a      	lsls	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	4013      	ands	r3, r2
 800792e:	2b00      	cmp	r3, #0
 8007930:	d02a      	beq.n	8007988 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	f003 0308 	and.w	r3, r3, #8
 8007938:	2b00      	cmp	r3, #0
 800793a:	d025      	beq.n	8007988 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 020e 	bic.w	r2, r2, #14
 800794a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007950:	f003 021f 	and.w	r2, r3, #31
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007958:	2101      	movs	r1, #1
 800795a:	fa01 f202 	lsl.w	r2, r1, r2
 800795e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800797a:	2b00      	cmp	r3, #0
 800797c:	d004      	beq.n	8007988 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007986:	bf00      	nop
 8007988:	bf00      	nop
}
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
 800799c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80079a6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d004      	beq.n	80079ba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80079b8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079be:	f003 021f 	and.w	r2, r3, #31
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c6:	2101      	movs	r1, #1
 80079c8:	fa01 f202 	lsl.w	r2, r1, r2
 80079cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	2b10      	cmp	r3, #16
 80079dc:	d108      	bne.n	80079f0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80079ee:	e007      	b.n	8007a00 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	60da      	str	r2, [r3, #12]
}
 8007a00:	bf00      	nop
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b087      	sub	sp, #28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	461a      	mov	r2, r3
 8007a1a:	4b16      	ldr	r3, [pc, #88]	; (8007a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d802      	bhi.n	8007a26 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007a20:	4b15      	ldr	r3, [pc, #84]	; (8007a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007a22:	617b      	str	r3, [r7, #20]
 8007a24:	e001      	b.n	8007a2a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8007a26:	4b15      	ldr	r3, [pc, #84]	; (8007a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007a28:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	3b08      	subs	r3, #8
 8007a36:	4a12      	ldr	r2, [pc, #72]	; (8007a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007a38:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3c:	091b      	lsrs	r3, r3, #4
 8007a3e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a44:	089b      	lsrs	r3, r3, #2
 8007a46:	009a      	lsls	r2, r3, #2
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a0b      	ldr	r2, [pc, #44]	; (8007a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007a56:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f003 031f 	and.w	r3, r3, #31
 8007a5e:	2201      	movs	r2, #1
 8007a60:	409a      	lsls	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007a66:	bf00      	nop
 8007a68:	371c      	adds	r7, #28
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	40020407 	.word	0x40020407
 8007a78:	40020800 	.word	0x40020800
 8007a7c:	40020820 	.word	0x40020820
 8007a80:	cccccccd 	.word	0xcccccccd
 8007a84:	40020880 	.word	0x40020880

08007a88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4b0b      	ldr	r3, [pc, #44]	; (8007ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007a9c:	4413      	add	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a08      	ldr	r2, [pc, #32]	; (8007acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007aaa:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	f003 031f 	and.w	r3, r3, #31
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	409a      	lsls	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007abc:	bf00      	nop
 8007abe:	3714      	adds	r7, #20
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr
 8007ac8:	1000823f 	.word	0x1000823f
 8007acc:	40020940 	.word	0x40020940

08007ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b087      	sub	sp, #28
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007ade:	e15a      	b.n	8007d96 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8007aec:	4013      	ands	r3, r2
 8007aee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 814c 	beq.w	8007d90 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f003 0303 	and.w	r3, r3, #3
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d005      	beq.n	8007b10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d130      	bne.n	8007b72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	005b      	lsls	r3, r3, #1
 8007b1a:	2203      	movs	r2, #3
 8007b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b20:	43db      	mvns	r3, r3
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	4013      	ands	r3, r2
 8007b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	005b      	lsls	r3, r3, #1
 8007b30:	fa02 f303 	lsl.w	r3, r2, r3
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b46:	2201      	movs	r2, #1
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4e:	43db      	mvns	r3, r3
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	4013      	ands	r3, r2
 8007b54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	091b      	lsrs	r3, r3, #4
 8007b5c:	f003 0201 	and.w	r2, r3, #1
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	fa02 f303 	lsl.w	r3, r2, r3
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f003 0303 	and.w	r3, r3, #3
 8007b7a:	2b03      	cmp	r3, #3
 8007b7c:	d017      	beq.n	8007bae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	005b      	lsls	r3, r3, #1
 8007b88:	2203      	movs	r2, #3
 8007b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8e:	43db      	mvns	r3, r3
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	4013      	ands	r3, r2
 8007b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	689a      	ldr	r2, [r3, #8]
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	005b      	lsls	r3, r3, #1
 8007b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f003 0303 	and.w	r3, r3, #3
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d123      	bne.n	8007c02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	08da      	lsrs	r2, r3, #3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	3208      	adds	r2, #8
 8007bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f003 0307 	and.w	r3, r3, #7
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	220f      	movs	r2, #15
 8007bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd6:	43db      	mvns	r3, r3
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	4013      	ands	r3, r2
 8007bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	691a      	ldr	r2, [r3, #16]
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f003 0307 	and.w	r3, r3, #7
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	fa02 f303 	lsl.w	r3, r2, r3
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	08da      	lsrs	r2, r3, #3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3208      	adds	r2, #8
 8007bfc:	6939      	ldr	r1, [r7, #16]
 8007bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	2203      	movs	r2, #3
 8007c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c12:	43db      	mvns	r3, r3
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	4013      	ands	r3, r2
 8007c18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f003 0203 	and.w	r2, r3, #3
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	005b      	lsls	r3, r3, #1
 8007c26:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 80a6 	beq.w	8007d90 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c44:	4b5b      	ldr	r3, [pc, #364]	; (8007db4 <HAL_GPIO_Init+0x2e4>)
 8007c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c48:	4a5a      	ldr	r2, [pc, #360]	; (8007db4 <HAL_GPIO_Init+0x2e4>)
 8007c4a:	f043 0301 	orr.w	r3, r3, #1
 8007c4e:	6613      	str	r3, [r2, #96]	; 0x60
 8007c50:	4b58      	ldr	r3, [pc, #352]	; (8007db4 <HAL_GPIO_Init+0x2e4>)
 8007c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	60bb      	str	r3, [r7, #8]
 8007c5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c5c:	4a56      	ldr	r2, [pc, #344]	; (8007db8 <HAL_GPIO_Init+0x2e8>)
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	089b      	lsrs	r3, r3, #2
 8007c62:	3302      	adds	r3, #2
 8007c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f003 0303 	and.w	r3, r3, #3
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	220f      	movs	r2, #15
 8007c74:	fa02 f303 	lsl.w	r3, r2, r3
 8007c78:	43db      	mvns	r3, r3
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007c86:	d01f      	beq.n	8007cc8 <HAL_GPIO_Init+0x1f8>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a4c      	ldr	r2, [pc, #304]	; (8007dbc <HAL_GPIO_Init+0x2ec>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d019      	beq.n	8007cc4 <HAL_GPIO_Init+0x1f4>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a4b      	ldr	r2, [pc, #300]	; (8007dc0 <HAL_GPIO_Init+0x2f0>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d013      	beq.n	8007cc0 <HAL_GPIO_Init+0x1f0>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a4a      	ldr	r2, [pc, #296]	; (8007dc4 <HAL_GPIO_Init+0x2f4>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d00d      	beq.n	8007cbc <HAL_GPIO_Init+0x1ec>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a49      	ldr	r2, [pc, #292]	; (8007dc8 <HAL_GPIO_Init+0x2f8>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d007      	beq.n	8007cb8 <HAL_GPIO_Init+0x1e8>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a48      	ldr	r2, [pc, #288]	; (8007dcc <HAL_GPIO_Init+0x2fc>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d101      	bne.n	8007cb4 <HAL_GPIO_Init+0x1e4>
 8007cb0:	2305      	movs	r3, #5
 8007cb2:	e00a      	b.n	8007cca <HAL_GPIO_Init+0x1fa>
 8007cb4:	2306      	movs	r3, #6
 8007cb6:	e008      	b.n	8007cca <HAL_GPIO_Init+0x1fa>
 8007cb8:	2304      	movs	r3, #4
 8007cba:	e006      	b.n	8007cca <HAL_GPIO_Init+0x1fa>
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e004      	b.n	8007cca <HAL_GPIO_Init+0x1fa>
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	e002      	b.n	8007cca <HAL_GPIO_Init+0x1fa>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e000      	b.n	8007cca <HAL_GPIO_Init+0x1fa>
 8007cc8:	2300      	movs	r3, #0
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	f002 0203 	and.w	r2, r2, #3
 8007cd0:	0092      	lsls	r2, r2, #2
 8007cd2:	4093      	lsls	r3, r2
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007cda:	4937      	ldr	r1, [pc, #220]	; (8007db8 <HAL_GPIO_Init+0x2e8>)
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	089b      	lsrs	r3, r3, #2
 8007ce0:	3302      	adds	r3, #2
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ce8:	4b39      	ldr	r3, [pc, #228]	; (8007dd0 <HAL_GPIO_Init+0x300>)
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	43db      	mvns	r3, r3
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d003      	beq.n	8007d0c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007d0c:	4a30      	ldr	r2, [pc, #192]	; (8007dd0 <HAL_GPIO_Init+0x300>)
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007d12:	4b2f      	ldr	r3, [pc, #188]	; (8007dd0 <HAL_GPIO_Init+0x300>)
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	43db      	mvns	r3, r3
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	4013      	ands	r3, r2
 8007d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d003      	beq.n	8007d36 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007d36:	4a26      	ldr	r2, [pc, #152]	; (8007dd0 <HAL_GPIO_Init+0x300>)
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007d3c:	4b24      	ldr	r3, [pc, #144]	; (8007dd0 <HAL_GPIO_Init+0x300>)
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	43db      	mvns	r3, r3
 8007d46:	693a      	ldr	r2, [r7, #16]
 8007d48:	4013      	ands	r3, r2
 8007d4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d003      	beq.n	8007d60 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007d60:	4a1b      	ldr	r2, [pc, #108]	; (8007dd0 <HAL_GPIO_Init+0x300>)
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007d66:	4b1a      	ldr	r3, [pc, #104]	; (8007dd0 <HAL_GPIO_Init+0x300>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	43db      	mvns	r3, r3
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	4013      	ands	r3, r2
 8007d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007d8a:	4a11      	ldr	r2, [pc, #68]	; (8007dd0 <HAL_GPIO_Init+0x300>)
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	3301      	adds	r3, #1
 8007d94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f47f ae9d 	bne.w	8007ae0 <HAL_GPIO_Init+0x10>
  }
}
 8007da6:	bf00      	nop
 8007da8:	bf00      	nop
 8007daa:	371c      	adds	r7, #28
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	40021000 	.word	0x40021000
 8007db8:	40010000 	.word	0x40010000
 8007dbc:	48000400 	.word	0x48000400
 8007dc0:	48000800 	.word	0x48000800
 8007dc4:	48000c00 	.word	0x48000c00
 8007dc8:	48001000 	.word	0x48001000
 8007dcc:	48001400 	.word	0x48001400
 8007dd0:	40010400 	.word	0x40010400

08007dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	807b      	strh	r3, [r7, #2]
 8007de0:	4613      	mov	r3, r2
 8007de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007de4:	787b      	ldrb	r3, [r7, #1]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d003      	beq.n	8007df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007dea:	887a      	ldrh	r2, [r7, #2]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007df0:	e002      	b.n	8007df8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007df2:	887a      	ldrh	r2, [r7, #2]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e081      	b.n	8007f1a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d106      	bne.n	8007e30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7fb fdb8 	bl	80039a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2224      	movs	r2, #36	; 0x24
 8007e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f022 0201 	bic.w	r2, r2, #1
 8007e46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007e54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	689a      	ldr	r2, [r3, #8]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d107      	bne.n	8007e7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	689a      	ldr	r2, [r3, #8]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e7a:	609a      	str	r2, [r3, #8]
 8007e7c:	e006      	b.n	8007e8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	689a      	ldr	r2, [r3, #8]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007e8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d104      	bne.n	8007e9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	6812      	ldr	r2, [r2, #0]
 8007ea8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68da      	ldr	r2, [r3, #12]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ec0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	691a      	ldr	r2, [r3, #16]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	699b      	ldr	r3, [r3, #24]
 8007ed2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	69d9      	ldr	r1, [r3, #28]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a1a      	ldr	r2, [r3, #32]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	430a      	orrs	r2, r1
 8007eea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f042 0201 	orr.w	r2, r2, #1
 8007efa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2220      	movs	r2, #32
 8007f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
	...

08007f24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b088      	sub	sp, #32
 8007f28:	af02      	add	r7, sp, #8
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	607a      	str	r2, [r7, #4]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	460b      	mov	r3, r1
 8007f32:	817b      	strh	r3, [r7, #10]
 8007f34:	4613      	mov	r3, r2
 8007f36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b20      	cmp	r3, #32
 8007f42:	f040 80da 	bne.w	80080fa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d101      	bne.n	8007f54 <HAL_I2C_Master_Transmit+0x30>
 8007f50:	2302      	movs	r3, #2
 8007f52:	e0d3      	b.n	80080fc <HAL_I2C_Master_Transmit+0x1d8>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007f5c:	f7ff f978 	bl	8007250 <HAL_GetTick>
 8007f60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	2319      	movs	r3, #25
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 fcbc 	bl	80088ec <I2C_WaitOnFlagUntilTimeout>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e0be      	b.n	80080fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2221      	movs	r2, #33	; 0x21
 8007f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2210      	movs	r2, #16
 8007f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	893a      	ldrh	r2, [r7, #8]
 8007f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	2bff      	cmp	r3, #255	; 0xff
 8007fae:	d90e      	bls.n	8007fce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	22ff      	movs	r2, #255	; 0xff
 8007fb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	8979      	ldrh	r1, [r7, #10]
 8007fbe:	4b51      	ldr	r3, [pc, #324]	; (8008104 <HAL_I2C_Master_Transmit+0x1e0>)
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f000 feb2 	bl	8008d30 <I2C_TransferConfig>
 8007fcc:	e06c      	b.n	80080a8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	8979      	ldrh	r1, [r7, #10]
 8007fe0:	4b48      	ldr	r3, [pc, #288]	; (8008104 <HAL_I2C_Master_Transmit+0x1e0>)
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f000 fea1 	bl	8008d30 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007fee:	e05b      	b.n	80080a8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	6a39      	ldr	r1, [r7, #32]
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 fcb9 	bl	800896c <I2C_WaitOnTXISFlagUntilTimeout>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d001      	beq.n	8008004 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e07b      	b.n	80080fc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	781a      	ldrb	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008014:	1c5a      	adds	r2, r3, #1
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800801e:	b29b      	uxth	r3, r3
 8008020:	3b01      	subs	r3, #1
 8008022:	b29a      	uxth	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800802c:	3b01      	subs	r3, #1
 800802e:	b29a      	uxth	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008038:	b29b      	uxth	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d034      	beq.n	80080a8 <HAL_I2C_Master_Transmit+0x184>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008042:	2b00      	cmp	r3, #0
 8008044:	d130      	bne.n	80080a8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	2200      	movs	r2, #0
 800804e:	2180      	movs	r1, #128	; 0x80
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f000 fc4b 	bl	80088ec <I2C_WaitOnFlagUntilTimeout>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e04d      	b.n	80080fc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008064:	b29b      	uxth	r3, r3
 8008066:	2bff      	cmp	r3, #255	; 0xff
 8008068:	d90e      	bls.n	8008088 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	22ff      	movs	r2, #255	; 0xff
 800806e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008074:	b2da      	uxtb	r2, r3
 8008076:	8979      	ldrh	r1, [r7, #10]
 8008078:	2300      	movs	r3, #0
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 fe55 	bl	8008d30 <I2C_TransferConfig>
 8008086:	e00f      	b.n	80080a8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800808c:	b29a      	uxth	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008096:	b2da      	uxtb	r2, r3
 8008098:	8979      	ldrh	r1, [r7, #10]
 800809a:	2300      	movs	r3, #0
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f000 fe44 	bl	8008d30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d19e      	bne.n	8007ff0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080b2:	697a      	ldr	r2, [r7, #20]
 80080b4:	6a39      	ldr	r1, [r7, #32]
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f000 fc98 	bl	80089ec <I2C_WaitOnSTOPFlagUntilTimeout>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e01a      	b.n	80080fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2220      	movs	r2, #32
 80080cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6859      	ldr	r1, [r3, #4]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	4b0b      	ldr	r3, [pc, #44]	; (8008108 <HAL_I2C_Master_Transmit+0x1e4>)
 80080da:	400b      	ands	r3, r1
 80080dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2220      	movs	r2, #32
 80080e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	e000      	b.n	80080fc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80080fa:	2302      	movs	r3, #2
  }
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3718      	adds	r7, #24
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	80002000 	.word	0x80002000
 8008108:	fe00e800 	.word	0xfe00e800

0800810c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b088      	sub	sp, #32
 8008110:	af02      	add	r7, sp, #8
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	607a      	str	r2, [r7, #4]
 8008116:	461a      	mov	r2, r3
 8008118:	460b      	mov	r3, r1
 800811a:	817b      	strh	r3, [r7, #10]
 800811c:	4613      	mov	r3, r2
 800811e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b20      	cmp	r3, #32
 800812a:	f040 80db 	bne.w	80082e4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008134:	2b01      	cmp	r3, #1
 8008136:	d101      	bne.n	800813c <HAL_I2C_Master_Receive+0x30>
 8008138:	2302      	movs	r3, #2
 800813a:	e0d4      	b.n	80082e6 <HAL_I2C_Master_Receive+0x1da>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008144:	f7ff f884 	bl	8007250 <HAL_GetTick>
 8008148:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	2319      	movs	r3, #25
 8008150:	2201      	movs	r2, #1
 8008152:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f000 fbc8 	bl	80088ec <I2C_WaitOnFlagUntilTimeout>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	e0bf      	b.n	80082e6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2222      	movs	r2, #34	; 0x22
 800816a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2210      	movs	r2, #16
 8008172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	893a      	ldrh	r2, [r7, #8]
 8008186:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008192:	b29b      	uxth	r3, r3
 8008194:	2bff      	cmp	r3, #255	; 0xff
 8008196:	d90e      	bls.n	80081b6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	22ff      	movs	r2, #255	; 0xff
 800819c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	8979      	ldrh	r1, [r7, #10]
 80081a6:	4b52      	ldr	r3, [pc, #328]	; (80082f0 <HAL_I2C_Master_Receive+0x1e4>)
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 fdbe 	bl	8008d30 <I2C_TransferConfig>
 80081b4:	e06d      	b.n	8008292 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ba:	b29a      	uxth	r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	8979      	ldrh	r1, [r7, #10]
 80081c8:	4b49      	ldr	r3, [pc, #292]	; (80082f0 <HAL_I2C_Master_Receive+0x1e4>)
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f000 fdad 	bl	8008d30 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80081d6:	e05c      	b.n	8008292 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081d8:	697a      	ldr	r2, [r7, #20]
 80081da:	6a39      	ldr	r1, [r7, #32]
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f000 fc41 	bl	8008a64 <I2C_WaitOnRXNEFlagUntilTimeout>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d001      	beq.n	80081ec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e07c      	b.n	80082e6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f6:	b2d2      	uxtb	r2, r2
 80081f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fe:	1c5a      	adds	r2, r3, #1
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008208:	3b01      	subs	r3, #1
 800820a:	b29a      	uxth	r2, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008214:	b29b      	uxth	r3, r3
 8008216:	3b01      	subs	r3, #1
 8008218:	b29a      	uxth	r2, r3
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008222:	b29b      	uxth	r3, r3
 8008224:	2b00      	cmp	r3, #0
 8008226:	d034      	beq.n	8008292 <HAL_I2C_Master_Receive+0x186>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800822c:	2b00      	cmp	r3, #0
 800822e:	d130      	bne.n	8008292 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	6a3b      	ldr	r3, [r7, #32]
 8008236:	2200      	movs	r2, #0
 8008238:	2180      	movs	r1, #128	; 0x80
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f000 fb56 	bl	80088ec <I2C_WaitOnFlagUntilTimeout>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d001      	beq.n	800824a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e04d      	b.n	80082e6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800824e:	b29b      	uxth	r3, r3
 8008250:	2bff      	cmp	r3, #255	; 0xff
 8008252:	d90e      	bls.n	8008272 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	22ff      	movs	r2, #255	; 0xff
 8008258:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800825e:	b2da      	uxtb	r2, r3
 8008260:	8979      	ldrh	r1, [r7, #10]
 8008262:	2300      	movs	r3, #0
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f000 fd60 	bl	8008d30 <I2C_TransferConfig>
 8008270:	e00f      	b.n	8008292 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008276:	b29a      	uxth	r2, r3
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008280:	b2da      	uxtb	r2, r3
 8008282:	8979      	ldrh	r1, [r7, #10]
 8008284:	2300      	movs	r3, #0
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f000 fd4f 	bl	8008d30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008296:	b29b      	uxth	r3, r3
 8008298:	2b00      	cmp	r3, #0
 800829a:	d19d      	bne.n	80081d8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800829c:	697a      	ldr	r2, [r7, #20]
 800829e:	6a39      	ldr	r1, [r7, #32]
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 fba3 	bl	80089ec <I2C_WaitOnSTOPFlagUntilTimeout>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d001      	beq.n	80082b0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e01a      	b.n	80082e6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2220      	movs	r2, #32
 80082b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6859      	ldr	r1, [r3, #4]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	4b0c      	ldr	r3, [pc, #48]	; (80082f4 <HAL_I2C_Master_Receive+0x1e8>)
 80082c4:	400b      	ands	r3, r1
 80082c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2220      	movs	r2, #32
 80082cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	e000      	b.n	80082e6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80082e4:	2302      	movs	r3, #2
  }
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3718      	adds	r7, #24
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	80002400 	.word	0x80002400
 80082f4:	fe00e800 	.word	0xfe00e800

080082f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af02      	add	r7, sp, #8
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	4608      	mov	r0, r1
 8008302:	4611      	mov	r1, r2
 8008304:	461a      	mov	r2, r3
 8008306:	4603      	mov	r3, r0
 8008308:	817b      	strh	r3, [r7, #10]
 800830a:	460b      	mov	r3, r1
 800830c:	813b      	strh	r3, [r7, #8]
 800830e:	4613      	mov	r3, r2
 8008310:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b20      	cmp	r3, #32
 800831c:	f040 80f9 	bne.w	8008512 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008320:	6a3b      	ldr	r3, [r7, #32]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d002      	beq.n	800832c <HAL_I2C_Mem_Write+0x34>
 8008326:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008328:	2b00      	cmp	r3, #0
 800832a:	d105      	bne.n	8008338 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008332:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e0ed      	b.n	8008514 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800833e:	2b01      	cmp	r3, #1
 8008340:	d101      	bne.n	8008346 <HAL_I2C_Mem_Write+0x4e>
 8008342:	2302      	movs	r3, #2
 8008344:	e0e6      	b.n	8008514 <HAL_I2C_Mem_Write+0x21c>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800834e:	f7fe ff7f 	bl	8007250 <HAL_GetTick>
 8008352:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	2319      	movs	r3, #25
 800835a:	2201      	movs	r2, #1
 800835c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f000 fac3 	bl	80088ec <I2C_WaitOnFlagUntilTimeout>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e0d1      	b.n	8008514 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2221      	movs	r2, #33	; 0x21
 8008374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2240      	movs	r2, #64	; 0x40
 800837c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6a3a      	ldr	r2, [r7, #32]
 800838a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008390:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008398:	88f8      	ldrh	r0, [r7, #6]
 800839a:	893a      	ldrh	r2, [r7, #8]
 800839c:	8979      	ldrh	r1, [r7, #10]
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	9301      	str	r3, [sp, #4]
 80083a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a4:	9300      	str	r3, [sp, #0]
 80083a6:	4603      	mov	r3, r0
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 f9d3 	bl	8008754 <I2C_RequestMemoryWrite>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d005      	beq.n	80083c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e0a9      	b.n	8008514 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	2bff      	cmp	r3, #255	; 0xff
 80083c8:	d90e      	bls.n	80083e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	22ff      	movs	r2, #255	; 0xff
 80083ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	8979      	ldrh	r1, [r7, #10]
 80083d8:	2300      	movs	r3, #0
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f000 fca5 	bl	8008d30 <I2C_TransferConfig>
 80083e6:	e00f      	b.n	8008408 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083f6:	b2da      	uxtb	r2, r3
 80083f8:	8979      	ldrh	r1, [r7, #10]
 80083fa:	2300      	movs	r3, #0
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f000 fc94 	bl	8008d30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f000 faad 	bl	800896c <I2C_WaitOnTXISFlagUntilTimeout>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d001      	beq.n	800841c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e07b      	b.n	8008514 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008420:	781a      	ldrb	r2, [r3, #0]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842c:	1c5a      	adds	r2, r3, #1
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008436:	b29b      	uxth	r3, r3
 8008438:	3b01      	subs	r3, #1
 800843a:	b29a      	uxth	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008444:	3b01      	subs	r3, #1
 8008446:	b29a      	uxth	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008450:	b29b      	uxth	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d034      	beq.n	80084c0 <HAL_I2C_Mem_Write+0x1c8>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800845a:	2b00      	cmp	r3, #0
 800845c:	d130      	bne.n	80084c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008464:	2200      	movs	r2, #0
 8008466:	2180      	movs	r1, #128	; 0x80
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f000 fa3f 	bl	80088ec <I2C_WaitOnFlagUntilTimeout>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d001      	beq.n	8008478 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e04d      	b.n	8008514 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800847c:	b29b      	uxth	r3, r3
 800847e:	2bff      	cmp	r3, #255	; 0xff
 8008480:	d90e      	bls.n	80084a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	22ff      	movs	r2, #255	; 0xff
 8008486:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800848c:	b2da      	uxtb	r2, r3
 800848e:	8979      	ldrh	r1, [r7, #10]
 8008490:	2300      	movs	r3, #0
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f000 fc49 	bl	8008d30 <I2C_TransferConfig>
 800849e:	e00f      	b.n	80084c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	8979      	ldrh	r1, [r7, #10]
 80084b2:	2300      	movs	r3, #0
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f000 fc38 	bl	8008d30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d19e      	bne.n	8008408 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 fa8c 	bl	80089ec <I2C_WaitOnSTOPFlagUntilTimeout>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e01a      	b.n	8008514 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2220      	movs	r2, #32
 80084e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	6859      	ldr	r1, [r3, #4]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	4b0a      	ldr	r3, [pc, #40]	; (800851c <HAL_I2C_Mem_Write+0x224>)
 80084f2:	400b      	ands	r3, r1
 80084f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2220      	movs	r2, #32
 80084fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	e000      	b.n	8008514 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008512:	2302      	movs	r3, #2
  }
}
 8008514:	4618      	mov	r0, r3
 8008516:	3718      	adds	r7, #24
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	fe00e800 	.word	0xfe00e800

08008520 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b088      	sub	sp, #32
 8008524:	af02      	add	r7, sp, #8
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	4608      	mov	r0, r1
 800852a:	4611      	mov	r1, r2
 800852c:	461a      	mov	r2, r3
 800852e:	4603      	mov	r3, r0
 8008530:	817b      	strh	r3, [r7, #10]
 8008532:	460b      	mov	r3, r1
 8008534:	813b      	strh	r3, [r7, #8]
 8008536:	4613      	mov	r3, r2
 8008538:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008540:	b2db      	uxtb	r3, r3
 8008542:	2b20      	cmp	r3, #32
 8008544:	f040 80fd 	bne.w	8008742 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d002      	beq.n	8008554 <HAL_I2C_Mem_Read+0x34>
 800854e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008550:	2b00      	cmp	r3, #0
 8008552:	d105      	bne.n	8008560 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800855a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e0f1      	b.n	8008744 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008566:	2b01      	cmp	r3, #1
 8008568:	d101      	bne.n	800856e <HAL_I2C_Mem_Read+0x4e>
 800856a:	2302      	movs	r3, #2
 800856c:	e0ea      	b.n	8008744 <HAL_I2C_Mem_Read+0x224>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008576:	f7fe fe6b 	bl	8007250 <HAL_GetTick>
 800857a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	2319      	movs	r3, #25
 8008582:	2201      	movs	r2, #1
 8008584:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f000 f9af 	bl	80088ec <I2C_WaitOnFlagUntilTimeout>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	e0d5      	b.n	8008744 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2222      	movs	r2, #34	; 0x22
 800859c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2240      	movs	r2, #64	; 0x40
 80085a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6a3a      	ldr	r2, [r7, #32]
 80085b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80085b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80085c0:	88f8      	ldrh	r0, [r7, #6]
 80085c2:	893a      	ldrh	r2, [r7, #8]
 80085c4:	8979      	ldrh	r1, [r7, #10]
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	9301      	str	r3, [sp, #4]
 80085ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	4603      	mov	r3, r0
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f000 f913 	bl	80087fc <I2C_RequestMemoryRead>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d005      	beq.n	80085e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	e0ad      	b.n	8008744 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	2bff      	cmp	r3, #255	; 0xff
 80085f0:	d90e      	bls.n	8008610 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	22ff      	movs	r2, #255	; 0xff
 80085f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	8979      	ldrh	r1, [r7, #10]
 8008600:	4b52      	ldr	r3, [pc, #328]	; (800874c <HAL_I2C_Mem_Read+0x22c>)
 8008602:	9300      	str	r3, [sp, #0]
 8008604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 fb91 	bl	8008d30 <I2C_TransferConfig>
 800860e:	e00f      	b.n	8008630 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008614:	b29a      	uxth	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800861e:	b2da      	uxtb	r2, r3
 8008620:	8979      	ldrh	r1, [r7, #10]
 8008622:	4b4a      	ldr	r3, [pc, #296]	; (800874c <HAL_I2C_Mem_Read+0x22c>)
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f000 fb80 	bl	8008d30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008636:	2200      	movs	r2, #0
 8008638:	2104      	movs	r1, #4
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f000 f956 	bl	80088ec <I2C_WaitOnFlagUntilTimeout>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e07c      	b.n	8008744 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	b2d2      	uxtb	r2, r2
 8008656:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865c:	1c5a      	adds	r2, r3, #1
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008666:	3b01      	subs	r3, #1
 8008668:	b29a      	uxth	r2, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008672:	b29b      	uxth	r3, r3
 8008674:	3b01      	subs	r3, #1
 8008676:	b29a      	uxth	r2, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008680:	b29b      	uxth	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d034      	beq.n	80086f0 <HAL_I2C_Mem_Read+0x1d0>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800868a:	2b00      	cmp	r3, #0
 800868c:	d130      	bne.n	80086f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008694:	2200      	movs	r2, #0
 8008696:	2180      	movs	r1, #128	; 0x80
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f000 f927 	bl	80088ec <I2C_WaitOnFlagUntilTimeout>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e04d      	b.n	8008744 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	2bff      	cmp	r3, #255	; 0xff
 80086b0:	d90e      	bls.n	80086d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	22ff      	movs	r2, #255	; 0xff
 80086b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	8979      	ldrh	r1, [r7, #10]
 80086c0:	2300      	movs	r3, #0
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f000 fb31 	bl	8008d30 <I2C_TransferConfig>
 80086ce:	e00f      	b.n	80086f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	8979      	ldrh	r1, [r7, #10]
 80086e2:	2300      	movs	r3, #0
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f000 fb20 	bl	8008d30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d19a      	bne.n	8008630 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f000 f974 	bl	80089ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e01a      	b.n	8008744 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2220      	movs	r2, #32
 8008714:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	6859      	ldr	r1, [r3, #4]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	4b0b      	ldr	r3, [pc, #44]	; (8008750 <HAL_I2C_Mem_Read+0x230>)
 8008722:	400b      	ands	r3, r1
 8008724:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2220      	movs	r2, #32
 800872a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	e000      	b.n	8008744 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008742:	2302      	movs	r3, #2
  }
}
 8008744:	4618      	mov	r0, r3
 8008746:	3718      	adds	r7, #24
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	80002400 	.word	0x80002400
 8008750:	fe00e800 	.word	0xfe00e800

08008754 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af02      	add	r7, sp, #8
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	4608      	mov	r0, r1
 800875e:	4611      	mov	r1, r2
 8008760:	461a      	mov	r2, r3
 8008762:	4603      	mov	r3, r0
 8008764:	817b      	strh	r3, [r7, #10]
 8008766:	460b      	mov	r3, r1
 8008768:	813b      	strh	r3, [r7, #8]
 800876a:	4613      	mov	r3, r2
 800876c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800876e:	88fb      	ldrh	r3, [r7, #6]
 8008770:	b2da      	uxtb	r2, r3
 8008772:	8979      	ldrh	r1, [r7, #10]
 8008774:	4b20      	ldr	r3, [pc, #128]	; (80087f8 <I2C_RequestMemoryWrite+0xa4>)
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f000 fad7 	bl	8008d30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008782:	69fa      	ldr	r2, [r7, #28]
 8008784:	69b9      	ldr	r1, [r7, #24]
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 f8f0 	bl	800896c <I2C_WaitOnTXISFlagUntilTimeout>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e02c      	b.n	80087f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008796:	88fb      	ldrh	r3, [r7, #6]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d105      	bne.n	80087a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800879c:	893b      	ldrh	r3, [r7, #8]
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	629a      	str	r2, [r3, #40]	; 0x28
 80087a6:	e015      	b.n	80087d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80087a8:	893b      	ldrh	r3, [r7, #8]
 80087aa:	0a1b      	lsrs	r3, r3, #8
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087b6:	69fa      	ldr	r2, [r7, #28]
 80087b8:	69b9      	ldr	r1, [r7, #24]
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f000 f8d6 	bl	800896c <I2C_WaitOnTXISFlagUntilTimeout>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e012      	b.n	80087f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80087ca:	893b      	ldrh	r3, [r7, #8]
 80087cc:	b2da      	uxtb	r2, r3
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	2200      	movs	r2, #0
 80087dc:	2180      	movs	r1, #128	; 0x80
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f000 f884 	bl	80088ec <I2C_WaitOnFlagUntilTimeout>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e000      	b.n	80087f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	80002000 	.word	0x80002000

080087fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af02      	add	r7, sp, #8
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	4608      	mov	r0, r1
 8008806:	4611      	mov	r1, r2
 8008808:	461a      	mov	r2, r3
 800880a:	4603      	mov	r3, r0
 800880c:	817b      	strh	r3, [r7, #10]
 800880e:	460b      	mov	r3, r1
 8008810:	813b      	strh	r3, [r7, #8]
 8008812:	4613      	mov	r3, r2
 8008814:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008816:	88fb      	ldrh	r3, [r7, #6]
 8008818:	b2da      	uxtb	r2, r3
 800881a:	8979      	ldrh	r1, [r7, #10]
 800881c:	4b20      	ldr	r3, [pc, #128]	; (80088a0 <I2C_RequestMemoryRead+0xa4>)
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	2300      	movs	r3, #0
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f000 fa84 	bl	8008d30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008828:	69fa      	ldr	r2, [r7, #28]
 800882a:	69b9      	ldr	r1, [r7, #24]
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f000 f89d 	bl	800896c <I2C_WaitOnTXISFlagUntilTimeout>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d001      	beq.n	800883c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e02c      	b.n	8008896 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800883c:	88fb      	ldrh	r3, [r7, #6]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d105      	bne.n	800884e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008842:	893b      	ldrh	r3, [r7, #8]
 8008844:	b2da      	uxtb	r2, r3
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	629a      	str	r2, [r3, #40]	; 0x28
 800884c:	e015      	b.n	800887a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800884e:	893b      	ldrh	r3, [r7, #8]
 8008850:	0a1b      	lsrs	r3, r3, #8
 8008852:	b29b      	uxth	r3, r3
 8008854:	b2da      	uxtb	r2, r3
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800885c:	69fa      	ldr	r2, [r7, #28]
 800885e:	69b9      	ldr	r1, [r7, #24]
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f000 f883 	bl	800896c <I2C_WaitOnTXISFlagUntilTimeout>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d001      	beq.n	8008870 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e012      	b.n	8008896 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008870:	893b      	ldrh	r3, [r7, #8]
 8008872:	b2da      	uxtb	r2, r3
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	9300      	str	r3, [sp, #0]
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	2200      	movs	r2, #0
 8008882:	2140      	movs	r1, #64	; 0x40
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 f831 	bl	80088ec <I2C_WaitOnFlagUntilTimeout>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e000      	b.n	8008896 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	80002000 	.word	0x80002000

080088a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	f003 0302 	and.w	r3, r3, #2
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d103      	bne.n	80088c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2200      	movs	r2, #0
 80088c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	f003 0301 	and.w	r3, r3, #1
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d007      	beq.n	80088e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	699a      	ldr	r2, [r3, #24]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f042 0201 	orr.w	r2, r2, #1
 80088de:	619a      	str	r2, [r3, #24]
  }
}
 80088e0:	bf00      	nop
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	603b      	str	r3, [r7, #0]
 80088f8:	4613      	mov	r3, r2
 80088fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088fc:	e022      	b.n	8008944 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008904:	d01e      	beq.n	8008944 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008906:	f7fe fca3 	bl	8007250 <HAL_GetTick>
 800890a:	4602      	mov	r2, r0
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	1ad3      	subs	r3, r2, r3
 8008910:	683a      	ldr	r2, [r7, #0]
 8008912:	429a      	cmp	r2, r3
 8008914:	d302      	bcc.n	800891c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d113      	bne.n	8008944 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008920:	f043 0220 	orr.w	r2, r3, #32
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2220      	movs	r2, #32
 800892c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e00f      	b.n	8008964 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	699a      	ldr	r2, [r3, #24]
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	4013      	ands	r3, r2
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	429a      	cmp	r2, r3
 8008952:	bf0c      	ite	eq
 8008954:	2301      	moveq	r3, #1
 8008956:	2300      	movne	r3, #0
 8008958:	b2db      	uxtb	r3, r3
 800895a:	461a      	mov	r2, r3
 800895c:	79fb      	ldrb	r3, [r7, #7]
 800895e:	429a      	cmp	r2, r3
 8008960:	d0cd      	beq.n	80088fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008978:	e02c      	b.n	80089d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	68b9      	ldr	r1, [r7, #8]
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f000 f8ea 	bl	8008b58 <I2C_IsErrorOccurred>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d001      	beq.n	800898e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e02a      	b.n	80089e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008994:	d01e      	beq.n	80089d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008996:	f7fe fc5b 	bl	8007250 <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d302      	bcc.n	80089ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d113      	bne.n	80089d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b0:	f043 0220 	orr.w	r2, r3, #32
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2220      	movs	r2, #32
 80089bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	e007      	b.n	80089e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	f003 0302 	and.w	r3, r3, #2
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d1cb      	bne.n	800897a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089f8:	e028      	b.n	8008a4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	68b9      	ldr	r1, [r7, #8]
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f000 f8aa 	bl	8008b58 <I2C_IsErrorOccurred>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d001      	beq.n	8008a0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e026      	b.n	8008a5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a0e:	f7fe fc1f 	bl	8007250 <HAL_GetTick>
 8008a12:	4602      	mov	r2, r0
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d302      	bcc.n	8008a24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d113      	bne.n	8008a4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a28:	f043 0220 	orr.w	r2, r3, #32
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2220      	movs	r2, #32
 8008a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e007      	b.n	8008a5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	f003 0320 	and.w	r3, r3, #32
 8008a56:	2b20      	cmp	r3, #32
 8008a58:	d1cf      	bne.n	80089fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a70:	e064      	b.n	8008b3c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	68b9      	ldr	r1, [r7, #8]
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f000 f86e 	bl	8008b58 <I2C_IsErrorOccurred>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d001      	beq.n	8008a86 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e062      	b.n	8008b4c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	f003 0320 	and.w	r3, r3, #32
 8008a90:	2b20      	cmp	r3, #32
 8008a92:	d138      	bne.n	8008b06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	f003 0304 	and.w	r3, r3, #4
 8008a9e:	2b04      	cmp	r3, #4
 8008aa0:	d105      	bne.n	8008aae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d001      	beq.n	8008aae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	e04e      	b.n	8008b4c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	f003 0310 	and.w	r3, r3, #16
 8008ab8:	2b10      	cmp	r3, #16
 8008aba:	d107      	bne.n	8008acc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2210      	movs	r2, #16
 8008ac2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2204      	movs	r2, #4
 8008ac8:	645a      	str	r2, [r3, #68]	; 0x44
 8008aca:	e002      	b.n	8008ad2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2220      	movs	r2, #32
 8008ad8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	6859      	ldr	r1, [r3, #4]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	4b1b      	ldr	r3, [pc, #108]	; (8008b54 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8008ae6:	400b      	ands	r3, r1
 8008ae8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e022      	b.n	8008b4c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b06:	f7fe fba3 	bl	8007250 <HAL_GetTick>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d302      	bcc.n	8008b1c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d10f      	bne.n	8008b3c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b20:	f043 0220 	orr.w	r2, r3, #32
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2220      	movs	r2, #32
 8008b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e007      	b.n	8008b4c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	699b      	ldr	r3, [r3, #24]
 8008b42:	f003 0304 	and.w	r3, r3, #4
 8008b46:	2b04      	cmp	r3, #4
 8008b48:	d193      	bne.n	8008a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	fe00e800 	.word	0xfe00e800

08008b58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b08a      	sub	sp, #40	; 0x28
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	f003 0310 	and.w	r3, r3, #16
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d075      	beq.n	8008c70 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2210      	movs	r2, #16
 8008b8a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008b8c:	e056      	b.n	8008c3c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b94:	d052      	beq.n	8008c3c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008b96:	f7fe fb5b 	bl	8007250 <HAL_GetTick>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d302      	bcc.n	8008bac <I2C_IsErrorOccurred+0x54>
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d147      	bne.n	8008c3c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bb6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008bbe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bce:	d12e      	bne.n	8008c2e <I2C_IsErrorOccurred+0xd6>
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bd6:	d02a      	beq.n	8008c2e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008bd8:	7cfb      	ldrb	r3, [r7, #19]
 8008bda:	2b20      	cmp	r3, #32
 8008bdc:	d027      	beq.n	8008c2e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	685a      	ldr	r2, [r3, #4]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bec:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008bee:	f7fe fb2f 	bl	8007250 <HAL_GetTick>
 8008bf2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008bf4:	e01b      	b.n	8008c2e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008bf6:	f7fe fb2b 	bl	8007250 <HAL_GetTick>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	2b19      	cmp	r3, #25
 8008c02:	d914      	bls.n	8008c2e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c08:	f043 0220 	orr.w	r2, r3, #32
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2220      	movs	r2, #32
 8008c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	f003 0320 	and.w	r3, r3, #32
 8008c38:	2b20      	cmp	r3, #32
 8008c3a:	d1dc      	bne.n	8008bf6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	f003 0320 	and.w	r3, r3, #32
 8008c46:	2b20      	cmp	r3, #32
 8008c48:	d003      	beq.n	8008c52 <I2C_IsErrorOccurred+0xfa>
 8008c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d09d      	beq.n	8008b8e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008c52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d103      	bne.n	8008c62 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2220      	movs	r2, #32
 8008c60:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008c62:	6a3b      	ldr	r3, [r7, #32]
 8008c64:	f043 0304 	orr.w	r3, r3, #4
 8008c68:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00b      	beq.n	8008c9a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008c82:	6a3b      	ldr	r3, [r7, #32]
 8008c84:	f043 0301 	orr.w	r3, r3, #1
 8008c88:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00b      	beq.n	8008cbc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008ca4:	6a3b      	ldr	r3, [r7, #32]
 8008ca6:	f043 0308 	orr.w	r3, r3, #8
 8008caa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008cb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00b      	beq.n	8008cde <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	f043 0302 	orr.w	r3, r3, #2
 8008ccc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008cde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d01c      	beq.n	8008d20 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f7ff fddc 	bl	80088a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6859      	ldr	r1, [r3, #4]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	4b0d      	ldr	r3, [pc, #52]	; (8008d2c <I2C_IsErrorOccurred+0x1d4>)
 8008cf8:	400b      	ands	r3, r1
 8008cfa:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d00:	6a3b      	ldr	r3, [r7, #32]
 8008d02:	431a      	orrs	r2, r3
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2220      	movs	r2, #32
 8008d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3728      	adds	r7, #40	; 0x28
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	fe00e800 	.word	0xfe00e800

08008d30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b087      	sub	sp, #28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	607b      	str	r3, [r7, #4]
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	817b      	strh	r3, [r7, #10]
 8008d3e:	4613      	mov	r3, r2
 8008d40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d42:	897b      	ldrh	r3, [r7, #10]
 8008d44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008d48:	7a7b      	ldrb	r3, [r7, #9]
 8008d4a:	041b      	lsls	r3, r3, #16
 8008d4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d50:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d5e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	685a      	ldr	r2, [r3, #4]
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	0d5b      	lsrs	r3, r3, #21
 8008d6a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008d6e:	4b08      	ldr	r3, [pc, #32]	; (8008d90 <I2C_TransferConfig+0x60>)
 8008d70:	430b      	orrs	r3, r1
 8008d72:	43db      	mvns	r3, r3
 8008d74:	ea02 0103 	and.w	r1, r2, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	697a      	ldr	r2, [r7, #20]
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008d82:	bf00      	nop
 8008d84:	371c      	adds	r7, #28
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	03ff63ff 	.word	0x03ff63ff

08008d94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	2b20      	cmp	r3, #32
 8008da8:	d138      	bne.n	8008e1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d101      	bne.n	8008db8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008db4:	2302      	movs	r3, #2
 8008db6:	e032      	b.n	8008e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2224      	movs	r2, #36	; 0x24
 8008dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f022 0201 	bic.w	r2, r2, #1
 8008dd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008de6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6819      	ldr	r1, [r3, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	430a      	orrs	r2, r1
 8008df6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f042 0201 	orr.w	r2, r2, #1
 8008e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2220      	movs	r2, #32
 8008e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	e000      	b.n	8008e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008e1c:	2302      	movs	r3, #2
  }
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008e2a:	b480      	push	{r7}
 8008e2c:	b085      	sub	sp, #20
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	2b20      	cmp	r3, #32
 8008e3e:	d139      	bne.n	8008eb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d101      	bne.n	8008e4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008e4a:	2302      	movs	r3, #2
 8008e4c:	e033      	b.n	8008eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2224      	movs	r2, #36	; 0x24
 8008e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f022 0201 	bic.w	r2, r2, #1
 8008e6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008e7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	021b      	lsls	r3, r3, #8
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f042 0201 	orr.w	r2, r2, #1
 8008e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2220      	movs	r2, #32
 8008ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	e000      	b.n	8008eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008eb4:	2302      	movs	r3, #2
  }
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3714      	adds	r7, #20
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr
	...

08008ec4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d141      	bne.n	8008f56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008ed2:	4b4b      	ldr	r3, [pc, #300]	; (8009000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ede:	d131      	bne.n	8008f44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ee0:	4b47      	ldr	r3, [pc, #284]	; (8009000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ee6:	4a46      	ldr	r2, [pc, #280]	; (8009000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008eec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008ef0:	4b43      	ldr	r3, [pc, #268]	; (8009000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008ef8:	4a41      	ldr	r2, [pc, #260]	; (8009000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008efe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008f00:	4b40      	ldr	r3, [pc, #256]	; (8009004 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2232      	movs	r2, #50	; 0x32
 8008f06:	fb02 f303 	mul.w	r3, r2, r3
 8008f0a:	4a3f      	ldr	r2, [pc, #252]	; (8009008 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f10:	0c9b      	lsrs	r3, r3, #18
 8008f12:	3301      	adds	r3, #1
 8008f14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f16:	e002      	b.n	8008f1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f1e:	4b38      	ldr	r3, [pc, #224]	; (8009000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f20:	695b      	ldr	r3, [r3, #20]
 8008f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f2a:	d102      	bne.n	8008f32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1f2      	bne.n	8008f18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008f32:	4b33      	ldr	r3, [pc, #204]	; (8009000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f3e:	d158      	bne.n	8008ff2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008f40:	2303      	movs	r3, #3
 8008f42:	e057      	b.n	8008ff4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f44:	4b2e      	ldr	r3, [pc, #184]	; (8009000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f4a:	4a2d      	ldr	r2, [pc, #180]	; (8009000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008f54:	e04d      	b.n	8008ff2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f5c:	d141      	bne.n	8008fe2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008f5e:	4b28      	ldr	r3, [pc, #160]	; (8009000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f6a:	d131      	bne.n	8008fd0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f6c:	4b24      	ldr	r3, [pc, #144]	; (8009000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f72:	4a23      	ldr	r2, [pc, #140]	; (8009000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008f7c:	4b20      	ldr	r3, [pc, #128]	; (8009000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008f84:	4a1e      	ldr	r2, [pc, #120]	; (8009000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008f8c:	4b1d      	ldr	r3, [pc, #116]	; (8009004 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2232      	movs	r2, #50	; 0x32
 8008f92:	fb02 f303 	mul.w	r3, r2, r3
 8008f96:	4a1c      	ldr	r2, [pc, #112]	; (8009008 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008f98:	fba2 2303 	umull	r2, r3, r2, r3
 8008f9c:	0c9b      	lsrs	r3, r3, #18
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008fa2:	e002      	b.n	8008faa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008faa:	4b15      	ldr	r3, [pc, #84]	; (8009000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fb6:	d102      	bne.n	8008fbe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1f2      	bne.n	8008fa4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008fbe:	4b10      	ldr	r3, [pc, #64]	; (8009000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fc0:	695b      	ldr	r3, [r3, #20]
 8008fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fca:	d112      	bne.n	8008ff2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e011      	b.n	8008ff4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008fd0:	4b0b      	ldr	r3, [pc, #44]	; (8009000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fd6:	4a0a      	ldr	r2, [pc, #40]	; (8009000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008fe0:	e007      	b.n	8008ff2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008fe2:	4b07      	ldr	r3, [pc, #28]	; (8009000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008fea:	4a05      	ldr	r2, [pc, #20]	; (8009000 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008ff0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr
 8009000:	40007000 	.word	0x40007000
 8009004:	20000018 	.word	0x20000018
 8009008:	431bde83 	.word	0x431bde83

0800900c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800900c:	b480      	push	{r7}
 800900e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009010:	4b05      	ldr	r3, [pc, #20]	; (8009028 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	4a04      	ldr	r2, [pc, #16]	; (8009028 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009016:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800901a:	6093      	str	r3, [r2, #8]
}
 800901c:	bf00      	nop
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	40007000 	.word	0x40007000

0800902c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b088      	sub	sp, #32
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d101      	bne.n	800903e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	e308      	b.n	8009650 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	2b00      	cmp	r3, #0
 8009048:	d075      	beq.n	8009136 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800904a:	4ba3      	ldr	r3, [pc, #652]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	f003 030c 	and.w	r3, r3, #12
 8009052:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009054:	4ba0      	ldr	r3, [pc, #640]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	f003 0303 	and.w	r3, r3, #3
 800905c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	2b0c      	cmp	r3, #12
 8009062:	d102      	bne.n	800906a <HAL_RCC_OscConfig+0x3e>
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	2b03      	cmp	r3, #3
 8009068:	d002      	beq.n	8009070 <HAL_RCC_OscConfig+0x44>
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	2b08      	cmp	r3, #8
 800906e:	d10b      	bne.n	8009088 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009070:	4b99      	ldr	r3, [pc, #612]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009078:	2b00      	cmp	r3, #0
 800907a:	d05b      	beq.n	8009134 <HAL_RCC_OscConfig+0x108>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d157      	bne.n	8009134 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	e2e3      	b.n	8009650 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009090:	d106      	bne.n	80090a0 <HAL_RCC_OscConfig+0x74>
 8009092:	4b91      	ldr	r3, [pc, #580]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a90      	ldr	r2, [pc, #576]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 8009098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800909c:	6013      	str	r3, [r2, #0]
 800909e:	e01d      	b.n	80090dc <HAL_RCC_OscConfig+0xb0>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80090a8:	d10c      	bne.n	80090c4 <HAL_RCC_OscConfig+0x98>
 80090aa:	4b8b      	ldr	r3, [pc, #556]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a8a      	ldr	r2, [pc, #552]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 80090b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80090b4:	6013      	str	r3, [r2, #0]
 80090b6:	4b88      	ldr	r3, [pc, #544]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a87      	ldr	r2, [pc, #540]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 80090bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090c0:	6013      	str	r3, [r2, #0]
 80090c2:	e00b      	b.n	80090dc <HAL_RCC_OscConfig+0xb0>
 80090c4:	4b84      	ldr	r3, [pc, #528]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a83      	ldr	r2, [pc, #524]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 80090ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090ce:	6013      	str	r3, [r2, #0]
 80090d0:	4b81      	ldr	r3, [pc, #516]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a80      	ldr	r2, [pc, #512]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 80090d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d013      	beq.n	800910c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090e4:	f7fe f8b4 	bl	8007250 <HAL_GetTick>
 80090e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80090ea:	e008      	b.n	80090fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090ec:	f7fe f8b0 	bl	8007250 <HAL_GetTick>
 80090f0:	4602      	mov	r2, r0
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	2b64      	cmp	r3, #100	; 0x64
 80090f8:	d901      	bls.n	80090fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80090fa:	2303      	movs	r3, #3
 80090fc:	e2a8      	b.n	8009650 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80090fe:	4b76      	ldr	r3, [pc, #472]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009106:	2b00      	cmp	r3, #0
 8009108:	d0f0      	beq.n	80090ec <HAL_RCC_OscConfig+0xc0>
 800910a:	e014      	b.n	8009136 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800910c:	f7fe f8a0 	bl	8007250 <HAL_GetTick>
 8009110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009112:	e008      	b.n	8009126 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009114:	f7fe f89c 	bl	8007250 <HAL_GetTick>
 8009118:	4602      	mov	r2, r0
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	2b64      	cmp	r3, #100	; 0x64
 8009120:	d901      	bls.n	8009126 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e294      	b.n	8009650 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009126:	4b6c      	ldr	r3, [pc, #432]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1f0      	bne.n	8009114 <HAL_RCC_OscConfig+0xe8>
 8009132:	e000      	b.n	8009136 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 0302 	and.w	r3, r3, #2
 800913e:	2b00      	cmp	r3, #0
 8009140:	d075      	beq.n	800922e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009142:	4b65      	ldr	r3, [pc, #404]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	f003 030c 	and.w	r3, r3, #12
 800914a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800914c:	4b62      	ldr	r3, [pc, #392]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	f003 0303 	and.w	r3, r3, #3
 8009154:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	2b0c      	cmp	r3, #12
 800915a:	d102      	bne.n	8009162 <HAL_RCC_OscConfig+0x136>
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	2b02      	cmp	r3, #2
 8009160:	d002      	beq.n	8009168 <HAL_RCC_OscConfig+0x13c>
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	2b04      	cmp	r3, #4
 8009166:	d11f      	bne.n	80091a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009168:	4b5b      	ldr	r3, [pc, #364]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009170:	2b00      	cmp	r3, #0
 8009172:	d005      	beq.n	8009180 <HAL_RCC_OscConfig+0x154>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d101      	bne.n	8009180 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	e267      	b.n	8009650 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009180:	4b55      	ldr	r3, [pc, #340]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	061b      	lsls	r3, r3, #24
 800918e:	4952      	ldr	r1, [pc, #328]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 8009190:	4313      	orrs	r3, r2
 8009192:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009194:	4b51      	ldr	r3, [pc, #324]	; (80092dc <HAL_RCC_OscConfig+0x2b0>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4618      	mov	r0, r3
 800919a:	f7fd fd0d 	bl	8006bb8 <HAL_InitTick>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d043      	beq.n	800922c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e253      	b.n	8009650 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d023      	beq.n	80091f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80091b0:	4b49      	ldr	r3, [pc, #292]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a48      	ldr	r2, [pc, #288]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 80091b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091bc:	f7fe f848 	bl	8007250 <HAL_GetTick>
 80091c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091c2:	e008      	b.n	80091d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091c4:	f7fe f844 	bl	8007250 <HAL_GetTick>
 80091c8:	4602      	mov	r2, r0
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	d901      	bls.n	80091d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80091d2:	2303      	movs	r3, #3
 80091d4:	e23c      	b.n	8009650 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091d6:	4b40      	ldr	r3, [pc, #256]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d0f0      	beq.n	80091c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091e2:	4b3d      	ldr	r3, [pc, #244]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	061b      	lsls	r3, r3, #24
 80091f0:	4939      	ldr	r1, [pc, #228]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 80091f2:	4313      	orrs	r3, r2
 80091f4:	604b      	str	r3, [r1, #4]
 80091f6:	e01a      	b.n	800922e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091f8:	4b37      	ldr	r3, [pc, #220]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a36      	ldr	r2, [pc, #216]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 80091fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009204:	f7fe f824 	bl	8007250 <HAL_GetTick>
 8009208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800920a:	e008      	b.n	800921e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800920c:	f7fe f820 	bl	8007250 <HAL_GetTick>
 8009210:	4602      	mov	r2, r0
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	2b02      	cmp	r3, #2
 8009218:	d901      	bls.n	800921e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e218      	b.n	8009650 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800921e:	4b2e      	ldr	r3, [pc, #184]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1f0      	bne.n	800920c <HAL_RCC_OscConfig+0x1e0>
 800922a:	e000      	b.n	800922e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800922c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 0308 	and.w	r3, r3, #8
 8009236:	2b00      	cmp	r3, #0
 8009238:	d03c      	beq.n	80092b4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d01c      	beq.n	800927c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009242:	4b25      	ldr	r3, [pc, #148]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 8009244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009248:	4a23      	ldr	r2, [pc, #140]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 800924a:	f043 0301 	orr.w	r3, r3, #1
 800924e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009252:	f7fd fffd 	bl	8007250 <HAL_GetTick>
 8009256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009258:	e008      	b.n	800926c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800925a:	f7fd fff9 	bl	8007250 <HAL_GetTick>
 800925e:	4602      	mov	r2, r0
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	2b02      	cmp	r3, #2
 8009266:	d901      	bls.n	800926c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009268:	2303      	movs	r3, #3
 800926a:	e1f1      	b.n	8009650 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800926c:	4b1a      	ldr	r3, [pc, #104]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 800926e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009272:	f003 0302 	and.w	r3, r3, #2
 8009276:	2b00      	cmp	r3, #0
 8009278:	d0ef      	beq.n	800925a <HAL_RCC_OscConfig+0x22e>
 800927a:	e01b      	b.n	80092b4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800927c:	4b16      	ldr	r3, [pc, #88]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 800927e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009282:	4a15      	ldr	r2, [pc, #84]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 8009284:	f023 0301 	bic.w	r3, r3, #1
 8009288:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800928c:	f7fd ffe0 	bl	8007250 <HAL_GetTick>
 8009290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009292:	e008      	b.n	80092a6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009294:	f7fd ffdc 	bl	8007250 <HAL_GetTick>
 8009298:	4602      	mov	r2, r0
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d901      	bls.n	80092a6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80092a2:	2303      	movs	r3, #3
 80092a4:	e1d4      	b.n	8009650 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80092a6:	4b0c      	ldr	r3, [pc, #48]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 80092a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092ac:	f003 0302 	and.w	r3, r3, #2
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1ef      	bne.n	8009294 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 0304 	and.w	r3, r3, #4
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 80ab 	beq.w	8009418 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092c2:	2300      	movs	r3, #0
 80092c4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80092c6:	4b04      	ldr	r3, [pc, #16]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 80092c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d106      	bne.n	80092e0 <HAL_RCC_OscConfig+0x2b4>
 80092d2:	2301      	movs	r3, #1
 80092d4:	e005      	b.n	80092e2 <HAL_RCC_OscConfig+0x2b6>
 80092d6:	bf00      	nop
 80092d8:	40021000 	.word	0x40021000
 80092dc:	2000001c 	.word	0x2000001c
 80092e0:	2300      	movs	r3, #0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00d      	beq.n	8009302 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092e6:	4baf      	ldr	r3, [pc, #700]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 80092e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ea:	4aae      	ldr	r2, [pc, #696]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 80092ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092f0:	6593      	str	r3, [r2, #88]	; 0x58
 80092f2:	4bac      	ldr	r3, [pc, #688]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 80092f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092fa:	60fb      	str	r3, [r7, #12]
 80092fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80092fe:	2301      	movs	r3, #1
 8009300:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009302:	4ba9      	ldr	r3, [pc, #676]	; (80095a8 <HAL_RCC_OscConfig+0x57c>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800930a:	2b00      	cmp	r3, #0
 800930c:	d118      	bne.n	8009340 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800930e:	4ba6      	ldr	r3, [pc, #664]	; (80095a8 <HAL_RCC_OscConfig+0x57c>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4aa5      	ldr	r2, [pc, #660]	; (80095a8 <HAL_RCC_OscConfig+0x57c>)
 8009314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800931a:	f7fd ff99 	bl	8007250 <HAL_GetTick>
 800931e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009320:	e008      	b.n	8009334 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009322:	f7fd ff95 	bl	8007250 <HAL_GetTick>
 8009326:	4602      	mov	r2, r0
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	2b02      	cmp	r3, #2
 800932e:	d901      	bls.n	8009334 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009330:	2303      	movs	r3, #3
 8009332:	e18d      	b.n	8009650 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009334:	4b9c      	ldr	r3, [pc, #624]	; (80095a8 <HAL_RCC_OscConfig+0x57c>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800933c:	2b00      	cmp	r3, #0
 800933e:	d0f0      	beq.n	8009322 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d108      	bne.n	800935a <HAL_RCC_OscConfig+0x32e>
 8009348:	4b96      	ldr	r3, [pc, #600]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 800934a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800934e:	4a95      	ldr	r2, [pc, #596]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 8009350:	f043 0301 	orr.w	r3, r3, #1
 8009354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009358:	e024      	b.n	80093a4 <HAL_RCC_OscConfig+0x378>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	2b05      	cmp	r3, #5
 8009360:	d110      	bne.n	8009384 <HAL_RCC_OscConfig+0x358>
 8009362:	4b90      	ldr	r3, [pc, #576]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 8009364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009368:	4a8e      	ldr	r2, [pc, #568]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 800936a:	f043 0304 	orr.w	r3, r3, #4
 800936e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009372:	4b8c      	ldr	r3, [pc, #560]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 8009374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009378:	4a8a      	ldr	r2, [pc, #552]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 800937a:	f043 0301 	orr.w	r3, r3, #1
 800937e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009382:	e00f      	b.n	80093a4 <HAL_RCC_OscConfig+0x378>
 8009384:	4b87      	ldr	r3, [pc, #540]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 8009386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800938a:	4a86      	ldr	r2, [pc, #536]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 800938c:	f023 0301 	bic.w	r3, r3, #1
 8009390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009394:	4b83      	ldr	r3, [pc, #524]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 8009396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800939a:	4a82      	ldr	r2, [pc, #520]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 800939c:	f023 0304 	bic.w	r3, r3, #4
 80093a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d016      	beq.n	80093da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093ac:	f7fd ff50 	bl	8007250 <HAL_GetTick>
 80093b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093b2:	e00a      	b.n	80093ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093b4:	f7fd ff4c 	bl	8007250 <HAL_GetTick>
 80093b8:	4602      	mov	r2, r0
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	f241 3288 	movw	r2, #5000	; 0x1388
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d901      	bls.n	80093ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80093c6:	2303      	movs	r3, #3
 80093c8:	e142      	b.n	8009650 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093ca:	4b76      	ldr	r3, [pc, #472]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 80093cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093d0:	f003 0302 	and.w	r3, r3, #2
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d0ed      	beq.n	80093b4 <HAL_RCC_OscConfig+0x388>
 80093d8:	e015      	b.n	8009406 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093da:	f7fd ff39 	bl	8007250 <HAL_GetTick>
 80093de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80093e0:	e00a      	b.n	80093f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093e2:	f7fd ff35 	bl	8007250 <HAL_GetTick>
 80093e6:	4602      	mov	r2, r0
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d901      	bls.n	80093f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80093f4:	2303      	movs	r3, #3
 80093f6:	e12b      	b.n	8009650 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80093f8:	4b6a      	ldr	r3, [pc, #424]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 80093fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093fe:	f003 0302 	and.w	r3, r3, #2
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1ed      	bne.n	80093e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009406:	7ffb      	ldrb	r3, [r7, #31]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d105      	bne.n	8009418 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800940c:	4b65      	ldr	r3, [pc, #404]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 800940e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009410:	4a64      	ldr	r2, [pc, #400]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 8009412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009416:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 0320 	and.w	r3, r3, #32
 8009420:	2b00      	cmp	r3, #0
 8009422:	d03c      	beq.n	800949e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	699b      	ldr	r3, [r3, #24]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d01c      	beq.n	8009466 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800942c:	4b5d      	ldr	r3, [pc, #372]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 800942e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009432:	4a5c      	ldr	r2, [pc, #368]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 8009434:	f043 0301 	orr.w	r3, r3, #1
 8009438:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800943c:	f7fd ff08 	bl	8007250 <HAL_GetTick>
 8009440:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009442:	e008      	b.n	8009456 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009444:	f7fd ff04 	bl	8007250 <HAL_GetTick>
 8009448:	4602      	mov	r2, r0
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	2b02      	cmp	r3, #2
 8009450:	d901      	bls.n	8009456 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009452:	2303      	movs	r3, #3
 8009454:	e0fc      	b.n	8009650 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009456:	4b53      	ldr	r3, [pc, #332]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 8009458:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800945c:	f003 0302 	and.w	r3, r3, #2
 8009460:	2b00      	cmp	r3, #0
 8009462:	d0ef      	beq.n	8009444 <HAL_RCC_OscConfig+0x418>
 8009464:	e01b      	b.n	800949e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009466:	4b4f      	ldr	r3, [pc, #316]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 8009468:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800946c:	4a4d      	ldr	r2, [pc, #308]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 800946e:	f023 0301 	bic.w	r3, r3, #1
 8009472:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009476:	f7fd feeb 	bl	8007250 <HAL_GetTick>
 800947a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800947c:	e008      	b.n	8009490 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800947e:	f7fd fee7 	bl	8007250 <HAL_GetTick>
 8009482:	4602      	mov	r2, r0
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	2b02      	cmp	r3, #2
 800948a:	d901      	bls.n	8009490 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800948c:	2303      	movs	r3, #3
 800948e:	e0df      	b.n	8009650 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009490:	4b44      	ldr	r3, [pc, #272]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 8009492:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009496:	f003 0302 	and.w	r3, r3, #2
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1ef      	bne.n	800947e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	69db      	ldr	r3, [r3, #28]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f000 80d3 	beq.w	800964e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80094a8:	4b3e      	ldr	r3, [pc, #248]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	f003 030c 	and.w	r3, r3, #12
 80094b0:	2b0c      	cmp	r3, #12
 80094b2:	f000 808d 	beq.w	80095d0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	69db      	ldr	r3, [r3, #28]
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d15a      	bne.n	8009574 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094be:	4b39      	ldr	r3, [pc, #228]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a38      	ldr	r2, [pc, #224]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 80094c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094ca:	f7fd fec1 	bl	8007250 <HAL_GetTick>
 80094ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094d0:	e008      	b.n	80094e4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094d2:	f7fd febd 	bl	8007250 <HAL_GetTick>
 80094d6:	4602      	mov	r2, r0
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	1ad3      	subs	r3, r2, r3
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d901      	bls.n	80094e4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80094e0:	2303      	movs	r3, #3
 80094e2:	e0b5      	b.n	8009650 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094e4:	4b2f      	ldr	r3, [pc, #188]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1f0      	bne.n	80094d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094f0:	4b2c      	ldr	r3, [pc, #176]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 80094f2:	68da      	ldr	r2, [r3, #12]
 80094f4:	4b2d      	ldr	r3, [pc, #180]	; (80095ac <HAL_RCC_OscConfig+0x580>)
 80094f6:	4013      	ands	r3, r2
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	6a11      	ldr	r1, [r2, #32]
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009500:	3a01      	subs	r2, #1
 8009502:	0112      	lsls	r2, r2, #4
 8009504:	4311      	orrs	r1, r2
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800950a:	0212      	lsls	r2, r2, #8
 800950c:	4311      	orrs	r1, r2
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009512:	0852      	lsrs	r2, r2, #1
 8009514:	3a01      	subs	r2, #1
 8009516:	0552      	lsls	r2, r2, #21
 8009518:	4311      	orrs	r1, r2
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800951e:	0852      	lsrs	r2, r2, #1
 8009520:	3a01      	subs	r2, #1
 8009522:	0652      	lsls	r2, r2, #25
 8009524:	4311      	orrs	r1, r2
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800952a:	06d2      	lsls	r2, r2, #27
 800952c:	430a      	orrs	r2, r1
 800952e:	491d      	ldr	r1, [pc, #116]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 8009530:	4313      	orrs	r3, r2
 8009532:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009534:	4b1b      	ldr	r3, [pc, #108]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a1a      	ldr	r2, [pc, #104]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 800953a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800953e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009540:	4b18      	ldr	r3, [pc, #96]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	4a17      	ldr	r2, [pc, #92]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 8009546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800954a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800954c:	f7fd fe80 	bl	8007250 <HAL_GetTick>
 8009550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009552:	e008      	b.n	8009566 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009554:	f7fd fe7c 	bl	8007250 <HAL_GetTick>
 8009558:	4602      	mov	r2, r0
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	2b02      	cmp	r3, #2
 8009560:	d901      	bls.n	8009566 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e074      	b.n	8009650 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009566:	4b0f      	ldr	r3, [pc, #60]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800956e:	2b00      	cmp	r3, #0
 8009570:	d0f0      	beq.n	8009554 <HAL_RCC_OscConfig+0x528>
 8009572:	e06c      	b.n	800964e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009574:	4b0b      	ldr	r3, [pc, #44]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a0a      	ldr	r2, [pc, #40]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 800957a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800957e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009580:	4b08      	ldr	r3, [pc, #32]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	4a07      	ldr	r2, [pc, #28]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 8009586:	f023 0303 	bic.w	r3, r3, #3
 800958a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800958c:	4b05      	ldr	r3, [pc, #20]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	4a04      	ldr	r2, [pc, #16]	; (80095a4 <HAL_RCC_OscConfig+0x578>)
 8009592:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800959a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800959c:	f7fd fe58 	bl	8007250 <HAL_GetTick>
 80095a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095a2:	e00e      	b.n	80095c2 <HAL_RCC_OscConfig+0x596>
 80095a4:	40021000 	.word	0x40021000
 80095a8:	40007000 	.word	0x40007000
 80095ac:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095b0:	f7fd fe4e 	bl	8007250 <HAL_GetTick>
 80095b4:	4602      	mov	r2, r0
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d901      	bls.n	80095c2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80095be:	2303      	movs	r3, #3
 80095c0:	e046      	b.n	8009650 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80095c2:	4b25      	ldr	r3, [pc, #148]	; (8009658 <HAL_RCC_OscConfig+0x62c>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1f0      	bne.n	80095b0 <HAL_RCC_OscConfig+0x584>
 80095ce:	e03e      	b.n	800964e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	69db      	ldr	r3, [r3, #28]
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d101      	bne.n	80095dc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e039      	b.n	8009650 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80095dc:	4b1e      	ldr	r3, [pc, #120]	; (8009658 <HAL_RCC_OscConfig+0x62c>)
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	f003 0203 	and.w	r2, r3, #3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a1b      	ldr	r3, [r3, #32]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d12c      	bne.n	800964a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fa:	3b01      	subs	r3, #1
 80095fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095fe:	429a      	cmp	r2, r3
 8009600:	d123      	bne.n	800964a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800960c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800960e:	429a      	cmp	r2, r3
 8009610:	d11b      	bne.n	800964a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800961e:	429a      	cmp	r2, r3
 8009620:	d113      	bne.n	800964a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800962c:	085b      	lsrs	r3, r3, #1
 800962e:	3b01      	subs	r3, #1
 8009630:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009632:	429a      	cmp	r2, r3
 8009634:	d109      	bne.n	800964a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009640:	085b      	lsrs	r3, r3, #1
 8009642:	3b01      	subs	r3, #1
 8009644:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009646:	429a      	cmp	r2, r3
 8009648:	d001      	beq.n	800964e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e000      	b.n	8009650 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3720      	adds	r7, #32
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	40021000 	.word	0x40021000

0800965c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009666:	2300      	movs	r3, #0
 8009668:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d101      	bne.n	8009674 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	e11e      	b.n	80098b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009674:	4b91      	ldr	r3, [pc, #580]	; (80098bc <HAL_RCC_ClockConfig+0x260>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 030f 	and.w	r3, r3, #15
 800967c:	683a      	ldr	r2, [r7, #0]
 800967e:	429a      	cmp	r2, r3
 8009680:	d910      	bls.n	80096a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009682:	4b8e      	ldr	r3, [pc, #568]	; (80098bc <HAL_RCC_ClockConfig+0x260>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f023 020f 	bic.w	r2, r3, #15
 800968a:	498c      	ldr	r1, [pc, #560]	; (80098bc <HAL_RCC_ClockConfig+0x260>)
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	4313      	orrs	r3, r2
 8009690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009692:	4b8a      	ldr	r3, [pc, #552]	; (80098bc <HAL_RCC_ClockConfig+0x260>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 030f 	and.w	r3, r3, #15
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	429a      	cmp	r2, r3
 800969e:	d001      	beq.n	80096a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	e106      	b.n	80098b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0301 	and.w	r3, r3, #1
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d073      	beq.n	8009798 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	2b03      	cmp	r3, #3
 80096b6:	d129      	bne.n	800970c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096b8:	4b81      	ldr	r3, [pc, #516]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d101      	bne.n	80096c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e0f4      	b.n	80098b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80096c8:	f000 f9d0 	bl	8009a6c <RCC_GetSysClockFreqFromPLLSource>
 80096cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	4a7c      	ldr	r2, [pc, #496]	; (80098c4 <HAL_RCC_ClockConfig+0x268>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d93f      	bls.n	8009756 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80096d6:	4b7a      	ldr	r3, [pc, #488]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d009      	beq.n	80096f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d033      	beq.n	8009756 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d12f      	bne.n	8009756 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80096f6:	4b72      	ldr	r3, [pc, #456]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096fe:	4a70      	ldr	r2, [pc, #448]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 8009700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009704:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009706:	2380      	movs	r3, #128	; 0x80
 8009708:	617b      	str	r3, [r7, #20]
 800970a:	e024      	b.n	8009756 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	2b02      	cmp	r3, #2
 8009712:	d107      	bne.n	8009724 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009714:	4b6a      	ldr	r3, [pc, #424]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800971c:	2b00      	cmp	r3, #0
 800971e:	d109      	bne.n	8009734 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	e0c6      	b.n	80098b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009724:	4b66      	ldr	r3, [pc, #408]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800972c:	2b00      	cmp	r3, #0
 800972e:	d101      	bne.n	8009734 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	e0be      	b.n	80098b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009734:	f000 f8ce 	bl	80098d4 <HAL_RCC_GetSysClockFreq>
 8009738:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	4a61      	ldr	r2, [pc, #388]	; (80098c4 <HAL_RCC_ClockConfig+0x268>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d909      	bls.n	8009756 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009742:	4b5f      	ldr	r3, [pc, #380]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800974a:	4a5d      	ldr	r2, [pc, #372]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 800974c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009750:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009752:	2380      	movs	r3, #128	; 0x80
 8009754:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009756:	4b5a      	ldr	r3, [pc, #360]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	f023 0203 	bic.w	r2, r3, #3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	4957      	ldr	r1, [pc, #348]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 8009764:	4313      	orrs	r3, r2
 8009766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009768:	f7fd fd72 	bl	8007250 <HAL_GetTick>
 800976c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800976e:	e00a      	b.n	8009786 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009770:	f7fd fd6e 	bl	8007250 <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	f241 3288 	movw	r2, #5000	; 0x1388
 800977e:	4293      	cmp	r3, r2
 8009780:	d901      	bls.n	8009786 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009782:	2303      	movs	r3, #3
 8009784:	e095      	b.n	80098b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009786:	4b4e      	ldr	r3, [pc, #312]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	f003 020c 	and.w	r2, r3, #12
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	429a      	cmp	r2, r3
 8009796:	d1eb      	bne.n	8009770 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 0302 	and.w	r3, r3, #2
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d023      	beq.n	80097ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f003 0304 	and.w	r3, r3, #4
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d005      	beq.n	80097bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80097b0:	4b43      	ldr	r3, [pc, #268]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	4a42      	ldr	r2, [pc, #264]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 80097b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80097ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 0308 	and.w	r3, r3, #8
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d007      	beq.n	80097d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80097c8:	4b3d      	ldr	r3, [pc, #244]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80097d0:	4a3b      	ldr	r2, [pc, #236]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 80097d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80097d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097d8:	4b39      	ldr	r3, [pc, #228]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	4936      	ldr	r1, [pc, #216]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 80097e6:	4313      	orrs	r3, r2
 80097e8:	608b      	str	r3, [r1, #8]
 80097ea:	e008      	b.n	80097fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	2b80      	cmp	r3, #128	; 0x80
 80097f0:	d105      	bne.n	80097fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80097f2:	4b33      	ldr	r3, [pc, #204]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	4a32      	ldr	r2, [pc, #200]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 80097f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80097fe:	4b2f      	ldr	r3, [pc, #188]	; (80098bc <HAL_RCC_ClockConfig+0x260>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f003 030f 	and.w	r3, r3, #15
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	429a      	cmp	r2, r3
 800980a:	d21d      	bcs.n	8009848 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800980c:	4b2b      	ldr	r3, [pc, #172]	; (80098bc <HAL_RCC_ClockConfig+0x260>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f023 020f 	bic.w	r2, r3, #15
 8009814:	4929      	ldr	r1, [pc, #164]	; (80098bc <HAL_RCC_ClockConfig+0x260>)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	4313      	orrs	r3, r2
 800981a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800981c:	f7fd fd18 	bl	8007250 <HAL_GetTick>
 8009820:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009822:	e00a      	b.n	800983a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009824:	f7fd fd14 	bl	8007250 <HAL_GetTick>
 8009828:	4602      	mov	r2, r0
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009832:	4293      	cmp	r3, r2
 8009834:	d901      	bls.n	800983a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009836:	2303      	movs	r3, #3
 8009838:	e03b      	b.n	80098b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800983a:	4b20      	ldr	r3, [pc, #128]	; (80098bc <HAL_RCC_ClockConfig+0x260>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 030f 	and.w	r3, r3, #15
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	429a      	cmp	r2, r3
 8009846:	d1ed      	bne.n	8009824 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 0304 	and.w	r3, r3, #4
 8009850:	2b00      	cmp	r3, #0
 8009852:	d008      	beq.n	8009866 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009854:	4b1a      	ldr	r3, [pc, #104]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	4917      	ldr	r1, [pc, #92]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 8009862:	4313      	orrs	r3, r2
 8009864:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 0308 	and.w	r3, r3, #8
 800986e:	2b00      	cmp	r3, #0
 8009870:	d009      	beq.n	8009886 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009872:	4b13      	ldr	r3, [pc, #76]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	00db      	lsls	r3, r3, #3
 8009880:	490f      	ldr	r1, [pc, #60]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 8009882:	4313      	orrs	r3, r2
 8009884:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009886:	f000 f825 	bl	80098d4 <HAL_RCC_GetSysClockFreq>
 800988a:	4602      	mov	r2, r0
 800988c:	4b0c      	ldr	r3, [pc, #48]	; (80098c0 <HAL_RCC_ClockConfig+0x264>)
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	091b      	lsrs	r3, r3, #4
 8009892:	f003 030f 	and.w	r3, r3, #15
 8009896:	490c      	ldr	r1, [pc, #48]	; (80098c8 <HAL_RCC_ClockConfig+0x26c>)
 8009898:	5ccb      	ldrb	r3, [r1, r3]
 800989a:	f003 031f 	and.w	r3, r3, #31
 800989e:	fa22 f303 	lsr.w	r3, r2, r3
 80098a2:	4a0a      	ldr	r2, [pc, #40]	; (80098cc <HAL_RCC_ClockConfig+0x270>)
 80098a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80098a6:	4b0a      	ldr	r3, [pc, #40]	; (80098d0 <HAL_RCC_ClockConfig+0x274>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7fd f984 	bl	8006bb8 <HAL_InitTick>
 80098b0:	4603      	mov	r3, r0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3718      	adds	r7, #24
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	40022000 	.word	0x40022000
 80098c0:	40021000 	.word	0x40021000
 80098c4:	04c4b400 	.word	0x04c4b400
 80098c8:	08015740 	.word	0x08015740
 80098cc:	20000018 	.word	0x20000018
 80098d0:	2000001c 	.word	0x2000001c

080098d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b087      	sub	sp, #28
 80098d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80098da:	4b2c      	ldr	r3, [pc, #176]	; (800998c <HAL_RCC_GetSysClockFreq+0xb8>)
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f003 030c 	and.w	r3, r3, #12
 80098e2:	2b04      	cmp	r3, #4
 80098e4:	d102      	bne.n	80098ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80098e6:	4b2a      	ldr	r3, [pc, #168]	; (8009990 <HAL_RCC_GetSysClockFreq+0xbc>)
 80098e8:	613b      	str	r3, [r7, #16]
 80098ea:	e047      	b.n	800997c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80098ec:	4b27      	ldr	r3, [pc, #156]	; (800998c <HAL_RCC_GetSysClockFreq+0xb8>)
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	f003 030c 	and.w	r3, r3, #12
 80098f4:	2b08      	cmp	r3, #8
 80098f6:	d102      	bne.n	80098fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80098f8:	4b26      	ldr	r3, [pc, #152]	; (8009994 <HAL_RCC_GetSysClockFreq+0xc0>)
 80098fa:	613b      	str	r3, [r7, #16]
 80098fc:	e03e      	b.n	800997c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80098fe:	4b23      	ldr	r3, [pc, #140]	; (800998c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	f003 030c 	and.w	r3, r3, #12
 8009906:	2b0c      	cmp	r3, #12
 8009908:	d136      	bne.n	8009978 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800990a:	4b20      	ldr	r3, [pc, #128]	; (800998c <HAL_RCC_GetSysClockFreq+0xb8>)
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	f003 0303 	and.w	r3, r3, #3
 8009912:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009914:	4b1d      	ldr	r3, [pc, #116]	; (800998c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	091b      	lsrs	r3, r3, #4
 800991a:	f003 030f 	and.w	r3, r3, #15
 800991e:	3301      	adds	r3, #1
 8009920:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2b03      	cmp	r3, #3
 8009926:	d10c      	bne.n	8009942 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009928:	4a1a      	ldr	r2, [pc, #104]	; (8009994 <HAL_RCC_GetSysClockFreq+0xc0>)
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009930:	4a16      	ldr	r2, [pc, #88]	; (800998c <HAL_RCC_GetSysClockFreq+0xb8>)
 8009932:	68d2      	ldr	r2, [r2, #12]
 8009934:	0a12      	lsrs	r2, r2, #8
 8009936:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800993a:	fb02 f303 	mul.w	r3, r2, r3
 800993e:	617b      	str	r3, [r7, #20]
      break;
 8009940:	e00c      	b.n	800995c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009942:	4a13      	ldr	r2, [pc, #76]	; (8009990 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	fbb2 f3f3 	udiv	r3, r2, r3
 800994a:	4a10      	ldr	r2, [pc, #64]	; (800998c <HAL_RCC_GetSysClockFreq+0xb8>)
 800994c:	68d2      	ldr	r2, [r2, #12]
 800994e:	0a12      	lsrs	r2, r2, #8
 8009950:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009954:	fb02 f303 	mul.w	r3, r2, r3
 8009958:	617b      	str	r3, [r7, #20]
      break;
 800995a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800995c:	4b0b      	ldr	r3, [pc, #44]	; (800998c <HAL_RCC_GetSysClockFreq+0xb8>)
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	0e5b      	lsrs	r3, r3, #25
 8009962:	f003 0303 	and.w	r3, r3, #3
 8009966:	3301      	adds	r3, #1
 8009968:	005b      	lsls	r3, r3, #1
 800996a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800996c:	697a      	ldr	r2, [r7, #20]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	fbb2 f3f3 	udiv	r3, r2, r3
 8009974:	613b      	str	r3, [r7, #16]
 8009976:	e001      	b.n	800997c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009978:	2300      	movs	r3, #0
 800997a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800997c:	693b      	ldr	r3, [r7, #16]
}
 800997e:	4618      	mov	r0, r3
 8009980:	371c      	adds	r7, #28
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	40021000 	.word	0x40021000
 8009990:	00f42400 	.word	0x00f42400
 8009994:	016e3600 	.word	0x016e3600

08009998 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009998:	b480      	push	{r7}
 800999a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800999c:	4b03      	ldr	r3, [pc, #12]	; (80099ac <HAL_RCC_GetHCLKFreq+0x14>)
 800999e:	681b      	ldr	r3, [r3, #0]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	20000018 	.word	0x20000018

080099b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80099b4:	f7ff fff0 	bl	8009998 <HAL_RCC_GetHCLKFreq>
 80099b8:	4602      	mov	r2, r0
 80099ba:	4b06      	ldr	r3, [pc, #24]	; (80099d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	0a1b      	lsrs	r3, r3, #8
 80099c0:	f003 0307 	and.w	r3, r3, #7
 80099c4:	4904      	ldr	r1, [pc, #16]	; (80099d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80099c6:	5ccb      	ldrb	r3, [r1, r3]
 80099c8:	f003 031f 	and.w	r3, r3, #31
 80099cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	40021000 	.word	0x40021000
 80099d8:	08015750 	.word	0x08015750

080099dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80099e0:	f7ff ffda 	bl	8009998 <HAL_RCC_GetHCLKFreq>
 80099e4:	4602      	mov	r2, r0
 80099e6:	4b06      	ldr	r3, [pc, #24]	; (8009a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	0adb      	lsrs	r3, r3, #11
 80099ec:	f003 0307 	and.w	r3, r3, #7
 80099f0:	4904      	ldr	r1, [pc, #16]	; (8009a04 <HAL_RCC_GetPCLK2Freq+0x28>)
 80099f2:	5ccb      	ldrb	r3, [r1, r3]
 80099f4:	f003 031f 	and.w	r3, r3, #31
 80099f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	40021000 	.word	0x40021000
 8009a04:	08015750 	.word	0x08015750

08009a08 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	220f      	movs	r2, #15
 8009a16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009a18:	4b12      	ldr	r3, [pc, #72]	; (8009a64 <HAL_RCC_GetClockConfig+0x5c>)
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	f003 0203 	and.w	r2, r3, #3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8009a24:	4b0f      	ldr	r3, [pc, #60]	; (8009a64 <HAL_RCC_GetClockConfig+0x5c>)
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009a30:	4b0c      	ldr	r3, [pc, #48]	; (8009a64 <HAL_RCC_GetClockConfig+0x5c>)
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8009a3c:	4b09      	ldr	r3, [pc, #36]	; (8009a64 <HAL_RCC_GetClockConfig+0x5c>)
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	08db      	lsrs	r3, r3, #3
 8009a42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009a4a:	4b07      	ldr	r3, [pc, #28]	; (8009a68 <HAL_RCC_GetClockConfig+0x60>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f003 020f 	and.w	r2, r3, #15
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	601a      	str	r2, [r3, #0]
}
 8009a56:	bf00      	nop
 8009a58:	370c      	adds	r7, #12
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	40021000 	.word	0x40021000
 8009a68:	40022000 	.word	0x40022000

08009a6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b087      	sub	sp, #28
 8009a70:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009a72:	4b1e      	ldr	r3, [pc, #120]	; (8009aec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	f003 0303 	and.w	r3, r3, #3
 8009a7a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009a7c:	4b1b      	ldr	r3, [pc, #108]	; (8009aec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	091b      	lsrs	r3, r3, #4
 8009a82:	f003 030f 	and.w	r3, r3, #15
 8009a86:	3301      	adds	r3, #1
 8009a88:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	2b03      	cmp	r3, #3
 8009a8e:	d10c      	bne.n	8009aaa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009a90:	4a17      	ldr	r2, [pc, #92]	; (8009af0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a98:	4a14      	ldr	r2, [pc, #80]	; (8009aec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009a9a:	68d2      	ldr	r2, [r2, #12]
 8009a9c:	0a12      	lsrs	r2, r2, #8
 8009a9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009aa2:	fb02 f303 	mul.w	r3, r2, r3
 8009aa6:	617b      	str	r3, [r7, #20]
    break;
 8009aa8:	e00c      	b.n	8009ac4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009aaa:	4a12      	ldr	r2, [pc, #72]	; (8009af4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ab2:	4a0e      	ldr	r2, [pc, #56]	; (8009aec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009ab4:	68d2      	ldr	r2, [r2, #12]
 8009ab6:	0a12      	lsrs	r2, r2, #8
 8009ab8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009abc:	fb02 f303 	mul.w	r3, r2, r3
 8009ac0:	617b      	str	r3, [r7, #20]
    break;
 8009ac2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009ac4:	4b09      	ldr	r3, [pc, #36]	; (8009aec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	0e5b      	lsrs	r3, r3, #25
 8009aca:	f003 0303 	and.w	r3, r3, #3
 8009ace:	3301      	adds	r3, #1
 8009ad0:	005b      	lsls	r3, r3, #1
 8009ad2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009adc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009ade:	687b      	ldr	r3, [r7, #4]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	371c      	adds	r7, #28
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr
 8009aec:	40021000 	.word	0x40021000
 8009af0:	016e3600 	.word	0x016e3600
 8009af4:	00f42400 	.word	0x00f42400

08009af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b086      	sub	sp, #24
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009b00:	2300      	movs	r3, #0
 8009b02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009b04:	2300      	movs	r3, #0
 8009b06:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f000 8098 	beq.w	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b16:	2300      	movs	r3, #0
 8009b18:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b1a:	4b43      	ldr	r3, [pc, #268]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d10d      	bne.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b26:	4b40      	ldr	r3, [pc, #256]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b2a:	4a3f      	ldr	r2, [pc, #252]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b30:	6593      	str	r3, [r2, #88]	; 0x58
 8009b32:	4b3d      	ldr	r3, [pc, #244]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b3a:	60bb      	str	r3, [r7, #8]
 8009b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b42:	4b3a      	ldr	r3, [pc, #232]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a39      	ldr	r2, [pc, #228]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b4e:	f7fd fb7f 	bl	8007250 <HAL_GetTick>
 8009b52:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b54:	e009      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b56:	f7fd fb7b 	bl	8007250 <HAL_GetTick>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	1ad3      	subs	r3, r2, r3
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d902      	bls.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009b64:	2303      	movs	r3, #3
 8009b66:	74fb      	strb	r3, [r7, #19]
        break;
 8009b68:	e005      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b6a:	4b30      	ldr	r3, [pc, #192]	; (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d0ef      	beq.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009b76:	7cfb      	ldrb	r3, [r7, #19]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d159      	bne.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009b7c:	4b2a      	ldr	r3, [pc, #168]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b86:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d01e      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d019      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009b98:	4b23      	ldr	r3, [pc, #140]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ba2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009ba4:	4b20      	ldr	r3, [pc, #128]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009baa:	4a1f      	ldr	r2, [pc, #124]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009bb4:	4b1c      	ldr	r3, [pc, #112]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bba:	4a1b      	ldr	r2, [pc, #108]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009bc4:	4a18      	ldr	r2, [pc, #96]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	f003 0301 	and.w	r3, r3, #1
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d016      	beq.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bd6:	f7fd fb3b 	bl	8007250 <HAL_GetTick>
 8009bda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009bdc:	e00b      	b.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bde:	f7fd fb37 	bl	8007250 <HAL_GetTick>
 8009be2:	4602      	mov	r2, r0
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	1ad3      	subs	r3, r2, r3
 8009be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d902      	bls.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	74fb      	strb	r3, [r7, #19]
            break;
 8009bf4:	e006      	b.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009bf6:	4b0c      	ldr	r3, [pc, #48]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bfc:	f003 0302 	and.w	r3, r3, #2
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d0ec      	beq.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009c04:	7cfb      	ldrb	r3, [r7, #19]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d10b      	bne.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c0a:	4b07      	ldr	r3, [pc, #28]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c18:	4903      	ldr	r1, [pc, #12]	; (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009c20:	e008      	b.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009c22:	7cfb      	ldrb	r3, [r7, #19]
 8009c24:	74bb      	strb	r3, [r7, #18]
 8009c26:	e005      	b.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009c28:	40021000 	.word	0x40021000
 8009c2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c30:	7cfb      	ldrb	r3, [r7, #19]
 8009c32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009c34:	7c7b      	ldrb	r3, [r7, #17]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d105      	bne.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c3a:	4ba6      	ldr	r3, [pc, #664]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c3e:	4aa5      	ldr	r2, [pc, #660]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 0301 	and.w	r3, r3, #1
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00a      	beq.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009c52:	4ba0      	ldr	r3, [pc, #640]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c58:	f023 0203 	bic.w	r2, r3, #3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	499c      	ldr	r1, [pc, #624]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009c62:	4313      	orrs	r3, r2
 8009c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 0302 	and.w	r3, r3, #2
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00a      	beq.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009c74:	4b97      	ldr	r3, [pc, #604]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c7a:	f023 020c 	bic.w	r2, r3, #12
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	4994      	ldr	r1, [pc, #592]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009c84:	4313      	orrs	r3, r2
 8009c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f003 0304 	and.w	r3, r3, #4
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00a      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009c96:	4b8f      	ldr	r3, [pc, #572]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	498b      	ldr	r1, [pc, #556]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 0308 	and.w	r3, r3, #8
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00a      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009cb8:	4b86      	ldr	r3, [pc, #536]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	4983      	ldr	r1, [pc, #524]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 0320 	and.w	r3, r3, #32
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00a      	beq.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009cda:	4b7e      	ldr	r3, [pc, #504]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	695b      	ldr	r3, [r3, #20]
 8009ce8:	497a      	ldr	r1, [pc, #488]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009cea:	4313      	orrs	r3, r2
 8009cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00a      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009cfc:	4b75      	ldr	r3, [pc, #468]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	699b      	ldr	r3, [r3, #24]
 8009d0a:	4972      	ldr	r1, [pc, #456]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00a      	beq.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009d1e:	4b6d      	ldr	r3, [pc, #436]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	69db      	ldr	r3, [r3, #28]
 8009d2c:	4969      	ldr	r1, [pc, #420]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00a      	beq.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009d40:	4b64      	ldr	r3, [pc, #400]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a1b      	ldr	r3, [r3, #32]
 8009d4e:	4961      	ldr	r1, [pc, #388]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009d50:	4313      	orrs	r3, r2
 8009d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00a      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009d62:	4b5c      	ldr	r3, [pc, #368]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d70:	4958      	ldr	r1, [pc, #352]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009d72:	4313      	orrs	r3, r2
 8009d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d015      	beq.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009d84:	4b53      	ldr	r3, [pc, #332]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d92:	4950      	ldr	r1, [pc, #320]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009d94:	4313      	orrs	r3, r2
 8009d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009da2:	d105      	bne.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009da4:	4b4b      	ldr	r3, [pc, #300]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	4a4a      	ldr	r2, [pc, #296]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009daa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d015      	beq.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009dbc:	4b45      	ldr	r3, [pc, #276]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dca:	4942      	ldr	r1, [pc, #264]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009dda:	d105      	bne.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ddc:	4b3d      	ldr	r3, [pc, #244]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	4a3c      	ldr	r2, [pc, #240]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009de2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009de6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d015      	beq.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009df4:	4b37      	ldr	r3, [pc, #220]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dfa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e02:	4934      	ldr	r1, [pc, #208]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e04:	4313      	orrs	r3, r2
 8009e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e12:	d105      	bne.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e14:	4b2f      	ldr	r3, [pc, #188]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	4a2e      	ldr	r2, [pc, #184]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e1e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d015      	beq.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e2c:	4b29      	ldr	r3, [pc, #164]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e3a:	4926      	ldr	r1, [pc, #152]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e4a:	d105      	bne.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e4c:	4b21      	ldr	r3, [pc, #132]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	4a20      	ldr	r2, [pc, #128]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e56:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d015      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e64:	4b1b      	ldr	r3, [pc, #108]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e72:	4918      	ldr	r1, [pc, #96]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e74:	4313      	orrs	r3, r2
 8009e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e82:	d105      	bne.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e84:	4b13      	ldr	r3, [pc, #76]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	4a12      	ldr	r2, [pc, #72]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d015      	beq.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009e9c:	4b0d      	ldr	r3, [pc, #52]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ea2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eaa:	490a      	ldr	r1, [pc, #40]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009eac:	4313      	orrs	r3, r2
 8009eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009eba:	d105      	bne.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009ebc:	4b05      	ldr	r3, [pc, #20]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009ebe:	68db      	ldr	r3, [r3, #12]
 8009ec0:	4a04      	ldr	r2, [pc, #16]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ec6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009ec8:	7cbb      	ldrb	r3, [r7, #18]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3718      	adds	r7, #24
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	40021000 	.word	0x40021000

08009ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d101      	bne.n	8009eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e049      	b.n	8009f7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d106      	bne.n	8009f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f841 	bl	8009f86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2202      	movs	r2, #2
 8009f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	3304      	adds	r3, #4
 8009f14:	4619      	mov	r1, r3
 8009f16:	4610      	mov	r0, r2
 8009f18:	f000 fa52 	bl	800a3c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009f86:	b480      	push	{r7}
 8009f88:	b083      	sub	sp, #12
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009f8e:	bf00      	nop
 8009f90:	370c      	adds	r7, #12
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr
	...

08009f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d001      	beq.n	8009fb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e04a      	b.n	800a04a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68da      	ldr	r2, [r3, #12]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f042 0201 	orr.w	r2, r2, #1
 8009fca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a21      	ldr	r2, [pc, #132]	; (800a058 <HAL_TIM_Base_Start_IT+0xbc>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d018      	beq.n	800a008 <HAL_TIM_Base_Start_IT+0x6c>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fde:	d013      	beq.n	800a008 <HAL_TIM_Base_Start_IT+0x6c>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a1d      	ldr	r2, [pc, #116]	; (800a05c <HAL_TIM_Base_Start_IT+0xc0>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d00e      	beq.n	800a008 <HAL_TIM_Base_Start_IT+0x6c>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a1c      	ldr	r2, [pc, #112]	; (800a060 <HAL_TIM_Base_Start_IT+0xc4>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d009      	beq.n	800a008 <HAL_TIM_Base_Start_IT+0x6c>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a1a      	ldr	r2, [pc, #104]	; (800a064 <HAL_TIM_Base_Start_IT+0xc8>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d004      	beq.n	800a008 <HAL_TIM_Base_Start_IT+0x6c>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a19      	ldr	r2, [pc, #100]	; (800a068 <HAL_TIM_Base_Start_IT+0xcc>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d115      	bne.n	800a034 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	689a      	ldr	r2, [r3, #8]
 800a00e:	4b17      	ldr	r3, [pc, #92]	; (800a06c <HAL_TIM_Base_Start_IT+0xd0>)
 800a010:	4013      	ands	r3, r2
 800a012:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2b06      	cmp	r3, #6
 800a018:	d015      	beq.n	800a046 <HAL_TIM_Base_Start_IT+0xaa>
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a020:	d011      	beq.n	800a046 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f042 0201 	orr.w	r2, r2, #1
 800a030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a032:	e008      	b.n	800a046 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f042 0201 	orr.w	r2, r2, #1
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	e000      	b.n	800a048 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a046:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3714      	adds	r7, #20
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	40012c00 	.word	0x40012c00
 800a05c:	40000400 	.word	0x40000400
 800a060:	40000800 	.word	0x40000800
 800a064:	40013400 	.word	0x40013400
 800a068:	40014000 	.word	0x40014000
 800a06c:	00010007 	.word	0x00010007

0800a070 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	f003 0302 	and.w	r3, r3, #2
 800a082:	2b02      	cmp	r3, #2
 800a084:	d122      	bne.n	800a0cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	f003 0302 	and.w	r3, r3, #2
 800a090:	2b02      	cmp	r3, #2
 800a092:	d11b      	bne.n	800a0cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f06f 0202 	mvn.w	r2, #2
 800a09c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	699b      	ldr	r3, [r3, #24]
 800a0aa:	f003 0303 	and.w	r3, r3, #3
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d003      	beq.n	800a0ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f965 	bl	800a382 <HAL_TIM_IC_CaptureCallback>
 800a0b8:	e005      	b.n	800a0c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f957 	bl	800a36e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 f968 	bl	800a396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	f003 0304 	and.w	r3, r3, #4
 800a0d6:	2b04      	cmp	r3, #4
 800a0d8:	d122      	bne.n	800a120 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	f003 0304 	and.w	r3, r3, #4
 800a0e4:	2b04      	cmp	r3, #4
 800a0e6:	d11b      	bne.n	800a120 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f06f 0204 	mvn.w	r2, #4
 800a0f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2202      	movs	r2, #2
 800a0f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	699b      	ldr	r3, [r3, #24]
 800a0fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a102:	2b00      	cmp	r3, #0
 800a104:	d003      	beq.n	800a10e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 f93b 	bl	800a382 <HAL_TIM_IC_CaptureCallback>
 800a10c:	e005      	b.n	800a11a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 f92d 	bl	800a36e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f93e 	bl	800a396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	f003 0308 	and.w	r3, r3, #8
 800a12a:	2b08      	cmp	r3, #8
 800a12c:	d122      	bne.n	800a174 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	f003 0308 	and.w	r3, r3, #8
 800a138:	2b08      	cmp	r3, #8
 800a13a:	d11b      	bne.n	800a174 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f06f 0208 	mvn.w	r2, #8
 800a144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2204      	movs	r2, #4
 800a14a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	69db      	ldr	r3, [r3, #28]
 800a152:	f003 0303 	and.w	r3, r3, #3
 800a156:	2b00      	cmp	r3, #0
 800a158:	d003      	beq.n	800a162 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f911 	bl	800a382 <HAL_TIM_IC_CaptureCallback>
 800a160:	e005      	b.n	800a16e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f903 	bl	800a36e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 f914 	bl	800a396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	f003 0310 	and.w	r3, r3, #16
 800a17e:	2b10      	cmp	r3, #16
 800a180:	d122      	bne.n	800a1c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	f003 0310 	and.w	r3, r3, #16
 800a18c:	2b10      	cmp	r3, #16
 800a18e:	d11b      	bne.n	800a1c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f06f 0210 	mvn.w	r2, #16
 800a198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2208      	movs	r2, #8
 800a19e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	69db      	ldr	r3, [r3, #28]
 800a1a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d003      	beq.n	800a1b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 f8e7 	bl	800a382 <HAL_TIM_IC_CaptureCallback>
 800a1b4:	e005      	b.n	800a1c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 f8d9 	bl	800a36e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 f8ea 	bl	800a396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	f003 0301 	and.w	r3, r3, #1
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d10e      	bne.n	800a1f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	f003 0301 	and.w	r3, r3, #1
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d107      	bne.n	800a1f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f06f 0201 	mvn.w	r2, #1
 800a1ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f7f9 fcd7 	bl	8003ba2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1fe:	2b80      	cmp	r3, #128	; 0x80
 800a200:	d10e      	bne.n	800a220 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a20c:	2b80      	cmp	r3, #128	; 0x80
 800a20e:	d107      	bne.n	800a220 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f96a 	bl	800a4f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	691b      	ldr	r3, [r3, #16]
 800a226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a22a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a22e:	d10e      	bne.n	800a24e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a23a:	2b80      	cmp	r3, #128	; 0x80
 800a23c:	d107      	bne.n	800a24e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 f95d 	bl	800a508 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a258:	2b40      	cmp	r3, #64	; 0x40
 800a25a:	d10e      	bne.n	800a27a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a266:	2b40      	cmp	r3, #64	; 0x40
 800a268:	d107      	bne.n	800a27a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 f898 	bl	800a3aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	691b      	ldr	r3, [r3, #16]
 800a280:	f003 0320 	and.w	r3, r3, #32
 800a284:	2b20      	cmp	r3, #32
 800a286:	d10e      	bne.n	800a2a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	f003 0320 	and.w	r3, r3, #32
 800a292:	2b20      	cmp	r3, #32
 800a294:	d107      	bne.n	800a2a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f06f 0220 	mvn.w	r2, #32
 800a29e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 f91d 	bl	800a4e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2b4:	d10f      	bne.n	800a2d6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2c4:	d107      	bne.n	800a2d6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a2ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 f923 	bl	800a51c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2e4:	d10f      	bne.n	800a306 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2f4:	d107      	bne.n	800a306 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a2fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f915 	bl	800a530 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a310:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a314:	d10f      	bne.n	800a336 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a324:	d107      	bne.n	800a336 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a32e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 f907 	bl	800a544 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a340:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a344:	d10f      	bne.n	800a366 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a350:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a354:	d107      	bne.n	800a366 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a35e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 f8f9 	bl	800a558 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a366:	bf00      	nop
 800a368:	3708      	adds	r7, #8
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a36e:	b480      	push	{r7}
 800a370:	b083      	sub	sp, #12
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a376:	bf00      	nop
 800a378:	370c      	adds	r7, #12
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr

0800a382 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a382:	b480      	push	{r7}
 800a384:	b083      	sub	sp, #12
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a38a:	bf00      	nop
 800a38c:	370c      	adds	r7, #12
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr

0800a396 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a396:	b480      	push	{r7}
 800a398:	b083      	sub	sp, #12
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a39e:	bf00      	nop
 800a3a0:	370c      	adds	r7, #12
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b083      	sub	sp, #12
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3b2:	bf00      	nop
 800a3b4:	370c      	adds	r7, #12
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
	...

0800a3c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4a3c      	ldr	r2, [pc, #240]	; (800a4c4 <TIM_Base_SetConfig+0x104>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d00f      	beq.n	800a3f8 <TIM_Base_SetConfig+0x38>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3de:	d00b      	beq.n	800a3f8 <TIM_Base_SetConfig+0x38>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a39      	ldr	r2, [pc, #228]	; (800a4c8 <TIM_Base_SetConfig+0x108>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d007      	beq.n	800a3f8 <TIM_Base_SetConfig+0x38>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4a38      	ldr	r2, [pc, #224]	; (800a4cc <TIM_Base_SetConfig+0x10c>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d003      	beq.n	800a3f8 <TIM_Base_SetConfig+0x38>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a37      	ldr	r2, [pc, #220]	; (800a4d0 <TIM_Base_SetConfig+0x110>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d108      	bne.n	800a40a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	4313      	orrs	r3, r2
 800a408:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4a2d      	ldr	r2, [pc, #180]	; (800a4c4 <TIM_Base_SetConfig+0x104>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d01b      	beq.n	800a44a <TIM_Base_SetConfig+0x8a>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a418:	d017      	beq.n	800a44a <TIM_Base_SetConfig+0x8a>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4a2a      	ldr	r2, [pc, #168]	; (800a4c8 <TIM_Base_SetConfig+0x108>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d013      	beq.n	800a44a <TIM_Base_SetConfig+0x8a>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a29      	ldr	r2, [pc, #164]	; (800a4cc <TIM_Base_SetConfig+0x10c>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d00f      	beq.n	800a44a <TIM_Base_SetConfig+0x8a>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a28      	ldr	r2, [pc, #160]	; (800a4d0 <TIM_Base_SetConfig+0x110>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d00b      	beq.n	800a44a <TIM_Base_SetConfig+0x8a>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a27      	ldr	r2, [pc, #156]	; (800a4d4 <TIM_Base_SetConfig+0x114>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d007      	beq.n	800a44a <TIM_Base_SetConfig+0x8a>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a26      	ldr	r2, [pc, #152]	; (800a4d8 <TIM_Base_SetConfig+0x118>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d003      	beq.n	800a44a <TIM_Base_SetConfig+0x8a>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4a25      	ldr	r2, [pc, #148]	; (800a4dc <TIM_Base_SetConfig+0x11c>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d108      	bne.n	800a45c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a450:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	4313      	orrs	r3, r2
 800a45a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	695b      	ldr	r3, [r3, #20]
 800a466:	4313      	orrs	r3, r2
 800a468:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	689a      	ldr	r2, [r3, #8]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4a10      	ldr	r2, [pc, #64]	; (800a4c4 <TIM_Base_SetConfig+0x104>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d00f      	beq.n	800a4a8 <TIM_Base_SetConfig+0xe8>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4a11      	ldr	r2, [pc, #68]	; (800a4d0 <TIM_Base_SetConfig+0x110>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d00b      	beq.n	800a4a8 <TIM_Base_SetConfig+0xe8>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4a10      	ldr	r2, [pc, #64]	; (800a4d4 <TIM_Base_SetConfig+0x114>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d007      	beq.n	800a4a8 <TIM_Base_SetConfig+0xe8>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4a0f      	ldr	r2, [pc, #60]	; (800a4d8 <TIM_Base_SetConfig+0x118>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d003      	beq.n	800a4a8 <TIM_Base_SetConfig+0xe8>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4a0e      	ldr	r2, [pc, #56]	; (800a4dc <TIM_Base_SetConfig+0x11c>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d103      	bne.n	800a4b0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	691a      	ldr	r2, [r3, #16]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	615a      	str	r2, [r3, #20]
}
 800a4b6:	bf00      	nop
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	40012c00 	.word	0x40012c00
 800a4c8:	40000400 	.word	0x40000400
 800a4cc:	40000800 	.word	0x40000800
 800a4d0:	40013400 	.word	0x40013400
 800a4d4:	40014000 	.word	0x40014000
 800a4d8:	40014400 	.word	0x40014400
 800a4dc:	40014800 	.word	0x40014800

0800a4e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4e8:	bf00      	nop
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a510:	bf00      	nop
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a524:	bf00      	nop
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a538:	bf00      	nop
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a54c:	bf00      	nop
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a560:	bf00      	nop
 800a562:	370c      	adds	r7, #12
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d101      	bne.n	800a57e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	e042      	b.n	800a604 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a584:	2b00      	cmp	r3, #0
 800a586:	d106      	bne.n	800a596 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f7fc fd0f 	bl	8006fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2224      	movs	r2, #36	; 0x24
 800a59a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f022 0201 	bic.w	r2, r2, #1
 800a5ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 fcf6 	bl	800afa0 <UART_SetConfig>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d101      	bne.n	800a5be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e022      	b.n	800a604 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d002      	beq.n	800a5cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 ff86 	bl	800b4d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a5da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	689a      	ldr	r2, [r3, #8]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a5ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f042 0201 	orr.w	r2, r2, #1
 800a5fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f001 f80d 	bl	800b61c <UART_CheckIdleState>
 800a602:	4603      	mov	r3, r0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3708      	adds	r7, #8
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b08a      	sub	sp, #40	; 0x28
 800a610:	af02      	add	r7, sp, #8
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	603b      	str	r3, [r7, #0]
 800a618:	4613      	mov	r3, r2
 800a61a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a622:	2b20      	cmp	r3, #32
 800a624:	f040 8083 	bne.w	800a72e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d002      	beq.n	800a634 <HAL_UART_Transmit+0x28>
 800a62e:	88fb      	ldrh	r3, [r7, #6]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d101      	bne.n	800a638 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	e07b      	b.n	800a730 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d101      	bne.n	800a646 <HAL_UART_Transmit+0x3a>
 800a642:	2302      	movs	r3, #2
 800a644:	e074      	b.n	800a730 <HAL_UART_Transmit+0x124>
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2201      	movs	r2, #1
 800a64a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2200      	movs	r2, #0
 800a652:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2221      	movs	r2, #33	; 0x21
 800a65a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a65e:	f7fc fdf7 	bl	8007250 <HAL_GetTick>
 800a662:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	88fa      	ldrh	r2, [r7, #6]
 800a668:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	88fa      	ldrh	r2, [r7, #6]
 800a670:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a67c:	d108      	bne.n	800a690 <HAL_UART_Transmit+0x84>
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d104      	bne.n	800a690 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a686:	2300      	movs	r3, #0
 800a688:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	61bb      	str	r3, [r7, #24]
 800a68e:	e003      	b.n	800a698 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a694:	2300      	movs	r3, #0
 800a696:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a6a0:	e02c      	b.n	800a6fc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	9300      	str	r3, [sp, #0]
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	2180      	movs	r1, #128	; 0x80
 800a6ac:	68f8      	ldr	r0, [r7, #12]
 800a6ae:	f001 f800 	bl	800b6b2 <UART_WaitOnFlagUntilTimeout>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d001      	beq.n	800a6bc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	e039      	b.n	800a730 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d10b      	bne.n	800a6da <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a6c2:	69bb      	ldr	r3, [r7, #24]
 800a6c4:	881b      	ldrh	r3, [r3, #0]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a6d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	3302      	adds	r3, #2
 800a6d6:	61bb      	str	r3, [r7, #24]
 800a6d8:	e007      	b.n	800a6ea <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a6da:	69fb      	ldr	r3, [r7, #28]
 800a6dc:	781a      	ldrb	r2, [r3, #0]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	3b01      	subs	r3, #1
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a702:	b29b      	uxth	r3, r3
 800a704:	2b00      	cmp	r3, #0
 800a706:	d1cc      	bne.n	800a6a2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	9300      	str	r3, [sp, #0]
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	2200      	movs	r2, #0
 800a710:	2140      	movs	r1, #64	; 0x40
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f000 ffcd 	bl	800b6b2 <UART_WaitOnFlagUntilTimeout>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d001      	beq.n	800a722 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a71e:	2303      	movs	r3, #3
 800a720:	e006      	b.n	800a730 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2220      	movs	r2, #32
 800a726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a72a:	2300      	movs	r3, #0
 800a72c:	e000      	b.n	800a730 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a72e:	2302      	movs	r3, #2
  }
}
 800a730:	4618      	mov	r0, r3
 800a732:	3720      	adds	r7, #32
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b08a      	sub	sp, #40	; 0x28
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	4613      	mov	r3, r2
 800a744:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a74c:	2b20      	cmp	r3, #32
 800a74e:	d142      	bne.n	800a7d6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d002      	beq.n	800a75c <HAL_UART_Receive_IT+0x24>
 800a756:	88fb      	ldrh	r3, [r7, #6]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d101      	bne.n	800a760 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a75c:	2301      	movs	r3, #1
 800a75e:	e03b      	b.n	800a7d8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a766:	2b01      	cmp	r3, #1
 800a768:	d101      	bne.n	800a76e <HAL_UART_Receive_IT+0x36>
 800a76a:	2302      	movs	r3, #2
 800a76c:	e034      	b.n	800a7d8 <HAL_UART_Receive_IT+0xa0>
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2201      	movs	r2, #1
 800a772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2200      	movs	r2, #0
 800a77a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a17      	ldr	r2, [pc, #92]	; (800a7e0 <HAL_UART_Receive_IT+0xa8>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d01f      	beq.n	800a7c6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a790:	2b00      	cmp	r3, #0
 800a792:	d018      	beq.n	800a7c6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	e853 3f00 	ldrex	r3, [r3]
 800a7a0:	613b      	str	r3, [r7, #16]
   return(result);
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a7a8:	627b      	str	r3, [r7, #36]	; 0x24
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b2:	623b      	str	r3, [r7, #32]
 800a7b4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b6:	69f9      	ldr	r1, [r7, #28]
 800a7b8:	6a3a      	ldr	r2, [r7, #32]
 800a7ba:	e841 2300 	strex	r3, r2, [r1]
 800a7be:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d1e6      	bne.n	800a794 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a7c6:	88fb      	ldrh	r3, [r7, #6]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	68b9      	ldr	r1, [r7, #8]
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f001 f839 	bl	800b844 <UART_Start_Receive_IT>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	e000      	b.n	800a7d8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a7d6:	2302      	movs	r3, #2
  }
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3728      	adds	r7, #40	; 0x28
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	40008000 	.word	0x40008000

0800a7e4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b08a      	sub	sp, #40	; 0x28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7f8:	2b20      	cmp	r3, #32
 800a7fa:	d17a      	bne.n	800a8f2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d002      	beq.n	800a808 <HAL_UART_Transmit_DMA+0x24>
 800a802:	88fb      	ldrh	r3, [r7, #6]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d101      	bne.n	800a80c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	e073      	b.n	800a8f4 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a812:	2b01      	cmp	r3, #1
 800a814:	d101      	bne.n	800a81a <HAL_UART_Transmit_DMA+0x36>
 800a816:	2302      	movs	r3, #2
 800a818:	e06c      	b.n	800a8f4 <HAL_UART_Transmit_DMA+0x110>
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2201      	movs	r2, #1
 800a81e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	68ba      	ldr	r2, [r7, #8]
 800a826:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	88fa      	ldrh	r2, [r7, #6]
 800a82c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	88fa      	ldrh	r2, [r7, #6]
 800a834:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2221      	movs	r2, #33	; 0x21
 800a844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d02c      	beq.n	800a8aa <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a854:	4a29      	ldr	r2, [pc, #164]	; (800a8fc <HAL_UART_Transmit_DMA+0x118>)
 800a856:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a85c:	4a28      	ldr	r2, [pc, #160]	; (800a900 <HAL_UART_Transmit_DMA+0x11c>)
 800a85e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a864:	4a27      	ldr	r2, [pc, #156]	; (800a904 <HAL_UART_Transmit_DMA+0x120>)
 800a866:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a86c:	2200      	movs	r2, #0
 800a86e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a878:	4619      	mov	r1, r3
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	3328      	adds	r3, #40	; 0x28
 800a880:	461a      	mov	r2, r3
 800a882:	88fb      	ldrh	r3, [r7, #6]
 800a884:	f7fc fe9a 	bl	80075bc <HAL_DMA_Start_IT>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00d      	beq.n	800a8aa <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2210      	movs	r2, #16
 800a892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2200      	movs	r2, #0
 800a89a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2220      	movs	r2, #32
 800a8a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e024      	b.n	800a8f4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2240      	movs	r2, #64	; 0x40
 800a8b0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	3308      	adds	r3, #8
 800a8c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	e853 3f00 	ldrex	r3, [r3]
 800a8c8:	613b      	str	r3, [r7, #16]
   return(result);
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8d0:	627b      	str	r3, [r7, #36]	; 0x24
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	3308      	adds	r3, #8
 800a8d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8da:	623a      	str	r2, [r7, #32]
 800a8dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8de:	69f9      	ldr	r1, [r7, #28]
 800a8e0:	6a3a      	ldr	r2, [r7, #32]
 800a8e2:	e841 2300 	strex	r3, r2, [r1]
 800a8e6:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d1e5      	bne.n	800a8ba <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	e000      	b.n	800a8f4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800a8f2:	2302      	movs	r3, #2
  }
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3728      	adds	r7, #40	; 0x28
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	0800bbe7 	.word	0x0800bbe7
 800a900:	0800bc81 	.word	0x0800bc81
 800a904:	0800bc9d 	.word	0x0800bc9d

0800a908 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b0ba      	sub	sp, #232	; 0xe8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	69db      	ldr	r3, [r3, #28]
 800a916:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a92e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a932:	f640 030f 	movw	r3, #2063	; 0x80f
 800a936:	4013      	ands	r3, r2
 800a938:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a93c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a940:	2b00      	cmp	r3, #0
 800a942:	d11b      	bne.n	800a97c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a948:	f003 0320 	and.w	r3, r3, #32
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d015      	beq.n	800a97c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a954:	f003 0320 	and.w	r3, r3, #32
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d105      	bne.n	800a968 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a95c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a964:	2b00      	cmp	r3, #0
 800a966:	d009      	beq.n	800a97c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f000 82d6 	beq.w	800af1e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	4798      	blx	r3
      }
      return;
 800a97a:	e2d0      	b.n	800af1e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a97c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a980:	2b00      	cmp	r3, #0
 800a982:	f000 811f 	beq.w	800abc4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a986:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a98a:	4b8b      	ldr	r3, [pc, #556]	; (800abb8 <HAL_UART_IRQHandler+0x2b0>)
 800a98c:	4013      	ands	r3, r2
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d106      	bne.n	800a9a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a992:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a996:	4b89      	ldr	r3, [pc, #548]	; (800abbc <HAL_UART_IRQHandler+0x2b4>)
 800a998:	4013      	ands	r3, r2
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f000 8112 	beq.w	800abc4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a9a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9a4:	f003 0301 	and.w	r3, r3, #1
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d011      	beq.n	800a9d0 <HAL_UART_IRQHandler+0xc8>
 800a9ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d00b      	beq.n	800a9d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9c6:	f043 0201 	orr.w	r2, r3, #1
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9d4:	f003 0302 	and.w	r3, r3, #2
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d011      	beq.n	800aa00 <HAL_UART_IRQHandler+0xf8>
 800a9dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9e0:	f003 0301 	and.w	r3, r3, #1
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00b      	beq.n	800aa00 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2202      	movs	r2, #2
 800a9ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9f6:	f043 0204 	orr.w	r2, r3, #4
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa04:	f003 0304 	and.w	r3, r3, #4
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d011      	beq.n	800aa30 <HAL_UART_IRQHandler+0x128>
 800aa0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa10:	f003 0301 	and.w	r3, r3, #1
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00b      	beq.n	800aa30 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2204      	movs	r2, #4
 800aa1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa26:	f043 0202 	orr.w	r2, r3, #2
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aa30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa34:	f003 0308 	and.w	r3, r3, #8
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d017      	beq.n	800aa6c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aa3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa40:	f003 0320 	and.w	r3, r3, #32
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d105      	bne.n	800aa54 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800aa48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800aa4c:	4b5a      	ldr	r3, [pc, #360]	; (800abb8 <HAL_UART_IRQHandler+0x2b0>)
 800aa4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00b      	beq.n	800aa6c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2208      	movs	r2, #8
 800aa5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa62:	f043 0208 	orr.w	r2, r3, #8
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aa6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d012      	beq.n	800aa9e <HAL_UART_IRQHandler+0x196>
 800aa78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d00c      	beq.n	800aa9e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa94:	f043 0220 	orr.w	r2, r3, #32
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f000 823c 	beq.w	800af22 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aaaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaae:	f003 0320 	and.w	r3, r3, #32
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d013      	beq.n	800aade <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaba:	f003 0320 	and.w	r3, r3, #32
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d105      	bne.n	800aace <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d007      	beq.n	800aade <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d003      	beq.n	800aade <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aae4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaf2:	2b40      	cmp	r3, #64	; 0x40
 800aaf4:	d005      	beq.n	800ab02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aaf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aafa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d04f      	beq.n	800aba2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f001 f809 	bl	800bb1a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab12:	2b40      	cmp	r3, #64	; 0x40
 800ab14:	d141      	bne.n	800ab9a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	3308      	adds	r3, #8
 800ab1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab24:	e853 3f00 	ldrex	r3, [r3]
 800ab28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ab2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	3308      	adds	r3, #8
 800ab3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ab42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ab46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ab4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ab52:	e841 2300 	strex	r3, r2, [r1]
 800ab56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ab5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d1d9      	bne.n	800ab16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d013      	beq.n	800ab92 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab6e:	4a14      	ldr	r2, [pc, #80]	; (800abc0 <HAL_UART_IRQHandler+0x2b8>)
 800ab70:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7fc fdf4 	bl	8007764 <HAL_DMA_Abort_IT>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d017      	beq.n	800abb2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ab8c:	4610      	mov	r0, r2
 800ab8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab90:	e00f      	b.n	800abb2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f9ee 	bl	800af74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab98:	e00b      	b.n	800abb2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 f9ea 	bl	800af74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aba0:	e007      	b.n	800abb2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 f9e6 	bl	800af74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800abb0:	e1b7      	b.n	800af22 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abb2:	bf00      	nop
    return;
 800abb4:	e1b5      	b.n	800af22 <HAL_UART_IRQHandler+0x61a>
 800abb6:	bf00      	nop
 800abb8:	10000001 	.word	0x10000001
 800abbc:	04000120 	.word	0x04000120
 800abc0:	0800bd1d 	.word	0x0800bd1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abc8:	2b01      	cmp	r3, #1
 800abca:	f040 814a 	bne.w	800ae62 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800abce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abd2:	f003 0310 	and.w	r3, r3, #16
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f000 8143 	beq.w	800ae62 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800abdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abe0:	f003 0310 	and.w	r3, r3, #16
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f000 813c 	beq.w	800ae62 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	2210      	movs	r2, #16
 800abf0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abfc:	2b40      	cmp	r3, #64	; 0x40
 800abfe:	f040 80b5 	bne.w	800ad6c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ac0e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f000 8187 	beq.w	800af26 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ac1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac22:	429a      	cmp	r2, r3
 800ac24:	f080 817f 	bcs.w	800af26 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f003 0320 	and.w	r3, r3, #32
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	f040 8086 	bne.w	800ad50 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac50:	e853 3f00 	ldrex	r3, [r3]
 800ac54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ac58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	461a      	mov	r2, r3
 800ac6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ac6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ac72:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ac7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ac7e:	e841 2300 	strex	r3, r2, [r1]
 800ac82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ac86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1da      	bne.n	800ac44 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	3308      	adds	r3, #8
 800ac94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac98:	e853 3f00 	ldrex	r3, [r3]
 800ac9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ac9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aca0:	f023 0301 	bic.w	r3, r3, #1
 800aca4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	3308      	adds	r3, #8
 800acae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800acb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800acb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800acba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800acbe:	e841 2300 	strex	r3, r2, [r1]
 800acc2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800acc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d1e1      	bne.n	800ac8e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	3308      	adds	r3, #8
 800acd0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800acd4:	e853 3f00 	ldrex	r3, [r3]
 800acd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800acda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800acdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ace0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	3308      	adds	r3, #8
 800acea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800acee:	66fa      	str	r2, [r7, #108]	; 0x6c
 800acf0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800acf4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800acf6:	e841 2300 	strex	r3, r2, [r1]
 800acfa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800acfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d1e3      	bne.n	800acca <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2220      	movs	r2, #32
 800ad06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad18:	e853 3f00 	ldrex	r3, [r3]
 800ad1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ad1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad20:	f023 0310 	bic.w	r3, r3, #16
 800ad24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad32:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad34:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad3a:	e841 2300 	strex	r3, r2, [r1]
 800ad3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ad40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1e4      	bne.n	800ad10 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7fc fcb1 	bl	80076b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	1ad3      	subs	r3, r2, r3
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	4619      	mov	r1, r3
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 f90f 	bl	800af88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ad6a:	e0dc      	b.n	800af26 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f000 80ce 	beq.w	800af2a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800ad8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f000 80c9 	beq.w	800af2a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada0:	e853 3f00 	ldrex	r3, [r3]
 800ada4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ada6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800adac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	461a      	mov	r2, r3
 800adb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adba:	647b      	str	r3, [r7, #68]	; 0x44
 800adbc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800adc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800adc2:	e841 2300 	strex	r3, r2, [r1]
 800adc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800adc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d1e4      	bne.n	800ad98 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	3308      	adds	r3, #8
 800add4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add8:	e853 3f00 	ldrex	r3, [r3]
 800addc:	623b      	str	r3, [r7, #32]
   return(result);
 800adde:	6a3b      	ldr	r3, [r7, #32]
 800ade0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ade4:	f023 0301 	bic.w	r3, r3, #1
 800ade8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	3308      	adds	r3, #8
 800adf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800adf6:	633a      	str	r2, [r7, #48]	; 0x30
 800adf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800adfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adfe:	e841 2300 	strex	r3, r2, [r1]
 800ae02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1e1      	bne.n	800adce <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2220      	movs	r2, #32
 800ae0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	e853 3f00 	ldrex	r3, [r3]
 800ae2a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f023 0310 	bic.w	r3, r3, #16
 800ae32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ae40:	61fb      	str	r3, [r7, #28]
 800ae42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae44:	69b9      	ldr	r1, [r7, #24]
 800ae46:	69fa      	ldr	r2, [r7, #28]
 800ae48:	e841 2300 	strex	r3, r2, [r1]
 800ae4c:	617b      	str	r3, [r7, #20]
   return(result);
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1e4      	bne.n	800ae1e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ae54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ae58:	4619      	mov	r1, r3
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 f894 	bl	800af88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae60:	e063      	b.n	800af2a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ae62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00e      	beq.n	800ae8c <HAL_UART_IRQHandler+0x584>
 800ae6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d008      	beq.n	800ae8c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ae82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f001 fbe7 	bl	800c658 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae8a:	e051      	b.n	800af30 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ae8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d014      	beq.n	800aec2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ae98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d105      	bne.n	800aeb0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aea8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d008      	beq.n	800aec2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d03a      	beq.n	800af2e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	4798      	blx	r3
    }
    return;
 800aec0:	e035      	b.n	800af2e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d009      	beq.n	800aee2 <HAL_UART_IRQHandler+0x5da>
 800aece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d003      	beq.n	800aee2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 ff34 	bl	800bd48 <UART_EndTransmit_IT>
    return;
 800aee0:	e026      	b.n	800af30 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800aee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d009      	beq.n	800af02 <HAL_UART_IRQHandler+0x5fa>
 800aeee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aef2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d003      	beq.n	800af02 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f001 fbc0 	bl	800c680 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af00:	e016      	b.n	800af30 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800af02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d010      	beq.n	800af30 <HAL_UART_IRQHandler+0x628>
 800af0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af12:	2b00      	cmp	r3, #0
 800af14:	da0c      	bge.n	800af30 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f001 fba8 	bl	800c66c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af1c:	e008      	b.n	800af30 <HAL_UART_IRQHandler+0x628>
      return;
 800af1e:	bf00      	nop
 800af20:	e006      	b.n	800af30 <HAL_UART_IRQHandler+0x628>
    return;
 800af22:	bf00      	nop
 800af24:	e004      	b.n	800af30 <HAL_UART_IRQHandler+0x628>
      return;
 800af26:	bf00      	nop
 800af28:	e002      	b.n	800af30 <HAL_UART_IRQHandler+0x628>
      return;
 800af2a:	bf00      	nop
 800af2c:	e000      	b.n	800af30 <HAL_UART_IRQHandler+0x628>
    return;
 800af2e:	bf00      	nop
  }
}
 800af30:	37e8      	adds	r7, #232	; 0xe8
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop

0800af38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800af38:	b480      	push	{r7}
 800af3a:	b083      	sub	sp, #12
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800af40:	bf00      	nop
 800af42:	370c      	adds	r7, #12
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800af68:	bf00      	nop
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800af7c:	bf00      	nop
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	460b      	mov	r3, r1
 800af92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800afa0:	b5b0      	push	{r4, r5, r7, lr}
 800afa2:	b088      	sub	sp, #32
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800afa8:	2300      	movs	r3, #0
 800afaa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	689a      	ldr	r2, [r3, #8]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	431a      	orrs	r2, r3
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	695b      	ldr	r3, [r3, #20]
 800afba:	431a      	orrs	r2, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	69db      	ldr	r3, [r3, #28]
 800afc0:	4313      	orrs	r3, r2
 800afc2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	4baf      	ldr	r3, [pc, #700]	; (800b288 <UART_SetConfig+0x2e8>)
 800afcc:	4013      	ands	r3, r2
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	6812      	ldr	r2, [r2, #0]
 800afd2:	69f9      	ldr	r1, [r7, #28]
 800afd4:	430b      	orrs	r3, r1
 800afd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	68da      	ldr	r2, [r3, #12]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	430a      	orrs	r2, r1
 800afec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	699b      	ldr	r3, [r3, #24]
 800aff2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4aa4      	ldr	r2, [pc, #656]	; (800b28c <UART_SetConfig+0x2ec>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d004      	beq.n	800b008 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6a1b      	ldr	r3, [r3, #32]
 800b002:	69fa      	ldr	r2, [r7, #28]
 800b004:	4313      	orrs	r3, r2
 800b006:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b012:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	6812      	ldr	r2, [r2, #0]
 800b01a:	69f9      	ldr	r1, [r7, #28]
 800b01c:	430b      	orrs	r3, r1
 800b01e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b026:	f023 010f 	bic.w	r1, r3, #15
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	430a      	orrs	r2, r1
 800b034:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a95      	ldr	r2, [pc, #596]	; (800b290 <UART_SetConfig+0x2f0>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d120      	bne.n	800b082 <UART_SetConfig+0xe2>
 800b040:	4b94      	ldr	r3, [pc, #592]	; (800b294 <UART_SetConfig+0x2f4>)
 800b042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b046:	f003 0303 	and.w	r3, r3, #3
 800b04a:	2b03      	cmp	r3, #3
 800b04c:	d816      	bhi.n	800b07c <UART_SetConfig+0xdc>
 800b04e:	a201      	add	r2, pc, #4	; (adr r2, 800b054 <UART_SetConfig+0xb4>)
 800b050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b054:	0800b065 	.word	0x0800b065
 800b058:	0800b071 	.word	0x0800b071
 800b05c:	0800b06b 	.word	0x0800b06b
 800b060:	0800b077 	.word	0x0800b077
 800b064:	2301      	movs	r3, #1
 800b066:	76fb      	strb	r3, [r7, #27]
 800b068:	e0bc      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b06a:	2302      	movs	r3, #2
 800b06c:	76fb      	strb	r3, [r7, #27]
 800b06e:	e0b9      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b070:	2304      	movs	r3, #4
 800b072:	76fb      	strb	r3, [r7, #27]
 800b074:	e0b6      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b076:	2308      	movs	r3, #8
 800b078:	76fb      	strb	r3, [r7, #27]
 800b07a:	e0b3      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b07c:	2310      	movs	r3, #16
 800b07e:	76fb      	strb	r3, [r7, #27]
 800b080:	e0b0      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4a84      	ldr	r2, [pc, #528]	; (800b298 <UART_SetConfig+0x2f8>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d132      	bne.n	800b0f2 <UART_SetConfig+0x152>
 800b08c:	4b81      	ldr	r3, [pc, #516]	; (800b294 <UART_SetConfig+0x2f4>)
 800b08e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b092:	f003 030c 	and.w	r3, r3, #12
 800b096:	2b0c      	cmp	r3, #12
 800b098:	d828      	bhi.n	800b0ec <UART_SetConfig+0x14c>
 800b09a:	a201      	add	r2, pc, #4	; (adr r2, 800b0a0 <UART_SetConfig+0x100>)
 800b09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a0:	0800b0d5 	.word	0x0800b0d5
 800b0a4:	0800b0ed 	.word	0x0800b0ed
 800b0a8:	0800b0ed 	.word	0x0800b0ed
 800b0ac:	0800b0ed 	.word	0x0800b0ed
 800b0b0:	0800b0e1 	.word	0x0800b0e1
 800b0b4:	0800b0ed 	.word	0x0800b0ed
 800b0b8:	0800b0ed 	.word	0x0800b0ed
 800b0bc:	0800b0ed 	.word	0x0800b0ed
 800b0c0:	0800b0db 	.word	0x0800b0db
 800b0c4:	0800b0ed 	.word	0x0800b0ed
 800b0c8:	0800b0ed 	.word	0x0800b0ed
 800b0cc:	0800b0ed 	.word	0x0800b0ed
 800b0d0:	0800b0e7 	.word	0x0800b0e7
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	76fb      	strb	r3, [r7, #27]
 800b0d8:	e084      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b0da:	2302      	movs	r3, #2
 800b0dc:	76fb      	strb	r3, [r7, #27]
 800b0de:	e081      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b0e0:	2304      	movs	r3, #4
 800b0e2:	76fb      	strb	r3, [r7, #27]
 800b0e4:	e07e      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b0e6:	2308      	movs	r3, #8
 800b0e8:	76fb      	strb	r3, [r7, #27]
 800b0ea:	e07b      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b0ec:	2310      	movs	r3, #16
 800b0ee:	76fb      	strb	r3, [r7, #27]
 800b0f0:	e078      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a69      	ldr	r2, [pc, #420]	; (800b29c <UART_SetConfig+0x2fc>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d120      	bne.n	800b13e <UART_SetConfig+0x19e>
 800b0fc:	4b65      	ldr	r3, [pc, #404]	; (800b294 <UART_SetConfig+0x2f4>)
 800b0fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b102:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b106:	2b30      	cmp	r3, #48	; 0x30
 800b108:	d013      	beq.n	800b132 <UART_SetConfig+0x192>
 800b10a:	2b30      	cmp	r3, #48	; 0x30
 800b10c:	d814      	bhi.n	800b138 <UART_SetConfig+0x198>
 800b10e:	2b20      	cmp	r3, #32
 800b110:	d009      	beq.n	800b126 <UART_SetConfig+0x186>
 800b112:	2b20      	cmp	r3, #32
 800b114:	d810      	bhi.n	800b138 <UART_SetConfig+0x198>
 800b116:	2b00      	cmp	r3, #0
 800b118:	d002      	beq.n	800b120 <UART_SetConfig+0x180>
 800b11a:	2b10      	cmp	r3, #16
 800b11c:	d006      	beq.n	800b12c <UART_SetConfig+0x18c>
 800b11e:	e00b      	b.n	800b138 <UART_SetConfig+0x198>
 800b120:	2300      	movs	r3, #0
 800b122:	76fb      	strb	r3, [r7, #27]
 800b124:	e05e      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b126:	2302      	movs	r3, #2
 800b128:	76fb      	strb	r3, [r7, #27]
 800b12a:	e05b      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b12c:	2304      	movs	r3, #4
 800b12e:	76fb      	strb	r3, [r7, #27]
 800b130:	e058      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b132:	2308      	movs	r3, #8
 800b134:	76fb      	strb	r3, [r7, #27]
 800b136:	e055      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b138:	2310      	movs	r3, #16
 800b13a:	76fb      	strb	r3, [r7, #27]
 800b13c:	e052      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4a57      	ldr	r2, [pc, #348]	; (800b2a0 <UART_SetConfig+0x300>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d120      	bne.n	800b18a <UART_SetConfig+0x1ea>
 800b148:	4b52      	ldr	r3, [pc, #328]	; (800b294 <UART_SetConfig+0x2f4>)
 800b14a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b14e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b152:	2bc0      	cmp	r3, #192	; 0xc0
 800b154:	d013      	beq.n	800b17e <UART_SetConfig+0x1de>
 800b156:	2bc0      	cmp	r3, #192	; 0xc0
 800b158:	d814      	bhi.n	800b184 <UART_SetConfig+0x1e4>
 800b15a:	2b80      	cmp	r3, #128	; 0x80
 800b15c:	d009      	beq.n	800b172 <UART_SetConfig+0x1d2>
 800b15e:	2b80      	cmp	r3, #128	; 0x80
 800b160:	d810      	bhi.n	800b184 <UART_SetConfig+0x1e4>
 800b162:	2b00      	cmp	r3, #0
 800b164:	d002      	beq.n	800b16c <UART_SetConfig+0x1cc>
 800b166:	2b40      	cmp	r3, #64	; 0x40
 800b168:	d006      	beq.n	800b178 <UART_SetConfig+0x1d8>
 800b16a:	e00b      	b.n	800b184 <UART_SetConfig+0x1e4>
 800b16c:	2300      	movs	r3, #0
 800b16e:	76fb      	strb	r3, [r7, #27]
 800b170:	e038      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b172:	2302      	movs	r3, #2
 800b174:	76fb      	strb	r3, [r7, #27]
 800b176:	e035      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b178:	2304      	movs	r3, #4
 800b17a:	76fb      	strb	r3, [r7, #27]
 800b17c:	e032      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b17e:	2308      	movs	r3, #8
 800b180:	76fb      	strb	r3, [r7, #27]
 800b182:	e02f      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b184:	2310      	movs	r3, #16
 800b186:	76fb      	strb	r3, [r7, #27]
 800b188:	e02c      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4a3f      	ldr	r2, [pc, #252]	; (800b28c <UART_SetConfig+0x2ec>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d125      	bne.n	800b1e0 <UART_SetConfig+0x240>
 800b194:	4b3f      	ldr	r3, [pc, #252]	; (800b294 <UART_SetConfig+0x2f4>)
 800b196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b19a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b19e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b1a2:	d017      	beq.n	800b1d4 <UART_SetConfig+0x234>
 800b1a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b1a8:	d817      	bhi.n	800b1da <UART_SetConfig+0x23a>
 800b1aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1ae:	d00b      	beq.n	800b1c8 <UART_SetConfig+0x228>
 800b1b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1b4:	d811      	bhi.n	800b1da <UART_SetConfig+0x23a>
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d003      	beq.n	800b1c2 <UART_SetConfig+0x222>
 800b1ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1be:	d006      	beq.n	800b1ce <UART_SetConfig+0x22e>
 800b1c0:	e00b      	b.n	800b1da <UART_SetConfig+0x23a>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	76fb      	strb	r3, [r7, #27]
 800b1c6:	e00d      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b1c8:	2302      	movs	r3, #2
 800b1ca:	76fb      	strb	r3, [r7, #27]
 800b1cc:	e00a      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b1ce:	2304      	movs	r3, #4
 800b1d0:	76fb      	strb	r3, [r7, #27]
 800b1d2:	e007      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b1d4:	2308      	movs	r3, #8
 800b1d6:	76fb      	strb	r3, [r7, #27]
 800b1d8:	e004      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b1da:	2310      	movs	r3, #16
 800b1dc:	76fb      	strb	r3, [r7, #27]
 800b1de:	e001      	b.n	800b1e4 <UART_SetConfig+0x244>
 800b1e0:	2310      	movs	r3, #16
 800b1e2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a28      	ldr	r2, [pc, #160]	; (800b28c <UART_SetConfig+0x2ec>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	f040 809e 	bne.w	800b32c <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b1f0:	7efb      	ldrb	r3, [r7, #27]
 800b1f2:	2b08      	cmp	r3, #8
 800b1f4:	d823      	bhi.n	800b23e <UART_SetConfig+0x29e>
 800b1f6:	a201      	add	r2, pc, #4	; (adr r2, 800b1fc <UART_SetConfig+0x25c>)
 800b1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1fc:	0800b221 	.word	0x0800b221
 800b200:	0800b23f 	.word	0x0800b23f
 800b204:	0800b229 	.word	0x0800b229
 800b208:	0800b23f 	.word	0x0800b23f
 800b20c:	0800b22f 	.word	0x0800b22f
 800b210:	0800b23f 	.word	0x0800b23f
 800b214:	0800b23f 	.word	0x0800b23f
 800b218:	0800b23f 	.word	0x0800b23f
 800b21c:	0800b237 	.word	0x0800b237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b220:	f7fe fbc6 	bl	80099b0 <HAL_RCC_GetPCLK1Freq>
 800b224:	6178      	str	r0, [r7, #20]
        break;
 800b226:	e00f      	b.n	800b248 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b228:	4b1e      	ldr	r3, [pc, #120]	; (800b2a4 <UART_SetConfig+0x304>)
 800b22a:	617b      	str	r3, [r7, #20]
        break;
 800b22c:	e00c      	b.n	800b248 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b22e:	f7fe fb51 	bl	80098d4 <HAL_RCC_GetSysClockFreq>
 800b232:	6178      	str	r0, [r7, #20]
        break;
 800b234:	e008      	b.n	800b248 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b23a:	617b      	str	r3, [r7, #20]
        break;
 800b23c:	e004      	b.n	800b248 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 800b23e:	2300      	movs	r3, #0
 800b240:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800b242:	2301      	movs	r3, #1
 800b244:	76bb      	strb	r3, [r7, #26]
        break;
 800b246:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f000 812c 	beq.w	800b4a8 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b254:	4a14      	ldr	r2, [pc, #80]	; (800b2a8 <UART_SetConfig+0x308>)
 800b256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b25a:	461a      	mov	r2, r3
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b262:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	685a      	ldr	r2, [r3, #4]
 800b268:	4613      	mov	r3, r2
 800b26a:	005b      	lsls	r3, r3, #1
 800b26c:	4413      	add	r3, r2
 800b26e:	68ba      	ldr	r2, [r7, #8]
 800b270:	429a      	cmp	r2, r3
 800b272:	d305      	bcc.n	800b280 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b27a:	68ba      	ldr	r2, [r7, #8]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d915      	bls.n	800b2ac <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 800b280:	2301      	movs	r3, #1
 800b282:	76bb      	strb	r3, [r7, #26]
 800b284:	e110      	b.n	800b4a8 <UART_SetConfig+0x508>
 800b286:	bf00      	nop
 800b288:	cfff69f3 	.word	0xcfff69f3
 800b28c:	40008000 	.word	0x40008000
 800b290:	40013800 	.word	0x40013800
 800b294:	40021000 	.word	0x40021000
 800b298:	40004400 	.word	0x40004400
 800b29c:	40004800 	.word	0x40004800
 800b2a0:	40004c00 	.word	0x40004c00
 800b2a4:	00f42400 	.word	0x00f42400
 800b2a8:	08015758 	.word	0x08015758
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f04f 0100 	mov.w	r1, #0
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b8:	4a85      	ldr	r2, [pc, #532]	; (800b4d0 <UART_SetConfig+0x530>)
 800b2ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	f04f 0300 	mov.w	r3, #0
 800b2c4:	f7f5 fd08 	bl	8000cd8 <__aeabi_uldivmod>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	4610      	mov	r0, r2
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	f04f 0200 	mov.w	r2, #0
 800b2d4:	f04f 0300 	mov.w	r3, #0
 800b2d8:	020b      	lsls	r3, r1, #8
 800b2da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b2de:	0202      	lsls	r2, r0, #8
 800b2e0:	6879      	ldr	r1, [r7, #4]
 800b2e2:	6849      	ldr	r1, [r1, #4]
 800b2e4:	0849      	lsrs	r1, r1, #1
 800b2e6:	4608      	mov	r0, r1
 800b2e8:	f04f 0100 	mov.w	r1, #0
 800b2ec:	1814      	adds	r4, r2, r0
 800b2ee:	eb43 0501 	adc.w	r5, r3, r1
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	f04f 0300 	mov.w	r3, #0
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	4629      	mov	r1, r5
 800b300:	f7f5 fcea 	bl	8000cd8 <__aeabi_uldivmod>
 800b304:	4602      	mov	r2, r0
 800b306:	460b      	mov	r3, r1
 800b308:	4613      	mov	r3, r2
 800b30a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b312:	d308      	bcc.n	800b326 <UART_SetConfig+0x386>
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b31a:	d204      	bcs.n	800b326 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	693a      	ldr	r2, [r7, #16]
 800b322:	60da      	str	r2, [r3, #12]
 800b324:	e0c0      	b.n	800b4a8 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	76bb      	strb	r3, [r7, #26]
 800b32a:	e0bd      	b.n	800b4a8 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	69db      	ldr	r3, [r3, #28]
 800b330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b334:	d164      	bne.n	800b400 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800b336:	7efb      	ldrb	r3, [r7, #27]
 800b338:	2b08      	cmp	r3, #8
 800b33a:	d828      	bhi.n	800b38e <UART_SetConfig+0x3ee>
 800b33c:	a201      	add	r2, pc, #4	; (adr r2, 800b344 <UART_SetConfig+0x3a4>)
 800b33e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b342:	bf00      	nop
 800b344:	0800b369 	.word	0x0800b369
 800b348:	0800b371 	.word	0x0800b371
 800b34c:	0800b379 	.word	0x0800b379
 800b350:	0800b38f 	.word	0x0800b38f
 800b354:	0800b37f 	.word	0x0800b37f
 800b358:	0800b38f 	.word	0x0800b38f
 800b35c:	0800b38f 	.word	0x0800b38f
 800b360:	0800b38f 	.word	0x0800b38f
 800b364:	0800b387 	.word	0x0800b387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b368:	f7fe fb22 	bl	80099b0 <HAL_RCC_GetPCLK1Freq>
 800b36c:	6178      	str	r0, [r7, #20]
        break;
 800b36e:	e013      	b.n	800b398 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b370:	f7fe fb34 	bl	80099dc <HAL_RCC_GetPCLK2Freq>
 800b374:	6178      	str	r0, [r7, #20]
        break;
 800b376:	e00f      	b.n	800b398 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b378:	4b56      	ldr	r3, [pc, #344]	; (800b4d4 <UART_SetConfig+0x534>)
 800b37a:	617b      	str	r3, [r7, #20]
        break;
 800b37c:	e00c      	b.n	800b398 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b37e:	f7fe faa9 	bl	80098d4 <HAL_RCC_GetSysClockFreq>
 800b382:	6178      	str	r0, [r7, #20]
        break;
 800b384:	e008      	b.n	800b398 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b38a:	617b      	str	r3, [r7, #20]
        break;
 800b38c:	e004      	b.n	800b398 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 800b38e:	2300      	movs	r3, #0
 800b390:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800b392:	2301      	movs	r3, #1
 800b394:	76bb      	strb	r3, [r7, #26]
        break;
 800b396:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	f000 8084 	beq.w	800b4a8 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a4:	4a4a      	ldr	r2, [pc, #296]	; (800b4d0 <UART_SetConfig+0x530>)
 800b3a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3b2:	005a      	lsls	r2, r3, #1
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	085b      	lsrs	r3, r3, #1
 800b3ba:	441a      	add	r2, r3
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	2b0f      	cmp	r3, #15
 800b3ca:	d916      	bls.n	800b3fa <UART_SetConfig+0x45a>
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3d2:	d212      	bcs.n	800b3fa <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	f023 030f 	bic.w	r3, r3, #15
 800b3dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	085b      	lsrs	r3, r3, #1
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	f003 0307 	and.w	r3, r3, #7
 800b3e8:	b29a      	uxth	r2, r3
 800b3ea:	89fb      	ldrh	r3, [r7, #14]
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	89fa      	ldrh	r2, [r7, #14]
 800b3f6:	60da      	str	r2, [r3, #12]
 800b3f8:	e056      	b.n	800b4a8 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	76bb      	strb	r3, [r7, #26]
 800b3fe:	e053      	b.n	800b4a8 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b400:	7efb      	ldrb	r3, [r7, #27]
 800b402:	2b08      	cmp	r3, #8
 800b404:	d827      	bhi.n	800b456 <UART_SetConfig+0x4b6>
 800b406:	a201      	add	r2, pc, #4	; (adr r2, 800b40c <UART_SetConfig+0x46c>)
 800b408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b40c:	0800b431 	.word	0x0800b431
 800b410:	0800b439 	.word	0x0800b439
 800b414:	0800b441 	.word	0x0800b441
 800b418:	0800b457 	.word	0x0800b457
 800b41c:	0800b447 	.word	0x0800b447
 800b420:	0800b457 	.word	0x0800b457
 800b424:	0800b457 	.word	0x0800b457
 800b428:	0800b457 	.word	0x0800b457
 800b42c:	0800b44f 	.word	0x0800b44f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b430:	f7fe fabe 	bl	80099b0 <HAL_RCC_GetPCLK1Freq>
 800b434:	6178      	str	r0, [r7, #20]
        break;
 800b436:	e013      	b.n	800b460 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b438:	f7fe fad0 	bl	80099dc <HAL_RCC_GetPCLK2Freq>
 800b43c:	6178      	str	r0, [r7, #20]
        break;
 800b43e:	e00f      	b.n	800b460 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b440:	4b24      	ldr	r3, [pc, #144]	; (800b4d4 <UART_SetConfig+0x534>)
 800b442:	617b      	str	r3, [r7, #20]
        break;
 800b444:	e00c      	b.n	800b460 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b446:	f7fe fa45 	bl	80098d4 <HAL_RCC_GetSysClockFreq>
 800b44a:	6178      	str	r0, [r7, #20]
        break;
 800b44c:	e008      	b.n	800b460 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b44e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b452:	617b      	str	r3, [r7, #20]
        break;
 800b454:	e004      	b.n	800b460 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800b456:	2300      	movs	r3, #0
 800b458:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	76bb      	strb	r3, [r7, #26]
        break;
 800b45e:	bf00      	nop
    }

    if (pclk != 0U)
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d020      	beq.n	800b4a8 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46a:	4a19      	ldr	r2, [pc, #100]	; (800b4d0 <UART_SetConfig+0x530>)
 800b46c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b470:	461a      	mov	r2, r3
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	fbb3 f2f2 	udiv	r2, r3, r2
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	685b      	ldr	r3, [r3, #4]
 800b47c:	085b      	lsrs	r3, r3, #1
 800b47e:	441a      	add	r2, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	fbb2 f3f3 	udiv	r3, r2, r3
 800b488:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	2b0f      	cmp	r3, #15
 800b48e:	d909      	bls.n	800b4a4 <UART_SetConfig+0x504>
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b496:	d205      	bcs.n	800b4a4 <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	b29a      	uxth	r2, r3
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	60da      	str	r2, [r3, #12]
 800b4a2:	e001      	b.n	800b4a8 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b4c4:	7ebb      	ldrb	r3, [r7, #26]
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3720      	adds	r7, #32
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bdb0      	pop	{r4, r5, r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	08015758 	.word	0x08015758
 800b4d4:	00f42400 	.word	0x00f42400

0800b4d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4e4:	f003 0301 	and.w	r3, r3, #1
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00a      	beq.n	800b502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	430a      	orrs	r2, r1
 800b500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b506:	f003 0302 	and.w	r3, r3, #2
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00a      	beq.n	800b524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	430a      	orrs	r2, r1
 800b522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b528:	f003 0304 	and.w	r3, r3, #4
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00a      	beq.n	800b546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	430a      	orrs	r2, r1
 800b544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b54a:	f003 0308 	and.w	r3, r3, #8
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00a      	beq.n	800b568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	430a      	orrs	r2, r1
 800b566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b56c:	f003 0310 	and.w	r3, r3, #16
 800b570:	2b00      	cmp	r3, #0
 800b572:	d00a      	beq.n	800b58a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	430a      	orrs	r2, r1
 800b588:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b58e:	f003 0320 	and.w	r3, r3, #32
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00a      	beq.n	800b5ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	430a      	orrs	r2, r1
 800b5aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d01a      	beq.n	800b5ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	430a      	orrs	r2, r1
 800b5cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5d6:	d10a      	bne.n	800b5ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	430a      	orrs	r2, r1
 800b5ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00a      	beq.n	800b610 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	430a      	orrs	r2, r1
 800b60e:	605a      	str	r2, [r3, #4]
  }
}
 800b610:	bf00      	nop
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b086      	sub	sp, #24
 800b620:	af02      	add	r7, sp, #8
 800b622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b62c:	f7fb fe10 	bl	8007250 <HAL_GetTick>
 800b630:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f003 0308 	and.w	r3, r3, #8
 800b63c:	2b08      	cmp	r3, #8
 800b63e:	d10e      	bne.n	800b65e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b640:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b644:	9300      	str	r3, [sp, #0]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2200      	movs	r2, #0
 800b64a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 f82f 	bl	800b6b2 <UART_WaitOnFlagUntilTimeout>
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	d001      	beq.n	800b65e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b65a:	2303      	movs	r3, #3
 800b65c:	e025      	b.n	800b6aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f003 0304 	and.w	r3, r3, #4
 800b668:	2b04      	cmp	r3, #4
 800b66a:	d10e      	bne.n	800b68a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b66c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2200      	movs	r2, #0
 800b676:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 f819 	bl	800b6b2 <UART_WaitOnFlagUntilTimeout>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d001      	beq.n	800b68a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b686:	2303      	movs	r3, #3
 800b688:	e00f      	b.n	800b6aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2220      	movs	r2, #32
 800b68e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2220      	movs	r2, #32
 800b696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b09c      	sub	sp, #112	; 0x70
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	60f8      	str	r0, [r7, #12]
 800b6ba:	60b9      	str	r1, [r7, #8]
 800b6bc:	603b      	str	r3, [r7, #0]
 800b6be:	4613      	mov	r3, r2
 800b6c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6c2:	e0a9      	b.n	800b818 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ca:	f000 80a5 	beq.w	800b818 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6ce:	f7fb fdbf 	bl	8007250 <HAL_GetTick>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	1ad3      	subs	r3, r2, r3
 800b6d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d302      	bcc.n	800b6e4 <UART_WaitOnFlagUntilTimeout+0x32>
 800b6de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d140      	bne.n	800b766 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6ec:	e853 3f00 	ldrex	r3, [r3]
 800b6f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b6f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b6f8:	667b      	str	r3, [r7, #100]	; 0x64
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	461a      	mov	r2, r3
 800b700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b702:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b704:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b706:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b708:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b70a:	e841 2300 	strex	r3, r2, [r1]
 800b70e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b712:	2b00      	cmp	r3, #0
 800b714:	d1e6      	bne.n	800b6e4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	3308      	adds	r3, #8
 800b71c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b720:	e853 3f00 	ldrex	r3, [r3]
 800b724:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b728:	f023 0301 	bic.w	r3, r3, #1
 800b72c:	663b      	str	r3, [r7, #96]	; 0x60
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	3308      	adds	r3, #8
 800b734:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b736:	64ba      	str	r2, [r7, #72]	; 0x48
 800b738:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b73c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b73e:	e841 2300 	strex	r3, r2, [r1]
 800b742:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b746:	2b00      	cmp	r3, #0
 800b748:	d1e5      	bne.n	800b716 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2220      	movs	r2, #32
 800b74e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2220      	movs	r2, #32
 800b756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b762:	2303      	movs	r3, #3
 800b764:	e069      	b.n	800b83a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f003 0304 	and.w	r3, r3, #4
 800b770:	2b00      	cmp	r3, #0
 800b772:	d051      	beq.n	800b818 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	69db      	ldr	r3, [r3, #28]
 800b77a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b77e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b782:	d149      	bne.n	800b818 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b78c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b796:	e853 3f00 	ldrex	r3, [r3]
 800b79a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b7a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7ac:	637b      	str	r3, [r7, #52]	; 0x34
 800b7ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7b4:	e841 2300 	strex	r3, r2, [r1]
 800b7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d1e6      	bne.n	800b78e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	3308      	adds	r3, #8
 800b7c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	e853 3f00 	ldrex	r3, [r3]
 800b7ce:	613b      	str	r3, [r7, #16]
   return(result);
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	f023 0301 	bic.w	r3, r3, #1
 800b7d6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	3308      	adds	r3, #8
 800b7de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b7e0:	623a      	str	r2, [r7, #32]
 800b7e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e4:	69f9      	ldr	r1, [r7, #28]
 800b7e6:	6a3a      	ldr	r2, [r7, #32]
 800b7e8:	e841 2300 	strex	r3, r2, [r1]
 800b7ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7ee:	69bb      	ldr	r3, [r7, #24]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1e5      	bne.n	800b7c0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2220      	movs	r2, #32
 800b7f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2220      	movs	r2, #32
 800b800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2220      	movs	r2, #32
 800b808:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2200      	movs	r2, #0
 800b810:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b814:	2303      	movs	r3, #3
 800b816:	e010      	b.n	800b83a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	69da      	ldr	r2, [r3, #28]
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	4013      	ands	r3, r2
 800b822:	68ba      	ldr	r2, [r7, #8]
 800b824:	429a      	cmp	r2, r3
 800b826:	bf0c      	ite	eq
 800b828:	2301      	moveq	r3, #1
 800b82a:	2300      	movne	r3, #0
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	461a      	mov	r2, r3
 800b830:	79fb      	ldrb	r3, [r7, #7]
 800b832:	429a      	cmp	r2, r3
 800b834:	f43f af46 	beq.w	800b6c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3770      	adds	r7, #112	; 0x70
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
	...

0800b844 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b844:	b480      	push	{r7}
 800b846:	b0a3      	sub	sp, #140	; 0x8c
 800b848:	af00      	add	r7, sp, #0
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	60b9      	str	r1, [r7, #8]
 800b84e:	4613      	mov	r3, r2
 800b850:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	68ba      	ldr	r2, [r7, #8]
 800b856:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	88fa      	ldrh	r2, [r7, #6]
 800b85c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	88fa      	ldrh	r2, [r7, #6]
 800b864:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2200      	movs	r2, #0
 800b86c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	689b      	ldr	r3, [r3, #8]
 800b872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b876:	d10e      	bne.n	800b896 <UART_Start_Receive_IT+0x52>
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	691b      	ldr	r3, [r3, #16]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d105      	bne.n	800b88c <UART_Start_Receive_IT+0x48>
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b886:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b88a:	e02d      	b.n	800b8e8 <UART_Start_Receive_IT+0xa4>
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	22ff      	movs	r2, #255	; 0xff
 800b890:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b894:	e028      	b.n	800b8e8 <UART_Start_Receive_IT+0xa4>
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d10d      	bne.n	800b8ba <UART_Start_Receive_IT+0x76>
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	691b      	ldr	r3, [r3, #16]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d104      	bne.n	800b8b0 <UART_Start_Receive_IT+0x6c>
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	22ff      	movs	r2, #255	; 0xff
 800b8aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b8ae:	e01b      	b.n	800b8e8 <UART_Start_Receive_IT+0xa4>
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	227f      	movs	r2, #127	; 0x7f
 800b8b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b8b8:	e016      	b.n	800b8e8 <UART_Start_Receive_IT+0xa4>
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8c2:	d10d      	bne.n	800b8e0 <UART_Start_Receive_IT+0x9c>
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	691b      	ldr	r3, [r3, #16]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d104      	bne.n	800b8d6 <UART_Start_Receive_IT+0x92>
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	227f      	movs	r2, #127	; 0x7f
 800b8d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b8d4:	e008      	b.n	800b8e8 <UART_Start_Receive_IT+0xa4>
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	223f      	movs	r2, #63	; 0x3f
 800b8da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b8de:	e003      	b.n	800b8e8 <UART_Start_Receive_IT+0xa4>
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2222      	movs	r2, #34	; 0x22
 800b8f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	3308      	adds	r3, #8
 800b8fe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b902:	e853 3f00 	ldrex	r3, [r3]
 800b906:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b908:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b90a:	f043 0301 	orr.w	r3, r3, #1
 800b90e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	3308      	adds	r3, #8
 800b918:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b91c:	673a      	str	r2, [r7, #112]	; 0x70
 800b91e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b920:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b922:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b924:	e841 2300 	strex	r3, r2, [r1]
 800b928:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b92a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1e3      	bne.n	800b8f8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b938:	d153      	bne.n	800b9e2 <UART_Start_Receive_IT+0x19e>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b940:	88fa      	ldrh	r2, [r7, #6]
 800b942:	429a      	cmp	r2, r3
 800b944:	d34d      	bcc.n	800b9e2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b94e:	d107      	bne.n	800b960 <UART_Start_Receive_IT+0x11c>
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d103      	bne.n	800b960 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	4a4b      	ldr	r2, [pc, #300]	; (800ba88 <UART_Start_Receive_IT+0x244>)
 800b95c:	671a      	str	r2, [r3, #112]	; 0x70
 800b95e:	e002      	b.n	800b966 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	4a4a      	ldr	r2, [pc, #296]	; (800ba8c <UART_Start_Receive_IT+0x248>)
 800b964:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2200      	movs	r2, #0
 800b96a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	691b      	ldr	r3, [r3, #16]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d01a      	beq.n	800b9ac <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b97c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b97e:	e853 3f00 	ldrex	r3, [r3]
 800b982:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b98a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	461a      	mov	r2, r3
 800b994:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b998:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b99a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b99c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b99e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b9a0:	e841 2300 	strex	r3, r2, [r1]
 800b9a4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b9a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1e4      	bne.n	800b976 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	3308      	adds	r3, #8
 800b9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9b6:	e853 3f00 	ldrex	r3, [r3]
 800b9ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	3308      	adds	r3, #8
 800b9ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b9cc:	64ba      	str	r2, [r7, #72]	; 0x48
 800b9ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b9d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9d4:	e841 2300 	strex	r3, r2, [r1]
 800b9d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b9da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d1e5      	bne.n	800b9ac <UART_Start_Receive_IT+0x168>
 800b9e0:	e04a      	b.n	800ba78 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9ea:	d107      	bne.n	800b9fc <UART_Start_Receive_IT+0x1b8>
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	691b      	ldr	r3, [r3, #16]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d103      	bne.n	800b9fc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	4a26      	ldr	r2, [pc, #152]	; (800ba90 <UART_Start_Receive_IT+0x24c>)
 800b9f8:	671a      	str	r2, [r3, #112]	; 0x70
 800b9fa:	e002      	b.n	800ba02 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	4a25      	ldr	r2, [pc, #148]	; (800ba94 <UART_Start_Receive_IT+0x250>)
 800ba00:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2200      	movs	r2, #0
 800ba06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	691b      	ldr	r3, [r3, #16]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d019      	beq.n	800ba46 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1a:	e853 3f00 	ldrex	r3, [r3]
 800ba1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba22:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ba26:	677b      	str	r3, [r7, #116]	; 0x74
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba30:	637b      	str	r3, [r7, #52]	; 0x34
 800ba32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba38:	e841 2300 	strex	r3, r2, [r1]
 800ba3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ba3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d1e6      	bne.n	800ba12 <UART_Start_Receive_IT+0x1ce>
 800ba44:	e018      	b.n	800ba78 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	e853 3f00 	ldrex	r3, [r3]
 800ba52:	613b      	str	r3, [r7, #16]
   return(result);
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	f043 0320 	orr.w	r3, r3, #32
 800ba5a:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	461a      	mov	r2, r3
 800ba62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba64:	623b      	str	r3, [r7, #32]
 800ba66:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba68:	69f9      	ldr	r1, [r7, #28]
 800ba6a:	6a3a      	ldr	r2, [r7, #32]
 800ba6c:	e841 2300 	strex	r3, r2, [r1]
 800ba70:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba72:	69bb      	ldr	r3, [r7, #24]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d1e6      	bne.n	800ba46 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800ba78:	2300      	movs	r3, #0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	378c      	adds	r7, #140	; 0x8c
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	0800c359 	.word	0x0800c359
 800ba8c:	0800c061 	.word	0x0800c061
 800ba90:	0800beff 	.word	0x0800beff
 800ba94:	0800bd9f 	.word	0x0800bd9f

0800ba98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b08f      	sub	sp, #60	; 0x3c
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa6:	6a3b      	ldr	r3, [r7, #32]
 800baa8:	e853 3f00 	ldrex	r3, [r3]
 800baac:	61fb      	str	r3, [r7, #28]
   return(result);
 800baae:	69fb      	ldr	r3, [r7, #28]
 800bab0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bab4:	637b      	str	r3, [r7, #52]	; 0x34
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	461a      	mov	r2, r3
 800babc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800babe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bac0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bac6:	e841 2300 	strex	r3, r2, [r1]
 800baca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1e6      	bne.n	800baa0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	3308      	adds	r3, #8
 800bad8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	e853 3f00 	ldrex	r3, [r3]
 800bae0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bae8:	633b      	str	r3, [r7, #48]	; 0x30
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	3308      	adds	r3, #8
 800baf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baf2:	61ba      	str	r2, [r7, #24]
 800baf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf6:	6979      	ldr	r1, [r7, #20]
 800baf8:	69ba      	ldr	r2, [r7, #24]
 800bafa:	e841 2300 	strex	r3, r2, [r1]
 800bafe:	613b      	str	r3, [r7, #16]
   return(result);
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d1e5      	bne.n	800bad2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2220      	movs	r2, #32
 800bb0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800bb0e:	bf00      	nop
 800bb10:	373c      	adds	r7, #60	; 0x3c
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr

0800bb1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb1a:	b480      	push	{r7}
 800bb1c:	b095      	sub	sp, #84	; 0x54
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb2a:	e853 3f00 	ldrex	r3, [r3]
 800bb2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb36:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb40:	643b      	str	r3, [r7, #64]	; 0x40
 800bb42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb48:	e841 2300 	strex	r3, r2, [r1]
 800bb4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d1e6      	bne.n	800bb22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	3308      	adds	r3, #8
 800bb5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb5c:	6a3b      	ldr	r3, [r7, #32]
 800bb5e:	e853 3f00 	ldrex	r3, [r3]
 800bb62:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb6a:	f023 0301 	bic.w	r3, r3, #1
 800bb6e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	3308      	adds	r3, #8
 800bb76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb78:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bb7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb80:	e841 2300 	strex	r3, r2, [r1]
 800bb84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d1e3      	bne.n	800bb54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d118      	bne.n	800bbc6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	e853 3f00 	ldrex	r3, [r3]
 800bba0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	f023 0310 	bic.w	r3, r3, #16
 800bba8:	647b      	str	r3, [r7, #68]	; 0x44
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	461a      	mov	r2, r3
 800bbb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbb2:	61bb      	str	r3, [r7, #24]
 800bbb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb6:	6979      	ldr	r1, [r7, #20]
 800bbb8:	69ba      	ldr	r2, [r7, #24]
 800bbba:	e841 2300 	strex	r3, r2, [r1]
 800bbbe:	613b      	str	r3, [r7, #16]
   return(result);
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d1e6      	bne.n	800bb94 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2220      	movs	r2, #32
 800bbca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	671a      	str	r2, [r3, #112]	; 0x70
}
 800bbda:	bf00      	nop
 800bbdc:	3754      	adds	r7, #84	; 0x54
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr

0800bbe6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	b090      	sub	sp, #64	; 0x40
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f003 0320 	and.w	r3, r3, #32
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d137      	bne.n	800bc72 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bc02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc04:	2200      	movs	r2, #0
 800bc06:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bc0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	3308      	adds	r3, #8
 800bc10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc14:	e853 3f00 	ldrex	r3, [r3]
 800bc18:	623b      	str	r3, [r7, #32]
   return(result);
 800bc1a:	6a3b      	ldr	r3, [r7, #32]
 800bc1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc20:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	3308      	adds	r3, #8
 800bc28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc2a:	633a      	str	r2, [r7, #48]	; 0x30
 800bc2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc32:	e841 2300 	strex	r3, r2, [r1]
 800bc36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d1e5      	bne.n	800bc0a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	e853 3f00 	ldrex	r3, [r3]
 800bc4a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc52:	637b      	str	r3, [r7, #52]	; 0x34
 800bc54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	461a      	mov	r2, r3
 800bc5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc5c:	61fb      	str	r3, [r7, #28]
 800bc5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc60:	69b9      	ldr	r1, [r7, #24]
 800bc62:	69fa      	ldr	r2, [r7, #28]
 800bc64:	e841 2300 	strex	r3, r2, [r1]
 800bc68:	617b      	str	r3, [r7, #20]
   return(result);
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d1e6      	bne.n	800bc3e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bc70:	e002      	b.n	800bc78 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800bc72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc74:	f7ff f960 	bl	800af38 <HAL_UART_TxCpltCallback>
}
 800bc78:	bf00      	nop
 800bc7a:	3740      	adds	r7, #64	; 0x40
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc8c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bc8e:	68f8      	ldr	r0, [r7, #12]
 800bc90:	f7ff f95c 	bl	800af4c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc94:	bf00      	nop
 800bc96:	3710      	adds	r7, #16
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b086      	sub	sp, #24
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bca8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcb0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcb8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcc4:	2b80      	cmp	r3, #128	; 0x80
 800bcc6:	d109      	bne.n	800bcdc <UART_DMAError+0x40>
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	2b21      	cmp	r3, #33	; 0x21
 800bccc:	d106      	bne.n	800bcdc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800bcd6:	6978      	ldr	r0, [r7, #20]
 800bcd8:	f7ff fede 	bl	800ba98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bce6:	2b40      	cmp	r3, #64	; 0x40
 800bce8:	d109      	bne.n	800bcfe <UART_DMAError+0x62>
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2b22      	cmp	r3, #34	; 0x22
 800bcee:	d106      	bne.n	800bcfe <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bcf8:	6978      	ldr	r0, [r7, #20]
 800bcfa:	f7ff ff0e 	bl	800bb1a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd04:	f043 0210 	orr.w	r2, r3, #16
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd0e:	6978      	ldr	r0, [r7, #20]
 800bd10:	f7ff f930 	bl	800af74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd14:	bf00      	nop
 800bd16:	3718      	adds	r7, #24
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd3a:	68f8      	ldr	r0, [r7, #12]
 800bd3c:	f7ff f91a 	bl	800af74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd40:	bf00      	nop
 800bd42:	3710      	adds	r7, #16
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b088      	sub	sp, #32
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	e853 3f00 	ldrex	r3, [r3]
 800bd5c:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd64:	61fb      	str	r3, [r7, #28]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	61bb      	str	r3, [r7, #24]
 800bd70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd72:	6979      	ldr	r1, [r7, #20]
 800bd74:	69ba      	ldr	r2, [r7, #24]
 800bd76:	e841 2300 	strex	r3, r2, [r1]
 800bd7a:	613b      	str	r3, [r7, #16]
   return(result);
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d1e6      	bne.n	800bd50 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2220      	movs	r2, #32
 800bd86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f7ff f8d1 	bl	800af38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd96:	bf00      	nop
 800bd98:	3720      	adds	r7, #32
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b096      	sub	sp, #88	; 0x58
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bdac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdb6:	2b22      	cmp	r3, #34	; 0x22
 800bdb8:	f040 8095 	bne.w	800bee6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bdc6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800bdca:	b2d9      	uxtb	r1, r3
 800bdcc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bdd0:	b2da      	uxtb	r2, r3
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdd6:	400a      	ands	r2, r1
 800bdd8:	b2d2      	uxtb	r2, r2
 800bdda:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bde0:	1c5a      	adds	r2, r3, #1
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	3b01      	subs	r3, #1
 800bdf0:	b29a      	uxth	r2, r3
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bdfe:	b29b      	uxth	r3, r3
 800be00:	2b00      	cmp	r3, #0
 800be02:	d178      	bne.n	800bef6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0c:	e853 3f00 	ldrex	r3, [r3]
 800be10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800be12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be18:	653b      	str	r3, [r7, #80]	; 0x50
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	461a      	mov	r2, r3
 800be20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be22:	647b      	str	r3, [r7, #68]	; 0x44
 800be24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800be28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be2a:	e841 2300 	strex	r3, r2, [r1]
 800be2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800be30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be32:	2b00      	cmp	r3, #0
 800be34:	d1e6      	bne.n	800be04 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	3308      	adds	r3, #8
 800be3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be40:	e853 3f00 	ldrex	r3, [r3]
 800be44:	623b      	str	r3, [r7, #32]
   return(result);
 800be46:	6a3b      	ldr	r3, [r7, #32]
 800be48:	f023 0301 	bic.w	r3, r3, #1
 800be4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	3308      	adds	r3, #8
 800be54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be56:	633a      	str	r2, [r7, #48]	; 0x30
 800be58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be5e:	e841 2300 	strex	r3, r2, [r1]
 800be62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be66:	2b00      	cmp	r3, #0
 800be68:	d1e5      	bne.n	800be36 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2220      	movs	r2, #32
 800be6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d12e      	bne.n	800bede <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	e853 3f00 	ldrex	r3, [r3]
 800be92:	60fb      	str	r3, [r7, #12]
   return(result);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f023 0310 	bic.w	r3, r3, #16
 800be9a:	64bb      	str	r3, [r7, #72]	; 0x48
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	461a      	mov	r2, r3
 800bea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bea4:	61fb      	str	r3, [r7, #28]
 800bea6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea8:	69b9      	ldr	r1, [r7, #24]
 800beaa:	69fa      	ldr	r2, [r7, #28]
 800beac:	e841 2300 	strex	r3, r2, [r1]
 800beb0:	617b      	str	r3, [r7, #20]
   return(result);
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d1e6      	bne.n	800be86 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	69db      	ldr	r3, [r3, #28]
 800bebe:	f003 0310 	and.w	r3, r3, #16
 800bec2:	2b10      	cmp	r3, #16
 800bec4:	d103      	bne.n	800bece <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	2210      	movs	r2, #16
 800becc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bed4:	4619      	mov	r1, r3
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f7ff f856 	bl	800af88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bedc:	e00b      	b.n	800bef6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f7ff f83e 	bl	800af60 <HAL_UART_RxCpltCallback>
}
 800bee4:	e007      	b.n	800bef6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	699a      	ldr	r2, [r3, #24]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f042 0208 	orr.w	r2, r2, #8
 800bef4:	619a      	str	r2, [r3, #24]
}
 800bef6:	bf00      	nop
 800bef8:	3758      	adds	r7, #88	; 0x58
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b096      	sub	sp, #88	; 0x58
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf0c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf16:	2b22      	cmp	r3, #34	; 0x22
 800bf18:	f040 8095 	bne.w	800c046 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf22:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf2a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800bf2c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800bf30:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bf34:	4013      	ands	r3, r2
 800bf36:	b29a      	uxth	r2, r3
 800bf38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf3a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf40:	1c9a      	adds	r2, r3, #2
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf4c:	b29b      	uxth	r3, r3
 800bf4e:	3b01      	subs	r3, #1
 800bf50:	b29a      	uxth	r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d178      	bne.n	800c056 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf6c:	e853 3f00 	ldrex	r3, [r3]
 800bf70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf78:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	461a      	mov	r2, r3
 800bf80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf82:	643b      	str	r3, [r7, #64]	; 0x40
 800bf84:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf8a:	e841 2300 	strex	r3, r2, [r1]
 800bf8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d1e6      	bne.n	800bf64 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	3308      	adds	r3, #8
 800bf9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf9e:	6a3b      	ldr	r3, [r7, #32]
 800bfa0:	e853 3f00 	ldrex	r3, [r3]
 800bfa4:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	f023 0301 	bic.w	r3, r3, #1
 800bfac:	64bb      	str	r3, [r7, #72]	; 0x48
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	3308      	adds	r3, #8
 800bfb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bfb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfbe:	e841 2300 	strex	r3, r2, [r1]
 800bfc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d1e5      	bne.n	800bf96 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2220      	movs	r2, #32
 800bfce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d12e      	bne.n	800c03e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	e853 3f00 	ldrex	r3, [r3]
 800bff2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	f023 0310 	bic.w	r3, r3, #16
 800bffa:	647b      	str	r3, [r7, #68]	; 0x44
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	461a      	mov	r2, r3
 800c002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c004:	61bb      	str	r3, [r7, #24]
 800c006:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c008:	6979      	ldr	r1, [r7, #20]
 800c00a:	69ba      	ldr	r2, [r7, #24]
 800c00c:	e841 2300 	strex	r3, r2, [r1]
 800c010:	613b      	str	r3, [r7, #16]
   return(result);
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1e6      	bne.n	800bfe6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	69db      	ldr	r3, [r3, #28]
 800c01e:	f003 0310 	and.w	r3, r3, #16
 800c022:	2b10      	cmp	r3, #16
 800c024:	d103      	bne.n	800c02e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	2210      	movs	r2, #16
 800c02c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c034:	4619      	mov	r1, r3
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f7fe ffa6 	bl	800af88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c03c:	e00b      	b.n	800c056 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f7fe ff8e 	bl	800af60 <HAL_UART_RxCpltCallback>
}
 800c044:	e007      	b.n	800c056 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	699a      	ldr	r2, [r3, #24]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f042 0208 	orr.w	r2, r2, #8
 800c054:	619a      	str	r2, [r3, #24]
}
 800c056:	bf00      	nop
 800c058:	3758      	adds	r7, #88	; 0x58
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
	...

0800c060 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b0a6      	sub	sp, #152	; 0x98
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c06e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	69db      	ldr	r3, [r3, #28]
 800c078:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	689b      	ldr	r3, [r3, #8]
 800c08c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c096:	2b22      	cmp	r3, #34	; 0x22
 800c098:	f040 814f 	bne.w	800c33a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c0a2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c0a6:	e0f6      	b.n	800c296 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ae:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c0b2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800c0b6:	b2d9      	uxtb	r1, r3
 800c0b8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800c0bc:	b2da      	uxtb	r2, r3
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0c2:	400a      	ands	r2, r1
 800c0c4:	b2d2      	uxtb	r2, r2
 800c0c6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0cc:	1c5a      	adds	r2, r3, #1
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	3b01      	subs	r3, #1
 800c0dc:	b29a      	uxth	r2, r3
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	69db      	ldr	r3, [r3, #28]
 800c0ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c0ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c0f2:	f003 0307 	and.w	r3, r3, #7
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d053      	beq.n	800c1a2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c0fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c0fe:	f003 0301 	and.w	r3, r3, #1
 800c102:	2b00      	cmp	r3, #0
 800c104:	d011      	beq.n	800c12a <UART_RxISR_8BIT_FIFOEN+0xca>
 800c106:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c10a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d00b      	beq.n	800c12a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	2201      	movs	r2, #1
 800c118:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c120:	f043 0201 	orr.w	r2, r3, #1
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c12a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c12e:	f003 0302 	and.w	r3, r3, #2
 800c132:	2b00      	cmp	r3, #0
 800c134:	d011      	beq.n	800c15a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c136:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c13a:	f003 0301 	and.w	r3, r3, #1
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d00b      	beq.n	800c15a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2202      	movs	r2, #2
 800c148:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c150:	f043 0204 	orr.w	r2, r3, #4
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c15a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c15e:	f003 0304 	and.w	r3, r3, #4
 800c162:	2b00      	cmp	r3, #0
 800c164:	d011      	beq.n	800c18a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c166:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c16a:	f003 0301 	and.w	r3, r3, #1
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d00b      	beq.n	800c18a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	2204      	movs	r2, #4
 800c178:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c180:	f043 0202 	orr.w	r2, r3, #2
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c190:	2b00      	cmp	r3, #0
 800c192:	d006      	beq.n	800c1a2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f7fe feed 	bl	800af74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d173      	bne.n	800c296 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1b6:	e853 3f00 	ldrex	r3, [r3]
 800c1ba:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c1bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c1be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c1d0:	66bb      	str	r3, [r7, #104]	; 0x68
 800c1d2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c1d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c1d8:	e841 2300 	strex	r3, r2, [r1]
 800c1dc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c1de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d1e4      	bne.n	800c1ae <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	3308      	adds	r3, #8
 800c1ea:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1ee:	e853 3f00 	ldrex	r3, [r3]
 800c1f2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c1f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c1fa:	f023 0301 	bic.w	r3, r3, #1
 800c1fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	3308      	adds	r3, #8
 800c206:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c208:	657a      	str	r2, [r7, #84]	; 0x54
 800c20a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c20e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c210:	e841 2300 	strex	r3, r2, [r1]
 800c214:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d1e3      	bne.n	800c1e4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2220      	movs	r2, #32
 800c220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c22e:	2b01      	cmp	r3, #1
 800c230:	d12e      	bne.n	800c290 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c240:	e853 3f00 	ldrex	r3, [r3]
 800c244:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c248:	f023 0310 	bic.w	r3, r3, #16
 800c24c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	461a      	mov	r2, r3
 800c254:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c256:	643b      	str	r3, [r7, #64]	; 0x40
 800c258:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c25a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c25c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c25e:	e841 2300 	strex	r3, r2, [r1]
 800c262:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c266:	2b00      	cmp	r3, #0
 800c268:	d1e6      	bne.n	800c238 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	69db      	ldr	r3, [r3, #28]
 800c270:	f003 0310 	and.w	r3, r3, #16
 800c274:	2b10      	cmp	r3, #16
 800c276:	d103      	bne.n	800c280 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	2210      	movs	r2, #16
 800c27e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c286:	4619      	mov	r1, r3
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f7fe fe7d 	bl	800af88 <HAL_UARTEx_RxEventCallback>
 800c28e:	e002      	b.n	800c296 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f7fe fe65 	bl	800af60 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c296:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d006      	beq.n	800c2ac <UART_RxISR_8BIT_FIFOEN+0x24c>
 800c29e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c2a2:	f003 0320 	and.w	r3, r3, #32
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	f47f aefe 	bne.w	800c0a8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c2b6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d045      	beq.n	800c34a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c2c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d23e      	bcs.n	800c34a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	3308      	adds	r3, #8
 800c2d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d4:	6a3b      	ldr	r3, [r7, #32]
 800c2d6:	e853 3f00 	ldrex	r3, [r3]
 800c2da:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2e2:	673b      	str	r3, [r7, #112]	; 0x70
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	3308      	adds	r3, #8
 800c2ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c2ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c2ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2f4:	e841 2300 	strex	r3, r2, [r1]
 800c2f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d1e5      	bne.n	800c2cc <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4a14      	ldr	r2, [pc, #80]	; (800c354 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800c304:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	e853 3f00 	ldrex	r3, [r3]
 800c312:	60bb      	str	r3, [r7, #8]
   return(result);
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	f043 0320 	orr.w	r3, r3, #32
 800c31a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	461a      	mov	r2, r3
 800c322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c324:	61bb      	str	r3, [r7, #24]
 800c326:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c328:	6979      	ldr	r1, [r7, #20]
 800c32a:	69ba      	ldr	r2, [r7, #24]
 800c32c:	e841 2300 	strex	r3, r2, [r1]
 800c330:	613b      	str	r3, [r7, #16]
   return(result);
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d1e6      	bne.n	800c306 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c338:	e007      	b.n	800c34a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	699a      	ldr	r2, [r3, #24]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f042 0208 	orr.w	r2, r2, #8
 800c348:	619a      	str	r2, [r3, #24]
}
 800c34a:	bf00      	nop
 800c34c:	3798      	adds	r7, #152	; 0x98
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
 800c352:	bf00      	nop
 800c354:	0800bd9f 	.word	0x0800bd9f

0800c358 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b0a8      	sub	sp, #160	; 0xa0
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c366:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	69db      	ldr	r3, [r3, #28]
 800c370:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	689b      	ldr	r3, [r3, #8]
 800c384:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c38e:	2b22      	cmp	r3, #34	; 0x22
 800c390:	f040 8153 	bne.w	800c63a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c39a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c39e:	e0fa      	b.n	800c596 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3a6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800c3b2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800c3b6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800c3ba:	4013      	ands	r3, r2
 800c3bc:	b29a      	uxth	r2, r3
 800c3be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c3c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3c8:	1c9a      	adds	r2, r3, #2
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	b29a      	uxth	r2, r3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	69db      	ldr	r3, [r3, #28]
 800c3e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c3ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c3ee:	f003 0307 	and.w	r3, r3, #7
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d053      	beq.n	800c49e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c3f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c3fa:	f003 0301 	and.w	r3, r3, #1
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d011      	beq.n	800c426 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c402:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d00b      	beq.n	800c426 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2201      	movs	r2, #1
 800c414:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c41c:	f043 0201 	orr.w	r2, r3, #1
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c426:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c42a:	f003 0302 	and.w	r3, r3, #2
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d011      	beq.n	800c456 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c432:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c436:	f003 0301 	and.w	r3, r3, #1
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d00b      	beq.n	800c456 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2202      	movs	r2, #2
 800c444:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c44c:	f043 0204 	orr.w	r2, r3, #4
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c456:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c45a:	f003 0304 	and.w	r3, r3, #4
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d011      	beq.n	800c486 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c462:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c466:	f003 0301 	and.w	r3, r3, #1
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d00b      	beq.n	800c486 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2204      	movs	r2, #4
 800c474:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c47c:	f043 0202 	orr.w	r2, r3, #2
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d006      	beq.n	800c49e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f7fe fd6f 	bl	800af74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d175      	bne.n	800c596 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c4b2:	e853 3f00 	ldrex	r3, [r3]
 800c4b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c4b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c4cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c4ce:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c4d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c4d4:	e841 2300 	strex	r3, r2, [r1]
 800c4d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c4da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d1e4      	bne.n	800c4aa <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	3308      	adds	r3, #8
 800c4e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4ea:	e853 3f00 	ldrex	r3, [r3]
 800c4ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c4f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c4f6:	f023 0301 	bic.w	r3, r3, #1
 800c4fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	3308      	adds	r3, #8
 800c504:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c508:	65ba      	str	r2, [r7, #88]	; 0x58
 800c50a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c50c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c50e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c510:	e841 2300 	strex	r3, r2, [r1]
 800c514:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d1e1      	bne.n	800c4e0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2220      	movs	r2, #32
 800c520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2200      	movs	r2, #0
 800c528:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c52e:	2b01      	cmp	r3, #1
 800c530:	d12e      	bne.n	800c590 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2200      	movs	r2, #0
 800c536:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c540:	e853 3f00 	ldrex	r3, [r3]
 800c544:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c548:	f023 0310 	bic.w	r3, r3, #16
 800c54c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	461a      	mov	r2, r3
 800c554:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c556:	647b      	str	r3, [r7, #68]	; 0x44
 800c558:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c55c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c55e:	e841 2300 	strex	r3, r2, [r1]
 800c562:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c566:	2b00      	cmp	r3, #0
 800c568:	d1e6      	bne.n	800c538 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	69db      	ldr	r3, [r3, #28]
 800c570:	f003 0310 	and.w	r3, r3, #16
 800c574:	2b10      	cmp	r3, #16
 800c576:	d103      	bne.n	800c580 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2210      	movs	r2, #16
 800c57e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c586:	4619      	mov	r1, r3
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f7fe fcfd 	bl	800af88 <HAL_UARTEx_RxEventCallback>
 800c58e:	e002      	b.n	800c596 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f7fe fce5 	bl	800af60 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c596:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d006      	beq.n	800c5ac <UART_RxISR_16BIT_FIFOEN+0x254>
 800c59e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c5a2:	f003 0320 	and.w	r3, r3, #32
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	f47f aefa 	bne.w	800c3a0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5b2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c5b6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d045      	beq.n	800c64a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c5c4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d23e      	bcs.n	800c64a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	3308      	adds	r3, #8
 800c5d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d6:	e853 3f00 	ldrex	r3, [r3]
 800c5da:	623b      	str	r3, [r7, #32]
   return(result);
 800c5dc:	6a3b      	ldr	r3, [r7, #32]
 800c5de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5e2:	677b      	str	r3, [r7, #116]	; 0x74
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	3308      	adds	r3, #8
 800c5ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c5ec:	633a      	str	r2, [r7, #48]	; 0x30
 800c5ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5f4:	e841 2300 	strex	r3, r2, [r1]
 800c5f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d1e5      	bne.n	800c5cc <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	4a14      	ldr	r2, [pc, #80]	; (800c654 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800c604:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	e853 3f00 	ldrex	r3, [r3]
 800c612:	60fb      	str	r3, [r7, #12]
   return(result);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f043 0320 	orr.w	r3, r3, #32
 800c61a:	673b      	str	r3, [r7, #112]	; 0x70
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	461a      	mov	r2, r3
 800c622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c624:	61fb      	str	r3, [r7, #28]
 800c626:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c628:	69b9      	ldr	r1, [r7, #24]
 800c62a:	69fa      	ldr	r2, [r7, #28]
 800c62c:	e841 2300 	strex	r3, r2, [r1]
 800c630:	617b      	str	r3, [r7, #20]
   return(result);
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d1e6      	bne.n	800c606 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c638:	e007      	b.n	800c64a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	699a      	ldr	r2, [r3, #24]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f042 0208 	orr.w	r2, r2, #8
 800c648:	619a      	str	r2, [r3, #24]
}
 800c64a:	bf00      	nop
 800c64c:	37a0      	adds	r7, #160	; 0xa0
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	0800beff 	.word	0x0800beff

0800c658 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c660:	bf00      	nop
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr

0800c66c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b083      	sub	sp, #12
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c674:	bf00      	nop
 800c676:	370c      	adds	r7, #12
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c688:	bf00      	nop
 800c68a:	370c      	adds	r7, #12
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr

0800c694 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c694:	b480      	push	{r7}
 800c696:	b085      	sub	sp, #20
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d101      	bne.n	800c6aa <HAL_UARTEx_DisableFifoMode+0x16>
 800c6a6:	2302      	movs	r3, #2
 800c6a8:	e027      	b.n	800c6fa <HAL_UARTEx_DisableFifoMode+0x66>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2224      	movs	r2, #36	; 0x24
 800c6b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	681a      	ldr	r2, [r3, #0]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f022 0201 	bic.w	r2, r2, #1
 800c6d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c6d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	68fa      	ldr	r2, [r7, #12]
 800c6e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2220      	movs	r2, #32
 800c6ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c6f8:	2300      	movs	r3, #0
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3714      	adds	r7, #20
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr

0800c706 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c706:	b580      	push	{r7, lr}
 800c708:	b084      	sub	sp, #16
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
 800c70e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c716:	2b01      	cmp	r3, #1
 800c718:	d101      	bne.n	800c71e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c71a:	2302      	movs	r3, #2
 800c71c:	e02d      	b.n	800c77a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2201      	movs	r2, #1
 800c722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2224      	movs	r2, #36	; 0x24
 800c72a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f022 0201 	bic.w	r2, r2, #1
 800c744:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	689b      	ldr	r3, [r3, #8]
 800c74c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	683a      	ldr	r2, [r7, #0]
 800c756:	430a      	orrs	r2, r1
 800c758:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 f850 	bl	800c800 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	68fa      	ldr	r2, [r7, #12]
 800c766:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2220      	movs	r2, #32
 800c76c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2200      	movs	r2, #0
 800c774:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c778:	2300      	movs	r3, #0
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3710      	adds	r7, #16
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}

0800c782 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c782:	b580      	push	{r7, lr}
 800c784:	b084      	sub	sp, #16
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
 800c78a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c792:	2b01      	cmp	r3, #1
 800c794:	d101      	bne.n	800c79a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c796:	2302      	movs	r3, #2
 800c798:	e02d      	b.n	800c7f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2201      	movs	r2, #1
 800c79e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2224      	movs	r2, #36	; 0x24
 800c7a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	681a      	ldr	r2, [r3, #0]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f022 0201 	bic.w	r2, r2, #1
 800c7c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	689b      	ldr	r3, [r3, #8]
 800c7c8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	683a      	ldr	r2, [r7, #0]
 800c7d2:	430a      	orrs	r2, r1
 800c7d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 f812 	bl	800c800 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	68fa      	ldr	r2, [r7, #12]
 800c7e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2220      	movs	r2, #32
 800c7e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c7f4:	2300      	movs	r3, #0
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3710      	adds	r7, #16
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
	...

0800c800 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c800:	b480      	push	{r7}
 800c802:	b085      	sub	sp, #20
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d108      	bne.n	800c822 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2201      	movs	r2, #1
 800c814:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2201      	movs	r2, #1
 800c81c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c820:	e031      	b.n	800c886 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c822:	2308      	movs	r3, #8
 800c824:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c826:	2308      	movs	r3, #8
 800c828:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	689b      	ldr	r3, [r3, #8]
 800c830:	0e5b      	lsrs	r3, r3, #25
 800c832:	b2db      	uxtb	r3, r3
 800c834:	f003 0307 	and.w	r3, r3, #7
 800c838:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	689b      	ldr	r3, [r3, #8]
 800c840:	0f5b      	lsrs	r3, r3, #29
 800c842:	b2db      	uxtb	r3, r3
 800c844:	f003 0307 	and.w	r3, r3, #7
 800c848:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c84a:	7bbb      	ldrb	r3, [r7, #14]
 800c84c:	7b3a      	ldrb	r2, [r7, #12]
 800c84e:	4911      	ldr	r1, [pc, #68]	; (800c894 <UARTEx_SetNbDataToProcess+0x94>)
 800c850:	5c8a      	ldrb	r2, [r1, r2]
 800c852:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c856:	7b3a      	ldrb	r2, [r7, #12]
 800c858:	490f      	ldr	r1, [pc, #60]	; (800c898 <UARTEx_SetNbDataToProcess+0x98>)
 800c85a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c85c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c860:	b29a      	uxth	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c868:	7bfb      	ldrb	r3, [r7, #15]
 800c86a:	7b7a      	ldrb	r2, [r7, #13]
 800c86c:	4909      	ldr	r1, [pc, #36]	; (800c894 <UARTEx_SetNbDataToProcess+0x94>)
 800c86e:	5c8a      	ldrb	r2, [r1, r2]
 800c870:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c874:	7b7a      	ldrb	r2, [r7, #13]
 800c876:	4908      	ldr	r1, [pc, #32]	; (800c898 <UARTEx_SetNbDataToProcess+0x98>)
 800c878:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c87a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c87e:	b29a      	uxth	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c886:	bf00      	nop
 800c888:	3714      	adds	r7, #20
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	08015770 	.word	0x08015770
 800c898:	08015778 	.word	0x08015778

0800c89c <__NVIC_SetPriority>:
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	6039      	str	r1, [r7, #0]
 800c8a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c8a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	db0a      	blt.n	800c8c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	b2da      	uxtb	r2, r3
 800c8b4:	490c      	ldr	r1, [pc, #48]	; (800c8e8 <__NVIC_SetPriority+0x4c>)
 800c8b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c8ba:	0112      	lsls	r2, r2, #4
 800c8bc:	b2d2      	uxtb	r2, r2
 800c8be:	440b      	add	r3, r1
 800c8c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c8c4:	e00a      	b.n	800c8dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	b2da      	uxtb	r2, r3
 800c8ca:	4908      	ldr	r1, [pc, #32]	; (800c8ec <__NVIC_SetPriority+0x50>)
 800c8cc:	79fb      	ldrb	r3, [r7, #7]
 800c8ce:	f003 030f 	and.w	r3, r3, #15
 800c8d2:	3b04      	subs	r3, #4
 800c8d4:	0112      	lsls	r2, r2, #4
 800c8d6:	b2d2      	uxtb	r2, r2
 800c8d8:	440b      	add	r3, r1
 800c8da:	761a      	strb	r2, [r3, #24]
}
 800c8dc:	bf00      	nop
 800c8de:	370c      	adds	r7, #12
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr
 800c8e8:	e000e100 	.word	0xe000e100
 800c8ec:	e000ed00 	.word	0xe000ed00

0800c8f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c8f4:	4b05      	ldr	r3, [pc, #20]	; (800c90c <SysTick_Handler+0x1c>)
 800c8f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c8f8:	f001 fd28 	bl	800e34c <xTaskGetSchedulerState>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	2b01      	cmp	r3, #1
 800c900:	d001      	beq.n	800c906 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c902:	f002 fb11 	bl	800ef28 <xPortSysTickHandler>
  }
}
 800c906:	bf00      	nop
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	e000e010 	.word	0xe000e010

0800c910 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c910:	b580      	push	{r7, lr}
 800c912:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c914:	2100      	movs	r1, #0
 800c916:	f06f 0004 	mvn.w	r0, #4
 800c91a:	f7ff ffbf 	bl	800c89c <__NVIC_SetPriority>
#endif
}
 800c91e:	bf00      	nop
 800c920:	bd80      	pop	{r7, pc}
	...

0800c924 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c92a:	f3ef 8305 	mrs	r3, IPSR
 800c92e:	603b      	str	r3, [r7, #0]
  return(result);
 800c930:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c932:	2b00      	cmp	r3, #0
 800c934:	d003      	beq.n	800c93e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c936:	f06f 0305 	mvn.w	r3, #5
 800c93a:	607b      	str	r3, [r7, #4]
 800c93c:	e00c      	b.n	800c958 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c93e:	4b0a      	ldr	r3, [pc, #40]	; (800c968 <osKernelInitialize+0x44>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d105      	bne.n	800c952 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c946:	4b08      	ldr	r3, [pc, #32]	; (800c968 <osKernelInitialize+0x44>)
 800c948:	2201      	movs	r2, #1
 800c94a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c94c:	2300      	movs	r3, #0
 800c94e:	607b      	str	r3, [r7, #4]
 800c950:	e002      	b.n	800c958 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c952:	f04f 33ff 	mov.w	r3, #4294967295
 800c956:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c958:	687b      	ldr	r3, [r7, #4]
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	370c      	adds	r7, #12
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr
 800c966:	bf00      	nop
 800c968:	200002a4 	.word	0x200002a4

0800c96c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c972:	f3ef 8305 	mrs	r3, IPSR
 800c976:	603b      	str	r3, [r7, #0]
  return(result);
 800c978:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d003      	beq.n	800c986 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c97e:	f06f 0305 	mvn.w	r3, #5
 800c982:	607b      	str	r3, [r7, #4]
 800c984:	e010      	b.n	800c9a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c986:	4b0b      	ldr	r3, [pc, #44]	; (800c9b4 <osKernelStart+0x48>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	d109      	bne.n	800c9a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c98e:	f7ff ffbf 	bl	800c910 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c992:	4b08      	ldr	r3, [pc, #32]	; (800c9b4 <osKernelStart+0x48>)
 800c994:	2202      	movs	r2, #2
 800c996:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c998:	f001 f87c 	bl	800da94 <vTaskStartScheduler>
      stat = osOK;
 800c99c:	2300      	movs	r3, #0
 800c99e:	607b      	str	r3, [r7, #4]
 800c9a0:	e002      	b.n	800c9a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c9a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c9a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c9a8:	687b      	ldr	r3, [r7, #4]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3708      	adds	r7, #8
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	200002a4 	.word	0x200002a4

0800c9b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b08e      	sub	sp, #56	; 0x38
 800c9bc:	af04      	add	r7, sp, #16
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9c8:	f3ef 8305 	mrs	r3, IPSR
 800c9cc:	617b      	str	r3, [r7, #20]
  return(result);
 800c9ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d17e      	bne.n	800cad2 <osThreadNew+0x11a>
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d07b      	beq.n	800cad2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c9da:	2380      	movs	r3, #128	; 0x80
 800c9dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c9de:	2318      	movs	r3, #24
 800c9e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c9e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c9ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d045      	beq.n	800ca7e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d002      	beq.n	800ca00 <osThreadNew+0x48>
        name = attr->name;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	699b      	ldr	r3, [r3, #24]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d002      	beq.n	800ca0e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	699b      	ldr	r3, [r3, #24]
 800ca0c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ca0e:	69fb      	ldr	r3, [r7, #28]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d008      	beq.n	800ca26 <osThreadNew+0x6e>
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	2b38      	cmp	r3, #56	; 0x38
 800ca18:	d805      	bhi.n	800ca26 <osThreadNew+0x6e>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	f003 0301 	and.w	r3, r3, #1
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d001      	beq.n	800ca2a <osThreadNew+0x72>
        return (NULL);
 800ca26:	2300      	movs	r3, #0
 800ca28:	e054      	b.n	800cad4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	695b      	ldr	r3, [r3, #20]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d003      	beq.n	800ca3a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	695b      	ldr	r3, [r3, #20]
 800ca36:	089b      	lsrs	r3, r3, #2
 800ca38:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	689b      	ldr	r3, [r3, #8]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d00e      	beq.n	800ca60 <osThreadNew+0xa8>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	2bbb      	cmp	r3, #187	; 0xbb
 800ca48:	d90a      	bls.n	800ca60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d006      	beq.n	800ca60 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	695b      	ldr	r3, [r3, #20]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d002      	beq.n	800ca60 <osThreadNew+0xa8>
        mem = 1;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	61bb      	str	r3, [r7, #24]
 800ca5e:	e010      	b.n	800ca82 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d10c      	bne.n	800ca82 <osThreadNew+0xca>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d108      	bne.n	800ca82 <osThreadNew+0xca>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	691b      	ldr	r3, [r3, #16]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d104      	bne.n	800ca82 <osThreadNew+0xca>
          mem = 0;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	61bb      	str	r3, [r7, #24]
 800ca7c:	e001      	b.n	800ca82 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d110      	bne.n	800caaa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ca90:	9202      	str	r2, [sp, #8]
 800ca92:	9301      	str	r3, [sp, #4]
 800ca94:	69fb      	ldr	r3, [r7, #28]
 800ca96:	9300      	str	r3, [sp, #0]
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	6a3a      	ldr	r2, [r7, #32]
 800ca9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca9e:	68f8      	ldr	r0, [r7, #12]
 800caa0:	f000 fe0c 	bl	800d6bc <xTaskCreateStatic>
 800caa4:	4603      	mov	r3, r0
 800caa6:	613b      	str	r3, [r7, #16]
 800caa8:	e013      	b.n	800cad2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d110      	bne.n	800cad2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cab0:	6a3b      	ldr	r3, [r7, #32]
 800cab2:	b29a      	uxth	r2, r3
 800cab4:	f107 0310 	add.w	r3, r7, #16
 800cab8:	9301      	str	r3, [sp, #4]
 800caba:	69fb      	ldr	r3, [r7, #28]
 800cabc:	9300      	str	r3, [sp, #0]
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cac2:	68f8      	ldr	r0, [r7, #12]
 800cac4:	f000 fe57 	bl	800d776 <xTaskCreate>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d001      	beq.n	800cad2 <osThreadNew+0x11a>
            hTask = NULL;
 800cace:	2300      	movs	r3, #0
 800cad0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cad2:	693b      	ldr	r3, [r7, #16]
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3728      	adds	r7, #40	; 0x28
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cae4:	f3ef 8305 	mrs	r3, IPSR
 800cae8:	60bb      	str	r3, [r7, #8]
  return(result);
 800caea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800caec:	2b00      	cmp	r3, #0
 800caee:	d003      	beq.n	800caf8 <osDelay+0x1c>
    stat = osErrorISR;
 800caf0:	f06f 0305 	mvn.w	r3, #5
 800caf4:	60fb      	str	r3, [r7, #12]
 800caf6:	e007      	b.n	800cb08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800caf8:	2300      	movs	r3, #0
 800cafa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d002      	beq.n	800cb08 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 ff92 	bl	800da2c <vTaskDelay>
    }
  }

  return (stat);
 800cb08:	68fb      	ldr	r3, [r7, #12]
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3710      	adds	r7, #16
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
	...

0800cb14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cb14:	b480      	push	{r7}
 800cb16:	b085      	sub	sp, #20
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	60f8      	str	r0, [r7, #12]
 800cb1c:	60b9      	str	r1, [r7, #8]
 800cb1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	4a07      	ldr	r2, [pc, #28]	; (800cb40 <vApplicationGetIdleTaskMemory+0x2c>)
 800cb24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	4a06      	ldr	r2, [pc, #24]	; (800cb44 <vApplicationGetIdleTaskMemory+0x30>)
 800cb2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2280      	movs	r2, #128	; 0x80
 800cb30:	601a      	str	r2, [r3, #0]
}
 800cb32:	bf00      	nop
 800cb34:	3714      	adds	r7, #20
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	200002a8 	.word	0x200002a8
 800cb44:	20000364 	.word	0x20000364

0800cb48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cb48:	b480      	push	{r7}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	4a07      	ldr	r2, [pc, #28]	; (800cb74 <vApplicationGetTimerTaskMemory+0x2c>)
 800cb58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	4a06      	ldr	r2, [pc, #24]	; (800cb78 <vApplicationGetTimerTaskMemory+0x30>)
 800cb5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb66:	601a      	str	r2, [r3, #0]
}
 800cb68:	bf00      	nop
 800cb6a:	3714      	adds	r7, #20
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr
 800cb74:	20000564 	.word	0x20000564
 800cb78:	20000620 	.word	0x20000620

0800cb7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f103 0208 	add.w	r2, r3, #8
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f04f 32ff 	mov.w	r2, #4294967295
 800cb94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f103 0208 	add.w	r2, r3, #8
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f103 0208 	add.w	r2, r3, #8
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2200      	movs	r2, #0
 800cbae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cbb0:	bf00      	nop
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cbca:	bf00      	nop
 800cbcc:	370c      	adds	r7, #12
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr

0800cbd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cbd6:	b480      	push	{r7}
 800cbd8:	b085      	sub	sp, #20
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
 800cbde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	68fa      	ldr	r2, [r7, #12]
 800cbea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	689a      	ldr	r2, [r3, #8]
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	689b      	ldr	r3, [r3, #8]
 800cbf8:	683a      	ldr	r2, [r7, #0]
 800cbfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	683a      	ldr	r2, [r7, #0]
 800cc00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	1c5a      	adds	r2, r3, #1
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	601a      	str	r2, [r3, #0]
}
 800cc12:	bf00      	nop
 800cc14:	3714      	adds	r7, #20
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr

0800cc1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cc1e:	b480      	push	{r7}
 800cc20:	b085      	sub	sp, #20
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
 800cc26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc34:	d103      	bne.n	800cc3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	691b      	ldr	r3, [r3, #16]
 800cc3a:	60fb      	str	r3, [r7, #12]
 800cc3c:	e00c      	b.n	800cc58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	3308      	adds	r3, #8
 800cc42:	60fb      	str	r3, [r7, #12]
 800cc44:	e002      	b.n	800cc4c <vListInsert+0x2e>
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	60fb      	str	r3, [r7, #12]
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	68ba      	ldr	r2, [r7, #8]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d2f6      	bcs.n	800cc46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	685a      	ldr	r2, [r3, #4]
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	685b      	ldr	r3, [r3, #4]
 800cc64:	683a      	ldr	r2, [r7, #0]
 800cc66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	68fa      	ldr	r2, [r7, #12]
 800cc6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	683a      	ldr	r2, [r7, #0]
 800cc72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	687a      	ldr	r2, [r7, #4]
 800cc78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	1c5a      	adds	r2, r3, #1
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	601a      	str	r2, [r3, #0]
}
 800cc84:	bf00      	nop
 800cc86:	3714      	adds	r7, #20
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr

0800cc90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cc90:	b480      	push	{r7}
 800cc92:	b085      	sub	sp, #20
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	691b      	ldr	r3, [r3, #16]
 800cc9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	6892      	ldr	r2, [r2, #8]
 800cca6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	6852      	ldr	r2, [r2, #4]
 800ccb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d103      	bne.n	800ccc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	689a      	ldr	r2, [r3, #8]
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	1e5a      	subs	r2, r3, #1
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3714      	adds	r7, #20
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr

0800cce4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d10a      	bne.n	800cd0e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ccf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfc:	f383 8811 	msr	BASEPRI, r3
 800cd00:	f3bf 8f6f 	isb	sy
 800cd04:	f3bf 8f4f 	dsb	sy
 800cd08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cd0a:	bf00      	nop
 800cd0c:	e7fe      	b.n	800cd0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cd0e:	f002 f879 	bl	800ee04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd1a:	68f9      	ldr	r1, [r7, #12]
 800cd1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cd1e:	fb01 f303 	mul.w	r3, r1, r3
 800cd22:	441a      	add	r2, r3
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681a      	ldr	r2, [r3, #0]
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd3e:	3b01      	subs	r3, #1
 800cd40:	68f9      	ldr	r1, [r7, #12]
 800cd42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cd44:	fb01 f303 	mul.w	r3, r1, r3
 800cd48:	441a      	add	r2, r3
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	22ff      	movs	r2, #255	; 0xff
 800cd52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	22ff      	movs	r2, #255	; 0xff
 800cd5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d114      	bne.n	800cd8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	691b      	ldr	r3, [r3, #16]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d01a      	beq.n	800cda2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	3310      	adds	r3, #16
 800cd70:	4618      	mov	r0, r3
 800cd72:	f001 f929 	bl	800dfc8 <xTaskRemoveFromEventList>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d012      	beq.n	800cda2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cd7c:	4b0c      	ldr	r3, [pc, #48]	; (800cdb0 <xQueueGenericReset+0xcc>)
 800cd7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd82:	601a      	str	r2, [r3, #0]
 800cd84:	f3bf 8f4f 	dsb	sy
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	e009      	b.n	800cda2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	3310      	adds	r3, #16
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7ff fef2 	bl	800cb7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	3324      	adds	r3, #36	; 0x24
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7ff feed 	bl	800cb7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cda2:	f002 f85f 	bl	800ee64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cda6:	2301      	movs	r3, #1
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3710      	adds	r7, #16
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}
 800cdb0:	e000ed04 	.word	0xe000ed04

0800cdb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b08e      	sub	sp, #56	; 0x38
 800cdb8:	af02      	add	r7, sp, #8
 800cdba:	60f8      	str	r0, [r7, #12]
 800cdbc:	60b9      	str	r1, [r7, #8]
 800cdbe:	607a      	str	r2, [r7, #4]
 800cdc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d10a      	bne.n	800cdde <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cdc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdcc:	f383 8811 	msr	BASEPRI, r3
 800cdd0:	f3bf 8f6f 	isb	sy
 800cdd4:	f3bf 8f4f 	dsb	sy
 800cdd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cdda:	bf00      	nop
 800cddc:	e7fe      	b.n	800cddc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d10a      	bne.n	800cdfa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde8:	f383 8811 	msr	BASEPRI, r3
 800cdec:	f3bf 8f6f 	isb	sy
 800cdf0:	f3bf 8f4f 	dsb	sy
 800cdf4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cdf6:	bf00      	nop
 800cdf8:	e7fe      	b.n	800cdf8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d002      	beq.n	800ce06 <xQueueGenericCreateStatic+0x52>
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d001      	beq.n	800ce0a <xQueueGenericCreateStatic+0x56>
 800ce06:	2301      	movs	r3, #1
 800ce08:	e000      	b.n	800ce0c <xQueueGenericCreateStatic+0x58>
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d10a      	bne.n	800ce26 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ce10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce14:	f383 8811 	msr	BASEPRI, r3
 800ce18:	f3bf 8f6f 	isb	sy
 800ce1c:	f3bf 8f4f 	dsb	sy
 800ce20:	623b      	str	r3, [r7, #32]
}
 800ce22:	bf00      	nop
 800ce24:	e7fe      	b.n	800ce24 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d102      	bne.n	800ce32 <xQueueGenericCreateStatic+0x7e>
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d101      	bne.n	800ce36 <xQueueGenericCreateStatic+0x82>
 800ce32:	2301      	movs	r3, #1
 800ce34:	e000      	b.n	800ce38 <xQueueGenericCreateStatic+0x84>
 800ce36:	2300      	movs	r3, #0
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d10a      	bne.n	800ce52 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ce3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce40:	f383 8811 	msr	BASEPRI, r3
 800ce44:	f3bf 8f6f 	isb	sy
 800ce48:	f3bf 8f4f 	dsb	sy
 800ce4c:	61fb      	str	r3, [r7, #28]
}
 800ce4e:	bf00      	nop
 800ce50:	e7fe      	b.n	800ce50 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ce52:	2350      	movs	r3, #80	; 0x50
 800ce54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	2b50      	cmp	r3, #80	; 0x50
 800ce5a:	d00a      	beq.n	800ce72 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ce5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce60:	f383 8811 	msr	BASEPRI, r3
 800ce64:	f3bf 8f6f 	isb	sy
 800ce68:	f3bf 8f4f 	dsb	sy
 800ce6c:	61bb      	str	r3, [r7, #24]
}
 800ce6e:	bf00      	nop
 800ce70:	e7fe      	b.n	800ce70 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ce72:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ce78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d00d      	beq.n	800ce9a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ce7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce80:	2201      	movs	r2, #1
 800ce82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ce8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8c:	9300      	str	r3, [sp, #0]
 800ce8e:	4613      	mov	r3, r2
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	68b9      	ldr	r1, [r7, #8]
 800ce94:	68f8      	ldr	r0, [r7, #12]
 800ce96:	f000 f805 	bl	800cea4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3730      	adds	r7, #48	; 0x30
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	607a      	str	r2, [r7, #4]
 800ceb0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d103      	bne.n	800cec0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ceb8:	69bb      	ldr	r3, [r7, #24]
 800ceba:	69ba      	ldr	r2, [r7, #24]
 800cebc:	601a      	str	r2, [r3, #0]
 800cebe:	e002      	b.n	800cec6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cec0:	69bb      	ldr	r3, [r7, #24]
 800cec2:	687a      	ldr	r2, [r7, #4]
 800cec4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	68fa      	ldr	r2, [r7, #12]
 800ceca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	68ba      	ldr	r2, [r7, #8]
 800ced0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ced2:	2101      	movs	r1, #1
 800ced4:	69b8      	ldr	r0, [r7, #24]
 800ced6:	f7ff ff05 	bl	800cce4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ceda:	69bb      	ldr	r3, [r7, #24]
 800cedc:	78fa      	ldrb	r2, [r7, #3]
 800cede:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cee2:	bf00      	nop
 800cee4:	3710      	adds	r7, #16
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
	...

0800ceec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b08e      	sub	sp, #56	; 0x38
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	607a      	str	r2, [r7, #4]
 800cef8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cefa:	2300      	movs	r3, #0
 800cefc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d10a      	bne.n	800cf1e <xQueueGenericSend+0x32>
	__asm volatile
 800cf08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0c:	f383 8811 	msr	BASEPRI, r3
 800cf10:	f3bf 8f6f 	isb	sy
 800cf14:	f3bf 8f4f 	dsb	sy
 800cf18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf1a:	bf00      	nop
 800cf1c:	e7fe      	b.n	800cf1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d103      	bne.n	800cf2c <xQueueGenericSend+0x40>
 800cf24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d101      	bne.n	800cf30 <xQueueGenericSend+0x44>
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	e000      	b.n	800cf32 <xQueueGenericSend+0x46>
 800cf30:	2300      	movs	r3, #0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d10a      	bne.n	800cf4c <xQueueGenericSend+0x60>
	__asm volatile
 800cf36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf3a:	f383 8811 	msr	BASEPRI, r3
 800cf3e:	f3bf 8f6f 	isb	sy
 800cf42:	f3bf 8f4f 	dsb	sy
 800cf46:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf48:	bf00      	nop
 800cf4a:	e7fe      	b.n	800cf4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	2b02      	cmp	r3, #2
 800cf50:	d103      	bne.n	800cf5a <xQueueGenericSend+0x6e>
 800cf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf56:	2b01      	cmp	r3, #1
 800cf58:	d101      	bne.n	800cf5e <xQueueGenericSend+0x72>
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	e000      	b.n	800cf60 <xQueueGenericSend+0x74>
 800cf5e:	2300      	movs	r3, #0
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d10a      	bne.n	800cf7a <xQueueGenericSend+0x8e>
	__asm volatile
 800cf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf68:	f383 8811 	msr	BASEPRI, r3
 800cf6c:	f3bf 8f6f 	isb	sy
 800cf70:	f3bf 8f4f 	dsb	sy
 800cf74:	623b      	str	r3, [r7, #32]
}
 800cf76:	bf00      	nop
 800cf78:	e7fe      	b.n	800cf78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf7a:	f001 f9e7 	bl	800e34c <xTaskGetSchedulerState>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d102      	bne.n	800cf8a <xQueueGenericSend+0x9e>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d101      	bne.n	800cf8e <xQueueGenericSend+0xa2>
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e000      	b.n	800cf90 <xQueueGenericSend+0xa4>
 800cf8e:	2300      	movs	r3, #0
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d10a      	bne.n	800cfaa <xQueueGenericSend+0xbe>
	__asm volatile
 800cf94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf98:	f383 8811 	msr	BASEPRI, r3
 800cf9c:	f3bf 8f6f 	isb	sy
 800cfa0:	f3bf 8f4f 	dsb	sy
 800cfa4:	61fb      	str	r3, [r7, #28]
}
 800cfa6:	bf00      	nop
 800cfa8:	e7fe      	b.n	800cfa8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cfaa:	f001 ff2b 	bl	800ee04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d302      	bcc.n	800cfc0 <xQueueGenericSend+0xd4>
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	2b02      	cmp	r3, #2
 800cfbe:	d129      	bne.n	800d014 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cfc0:	683a      	ldr	r2, [r7, #0]
 800cfc2:	68b9      	ldr	r1, [r7, #8]
 800cfc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfc6:	f000 fa0b 	bl	800d3e0 <prvCopyDataToQueue>
 800cfca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d010      	beq.n	800cff6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd6:	3324      	adds	r3, #36	; 0x24
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f000 fff5 	bl	800dfc8 <xTaskRemoveFromEventList>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d013      	beq.n	800d00c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cfe4:	4b3f      	ldr	r3, [pc, #252]	; (800d0e4 <xQueueGenericSend+0x1f8>)
 800cfe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfea:	601a      	str	r2, [r3, #0]
 800cfec:	f3bf 8f4f 	dsb	sy
 800cff0:	f3bf 8f6f 	isb	sy
 800cff4:	e00a      	b.n	800d00c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d007      	beq.n	800d00c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cffc:	4b39      	ldr	r3, [pc, #228]	; (800d0e4 <xQueueGenericSend+0x1f8>)
 800cffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d002:	601a      	str	r2, [r3, #0]
 800d004:	f3bf 8f4f 	dsb	sy
 800d008:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d00c:	f001 ff2a 	bl	800ee64 <vPortExitCritical>
				return pdPASS;
 800d010:	2301      	movs	r3, #1
 800d012:	e063      	b.n	800d0dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d103      	bne.n	800d022 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d01a:	f001 ff23 	bl	800ee64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d01e:	2300      	movs	r3, #0
 800d020:	e05c      	b.n	800d0dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d024:	2b00      	cmp	r3, #0
 800d026:	d106      	bne.n	800d036 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d028:	f107 0314 	add.w	r3, r7, #20
 800d02c:	4618      	mov	r0, r3
 800d02e:	f001 f82f 	bl	800e090 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d032:	2301      	movs	r3, #1
 800d034:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d036:	f001 ff15 	bl	800ee64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d03a:	f000 fd9b 	bl	800db74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d03e:	f001 fee1 	bl	800ee04 <vPortEnterCritical>
 800d042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d044:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d048:	b25b      	sxtb	r3, r3
 800d04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d04e:	d103      	bne.n	800d058 <xQueueGenericSend+0x16c>
 800d050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d052:	2200      	movs	r2, #0
 800d054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d05e:	b25b      	sxtb	r3, r3
 800d060:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d064:	d103      	bne.n	800d06e <xQueueGenericSend+0x182>
 800d066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d068:	2200      	movs	r2, #0
 800d06a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d06e:	f001 fef9 	bl	800ee64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d072:	1d3a      	adds	r2, r7, #4
 800d074:	f107 0314 	add.w	r3, r7, #20
 800d078:	4611      	mov	r1, r2
 800d07a:	4618      	mov	r0, r3
 800d07c:	f001 f81e 	bl	800e0bc <xTaskCheckForTimeOut>
 800d080:	4603      	mov	r3, r0
 800d082:	2b00      	cmp	r3, #0
 800d084:	d124      	bne.n	800d0d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d086:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d088:	f000 faa2 	bl	800d5d0 <prvIsQueueFull>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d018      	beq.n	800d0c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d094:	3310      	adds	r3, #16
 800d096:	687a      	ldr	r2, [r7, #4]
 800d098:	4611      	mov	r1, r2
 800d09a:	4618      	mov	r0, r3
 800d09c:	f000 ff44 	bl	800df28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d0a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0a2:	f000 fa2d 	bl	800d500 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d0a6:	f000 fd73 	bl	800db90 <xTaskResumeAll>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	f47f af7c 	bne.w	800cfaa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d0b2:	4b0c      	ldr	r3, [pc, #48]	; (800d0e4 <xQueueGenericSend+0x1f8>)
 800d0b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0b8:	601a      	str	r2, [r3, #0]
 800d0ba:	f3bf 8f4f 	dsb	sy
 800d0be:	f3bf 8f6f 	isb	sy
 800d0c2:	e772      	b.n	800cfaa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d0c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0c6:	f000 fa1b 	bl	800d500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d0ca:	f000 fd61 	bl	800db90 <xTaskResumeAll>
 800d0ce:	e76c      	b.n	800cfaa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d0d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0d2:	f000 fa15 	bl	800d500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d0d6:	f000 fd5b 	bl	800db90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d0da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3738      	adds	r7, #56	; 0x38
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}
 800d0e4:	e000ed04 	.word	0xe000ed04

0800d0e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b090      	sub	sp, #64	; 0x40
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	607a      	str	r2, [r7, #4]
 800d0f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d10a      	bne.n	800d116 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d104:	f383 8811 	msr	BASEPRI, r3
 800d108:	f3bf 8f6f 	isb	sy
 800d10c:	f3bf 8f4f 	dsb	sy
 800d110:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d112:	bf00      	nop
 800d114:	e7fe      	b.n	800d114 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d103      	bne.n	800d124 <xQueueGenericSendFromISR+0x3c>
 800d11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d120:	2b00      	cmp	r3, #0
 800d122:	d101      	bne.n	800d128 <xQueueGenericSendFromISR+0x40>
 800d124:	2301      	movs	r3, #1
 800d126:	e000      	b.n	800d12a <xQueueGenericSendFromISR+0x42>
 800d128:	2300      	movs	r3, #0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d10a      	bne.n	800d144 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d132:	f383 8811 	msr	BASEPRI, r3
 800d136:	f3bf 8f6f 	isb	sy
 800d13a:	f3bf 8f4f 	dsb	sy
 800d13e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d140:	bf00      	nop
 800d142:	e7fe      	b.n	800d142 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	2b02      	cmp	r3, #2
 800d148:	d103      	bne.n	800d152 <xQueueGenericSendFromISR+0x6a>
 800d14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d14c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d14e:	2b01      	cmp	r3, #1
 800d150:	d101      	bne.n	800d156 <xQueueGenericSendFromISR+0x6e>
 800d152:	2301      	movs	r3, #1
 800d154:	e000      	b.n	800d158 <xQueueGenericSendFromISR+0x70>
 800d156:	2300      	movs	r3, #0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d10a      	bne.n	800d172 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d160:	f383 8811 	msr	BASEPRI, r3
 800d164:	f3bf 8f6f 	isb	sy
 800d168:	f3bf 8f4f 	dsb	sy
 800d16c:	623b      	str	r3, [r7, #32]
}
 800d16e:	bf00      	nop
 800d170:	e7fe      	b.n	800d170 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d172:	f001 ff29 	bl	800efc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d176:	f3ef 8211 	mrs	r2, BASEPRI
 800d17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17e:	f383 8811 	msr	BASEPRI, r3
 800d182:	f3bf 8f6f 	isb	sy
 800d186:	f3bf 8f4f 	dsb	sy
 800d18a:	61fa      	str	r2, [r7, #28]
 800d18c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d18e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d190:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d302      	bcc.n	800d1a4 <xQueueGenericSendFromISR+0xbc>
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	2b02      	cmp	r3, #2
 800d1a2:	d12f      	bne.n	800d204 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1b4:	683a      	ldr	r2, [r7, #0]
 800d1b6:	68b9      	ldr	r1, [r7, #8]
 800d1b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d1ba:	f000 f911 	bl	800d3e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d1be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1c6:	d112      	bne.n	800d1ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d016      	beq.n	800d1fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d2:	3324      	adds	r3, #36	; 0x24
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f000 fef7 	bl	800dfc8 <xTaskRemoveFromEventList>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d00e      	beq.n	800d1fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d00b      	beq.n	800d1fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	601a      	str	r2, [r3, #0]
 800d1ec:	e007      	b.n	800d1fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d1ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	b25a      	sxtb	r2, r3
 800d1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d1fe:	2301      	movs	r3, #1
 800d200:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d202:	e001      	b.n	800d208 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d204:	2300      	movs	r3, #0
 800d206:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d20a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d212:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d216:	4618      	mov	r0, r3
 800d218:	3740      	adds	r7, #64	; 0x40
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
	...

0800d220 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b08c      	sub	sp, #48	; 0x30
 800d224:	af00      	add	r7, sp, #0
 800d226:	60f8      	str	r0, [r7, #12]
 800d228:	60b9      	str	r1, [r7, #8]
 800d22a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d22c:	2300      	movs	r3, #0
 800d22e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d236:	2b00      	cmp	r3, #0
 800d238:	d10a      	bne.n	800d250 <xQueueReceive+0x30>
	__asm volatile
 800d23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23e:	f383 8811 	msr	BASEPRI, r3
 800d242:	f3bf 8f6f 	isb	sy
 800d246:	f3bf 8f4f 	dsb	sy
 800d24a:	623b      	str	r3, [r7, #32]
}
 800d24c:	bf00      	nop
 800d24e:	e7fe      	b.n	800d24e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d103      	bne.n	800d25e <xQueueReceive+0x3e>
 800d256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d101      	bne.n	800d262 <xQueueReceive+0x42>
 800d25e:	2301      	movs	r3, #1
 800d260:	e000      	b.n	800d264 <xQueueReceive+0x44>
 800d262:	2300      	movs	r3, #0
 800d264:	2b00      	cmp	r3, #0
 800d266:	d10a      	bne.n	800d27e <xQueueReceive+0x5e>
	__asm volatile
 800d268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d26c:	f383 8811 	msr	BASEPRI, r3
 800d270:	f3bf 8f6f 	isb	sy
 800d274:	f3bf 8f4f 	dsb	sy
 800d278:	61fb      	str	r3, [r7, #28]
}
 800d27a:	bf00      	nop
 800d27c:	e7fe      	b.n	800d27c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d27e:	f001 f865 	bl	800e34c <xTaskGetSchedulerState>
 800d282:	4603      	mov	r3, r0
 800d284:	2b00      	cmp	r3, #0
 800d286:	d102      	bne.n	800d28e <xQueueReceive+0x6e>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d101      	bne.n	800d292 <xQueueReceive+0x72>
 800d28e:	2301      	movs	r3, #1
 800d290:	e000      	b.n	800d294 <xQueueReceive+0x74>
 800d292:	2300      	movs	r3, #0
 800d294:	2b00      	cmp	r3, #0
 800d296:	d10a      	bne.n	800d2ae <xQueueReceive+0x8e>
	__asm volatile
 800d298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29c:	f383 8811 	msr	BASEPRI, r3
 800d2a0:	f3bf 8f6f 	isb	sy
 800d2a4:	f3bf 8f4f 	dsb	sy
 800d2a8:	61bb      	str	r3, [r7, #24]
}
 800d2aa:	bf00      	nop
 800d2ac:	e7fe      	b.n	800d2ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d2ae:	f001 fda9 	bl	800ee04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d01f      	beq.n	800d2fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d2be:	68b9      	ldr	r1, [r7, #8]
 800d2c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2c2:	f000 f8f7 	bl	800d4b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c8:	1e5a      	subs	r2, r3, #1
 800d2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d0:	691b      	ldr	r3, [r3, #16]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00f      	beq.n	800d2f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d8:	3310      	adds	r3, #16
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f000 fe74 	bl	800dfc8 <xTaskRemoveFromEventList>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d007      	beq.n	800d2f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d2e6:	4b3d      	ldr	r3, [pc, #244]	; (800d3dc <xQueueReceive+0x1bc>)
 800d2e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2ec:	601a      	str	r2, [r3, #0]
 800d2ee:	f3bf 8f4f 	dsb	sy
 800d2f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d2f6:	f001 fdb5 	bl	800ee64 <vPortExitCritical>
				return pdPASS;
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	e069      	b.n	800d3d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d103      	bne.n	800d30c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d304:	f001 fdae 	bl	800ee64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d308:	2300      	movs	r3, #0
 800d30a:	e062      	b.n	800d3d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d106      	bne.n	800d320 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d312:	f107 0310 	add.w	r3, r7, #16
 800d316:	4618      	mov	r0, r3
 800d318:	f000 feba 	bl	800e090 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d31c:	2301      	movs	r3, #1
 800d31e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d320:	f001 fda0 	bl	800ee64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d324:	f000 fc26 	bl	800db74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d328:	f001 fd6c 	bl	800ee04 <vPortEnterCritical>
 800d32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d332:	b25b      	sxtb	r3, r3
 800d334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d338:	d103      	bne.n	800d342 <xQueueReceive+0x122>
 800d33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33c:	2200      	movs	r2, #0
 800d33e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d344:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d348:	b25b      	sxtb	r3, r3
 800d34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d34e:	d103      	bne.n	800d358 <xQueueReceive+0x138>
 800d350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d352:	2200      	movs	r2, #0
 800d354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d358:	f001 fd84 	bl	800ee64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d35c:	1d3a      	adds	r2, r7, #4
 800d35e:	f107 0310 	add.w	r3, r7, #16
 800d362:	4611      	mov	r1, r2
 800d364:	4618      	mov	r0, r3
 800d366:	f000 fea9 	bl	800e0bc <xTaskCheckForTimeOut>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d123      	bne.n	800d3b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d372:	f000 f917 	bl	800d5a4 <prvIsQueueEmpty>
 800d376:	4603      	mov	r3, r0
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d017      	beq.n	800d3ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d37e:	3324      	adds	r3, #36	; 0x24
 800d380:	687a      	ldr	r2, [r7, #4]
 800d382:	4611      	mov	r1, r2
 800d384:	4618      	mov	r0, r3
 800d386:	f000 fdcf 	bl	800df28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d38a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d38c:	f000 f8b8 	bl	800d500 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d390:	f000 fbfe 	bl	800db90 <xTaskResumeAll>
 800d394:	4603      	mov	r3, r0
 800d396:	2b00      	cmp	r3, #0
 800d398:	d189      	bne.n	800d2ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d39a:	4b10      	ldr	r3, [pc, #64]	; (800d3dc <xQueueReceive+0x1bc>)
 800d39c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3a0:	601a      	str	r2, [r3, #0]
 800d3a2:	f3bf 8f4f 	dsb	sy
 800d3a6:	f3bf 8f6f 	isb	sy
 800d3aa:	e780      	b.n	800d2ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d3ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3ae:	f000 f8a7 	bl	800d500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d3b2:	f000 fbed 	bl	800db90 <xTaskResumeAll>
 800d3b6:	e77a      	b.n	800d2ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d3b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3ba:	f000 f8a1 	bl	800d500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d3be:	f000 fbe7 	bl	800db90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3c4:	f000 f8ee 	bl	800d5a4 <prvIsQueueEmpty>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	f43f af6f 	beq.w	800d2ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d3d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3730      	adds	r7, #48	; 0x30
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	e000ed04 	.word	0xe000ed04

0800d3e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b086      	sub	sp, #24
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d10d      	bne.n	800d41a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d14d      	bne.n	800d4a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	4618      	mov	r0, r3
 800d40c:	f000 ffbc 	bl	800e388 <xTaskPriorityDisinherit>
 800d410:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2200      	movs	r2, #0
 800d416:	609a      	str	r2, [r3, #8]
 800d418:	e043      	b.n	800d4a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d119      	bne.n	800d454 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	6858      	ldr	r0, [r3, #4]
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d428:	461a      	mov	r2, r3
 800d42a:	68b9      	ldr	r1, [r7, #8]
 800d42c:	f002 f919 	bl	800f662 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	685a      	ldr	r2, [r3, #4]
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d438:	441a      	add	r2, r3
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	685a      	ldr	r2, [r3, #4]
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	689b      	ldr	r3, [r3, #8]
 800d446:	429a      	cmp	r2, r3
 800d448:	d32b      	bcc.n	800d4a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681a      	ldr	r2, [r3, #0]
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	605a      	str	r2, [r3, #4]
 800d452:	e026      	b.n	800d4a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	68d8      	ldr	r0, [r3, #12]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d45c:	461a      	mov	r2, r3
 800d45e:	68b9      	ldr	r1, [r7, #8]
 800d460:	f002 f8ff 	bl	800f662 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	68da      	ldr	r2, [r3, #12]
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d46c:	425b      	negs	r3, r3
 800d46e:	441a      	add	r2, r3
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	68da      	ldr	r2, [r3, #12]
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d207      	bcs.n	800d490 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	689a      	ldr	r2, [r3, #8]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d488:	425b      	negs	r3, r3
 800d48a:	441a      	add	r2, r3
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2b02      	cmp	r3, #2
 800d494:	d105      	bne.n	800d4a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d002      	beq.n	800d4a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d49c:	693b      	ldr	r3, [r7, #16]
 800d49e:	3b01      	subs	r3, #1
 800d4a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	1c5a      	adds	r2, r3, #1
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d4aa:	697b      	ldr	r3, [r7, #20]
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3718      	adds	r7, #24
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d018      	beq.n	800d4f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	68da      	ldr	r2, [r3, #12]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ce:	441a      	add	r2, r3
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	68da      	ldr	r2, [r3, #12]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	689b      	ldr	r3, [r3, #8]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d303      	bcc.n	800d4e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681a      	ldr	r2, [r3, #0]
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	68d9      	ldr	r1, [r3, #12]
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	6838      	ldr	r0, [r7, #0]
 800d4f4:	f002 f8b5 	bl	800f662 <memcpy>
	}
}
 800d4f8:	bf00      	nop
 800d4fa:	3708      	adds	r7, #8
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}

0800d500 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d508:	f001 fc7c 	bl	800ee04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d512:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d514:	e011      	b.n	800d53a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d012      	beq.n	800d544 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	3324      	adds	r3, #36	; 0x24
 800d522:	4618      	mov	r0, r3
 800d524:	f000 fd50 	bl	800dfc8 <xTaskRemoveFromEventList>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d001      	beq.n	800d532 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d52e:	f000 fe27 	bl	800e180 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d532:	7bfb      	ldrb	r3, [r7, #15]
 800d534:	3b01      	subs	r3, #1
 800d536:	b2db      	uxtb	r3, r3
 800d538:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d53a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	dce9      	bgt.n	800d516 <prvUnlockQueue+0x16>
 800d542:	e000      	b.n	800d546 <prvUnlockQueue+0x46>
					break;
 800d544:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	22ff      	movs	r2, #255	; 0xff
 800d54a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d54e:	f001 fc89 	bl	800ee64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d552:	f001 fc57 	bl	800ee04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d55c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d55e:	e011      	b.n	800d584 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	691b      	ldr	r3, [r3, #16]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d012      	beq.n	800d58e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	3310      	adds	r3, #16
 800d56c:	4618      	mov	r0, r3
 800d56e:	f000 fd2b 	bl	800dfc8 <xTaskRemoveFromEventList>
 800d572:	4603      	mov	r3, r0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d001      	beq.n	800d57c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d578:	f000 fe02 	bl	800e180 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d57c:	7bbb      	ldrb	r3, [r7, #14]
 800d57e:	3b01      	subs	r3, #1
 800d580:	b2db      	uxtb	r3, r3
 800d582:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d584:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	dce9      	bgt.n	800d560 <prvUnlockQueue+0x60>
 800d58c:	e000      	b.n	800d590 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d58e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	22ff      	movs	r2, #255	; 0xff
 800d594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d598:	f001 fc64 	bl	800ee64 <vPortExitCritical>
}
 800d59c:	bf00      	nop
 800d59e:	3710      	adds	r7, #16
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b084      	sub	sp, #16
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d5ac:	f001 fc2a 	bl	800ee04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d102      	bne.n	800d5be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	60fb      	str	r3, [r7, #12]
 800d5bc:	e001      	b.n	800d5c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d5c2:	f001 fc4f 	bl	800ee64 <vPortExitCritical>

	return xReturn;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3710      	adds	r7, #16
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d5d8:	f001 fc14 	bl	800ee04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d102      	bne.n	800d5ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	60fb      	str	r3, [r7, #12]
 800d5ec:	e001      	b.n	800d5f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d5f2:	f001 fc37 	bl	800ee64 <vPortExitCritical>

	return xReturn;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3710      	adds	r7, #16
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d600:	b480      	push	{r7}
 800d602:	b085      	sub	sp, #20
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d60a:	2300      	movs	r3, #0
 800d60c:	60fb      	str	r3, [r7, #12]
 800d60e:	e014      	b.n	800d63a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d610:	4a0f      	ldr	r2, [pc, #60]	; (800d650 <vQueueAddToRegistry+0x50>)
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d10b      	bne.n	800d634 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d61c:	490c      	ldr	r1, [pc, #48]	; (800d650 <vQueueAddToRegistry+0x50>)
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	683a      	ldr	r2, [r7, #0]
 800d622:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d626:	4a0a      	ldr	r2, [pc, #40]	; (800d650 <vQueueAddToRegistry+0x50>)
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	00db      	lsls	r3, r3, #3
 800d62c:	4413      	add	r3, r2
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d632:	e006      	b.n	800d642 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	3301      	adds	r3, #1
 800d638:	60fb      	str	r3, [r7, #12]
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	2b07      	cmp	r3, #7
 800d63e:	d9e7      	bls.n	800d610 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d640:	bf00      	nop
 800d642:	bf00      	nop
 800d644:	3714      	adds	r7, #20
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr
 800d64e:	bf00      	nop
 800d650:	20002b80 	.word	0x20002b80

0800d654 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d654:	b580      	push	{r7, lr}
 800d656:	b086      	sub	sp, #24
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d664:	f001 fbce 	bl	800ee04 <vPortEnterCritical>
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d66e:	b25b      	sxtb	r3, r3
 800d670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d674:	d103      	bne.n	800d67e <vQueueWaitForMessageRestricted+0x2a>
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	2200      	movs	r2, #0
 800d67a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d684:	b25b      	sxtb	r3, r3
 800d686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d68a:	d103      	bne.n	800d694 <vQueueWaitForMessageRestricted+0x40>
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	2200      	movs	r2, #0
 800d690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d694:	f001 fbe6 	bl	800ee64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d106      	bne.n	800d6ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	3324      	adds	r3, #36	; 0x24
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	68b9      	ldr	r1, [r7, #8]
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f000 fc61 	bl	800df70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d6ae:	6978      	ldr	r0, [r7, #20]
 800d6b0:	f7ff ff26 	bl	800d500 <prvUnlockQueue>
	}
 800d6b4:	bf00      	nop
 800d6b6:	3718      	adds	r7, #24
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b08e      	sub	sp, #56	; 0x38
 800d6c0:	af04      	add	r7, sp, #16
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	60b9      	str	r1, [r7, #8]
 800d6c6:	607a      	str	r2, [r7, #4]
 800d6c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d10a      	bne.n	800d6e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d4:	f383 8811 	msr	BASEPRI, r3
 800d6d8:	f3bf 8f6f 	isb	sy
 800d6dc:	f3bf 8f4f 	dsb	sy
 800d6e0:	623b      	str	r3, [r7, #32]
}
 800d6e2:	bf00      	nop
 800d6e4:	e7fe      	b.n	800d6e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d10a      	bne.n	800d702 <xTaskCreateStatic+0x46>
	__asm volatile
 800d6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f0:	f383 8811 	msr	BASEPRI, r3
 800d6f4:	f3bf 8f6f 	isb	sy
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	61fb      	str	r3, [r7, #28]
}
 800d6fe:	bf00      	nop
 800d700:	e7fe      	b.n	800d700 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d702:	23bc      	movs	r3, #188	; 0xbc
 800d704:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	2bbc      	cmp	r3, #188	; 0xbc
 800d70a:	d00a      	beq.n	800d722 <xTaskCreateStatic+0x66>
	__asm volatile
 800d70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d710:	f383 8811 	msr	BASEPRI, r3
 800d714:	f3bf 8f6f 	isb	sy
 800d718:	f3bf 8f4f 	dsb	sy
 800d71c:	61bb      	str	r3, [r7, #24]
}
 800d71e:	bf00      	nop
 800d720:	e7fe      	b.n	800d720 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d722:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d726:	2b00      	cmp	r3, #0
 800d728:	d01e      	beq.n	800d768 <xTaskCreateStatic+0xac>
 800d72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d01b      	beq.n	800d768 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d732:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d738:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73c:	2202      	movs	r2, #2
 800d73e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d742:	2300      	movs	r3, #0
 800d744:	9303      	str	r3, [sp, #12]
 800d746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d748:	9302      	str	r3, [sp, #8]
 800d74a:	f107 0314 	add.w	r3, r7, #20
 800d74e:	9301      	str	r3, [sp, #4]
 800d750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d752:	9300      	str	r3, [sp, #0]
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	687a      	ldr	r2, [r7, #4]
 800d758:	68b9      	ldr	r1, [r7, #8]
 800d75a:	68f8      	ldr	r0, [r7, #12]
 800d75c:	f000 f850 	bl	800d800 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d762:	f000 f8f3 	bl	800d94c <prvAddNewTaskToReadyList>
 800d766:	e001      	b.n	800d76c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d768:	2300      	movs	r3, #0
 800d76a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d76c:	697b      	ldr	r3, [r7, #20]
	}
 800d76e:	4618      	mov	r0, r3
 800d770:	3728      	adds	r7, #40	; 0x28
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d776:	b580      	push	{r7, lr}
 800d778:	b08c      	sub	sp, #48	; 0x30
 800d77a:	af04      	add	r7, sp, #16
 800d77c:	60f8      	str	r0, [r7, #12]
 800d77e:	60b9      	str	r1, [r7, #8]
 800d780:	603b      	str	r3, [r7, #0]
 800d782:	4613      	mov	r3, r2
 800d784:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d786:	88fb      	ldrh	r3, [r7, #6]
 800d788:	009b      	lsls	r3, r3, #2
 800d78a:	4618      	mov	r0, r3
 800d78c:	f001 fc5c 	bl	800f048 <pvPortMalloc>
 800d790:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d00e      	beq.n	800d7b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d798:	20bc      	movs	r0, #188	; 0xbc
 800d79a:	f001 fc55 	bl	800f048 <pvPortMalloc>
 800d79e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d7a0:	69fb      	ldr	r3, [r7, #28]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d003      	beq.n	800d7ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d7a6:	69fb      	ldr	r3, [r7, #28]
 800d7a8:	697a      	ldr	r2, [r7, #20]
 800d7aa:	631a      	str	r2, [r3, #48]	; 0x30
 800d7ac:	e005      	b.n	800d7ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d7ae:	6978      	ldr	r0, [r7, #20]
 800d7b0:	f001 fd16 	bl	800f1e0 <vPortFree>
 800d7b4:	e001      	b.n	800d7ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d017      	beq.n	800d7f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d7c0:	69fb      	ldr	r3, [r7, #28]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d7c8:	88fa      	ldrh	r2, [r7, #6]
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	9303      	str	r3, [sp, #12]
 800d7ce:	69fb      	ldr	r3, [r7, #28]
 800d7d0:	9302      	str	r3, [sp, #8]
 800d7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d4:	9301      	str	r3, [sp, #4]
 800d7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d8:	9300      	str	r3, [sp, #0]
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	68b9      	ldr	r1, [r7, #8]
 800d7de:	68f8      	ldr	r0, [r7, #12]
 800d7e0:	f000 f80e 	bl	800d800 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d7e4:	69f8      	ldr	r0, [r7, #28]
 800d7e6:	f000 f8b1 	bl	800d94c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	61bb      	str	r3, [r7, #24]
 800d7ee:	e002      	b.n	800d7f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d7f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d7f6:	69bb      	ldr	r3, [r7, #24]
	}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3720      	adds	r7, #32
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b088      	sub	sp, #32
 800d804:	af00      	add	r7, sp, #0
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	607a      	str	r2, [r7, #4]
 800d80c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d810:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	009b      	lsls	r3, r3, #2
 800d816:	461a      	mov	r2, r3
 800d818:	21a5      	movs	r1, #165	; 0xa5
 800d81a:	f001 ff30 	bl	800f67e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d828:	3b01      	subs	r3, #1
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	4413      	add	r3, r2
 800d82e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d830:	69bb      	ldr	r3, [r7, #24]
 800d832:	f023 0307 	bic.w	r3, r3, #7
 800d836:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d838:	69bb      	ldr	r3, [r7, #24]
 800d83a:	f003 0307 	and.w	r3, r3, #7
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d00a      	beq.n	800d858 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d846:	f383 8811 	msr	BASEPRI, r3
 800d84a:	f3bf 8f6f 	isb	sy
 800d84e:	f3bf 8f4f 	dsb	sy
 800d852:	617b      	str	r3, [r7, #20]
}
 800d854:	bf00      	nop
 800d856:	e7fe      	b.n	800d856 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d01f      	beq.n	800d89e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d85e:	2300      	movs	r3, #0
 800d860:	61fb      	str	r3, [r7, #28]
 800d862:	e012      	b.n	800d88a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d864:	68ba      	ldr	r2, [r7, #8]
 800d866:	69fb      	ldr	r3, [r7, #28]
 800d868:	4413      	add	r3, r2
 800d86a:	7819      	ldrb	r1, [r3, #0]
 800d86c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	4413      	add	r3, r2
 800d872:	3334      	adds	r3, #52	; 0x34
 800d874:	460a      	mov	r2, r1
 800d876:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d878:	68ba      	ldr	r2, [r7, #8]
 800d87a:	69fb      	ldr	r3, [r7, #28]
 800d87c:	4413      	add	r3, r2
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d006      	beq.n	800d892 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	3301      	adds	r3, #1
 800d888:	61fb      	str	r3, [r7, #28]
 800d88a:	69fb      	ldr	r3, [r7, #28]
 800d88c:	2b0f      	cmp	r3, #15
 800d88e:	d9e9      	bls.n	800d864 <prvInitialiseNewTask+0x64>
 800d890:	e000      	b.n	800d894 <prvInitialiseNewTask+0x94>
			{
				break;
 800d892:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d896:	2200      	movs	r2, #0
 800d898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d89c:	e003      	b.n	800d8a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a8:	2b37      	cmp	r3, #55	; 0x37
 800d8aa:	d901      	bls.n	800d8b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d8ac:	2337      	movs	r3, #55	; 0x37
 800d8ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8be:	2200      	movs	r2, #0
 800d8c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c4:	3304      	adds	r3, #4
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7ff f978 	bl	800cbbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ce:	3318      	adds	r3, #24
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7ff f973 	bl	800cbbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fe:	3354      	adds	r3, #84	; 0x54
 800d900:	2260      	movs	r2, #96	; 0x60
 800d902:	2100      	movs	r1, #0
 800d904:	4618      	mov	r0, r3
 800d906:	f001 feba 	bl	800f67e <memset>
 800d90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d90c:	4a0c      	ldr	r2, [pc, #48]	; (800d940 <prvInitialiseNewTask+0x140>)
 800d90e:	659a      	str	r2, [r3, #88]	; 0x58
 800d910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d912:	4a0c      	ldr	r2, [pc, #48]	; (800d944 <prvInitialiseNewTask+0x144>)
 800d914:	65da      	str	r2, [r3, #92]	; 0x5c
 800d916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d918:	4a0b      	ldr	r2, [pc, #44]	; (800d948 <prvInitialiseNewTask+0x148>)
 800d91a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d91c:	683a      	ldr	r2, [r7, #0]
 800d91e:	68f9      	ldr	r1, [r7, #12]
 800d920:	69b8      	ldr	r0, [r7, #24]
 800d922:	f001 f941 	bl	800eba8 <pxPortInitialiseStack>
 800d926:	4602      	mov	r2, r0
 800d928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d002      	beq.n	800d938 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d936:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d938:	bf00      	nop
 800d93a:	3720      	adds	r7, #32
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	080157a0 	.word	0x080157a0
 800d944:	080157c0 	.word	0x080157c0
 800d948:	08015780 	.word	0x08015780

0800d94c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b082      	sub	sp, #8
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d954:	f001 fa56 	bl	800ee04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d958:	4b2d      	ldr	r3, [pc, #180]	; (800da10 <prvAddNewTaskToReadyList+0xc4>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	3301      	adds	r3, #1
 800d95e:	4a2c      	ldr	r2, [pc, #176]	; (800da10 <prvAddNewTaskToReadyList+0xc4>)
 800d960:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d962:	4b2c      	ldr	r3, [pc, #176]	; (800da14 <prvAddNewTaskToReadyList+0xc8>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d109      	bne.n	800d97e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d96a:	4a2a      	ldr	r2, [pc, #168]	; (800da14 <prvAddNewTaskToReadyList+0xc8>)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d970:	4b27      	ldr	r3, [pc, #156]	; (800da10 <prvAddNewTaskToReadyList+0xc4>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2b01      	cmp	r3, #1
 800d976:	d110      	bne.n	800d99a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d978:	f000 fc26 	bl	800e1c8 <prvInitialiseTaskLists>
 800d97c:	e00d      	b.n	800d99a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d97e:	4b26      	ldr	r3, [pc, #152]	; (800da18 <prvAddNewTaskToReadyList+0xcc>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d109      	bne.n	800d99a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d986:	4b23      	ldr	r3, [pc, #140]	; (800da14 <prvAddNewTaskToReadyList+0xc8>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d990:	429a      	cmp	r2, r3
 800d992:	d802      	bhi.n	800d99a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d994:	4a1f      	ldr	r2, [pc, #124]	; (800da14 <prvAddNewTaskToReadyList+0xc8>)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d99a:	4b20      	ldr	r3, [pc, #128]	; (800da1c <prvAddNewTaskToReadyList+0xd0>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	3301      	adds	r3, #1
 800d9a0:	4a1e      	ldr	r2, [pc, #120]	; (800da1c <prvAddNewTaskToReadyList+0xd0>)
 800d9a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d9a4:	4b1d      	ldr	r3, [pc, #116]	; (800da1c <prvAddNewTaskToReadyList+0xd0>)
 800d9a6:	681a      	ldr	r2, [r3, #0]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9b0:	4b1b      	ldr	r3, [pc, #108]	; (800da20 <prvAddNewTaskToReadyList+0xd4>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d903      	bls.n	800d9c0 <prvAddNewTaskToReadyList+0x74>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9bc:	4a18      	ldr	r2, [pc, #96]	; (800da20 <prvAddNewTaskToReadyList+0xd4>)
 800d9be:	6013      	str	r3, [r2, #0]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9c4:	4613      	mov	r3, r2
 800d9c6:	009b      	lsls	r3, r3, #2
 800d9c8:	4413      	add	r3, r2
 800d9ca:	009b      	lsls	r3, r3, #2
 800d9cc:	4a15      	ldr	r2, [pc, #84]	; (800da24 <prvAddNewTaskToReadyList+0xd8>)
 800d9ce:	441a      	add	r2, r3
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	3304      	adds	r3, #4
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	4610      	mov	r0, r2
 800d9d8:	f7ff f8fd 	bl	800cbd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d9dc:	f001 fa42 	bl	800ee64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d9e0:	4b0d      	ldr	r3, [pc, #52]	; (800da18 <prvAddNewTaskToReadyList+0xcc>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d00e      	beq.n	800da06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d9e8:	4b0a      	ldr	r3, [pc, #40]	; (800da14 <prvAddNewTaskToReadyList+0xc8>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d207      	bcs.n	800da06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d9f6:	4b0c      	ldr	r3, [pc, #48]	; (800da28 <prvAddNewTaskToReadyList+0xdc>)
 800d9f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9fc:	601a      	str	r2, [r3, #0]
 800d9fe:	f3bf 8f4f 	dsb	sy
 800da02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da06:	bf00      	nop
 800da08:	3708      	adds	r7, #8
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}
 800da0e:	bf00      	nop
 800da10:	20000ef4 	.word	0x20000ef4
 800da14:	20000a20 	.word	0x20000a20
 800da18:	20000f00 	.word	0x20000f00
 800da1c:	20000f10 	.word	0x20000f10
 800da20:	20000efc 	.word	0x20000efc
 800da24:	20000a24 	.word	0x20000a24
 800da28:	e000ed04 	.word	0xe000ed04

0800da2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800da34:	2300      	movs	r3, #0
 800da36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d017      	beq.n	800da6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800da3e:	4b13      	ldr	r3, [pc, #76]	; (800da8c <vTaskDelay+0x60>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d00a      	beq.n	800da5c <vTaskDelay+0x30>
	__asm volatile
 800da46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da4a:	f383 8811 	msr	BASEPRI, r3
 800da4e:	f3bf 8f6f 	isb	sy
 800da52:	f3bf 8f4f 	dsb	sy
 800da56:	60bb      	str	r3, [r7, #8]
}
 800da58:	bf00      	nop
 800da5a:	e7fe      	b.n	800da5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800da5c:	f000 f88a 	bl	800db74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800da60:	2100      	movs	r1, #0
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f000 fcfe 	bl	800e464 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800da68:	f000 f892 	bl	800db90 <xTaskResumeAll>
 800da6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d107      	bne.n	800da84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800da74:	4b06      	ldr	r3, [pc, #24]	; (800da90 <vTaskDelay+0x64>)
 800da76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da7a:	601a      	str	r2, [r3, #0]
 800da7c:	f3bf 8f4f 	dsb	sy
 800da80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da84:	bf00      	nop
 800da86:	3710      	adds	r7, #16
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}
 800da8c:	20000f1c 	.word	0x20000f1c
 800da90:	e000ed04 	.word	0xe000ed04

0800da94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b08a      	sub	sp, #40	; 0x28
 800da98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800da9a:	2300      	movs	r3, #0
 800da9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800da9e:	2300      	movs	r3, #0
 800daa0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800daa2:	463a      	mov	r2, r7
 800daa4:	1d39      	adds	r1, r7, #4
 800daa6:	f107 0308 	add.w	r3, r7, #8
 800daaa:	4618      	mov	r0, r3
 800daac:	f7ff f832 	bl	800cb14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dab0:	6839      	ldr	r1, [r7, #0]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	68ba      	ldr	r2, [r7, #8]
 800dab6:	9202      	str	r2, [sp, #8]
 800dab8:	9301      	str	r3, [sp, #4]
 800daba:	2300      	movs	r3, #0
 800dabc:	9300      	str	r3, [sp, #0]
 800dabe:	2300      	movs	r3, #0
 800dac0:	460a      	mov	r2, r1
 800dac2:	4924      	ldr	r1, [pc, #144]	; (800db54 <vTaskStartScheduler+0xc0>)
 800dac4:	4824      	ldr	r0, [pc, #144]	; (800db58 <vTaskStartScheduler+0xc4>)
 800dac6:	f7ff fdf9 	bl	800d6bc <xTaskCreateStatic>
 800daca:	4603      	mov	r3, r0
 800dacc:	4a23      	ldr	r2, [pc, #140]	; (800db5c <vTaskStartScheduler+0xc8>)
 800dace:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dad0:	4b22      	ldr	r3, [pc, #136]	; (800db5c <vTaskStartScheduler+0xc8>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d002      	beq.n	800dade <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dad8:	2301      	movs	r3, #1
 800dada:	617b      	str	r3, [r7, #20]
 800dadc:	e001      	b.n	800dae2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dade:	2300      	movs	r3, #0
 800dae0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d102      	bne.n	800daee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dae8:	f000 fd10 	bl	800e50c <xTimerCreateTimerTask>
 800daec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d11b      	bne.n	800db2c <vTaskStartScheduler+0x98>
	__asm volatile
 800daf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf8:	f383 8811 	msr	BASEPRI, r3
 800dafc:	f3bf 8f6f 	isb	sy
 800db00:	f3bf 8f4f 	dsb	sy
 800db04:	613b      	str	r3, [r7, #16]
}
 800db06:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800db08:	4b15      	ldr	r3, [pc, #84]	; (800db60 <vTaskStartScheduler+0xcc>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	3354      	adds	r3, #84	; 0x54
 800db0e:	4a15      	ldr	r2, [pc, #84]	; (800db64 <vTaskStartScheduler+0xd0>)
 800db10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800db12:	4b15      	ldr	r3, [pc, #84]	; (800db68 <vTaskStartScheduler+0xd4>)
 800db14:	f04f 32ff 	mov.w	r2, #4294967295
 800db18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800db1a:	4b14      	ldr	r3, [pc, #80]	; (800db6c <vTaskStartScheduler+0xd8>)
 800db1c:	2201      	movs	r2, #1
 800db1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800db20:	4b13      	ldr	r3, [pc, #76]	; (800db70 <vTaskStartScheduler+0xdc>)
 800db22:	2200      	movs	r2, #0
 800db24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800db26:	f001 f8cb 	bl	800ecc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800db2a:	e00e      	b.n	800db4a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db32:	d10a      	bne.n	800db4a <vTaskStartScheduler+0xb6>
	__asm volatile
 800db34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db38:	f383 8811 	msr	BASEPRI, r3
 800db3c:	f3bf 8f6f 	isb	sy
 800db40:	f3bf 8f4f 	dsb	sy
 800db44:	60fb      	str	r3, [r7, #12]
}
 800db46:	bf00      	nop
 800db48:	e7fe      	b.n	800db48 <vTaskStartScheduler+0xb4>
}
 800db4a:	bf00      	nop
 800db4c:	3718      	adds	r7, #24
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop
 800db54:	08015498 	.word	0x08015498
 800db58:	0800e199 	.word	0x0800e199
 800db5c:	20000f18 	.word	0x20000f18
 800db60:	20000a20 	.word	0x20000a20
 800db64:	20000028 	.word	0x20000028
 800db68:	20000f14 	.word	0x20000f14
 800db6c:	20000f00 	.word	0x20000f00
 800db70:	20000ef8 	.word	0x20000ef8

0800db74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800db74:	b480      	push	{r7}
 800db76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800db78:	4b04      	ldr	r3, [pc, #16]	; (800db8c <vTaskSuspendAll+0x18>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	3301      	adds	r3, #1
 800db7e:	4a03      	ldr	r2, [pc, #12]	; (800db8c <vTaskSuspendAll+0x18>)
 800db80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800db82:	bf00      	nop
 800db84:	46bd      	mov	sp, r7
 800db86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8a:	4770      	bx	lr
 800db8c:	20000f1c 	.word	0x20000f1c

0800db90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800db96:	2300      	movs	r3, #0
 800db98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800db9a:	2300      	movs	r3, #0
 800db9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800db9e:	4b42      	ldr	r3, [pc, #264]	; (800dca8 <xTaskResumeAll+0x118>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d10a      	bne.n	800dbbc <xTaskResumeAll+0x2c>
	__asm volatile
 800dba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbaa:	f383 8811 	msr	BASEPRI, r3
 800dbae:	f3bf 8f6f 	isb	sy
 800dbb2:	f3bf 8f4f 	dsb	sy
 800dbb6:	603b      	str	r3, [r7, #0]
}
 800dbb8:	bf00      	nop
 800dbba:	e7fe      	b.n	800dbba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dbbc:	f001 f922 	bl	800ee04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dbc0:	4b39      	ldr	r3, [pc, #228]	; (800dca8 <xTaskResumeAll+0x118>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	3b01      	subs	r3, #1
 800dbc6:	4a38      	ldr	r2, [pc, #224]	; (800dca8 <xTaskResumeAll+0x118>)
 800dbc8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbca:	4b37      	ldr	r3, [pc, #220]	; (800dca8 <xTaskResumeAll+0x118>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d162      	bne.n	800dc98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dbd2:	4b36      	ldr	r3, [pc, #216]	; (800dcac <xTaskResumeAll+0x11c>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d05e      	beq.n	800dc98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dbda:	e02f      	b.n	800dc3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbdc:	4b34      	ldr	r3, [pc, #208]	; (800dcb0 <xTaskResumeAll+0x120>)
 800dbde:	68db      	ldr	r3, [r3, #12]
 800dbe0:	68db      	ldr	r3, [r3, #12]
 800dbe2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	3318      	adds	r3, #24
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f7ff f851 	bl	800cc90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	3304      	adds	r3, #4
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7ff f84c 	bl	800cc90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbfc:	4b2d      	ldr	r3, [pc, #180]	; (800dcb4 <xTaskResumeAll+0x124>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d903      	bls.n	800dc0c <xTaskResumeAll+0x7c>
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc08:	4a2a      	ldr	r2, [pc, #168]	; (800dcb4 <xTaskResumeAll+0x124>)
 800dc0a:	6013      	str	r3, [r2, #0]
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc10:	4613      	mov	r3, r2
 800dc12:	009b      	lsls	r3, r3, #2
 800dc14:	4413      	add	r3, r2
 800dc16:	009b      	lsls	r3, r3, #2
 800dc18:	4a27      	ldr	r2, [pc, #156]	; (800dcb8 <xTaskResumeAll+0x128>)
 800dc1a:	441a      	add	r2, r3
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	3304      	adds	r3, #4
 800dc20:	4619      	mov	r1, r3
 800dc22:	4610      	mov	r0, r2
 800dc24:	f7fe ffd7 	bl	800cbd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc2c:	4b23      	ldr	r3, [pc, #140]	; (800dcbc <xTaskResumeAll+0x12c>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc32:	429a      	cmp	r2, r3
 800dc34:	d302      	bcc.n	800dc3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dc36:	4b22      	ldr	r3, [pc, #136]	; (800dcc0 <xTaskResumeAll+0x130>)
 800dc38:	2201      	movs	r2, #1
 800dc3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc3c:	4b1c      	ldr	r3, [pc, #112]	; (800dcb0 <xTaskResumeAll+0x120>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d1cb      	bne.n	800dbdc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d001      	beq.n	800dc4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dc4a:	f000 fb5f 	bl	800e30c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dc4e:	4b1d      	ldr	r3, [pc, #116]	; (800dcc4 <xTaskResumeAll+0x134>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d010      	beq.n	800dc7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dc5a:	f000 f847 	bl	800dcec <xTaskIncrementTick>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d002      	beq.n	800dc6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dc64:	4b16      	ldr	r3, [pc, #88]	; (800dcc0 <xTaskResumeAll+0x130>)
 800dc66:	2201      	movs	r2, #1
 800dc68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	3b01      	subs	r3, #1
 800dc6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d1f1      	bne.n	800dc5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dc76:	4b13      	ldr	r3, [pc, #76]	; (800dcc4 <xTaskResumeAll+0x134>)
 800dc78:	2200      	movs	r2, #0
 800dc7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dc7c:	4b10      	ldr	r3, [pc, #64]	; (800dcc0 <xTaskResumeAll+0x130>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d009      	beq.n	800dc98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dc84:	2301      	movs	r3, #1
 800dc86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dc88:	4b0f      	ldr	r3, [pc, #60]	; (800dcc8 <xTaskResumeAll+0x138>)
 800dc8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc8e:	601a      	str	r2, [r3, #0]
 800dc90:	f3bf 8f4f 	dsb	sy
 800dc94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc98:	f001 f8e4 	bl	800ee64 <vPortExitCritical>

	return xAlreadyYielded;
 800dc9c:	68bb      	ldr	r3, [r7, #8]
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3710      	adds	r7, #16
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	20000f1c 	.word	0x20000f1c
 800dcac:	20000ef4 	.word	0x20000ef4
 800dcb0:	20000eb4 	.word	0x20000eb4
 800dcb4:	20000efc 	.word	0x20000efc
 800dcb8:	20000a24 	.word	0x20000a24
 800dcbc:	20000a20 	.word	0x20000a20
 800dcc0:	20000f08 	.word	0x20000f08
 800dcc4:	20000f04 	.word	0x20000f04
 800dcc8:	e000ed04 	.word	0xe000ed04

0800dccc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dccc:	b480      	push	{r7}
 800dcce:	b083      	sub	sp, #12
 800dcd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dcd2:	4b05      	ldr	r3, [pc, #20]	; (800dce8 <xTaskGetTickCount+0x1c>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dcd8:	687b      	ldr	r3, [r7, #4]
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	370c      	adds	r7, #12
 800dcde:	46bd      	mov	sp, r7
 800dce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce4:	4770      	bx	lr
 800dce6:	bf00      	nop
 800dce8:	20000ef8 	.word	0x20000ef8

0800dcec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b086      	sub	sp, #24
 800dcf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcf6:	4b4f      	ldr	r3, [pc, #316]	; (800de34 <xTaskIncrementTick+0x148>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	f040 808f 	bne.w	800de1e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dd00:	4b4d      	ldr	r3, [pc, #308]	; (800de38 <xTaskIncrementTick+0x14c>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	3301      	adds	r3, #1
 800dd06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dd08:	4a4b      	ldr	r2, [pc, #300]	; (800de38 <xTaskIncrementTick+0x14c>)
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d120      	bne.n	800dd56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dd14:	4b49      	ldr	r3, [pc, #292]	; (800de3c <xTaskIncrementTick+0x150>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d00a      	beq.n	800dd34 <xTaskIncrementTick+0x48>
	__asm volatile
 800dd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd22:	f383 8811 	msr	BASEPRI, r3
 800dd26:	f3bf 8f6f 	isb	sy
 800dd2a:	f3bf 8f4f 	dsb	sy
 800dd2e:	603b      	str	r3, [r7, #0]
}
 800dd30:	bf00      	nop
 800dd32:	e7fe      	b.n	800dd32 <xTaskIncrementTick+0x46>
 800dd34:	4b41      	ldr	r3, [pc, #260]	; (800de3c <xTaskIncrementTick+0x150>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	60fb      	str	r3, [r7, #12]
 800dd3a:	4b41      	ldr	r3, [pc, #260]	; (800de40 <xTaskIncrementTick+0x154>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	4a3f      	ldr	r2, [pc, #252]	; (800de3c <xTaskIncrementTick+0x150>)
 800dd40:	6013      	str	r3, [r2, #0]
 800dd42:	4a3f      	ldr	r2, [pc, #252]	; (800de40 <xTaskIncrementTick+0x154>)
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	6013      	str	r3, [r2, #0]
 800dd48:	4b3e      	ldr	r3, [pc, #248]	; (800de44 <xTaskIncrementTick+0x158>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	4a3d      	ldr	r2, [pc, #244]	; (800de44 <xTaskIncrementTick+0x158>)
 800dd50:	6013      	str	r3, [r2, #0]
 800dd52:	f000 fadb 	bl	800e30c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dd56:	4b3c      	ldr	r3, [pc, #240]	; (800de48 <xTaskIncrementTick+0x15c>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	693a      	ldr	r2, [r7, #16]
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d349      	bcc.n	800ddf4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd60:	4b36      	ldr	r3, [pc, #216]	; (800de3c <xTaskIncrementTick+0x150>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d104      	bne.n	800dd74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd6a:	4b37      	ldr	r3, [pc, #220]	; (800de48 <xTaskIncrementTick+0x15c>)
 800dd6c:	f04f 32ff 	mov.w	r2, #4294967295
 800dd70:	601a      	str	r2, [r3, #0]
					break;
 800dd72:	e03f      	b.n	800ddf4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd74:	4b31      	ldr	r3, [pc, #196]	; (800de3c <xTaskIncrementTick+0x150>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	68db      	ldr	r3, [r3, #12]
 800dd7a:	68db      	ldr	r3, [r3, #12]
 800dd7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	685b      	ldr	r3, [r3, #4]
 800dd82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dd84:	693a      	ldr	r2, [r7, #16]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d203      	bcs.n	800dd94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dd8c:	4a2e      	ldr	r2, [pc, #184]	; (800de48 <xTaskIncrementTick+0x15c>)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dd92:	e02f      	b.n	800ddf4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	3304      	adds	r3, #4
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7fe ff79 	bl	800cc90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d004      	beq.n	800ddb0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	3318      	adds	r3, #24
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7fe ff70 	bl	800cc90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddb4:	4b25      	ldr	r3, [pc, #148]	; (800de4c <xTaskIncrementTick+0x160>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d903      	bls.n	800ddc4 <xTaskIncrementTick+0xd8>
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddc0:	4a22      	ldr	r2, [pc, #136]	; (800de4c <xTaskIncrementTick+0x160>)
 800ddc2:	6013      	str	r3, [r2, #0]
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddc8:	4613      	mov	r3, r2
 800ddca:	009b      	lsls	r3, r3, #2
 800ddcc:	4413      	add	r3, r2
 800ddce:	009b      	lsls	r3, r3, #2
 800ddd0:	4a1f      	ldr	r2, [pc, #124]	; (800de50 <xTaskIncrementTick+0x164>)
 800ddd2:	441a      	add	r2, r3
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	3304      	adds	r3, #4
 800ddd8:	4619      	mov	r1, r3
 800ddda:	4610      	mov	r0, r2
 800dddc:	f7fe fefb 	bl	800cbd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dde4:	4b1b      	ldr	r3, [pc, #108]	; (800de54 <xTaskIncrementTick+0x168>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d3b8      	bcc.n	800dd60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ddf2:	e7b5      	b.n	800dd60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ddf4:	4b17      	ldr	r3, [pc, #92]	; (800de54 <xTaskIncrementTick+0x168>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddfa:	4915      	ldr	r1, [pc, #84]	; (800de50 <xTaskIncrementTick+0x164>)
 800ddfc:	4613      	mov	r3, r2
 800ddfe:	009b      	lsls	r3, r3, #2
 800de00:	4413      	add	r3, r2
 800de02:	009b      	lsls	r3, r3, #2
 800de04:	440b      	add	r3, r1
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2b01      	cmp	r3, #1
 800de0a:	d901      	bls.n	800de10 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800de0c:	2301      	movs	r3, #1
 800de0e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800de10:	4b11      	ldr	r3, [pc, #68]	; (800de58 <xTaskIncrementTick+0x16c>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d007      	beq.n	800de28 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800de18:	2301      	movs	r3, #1
 800de1a:	617b      	str	r3, [r7, #20]
 800de1c:	e004      	b.n	800de28 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800de1e:	4b0f      	ldr	r3, [pc, #60]	; (800de5c <xTaskIncrementTick+0x170>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	3301      	adds	r3, #1
 800de24:	4a0d      	ldr	r2, [pc, #52]	; (800de5c <xTaskIncrementTick+0x170>)
 800de26:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800de28:	697b      	ldr	r3, [r7, #20]
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3718      	adds	r7, #24
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}
 800de32:	bf00      	nop
 800de34:	20000f1c 	.word	0x20000f1c
 800de38:	20000ef8 	.word	0x20000ef8
 800de3c:	20000eac 	.word	0x20000eac
 800de40:	20000eb0 	.word	0x20000eb0
 800de44:	20000f0c 	.word	0x20000f0c
 800de48:	20000f14 	.word	0x20000f14
 800de4c:	20000efc 	.word	0x20000efc
 800de50:	20000a24 	.word	0x20000a24
 800de54:	20000a20 	.word	0x20000a20
 800de58:	20000f08 	.word	0x20000f08
 800de5c:	20000f04 	.word	0x20000f04

0800de60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800de60:	b480      	push	{r7}
 800de62:	b085      	sub	sp, #20
 800de64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800de66:	4b2a      	ldr	r3, [pc, #168]	; (800df10 <vTaskSwitchContext+0xb0>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d003      	beq.n	800de76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800de6e:	4b29      	ldr	r3, [pc, #164]	; (800df14 <vTaskSwitchContext+0xb4>)
 800de70:	2201      	movs	r2, #1
 800de72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800de74:	e046      	b.n	800df04 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800de76:	4b27      	ldr	r3, [pc, #156]	; (800df14 <vTaskSwitchContext+0xb4>)
 800de78:	2200      	movs	r2, #0
 800de7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de7c:	4b26      	ldr	r3, [pc, #152]	; (800df18 <vTaskSwitchContext+0xb8>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	60fb      	str	r3, [r7, #12]
 800de82:	e010      	b.n	800dea6 <vTaskSwitchContext+0x46>
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d10a      	bne.n	800dea0 <vTaskSwitchContext+0x40>
	__asm volatile
 800de8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de8e:	f383 8811 	msr	BASEPRI, r3
 800de92:	f3bf 8f6f 	isb	sy
 800de96:	f3bf 8f4f 	dsb	sy
 800de9a:	607b      	str	r3, [r7, #4]
}
 800de9c:	bf00      	nop
 800de9e:	e7fe      	b.n	800de9e <vTaskSwitchContext+0x3e>
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	3b01      	subs	r3, #1
 800dea4:	60fb      	str	r3, [r7, #12]
 800dea6:	491d      	ldr	r1, [pc, #116]	; (800df1c <vTaskSwitchContext+0xbc>)
 800dea8:	68fa      	ldr	r2, [r7, #12]
 800deaa:	4613      	mov	r3, r2
 800deac:	009b      	lsls	r3, r3, #2
 800deae:	4413      	add	r3, r2
 800deb0:	009b      	lsls	r3, r3, #2
 800deb2:	440b      	add	r3, r1
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d0e4      	beq.n	800de84 <vTaskSwitchContext+0x24>
 800deba:	68fa      	ldr	r2, [r7, #12]
 800debc:	4613      	mov	r3, r2
 800debe:	009b      	lsls	r3, r3, #2
 800dec0:	4413      	add	r3, r2
 800dec2:	009b      	lsls	r3, r3, #2
 800dec4:	4a15      	ldr	r2, [pc, #84]	; (800df1c <vTaskSwitchContext+0xbc>)
 800dec6:	4413      	add	r3, r2
 800dec8:	60bb      	str	r3, [r7, #8]
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	685a      	ldr	r2, [r3, #4]
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	605a      	str	r2, [r3, #4]
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	685a      	ldr	r2, [r3, #4]
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	3308      	adds	r3, #8
 800dedc:	429a      	cmp	r2, r3
 800dede:	d104      	bne.n	800deea <vTaskSwitchContext+0x8a>
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	685a      	ldr	r2, [r3, #4]
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	605a      	str	r2, [r3, #4]
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	685b      	ldr	r3, [r3, #4]
 800deee:	68db      	ldr	r3, [r3, #12]
 800def0:	4a0b      	ldr	r2, [pc, #44]	; (800df20 <vTaskSwitchContext+0xc0>)
 800def2:	6013      	str	r3, [r2, #0]
 800def4:	4a08      	ldr	r2, [pc, #32]	; (800df18 <vTaskSwitchContext+0xb8>)
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800defa:	4b09      	ldr	r3, [pc, #36]	; (800df20 <vTaskSwitchContext+0xc0>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	3354      	adds	r3, #84	; 0x54
 800df00:	4a08      	ldr	r2, [pc, #32]	; (800df24 <vTaskSwitchContext+0xc4>)
 800df02:	6013      	str	r3, [r2, #0]
}
 800df04:	bf00      	nop
 800df06:	3714      	adds	r7, #20
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr
 800df10:	20000f1c 	.word	0x20000f1c
 800df14:	20000f08 	.word	0x20000f08
 800df18:	20000efc 	.word	0x20000efc
 800df1c:	20000a24 	.word	0x20000a24
 800df20:	20000a20 	.word	0x20000a20
 800df24:	20000028 	.word	0x20000028

0800df28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b084      	sub	sp, #16
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d10a      	bne.n	800df4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800df38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df3c:	f383 8811 	msr	BASEPRI, r3
 800df40:	f3bf 8f6f 	isb	sy
 800df44:	f3bf 8f4f 	dsb	sy
 800df48:	60fb      	str	r3, [r7, #12]
}
 800df4a:	bf00      	nop
 800df4c:	e7fe      	b.n	800df4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df4e:	4b07      	ldr	r3, [pc, #28]	; (800df6c <vTaskPlaceOnEventList+0x44>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	3318      	adds	r3, #24
 800df54:	4619      	mov	r1, r3
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f7fe fe61 	bl	800cc1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800df5c:	2101      	movs	r1, #1
 800df5e:	6838      	ldr	r0, [r7, #0]
 800df60:	f000 fa80 	bl	800e464 <prvAddCurrentTaskToDelayedList>
}
 800df64:	bf00      	nop
 800df66:	3710      	adds	r7, #16
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	20000a20 	.word	0x20000a20

0800df70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800df70:	b580      	push	{r7, lr}
 800df72:	b086      	sub	sp, #24
 800df74:	af00      	add	r7, sp, #0
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	60b9      	str	r1, [r7, #8]
 800df7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d10a      	bne.n	800df98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800df82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df86:	f383 8811 	msr	BASEPRI, r3
 800df8a:	f3bf 8f6f 	isb	sy
 800df8e:	f3bf 8f4f 	dsb	sy
 800df92:	617b      	str	r3, [r7, #20]
}
 800df94:	bf00      	nop
 800df96:	e7fe      	b.n	800df96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df98:	4b0a      	ldr	r3, [pc, #40]	; (800dfc4 <vTaskPlaceOnEventListRestricted+0x54>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	3318      	adds	r3, #24
 800df9e:	4619      	mov	r1, r3
 800dfa0:	68f8      	ldr	r0, [r7, #12]
 800dfa2:	f7fe fe18 	bl	800cbd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d002      	beq.n	800dfb2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dfac:	f04f 33ff 	mov.w	r3, #4294967295
 800dfb0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dfb2:	6879      	ldr	r1, [r7, #4]
 800dfb4:	68b8      	ldr	r0, [r7, #8]
 800dfb6:	f000 fa55 	bl	800e464 <prvAddCurrentTaskToDelayedList>
	}
 800dfba:	bf00      	nop
 800dfbc:	3718      	adds	r7, #24
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
 800dfc2:	bf00      	nop
 800dfc4:	20000a20 	.word	0x20000a20

0800dfc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b086      	sub	sp, #24
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	68db      	ldr	r3, [r3, #12]
 800dfd4:	68db      	ldr	r3, [r3, #12]
 800dfd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dfd8:	693b      	ldr	r3, [r7, #16]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d10a      	bne.n	800dff4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe2:	f383 8811 	msr	BASEPRI, r3
 800dfe6:	f3bf 8f6f 	isb	sy
 800dfea:	f3bf 8f4f 	dsb	sy
 800dfee:	60fb      	str	r3, [r7, #12]
}
 800dff0:	bf00      	nop
 800dff2:	e7fe      	b.n	800dff2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	3318      	adds	r3, #24
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7fe fe49 	bl	800cc90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dffe:	4b1e      	ldr	r3, [pc, #120]	; (800e078 <xTaskRemoveFromEventList+0xb0>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d11d      	bne.n	800e042 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	3304      	adds	r3, #4
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7fe fe40 	bl	800cc90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e014:	4b19      	ldr	r3, [pc, #100]	; (800e07c <xTaskRemoveFromEventList+0xb4>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	429a      	cmp	r2, r3
 800e01a:	d903      	bls.n	800e024 <xTaskRemoveFromEventList+0x5c>
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e020:	4a16      	ldr	r2, [pc, #88]	; (800e07c <xTaskRemoveFromEventList+0xb4>)
 800e022:	6013      	str	r3, [r2, #0]
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e028:	4613      	mov	r3, r2
 800e02a:	009b      	lsls	r3, r3, #2
 800e02c:	4413      	add	r3, r2
 800e02e:	009b      	lsls	r3, r3, #2
 800e030:	4a13      	ldr	r2, [pc, #76]	; (800e080 <xTaskRemoveFromEventList+0xb8>)
 800e032:	441a      	add	r2, r3
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	3304      	adds	r3, #4
 800e038:	4619      	mov	r1, r3
 800e03a:	4610      	mov	r0, r2
 800e03c:	f7fe fdcb 	bl	800cbd6 <vListInsertEnd>
 800e040:	e005      	b.n	800e04e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	3318      	adds	r3, #24
 800e046:	4619      	mov	r1, r3
 800e048:	480e      	ldr	r0, [pc, #56]	; (800e084 <xTaskRemoveFromEventList+0xbc>)
 800e04a:	f7fe fdc4 	bl	800cbd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e052:	4b0d      	ldr	r3, [pc, #52]	; (800e088 <xTaskRemoveFromEventList+0xc0>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e058:	429a      	cmp	r2, r3
 800e05a:	d905      	bls.n	800e068 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e05c:	2301      	movs	r3, #1
 800e05e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e060:	4b0a      	ldr	r3, [pc, #40]	; (800e08c <xTaskRemoveFromEventList+0xc4>)
 800e062:	2201      	movs	r2, #1
 800e064:	601a      	str	r2, [r3, #0]
 800e066:	e001      	b.n	800e06c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e068:	2300      	movs	r3, #0
 800e06a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e06c:	697b      	ldr	r3, [r7, #20]
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3718      	adds	r7, #24
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	20000f1c 	.word	0x20000f1c
 800e07c:	20000efc 	.word	0x20000efc
 800e080:	20000a24 	.word	0x20000a24
 800e084:	20000eb4 	.word	0x20000eb4
 800e088:	20000a20 	.word	0x20000a20
 800e08c:	20000f08 	.word	0x20000f08

0800e090 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e090:	b480      	push	{r7}
 800e092:	b083      	sub	sp, #12
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e098:	4b06      	ldr	r3, [pc, #24]	; (800e0b4 <vTaskInternalSetTimeOutState+0x24>)
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e0a0:	4b05      	ldr	r3, [pc, #20]	; (800e0b8 <vTaskInternalSetTimeOutState+0x28>)
 800e0a2:	681a      	ldr	r2, [r3, #0]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	605a      	str	r2, [r3, #4]
}
 800e0a8:	bf00      	nop
 800e0aa:	370c      	adds	r7, #12
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr
 800e0b4:	20000f0c 	.word	0x20000f0c
 800e0b8:	20000ef8 	.word	0x20000ef8

0800e0bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b088      	sub	sp, #32
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
 800e0c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d10a      	bne.n	800e0e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d0:	f383 8811 	msr	BASEPRI, r3
 800e0d4:	f3bf 8f6f 	isb	sy
 800e0d8:	f3bf 8f4f 	dsb	sy
 800e0dc:	613b      	str	r3, [r7, #16]
}
 800e0de:	bf00      	nop
 800e0e0:	e7fe      	b.n	800e0e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d10a      	bne.n	800e0fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ec:	f383 8811 	msr	BASEPRI, r3
 800e0f0:	f3bf 8f6f 	isb	sy
 800e0f4:	f3bf 8f4f 	dsb	sy
 800e0f8:	60fb      	str	r3, [r7, #12]
}
 800e0fa:	bf00      	nop
 800e0fc:	e7fe      	b.n	800e0fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e0fe:	f000 fe81 	bl	800ee04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e102:	4b1d      	ldr	r3, [pc, #116]	; (800e178 <xTaskCheckForTimeOut+0xbc>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	69ba      	ldr	r2, [r7, #24]
 800e10e:	1ad3      	subs	r3, r2, r3
 800e110:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e11a:	d102      	bne.n	800e122 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e11c:	2300      	movs	r3, #0
 800e11e:	61fb      	str	r3, [r7, #28]
 800e120:	e023      	b.n	800e16a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681a      	ldr	r2, [r3, #0]
 800e126:	4b15      	ldr	r3, [pc, #84]	; (800e17c <xTaskCheckForTimeOut+0xc0>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d007      	beq.n	800e13e <xTaskCheckForTimeOut+0x82>
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	685b      	ldr	r3, [r3, #4]
 800e132:	69ba      	ldr	r2, [r7, #24]
 800e134:	429a      	cmp	r2, r3
 800e136:	d302      	bcc.n	800e13e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e138:	2301      	movs	r3, #1
 800e13a:	61fb      	str	r3, [r7, #28]
 800e13c:	e015      	b.n	800e16a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	697a      	ldr	r2, [r7, #20]
 800e144:	429a      	cmp	r2, r3
 800e146:	d20b      	bcs.n	800e160 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	681a      	ldr	r2, [r3, #0]
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	1ad2      	subs	r2, r2, r3
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f7ff ff9b 	bl	800e090 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e15a:	2300      	movs	r3, #0
 800e15c:	61fb      	str	r3, [r7, #28]
 800e15e:	e004      	b.n	800e16a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	2200      	movs	r2, #0
 800e164:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e166:	2301      	movs	r3, #1
 800e168:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e16a:	f000 fe7b 	bl	800ee64 <vPortExitCritical>

	return xReturn;
 800e16e:	69fb      	ldr	r3, [r7, #28]
}
 800e170:	4618      	mov	r0, r3
 800e172:	3720      	adds	r7, #32
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	20000ef8 	.word	0x20000ef8
 800e17c:	20000f0c 	.word	0x20000f0c

0800e180 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e180:	b480      	push	{r7}
 800e182:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e184:	4b03      	ldr	r3, [pc, #12]	; (800e194 <vTaskMissedYield+0x14>)
 800e186:	2201      	movs	r2, #1
 800e188:	601a      	str	r2, [r3, #0]
}
 800e18a:	bf00      	nop
 800e18c:	46bd      	mov	sp, r7
 800e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e192:	4770      	bx	lr
 800e194:	20000f08 	.word	0x20000f08

0800e198 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e1a0:	f000 f852 	bl	800e248 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e1a4:	4b06      	ldr	r3, [pc, #24]	; (800e1c0 <prvIdleTask+0x28>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d9f9      	bls.n	800e1a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e1ac:	4b05      	ldr	r3, [pc, #20]	; (800e1c4 <prvIdleTask+0x2c>)
 800e1ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1b2:	601a      	str	r2, [r3, #0]
 800e1b4:	f3bf 8f4f 	dsb	sy
 800e1b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e1bc:	e7f0      	b.n	800e1a0 <prvIdleTask+0x8>
 800e1be:	bf00      	nop
 800e1c0:	20000a24 	.word	0x20000a24
 800e1c4:	e000ed04 	.word	0xe000ed04

0800e1c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	607b      	str	r3, [r7, #4]
 800e1d2:	e00c      	b.n	800e1ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e1d4:	687a      	ldr	r2, [r7, #4]
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	009b      	lsls	r3, r3, #2
 800e1da:	4413      	add	r3, r2
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	4a12      	ldr	r2, [pc, #72]	; (800e228 <prvInitialiseTaskLists+0x60>)
 800e1e0:	4413      	add	r3, r2
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7fe fcca 	bl	800cb7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	607b      	str	r3, [r7, #4]
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2b37      	cmp	r3, #55	; 0x37
 800e1f2:	d9ef      	bls.n	800e1d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e1f4:	480d      	ldr	r0, [pc, #52]	; (800e22c <prvInitialiseTaskLists+0x64>)
 800e1f6:	f7fe fcc1 	bl	800cb7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e1fa:	480d      	ldr	r0, [pc, #52]	; (800e230 <prvInitialiseTaskLists+0x68>)
 800e1fc:	f7fe fcbe 	bl	800cb7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e200:	480c      	ldr	r0, [pc, #48]	; (800e234 <prvInitialiseTaskLists+0x6c>)
 800e202:	f7fe fcbb 	bl	800cb7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e206:	480c      	ldr	r0, [pc, #48]	; (800e238 <prvInitialiseTaskLists+0x70>)
 800e208:	f7fe fcb8 	bl	800cb7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e20c:	480b      	ldr	r0, [pc, #44]	; (800e23c <prvInitialiseTaskLists+0x74>)
 800e20e:	f7fe fcb5 	bl	800cb7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e212:	4b0b      	ldr	r3, [pc, #44]	; (800e240 <prvInitialiseTaskLists+0x78>)
 800e214:	4a05      	ldr	r2, [pc, #20]	; (800e22c <prvInitialiseTaskLists+0x64>)
 800e216:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e218:	4b0a      	ldr	r3, [pc, #40]	; (800e244 <prvInitialiseTaskLists+0x7c>)
 800e21a:	4a05      	ldr	r2, [pc, #20]	; (800e230 <prvInitialiseTaskLists+0x68>)
 800e21c:	601a      	str	r2, [r3, #0]
}
 800e21e:	bf00      	nop
 800e220:	3708      	adds	r7, #8
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	20000a24 	.word	0x20000a24
 800e22c:	20000e84 	.word	0x20000e84
 800e230:	20000e98 	.word	0x20000e98
 800e234:	20000eb4 	.word	0x20000eb4
 800e238:	20000ec8 	.word	0x20000ec8
 800e23c:	20000ee0 	.word	0x20000ee0
 800e240:	20000eac 	.word	0x20000eac
 800e244:	20000eb0 	.word	0x20000eb0

0800e248 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b082      	sub	sp, #8
 800e24c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e24e:	e019      	b.n	800e284 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e250:	f000 fdd8 	bl	800ee04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e254:	4b10      	ldr	r3, [pc, #64]	; (800e298 <prvCheckTasksWaitingTermination+0x50>)
 800e256:	68db      	ldr	r3, [r3, #12]
 800e258:	68db      	ldr	r3, [r3, #12]
 800e25a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	3304      	adds	r3, #4
 800e260:	4618      	mov	r0, r3
 800e262:	f7fe fd15 	bl	800cc90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e266:	4b0d      	ldr	r3, [pc, #52]	; (800e29c <prvCheckTasksWaitingTermination+0x54>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	3b01      	subs	r3, #1
 800e26c:	4a0b      	ldr	r2, [pc, #44]	; (800e29c <prvCheckTasksWaitingTermination+0x54>)
 800e26e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e270:	4b0b      	ldr	r3, [pc, #44]	; (800e2a0 <prvCheckTasksWaitingTermination+0x58>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	3b01      	subs	r3, #1
 800e276:	4a0a      	ldr	r2, [pc, #40]	; (800e2a0 <prvCheckTasksWaitingTermination+0x58>)
 800e278:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e27a:	f000 fdf3 	bl	800ee64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f000 f810 	bl	800e2a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e284:	4b06      	ldr	r3, [pc, #24]	; (800e2a0 <prvCheckTasksWaitingTermination+0x58>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d1e1      	bne.n	800e250 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e28c:	bf00      	nop
 800e28e:	bf00      	nop
 800e290:	3708      	adds	r7, #8
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	20000ec8 	.word	0x20000ec8
 800e29c:	20000ef4 	.word	0x20000ef4
 800e2a0:	20000edc 	.word	0x20000edc

0800e2a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b084      	sub	sp, #16
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	3354      	adds	r3, #84	; 0x54
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f002 f945 	bl	8010540 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d108      	bne.n	800e2d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f000 ff8b 	bl	800f1e0 <vPortFree>
				vPortFree( pxTCB );
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f000 ff88 	bl	800f1e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e2d0:	e018      	b.n	800e304 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d103      	bne.n	800e2e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f000 ff7f 	bl	800f1e0 <vPortFree>
	}
 800e2e2:	e00f      	b.n	800e304 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e2ea:	2b02      	cmp	r3, #2
 800e2ec:	d00a      	beq.n	800e304 <prvDeleteTCB+0x60>
	__asm volatile
 800e2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f2:	f383 8811 	msr	BASEPRI, r3
 800e2f6:	f3bf 8f6f 	isb	sy
 800e2fa:	f3bf 8f4f 	dsb	sy
 800e2fe:	60fb      	str	r3, [r7, #12]
}
 800e300:	bf00      	nop
 800e302:	e7fe      	b.n	800e302 <prvDeleteTCB+0x5e>
	}
 800e304:	bf00      	nop
 800e306:	3710      	adds	r7, #16
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e30c:	b480      	push	{r7}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e312:	4b0c      	ldr	r3, [pc, #48]	; (800e344 <prvResetNextTaskUnblockTime+0x38>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d104      	bne.n	800e326 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e31c:	4b0a      	ldr	r3, [pc, #40]	; (800e348 <prvResetNextTaskUnblockTime+0x3c>)
 800e31e:	f04f 32ff 	mov.w	r2, #4294967295
 800e322:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e324:	e008      	b.n	800e338 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e326:	4b07      	ldr	r3, [pc, #28]	; (800e344 <prvResetNextTaskUnblockTime+0x38>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	68db      	ldr	r3, [r3, #12]
 800e32c:	68db      	ldr	r3, [r3, #12]
 800e32e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	4a04      	ldr	r2, [pc, #16]	; (800e348 <prvResetNextTaskUnblockTime+0x3c>)
 800e336:	6013      	str	r3, [r2, #0]
}
 800e338:	bf00      	nop
 800e33a:	370c      	adds	r7, #12
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr
 800e344:	20000eac 	.word	0x20000eac
 800e348:	20000f14 	.word	0x20000f14

0800e34c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e34c:	b480      	push	{r7}
 800e34e:	b083      	sub	sp, #12
 800e350:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e352:	4b0b      	ldr	r3, [pc, #44]	; (800e380 <xTaskGetSchedulerState+0x34>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d102      	bne.n	800e360 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e35a:	2301      	movs	r3, #1
 800e35c:	607b      	str	r3, [r7, #4]
 800e35e:	e008      	b.n	800e372 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e360:	4b08      	ldr	r3, [pc, #32]	; (800e384 <xTaskGetSchedulerState+0x38>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d102      	bne.n	800e36e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e368:	2302      	movs	r3, #2
 800e36a:	607b      	str	r3, [r7, #4]
 800e36c:	e001      	b.n	800e372 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e36e:	2300      	movs	r3, #0
 800e370:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e372:	687b      	ldr	r3, [r7, #4]
	}
 800e374:	4618      	mov	r0, r3
 800e376:	370c      	adds	r7, #12
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr
 800e380:	20000f00 	.word	0x20000f00
 800e384:	20000f1c 	.word	0x20000f1c

0800e388 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b086      	sub	sp, #24
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e394:	2300      	movs	r3, #0
 800e396:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d056      	beq.n	800e44c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e39e:	4b2e      	ldr	r3, [pc, #184]	; (800e458 <xTaskPriorityDisinherit+0xd0>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	693a      	ldr	r2, [r7, #16]
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d00a      	beq.n	800e3be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ac:	f383 8811 	msr	BASEPRI, r3
 800e3b0:	f3bf 8f6f 	isb	sy
 800e3b4:	f3bf 8f4f 	dsb	sy
 800e3b8:	60fb      	str	r3, [r7, #12]
}
 800e3ba:	bf00      	nop
 800e3bc:	e7fe      	b.n	800e3bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d10a      	bne.n	800e3dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ca:	f383 8811 	msr	BASEPRI, r3
 800e3ce:	f3bf 8f6f 	isb	sy
 800e3d2:	f3bf 8f4f 	dsb	sy
 800e3d6:	60bb      	str	r3, [r7, #8]
}
 800e3d8:	bf00      	nop
 800e3da:	e7fe      	b.n	800e3da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3e0:	1e5a      	subs	r2, r3, #1
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d02c      	beq.n	800e44c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e3f2:	693b      	ldr	r3, [r7, #16]
 800e3f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d128      	bne.n	800e44c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	3304      	adds	r3, #4
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7fe fc46 	bl	800cc90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e410:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e41c:	4b0f      	ldr	r3, [pc, #60]	; (800e45c <xTaskPriorityDisinherit+0xd4>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	429a      	cmp	r2, r3
 800e422:	d903      	bls.n	800e42c <xTaskPriorityDisinherit+0xa4>
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e428:	4a0c      	ldr	r2, [pc, #48]	; (800e45c <xTaskPriorityDisinherit+0xd4>)
 800e42a:	6013      	str	r3, [r2, #0]
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e430:	4613      	mov	r3, r2
 800e432:	009b      	lsls	r3, r3, #2
 800e434:	4413      	add	r3, r2
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	4a09      	ldr	r2, [pc, #36]	; (800e460 <xTaskPriorityDisinherit+0xd8>)
 800e43a:	441a      	add	r2, r3
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	3304      	adds	r3, #4
 800e440:	4619      	mov	r1, r3
 800e442:	4610      	mov	r0, r2
 800e444:	f7fe fbc7 	bl	800cbd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e448:	2301      	movs	r3, #1
 800e44a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e44c:	697b      	ldr	r3, [r7, #20]
	}
 800e44e:	4618      	mov	r0, r3
 800e450:	3718      	adds	r7, #24
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
 800e456:	bf00      	nop
 800e458:	20000a20 	.word	0x20000a20
 800e45c:	20000efc 	.word	0x20000efc
 800e460:	20000a24 	.word	0x20000a24

0800e464 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b084      	sub	sp, #16
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
 800e46c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e46e:	4b21      	ldr	r3, [pc, #132]	; (800e4f4 <prvAddCurrentTaskToDelayedList+0x90>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e474:	4b20      	ldr	r3, [pc, #128]	; (800e4f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	3304      	adds	r3, #4
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7fe fc08 	bl	800cc90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e486:	d10a      	bne.n	800e49e <prvAddCurrentTaskToDelayedList+0x3a>
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d007      	beq.n	800e49e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e48e:	4b1a      	ldr	r3, [pc, #104]	; (800e4f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	3304      	adds	r3, #4
 800e494:	4619      	mov	r1, r3
 800e496:	4819      	ldr	r0, [pc, #100]	; (800e4fc <prvAddCurrentTaskToDelayedList+0x98>)
 800e498:	f7fe fb9d 	bl	800cbd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e49c:	e026      	b.n	800e4ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e49e:	68fa      	ldr	r2, [r7, #12]
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	4413      	add	r3, r2
 800e4a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e4a6:	4b14      	ldr	r3, [pc, #80]	; (800e4f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	68ba      	ldr	r2, [r7, #8]
 800e4ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e4ae:	68ba      	ldr	r2, [r7, #8]
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d209      	bcs.n	800e4ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4b6:	4b12      	ldr	r3, [pc, #72]	; (800e500 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e4b8:	681a      	ldr	r2, [r3, #0]
 800e4ba:	4b0f      	ldr	r3, [pc, #60]	; (800e4f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	3304      	adds	r3, #4
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	4610      	mov	r0, r2
 800e4c4:	f7fe fbab 	bl	800cc1e <vListInsert>
}
 800e4c8:	e010      	b.n	800e4ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4ca:	4b0e      	ldr	r3, [pc, #56]	; (800e504 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e4cc:	681a      	ldr	r2, [r3, #0]
 800e4ce:	4b0a      	ldr	r3, [pc, #40]	; (800e4f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	3304      	adds	r3, #4
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	4610      	mov	r0, r2
 800e4d8:	f7fe fba1 	bl	800cc1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e4dc:	4b0a      	ldr	r3, [pc, #40]	; (800e508 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	68ba      	ldr	r2, [r7, #8]
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d202      	bcs.n	800e4ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e4e6:	4a08      	ldr	r2, [pc, #32]	; (800e508 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	6013      	str	r3, [r2, #0]
}
 800e4ec:	bf00      	nop
 800e4ee:	3710      	adds	r7, #16
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	20000ef8 	.word	0x20000ef8
 800e4f8:	20000a20 	.word	0x20000a20
 800e4fc:	20000ee0 	.word	0x20000ee0
 800e500:	20000eb0 	.word	0x20000eb0
 800e504:	20000eac 	.word	0x20000eac
 800e508:	20000f14 	.word	0x20000f14

0800e50c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b08a      	sub	sp, #40	; 0x28
 800e510:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e512:	2300      	movs	r3, #0
 800e514:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e516:	f000 fb07 	bl	800eb28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e51a:	4b1c      	ldr	r3, [pc, #112]	; (800e58c <xTimerCreateTimerTask+0x80>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d021      	beq.n	800e566 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e522:	2300      	movs	r3, #0
 800e524:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e526:	2300      	movs	r3, #0
 800e528:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e52a:	1d3a      	adds	r2, r7, #4
 800e52c:	f107 0108 	add.w	r1, r7, #8
 800e530:	f107 030c 	add.w	r3, r7, #12
 800e534:	4618      	mov	r0, r3
 800e536:	f7fe fb07 	bl	800cb48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e53a:	6879      	ldr	r1, [r7, #4]
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	68fa      	ldr	r2, [r7, #12]
 800e540:	9202      	str	r2, [sp, #8]
 800e542:	9301      	str	r3, [sp, #4]
 800e544:	2302      	movs	r3, #2
 800e546:	9300      	str	r3, [sp, #0]
 800e548:	2300      	movs	r3, #0
 800e54a:	460a      	mov	r2, r1
 800e54c:	4910      	ldr	r1, [pc, #64]	; (800e590 <xTimerCreateTimerTask+0x84>)
 800e54e:	4811      	ldr	r0, [pc, #68]	; (800e594 <xTimerCreateTimerTask+0x88>)
 800e550:	f7ff f8b4 	bl	800d6bc <xTaskCreateStatic>
 800e554:	4603      	mov	r3, r0
 800e556:	4a10      	ldr	r2, [pc, #64]	; (800e598 <xTimerCreateTimerTask+0x8c>)
 800e558:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e55a:	4b0f      	ldr	r3, [pc, #60]	; (800e598 <xTimerCreateTimerTask+0x8c>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d001      	beq.n	800e566 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e562:	2301      	movs	r3, #1
 800e564:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e566:	697b      	ldr	r3, [r7, #20]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d10a      	bne.n	800e582 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e570:	f383 8811 	msr	BASEPRI, r3
 800e574:	f3bf 8f6f 	isb	sy
 800e578:	f3bf 8f4f 	dsb	sy
 800e57c:	613b      	str	r3, [r7, #16]
}
 800e57e:	bf00      	nop
 800e580:	e7fe      	b.n	800e580 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e582:	697b      	ldr	r3, [r7, #20]
}
 800e584:	4618      	mov	r0, r3
 800e586:	3718      	adds	r7, #24
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	20000f50 	.word	0x20000f50
 800e590:	080154a0 	.word	0x080154a0
 800e594:	0800e6d1 	.word	0x0800e6d1
 800e598:	20000f54 	.word	0x20000f54

0800e59c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b08a      	sub	sp, #40	; 0x28
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	60f8      	str	r0, [r7, #12]
 800e5a4:	60b9      	str	r1, [r7, #8]
 800e5a6:	607a      	str	r2, [r7, #4]
 800e5a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d10a      	bne.n	800e5ca <xTimerGenericCommand+0x2e>
	__asm volatile
 800e5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b8:	f383 8811 	msr	BASEPRI, r3
 800e5bc:	f3bf 8f6f 	isb	sy
 800e5c0:	f3bf 8f4f 	dsb	sy
 800e5c4:	623b      	str	r3, [r7, #32]
}
 800e5c6:	bf00      	nop
 800e5c8:	e7fe      	b.n	800e5c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e5ca:	4b1a      	ldr	r3, [pc, #104]	; (800e634 <xTimerGenericCommand+0x98>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d02a      	beq.n	800e628 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	2b05      	cmp	r3, #5
 800e5e2:	dc18      	bgt.n	800e616 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e5e4:	f7ff feb2 	bl	800e34c <xTaskGetSchedulerState>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	2b02      	cmp	r3, #2
 800e5ec:	d109      	bne.n	800e602 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e5ee:	4b11      	ldr	r3, [pc, #68]	; (800e634 <xTimerGenericCommand+0x98>)
 800e5f0:	6818      	ldr	r0, [r3, #0]
 800e5f2:	f107 0110 	add.w	r1, r7, #16
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5fa:	f7fe fc77 	bl	800ceec <xQueueGenericSend>
 800e5fe:	6278      	str	r0, [r7, #36]	; 0x24
 800e600:	e012      	b.n	800e628 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e602:	4b0c      	ldr	r3, [pc, #48]	; (800e634 <xTimerGenericCommand+0x98>)
 800e604:	6818      	ldr	r0, [r3, #0]
 800e606:	f107 0110 	add.w	r1, r7, #16
 800e60a:	2300      	movs	r3, #0
 800e60c:	2200      	movs	r2, #0
 800e60e:	f7fe fc6d 	bl	800ceec <xQueueGenericSend>
 800e612:	6278      	str	r0, [r7, #36]	; 0x24
 800e614:	e008      	b.n	800e628 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e616:	4b07      	ldr	r3, [pc, #28]	; (800e634 <xTimerGenericCommand+0x98>)
 800e618:	6818      	ldr	r0, [r3, #0]
 800e61a:	f107 0110 	add.w	r1, r7, #16
 800e61e:	2300      	movs	r3, #0
 800e620:	683a      	ldr	r2, [r7, #0]
 800e622:	f7fe fd61 	bl	800d0e8 <xQueueGenericSendFromISR>
 800e626:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	3728      	adds	r7, #40	; 0x28
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
 800e632:	bf00      	nop
 800e634:	20000f50 	.word	0x20000f50

0800e638 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b088      	sub	sp, #32
 800e63c:	af02      	add	r7, sp, #8
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e642:	4b22      	ldr	r3, [pc, #136]	; (800e6cc <prvProcessExpiredTimer+0x94>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	68db      	ldr	r3, [r3, #12]
 800e648:	68db      	ldr	r3, [r3, #12]
 800e64a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	3304      	adds	r3, #4
 800e650:	4618      	mov	r0, r3
 800e652:	f7fe fb1d 	bl	800cc90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e65c:	f003 0304 	and.w	r3, r3, #4
 800e660:	2b00      	cmp	r3, #0
 800e662:	d022      	beq.n	800e6aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	699a      	ldr	r2, [r3, #24]
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	18d1      	adds	r1, r2, r3
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	683a      	ldr	r2, [r7, #0]
 800e670:	6978      	ldr	r0, [r7, #20]
 800e672:	f000 f8d1 	bl	800e818 <prvInsertTimerInActiveList>
 800e676:	4603      	mov	r3, r0
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d01f      	beq.n	800e6bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e67c:	2300      	movs	r3, #0
 800e67e:	9300      	str	r3, [sp, #0]
 800e680:	2300      	movs	r3, #0
 800e682:	687a      	ldr	r2, [r7, #4]
 800e684:	2100      	movs	r1, #0
 800e686:	6978      	ldr	r0, [r7, #20]
 800e688:	f7ff ff88 	bl	800e59c <xTimerGenericCommand>
 800e68c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d113      	bne.n	800e6bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e698:	f383 8811 	msr	BASEPRI, r3
 800e69c:	f3bf 8f6f 	isb	sy
 800e6a0:	f3bf 8f4f 	dsb	sy
 800e6a4:	60fb      	str	r3, [r7, #12]
}
 800e6a6:	bf00      	nop
 800e6a8:	e7fe      	b.n	800e6a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6b0:	f023 0301 	bic.w	r3, r3, #1
 800e6b4:	b2da      	uxtb	r2, r3
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	6a1b      	ldr	r3, [r3, #32]
 800e6c0:	6978      	ldr	r0, [r7, #20]
 800e6c2:	4798      	blx	r3
}
 800e6c4:	bf00      	nop
 800e6c6:	3718      	adds	r7, #24
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}
 800e6cc:	20000f48 	.word	0x20000f48

0800e6d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b084      	sub	sp, #16
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e6d8:	f107 0308 	add.w	r3, r7, #8
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f000 f857 	bl	800e790 <prvGetNextExpireTime>
 800e6e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	4619      	mov	r1, r3
 800e6e8:	68f8      	ldr	r0, [r7, #12]
 800e6ea:	f000 f803 	bl	800e6f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e6ee:	f000 f8d5 	bl	800e89c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e6f2:	e7f1      	b.n	800e6d8 <prvTimerTask+0x8>

0800e6f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b084      	sub	sp, #16
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e6fe:	f7ff fa39 	bl	800db74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e702:	f107 0308 	add.w	r3, r7, #8
 800e706:	4618      	mov	r0, r3
 800e708:	f000 f866 	bl	800e7d8 <prvSampleTimeNow>
 800e70c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d130      	bne.n	800e776 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d10a      	bne.n	800e730 <prvProcessTimerOrBlockTask+0x3c>
 800e71a:	687a      	ldr	r2, [r7, #4]
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	429a      	cmp	r2, r3
 800e720:	d806      	bhi.n	800e730 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e722:	f7ff fa35 	bl	800db90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e726:	68f9      	ldr	r1, [r7, #12]
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f7ff ff85 	bl	800e638 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e72e:	e024      	b.n	800e77a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d008      	beq.n	800e748 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e736:	4b13      	ldr	r3, [pc, #76]	; (800e784 <prvProcessTimerOrBlockTask+0x90>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d101      	bne.n	800e744 <prvProcessTimerOrBlockTask+0x50>
 800e740:	2301      	movs	r3, #1
 800e742:	e000      	b.n	800e746 <prvProcessTimerOrBlockTask+0x52>
 800e744:	2300      	movs	r3, #0
 800e746:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e748:	4b0f      	ldr	r3, [pc, #60]	; (800e788 <prvProcessTimerOrBlockTask+0x94>)
 800e74a:	6818      	ldr	r0, [r3, #0]
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	1ad3      	subs	r3, r2, r3
 800e752:	683a      	ldr	r2, [r7, #0]
 800e754:	4619      	mov	r1, r3
 800e756:	f7fe ff7d 	bl	800d654 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e75a:	f7ff fa19 	bl	800db90 <xTaskResumeAll>
 800e75e:	4603      	mov	r3, r0
 800e760:	2b00      	cmp	r3, #0
 800e762:	d10a      	bne.n	800e77a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e764:	4b09      	ldr	r3, [pc, #36]	; (800e78c <prvProcessTimerOrBlockTask+0x98>)
 800e766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e76a:	601a      	str	r2, [r3, #0]
 800e76c:	f3bf 8f4f 	dsb	sy
 800e770:	f3bf 8f6f 	isb	sy
}
 800e774:	e001      	b.n	800e77a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e776:	f7ff fa0b 	bl	800db90 <xTaskResumeAll>
}
 800e77a:	bf00      	nop
 800e77c:	3710      	adds	r7, #16
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
 800e782:	bf00      	nop
 800e784:	20000f4c 	.word	0x20000f4c
 800e788:	20000f50 	.word	0x20000f50
 800e78c:	e000ed04 	.word	0xe000ed04

0800e790 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e790:	b480      	push	{r7}
 800e792:	b085      	sub	sp, #20
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e798:	4b0e      	ldr	r3, [pc, #56]	; (800e7d4 <prvGetNextExpireTime+0x44>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d101      	bne.n	800e7a6 <prvGetNextExpireTime+0x16>
 800e7a2:	2201      	movs	r2, #1
 800e7a4:	e000      	b.n	800e7a8 <prvGetNextExpireTime+0x18>
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d105      	bne.n	800e7c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e7b4:	4b07      	ldr	r3, [pc, #28]	; (800e7d4 <prvGetNextExpireTime+0x44>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	68db      	ldr	r3, [r3, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	60fb      	str	r3, [r7, #12]
 800e7be:	e001      	b.n	800e7c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3714      	adds	r7, #20
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr
 800e7d2:	bf00      	nop
 800e7d4:	20000f48 	.word	0x20000f48

0800e7d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b084      	sub	sp, #16
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e7e0:	f7ff fa74 	bl	800dccc <xTaskGetTickCount>
 800e7e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e7e6:	4b0b      	ldr	r3, [pc, #44]	; (800e814 <prvSampleTimeNow+0x3c>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	68fa      	ldr	r2, [r7, #12]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d205      	bcs.n	800e7fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e7f0:	f000 f936 	bl	800ea60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2201      	movs	r2, #1
 800e7f8:	601a      	str	r2, [r3, #0]
 800e7fa:	e002      	b.n	800e802 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2200      	movs	r2, #0
 800e800:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e802:	4a04      	ldr	r2, [pc, #16]	; (800e814 <prvSampleTimeNow+0x3c>)
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e808:	68fb      	ldr	r3, [r7, #12]
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3710      	adds	r7, #16
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}
 800e812:	bf00      	nop
 800e814:	20000f58 	.word	0x20000f58

0800e818 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b086      	sub	sp, #24
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	60f8      	str	r0, [r7, #12]
 800e820:	60b9      	str	r1, [r7, #8]
 800e822:	607a      	str	r2, [r7, #4]
 800e824:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e826:	2300      	movs	r3, #0
 800e828:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	68ba      	ldr	r2, [r7, #8]
 800e82e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	68fa      	ldr	r2, [r7, #12]
 800e834:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e836:	68ba      	ldr	r2, [r7, #8]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d812      	bhi.n	800e864 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e83e:	687a      	ldr	r2, [r7, #4]
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	1ad2      	subs	r2, r2, r3
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	699b      	ldr	r3, [r3, #24]
 800e848:	429a      	cmp	r2, r3
 800e84a:	d302      	bcc.n	800e852 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e84c:	2301      	movs	r3, #1
 800e84e:	617b      	str	r3, [r7, #20]
 800e850:	e01b      	b.n	800e88a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e852:	4b10      	ldr	r3, [pc, #64]	; (800e894 <prvInsertTimerInActiveList+0x7c>)
 800e854:	681a      	ldr	r2, [r3, #0]
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	3304      	adds	r3, #4
 800e85a:	4619      	mov	r1, r3
 800e85c:	4610      	mov	r0, r2
 800e85e:	f7fe f9de 	bl	800cc1e <vListInsert>
 800e862:	e012      	b.n	800e88a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e864:	687a      	ldr	r2, [r7, #4]
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	429a      	cmp	r2, r3
 800e86a:	d206      	bcs.n	800e87a <prvInsertTimerInActiveList+0x62>
 800e86c:	68ba      	ldr	r2, [r7, #8]
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	429a      	cmp	r2, r3
 800e872:	d302      	bcc.n	800e87a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e874:	2301      	movs	r3, #1
 800e876:	617b      	str	r3, [r7, #20]
 800e878:	e007      	b.n	800e88a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e87a:	4b07      	ldr	r3, [pc, #28]	; (800e898 <prvInsertTimerInActiveList+0x80>)
 800e87c:	681a      	ldr	r2, [r3, #0]
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	3304      	adds	r3, #4
 800e882:	4619      	mov	r1, r3
 800e884:	4610      	mov	r0, r2
 800e886:	f7fe f9ca 	bl	800cc1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e88a:	697b      	ldr	r3, [r7, #20]
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3718      	adds	r7, #24
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}
 800e894:	20000f4c 	.word	0x20000f4c
 800e898:	20000f48 	.word	0x20000f48

0800e89c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b08e      	sub	sp, #56	; 0x38
 800e8a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e8a2:	e0ca      	b.n	800ea3a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	da18      	bge.n	800e8dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e8aa:	1d3b      	adds	r3, r7, #4
 800e8ac:	3304      	adds	r3, #4
 800e8ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d10a      	bne.n	800e8cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ba:	f383 8811 	msr	BASEPRI, r3
 800e8be:	f3bf 8f6f 	isb	sy
 800e8c2:	f3bf 8f4f 	dsb	sy
 800e8c6:	61fb      	str	r3, [r7, #28]
}
 800e8c8:	bf00      	nop
 800e8ca:	e7fe      	b.n	800e8ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8d2:	6850      	ldr	r0, [r2, #4]
 800e8d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8d6:	6892      	ldr	r2, [r2, #8]
 800e8d8:	4611      	mov	r1, r2
 800e8da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	f2c0 80aa 	blt.w	800ea38 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ea:	695b      	ldr	r3, [r3, #20]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d004      	beq.n	800e8fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f2:	3304      	adds	r3, #4
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7fe f9cb 	bl	800cc90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e8fa:	463b      	mov	r3, r7
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f7ff ff6b 	bl	800e7d8 <prvSampleTimeNow>
 800e902:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2b09      	cmp	r3, #9
 800e908:	f200 8097 	bhi.w	800ea3a <prvProcessReceivedCommands+0x19e>
 800e90c:	a201      	add	r2, pc, #4	; (adr r2, 800e914 <prvProcessReceivedCommands+0x78>)
 800e90e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e912:	bf00      	nop
 800e914:	0800e93d 	.word	0x0800e93d
 800e918:	0800e93d 	.word	0x0800e93d
 800e91c:	0800e93d 	.word	0x0800e93d
 800e920:	0800e9b1 	.word	0x0800e9b1
 800e924:	0800e9c5 	.word	0x0800e9c5
 800e928:	0800ea0f 	.word	0x0800ea0f
 800e92c:	0800e93d 	.word	0x0800e93d
 800e930:	0800e93d 	.word	0x0800e93d
 800e934:	0800e9b1 	.word	0x0800e9b1
 800e938:	0800e9c5 	.word	0x0800e9c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e93e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e942:	f043 0301 	orr.w	r3, r3, #1
 800e946:	b2da      	uxtb	r2, r3
 800e948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e94a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e94e:	68ba      	ldr	r2, [r7, #8]
 800e950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e952:	699b      	ldr	r3, [r3, #24]
 800e954:	18d1      	adds	r1, r2, r3
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e95a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e95c:	f7ff ff5c 	bl	800e818 <prvInsertTimerInActiveList>
 800e960:	4603      	mov	r3, r0
 800e962:	2b00      	cmp	r3, #0
 800e964:	d069      	beq.n	800ea3a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e968:	6a1b      	ldr	r3, [r3, #32]
 800e96a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e96c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e974:	f003 0304 	and.w	r3, r3, #4
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d05e      	beq.n	800ea3a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e97c:	68ba      	ldr	r2, [r7, #8]
 800e97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e980:	699b      	ldr	r3, [r3, #24]
 800e982:	441a      	add	r2, r3
 800e984:	2300      	movs	r3, #0
 800e986:	9300      	str	r3, [sp, #0]
 800e988:	2300      	movs	r3, #0
 800e98a:	2100      	movs	r1, #0
 800e98c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e98e:	f7ff fe05 	bl	800e59c <xTimerGenericCommand>
 800e992:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e994:	6a3b      	ldr	r3, [r7, #32]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d14f      	bne.n	800ea3a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e99e:	f383 8811 	msr	BASEPRI, r3
 800e9a2:	f3bf 8f6f 	isb	sy
 800e9a6:	f3bf 8f4f 	dsb	sy
 800e9aa:	61bb      	str	r3, [r7, #24]
}
 800e9ac:	bf00      	nop
 800e9ae:	e7fe      	b.n	800e9ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9b6:	f023 0301 	bic.w	r3, r3, #1
 800e9ba:	b2da      	uxtb	r2, r3
 800e9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e9c2:	e03a      	b.n	800ea3a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9ca:	f043 0301 	orr.w	r3, r3, #1
 800e9ce:	b2da      	uxtb	r2, r3
 800e9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e9d6:	68ba      	ldr	r2, [r7, #8]
 800e9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9de:	699b      	ldr	r3, [r3, #24]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d10a      	bne.n	800e9fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e8:	f383 8811 	msr	BASEPRI, r3
 800e9ec:	f3bf 8f6f 	isb	sy
 800e9f0:	f3bf 8f4f 	dsb	sy
 800e9f4:	617b      	str	r3, [r7, #20]
}
 800e9f6:	bf00      	nop
 800e9f8:	e7fe      	b.n	800e9f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fc:	699a      	ldr	r2, [r3, #24]
 800e9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea00:	18d1      	adds	r1, r2, r3
 800ea02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea08:	f7ff ff06 	bl	800e818 <prvInsertTimerInActiveList>
					break;
 800ea0c:	e015      	b.n	800ea3a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ea0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea14:	f003 0302 	and.w	r3, r3, #2
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d103      	bne.n	800ea24 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ea1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea1e:	f000 fbdf 	bl	800f1e0 <vPortFree>
 800ea22:	e00a      	b.n	800ea3a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea2a:	f023 0301 	bic.w	r3, r3, #1
 800ea2e:	b2da      	uxtb	r2, r3
 800ea30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ea36:	e000      	b.n	800ea3a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ea38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ea3a:	4b08      	ldr	r3, [pc, #32]	; (800ea5c <prvProcessReceivedCommands+0x1c0>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	1d39      	adds	r1, r7, #4
 800ea40:	2200      	movs	r2, #0
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7fe fbec 	bl	800d220 <xQueueReceive>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	f47f af2a 	bne.w	800e8a4 <prvProcessReceivedCommands+0x8>
	}
}
 800ea50:	bf00      	nop
 800ea52:	bf00      	nop
 800ea54:	3730      	adds	r7, #48	; 0x30
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	20000f50 	.word	0x20000f50

0800ea60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b088      	sub	sp, #32
 800ea64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ea66:	e048      	b.n	800eafa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ea68:	4b2d      	ldr	r3, [pc, #180]	; (800eb20 <prvSwitchTimerLists+0xc0>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	68db      	ldr	r3, [r3, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea72:	4b2b      	ldr	r3, [pc, #172]	; (800eb20 <prvSwitchTimerLists+0xc0>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	68db      	ldr	r3, [r3, #12]
 800ea78:	68db      	ldr	r3, [r3, #12]
 800ea7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	3304      	adds	r3, #4
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7fe f905 	bl	800cc90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	6a1b      	ldr	r3, [r3, #32]
 800ea8a:	68f8      	ldr	r0, [r7, #12]
 800ea8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea94:	f003 0304 	and.w	r3, r3, #4
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d02e      	beq.n	800eafa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	699b      	ldr	r3, [r3, #24]
 800eaa0:	693a      	ldr	r2, [r7, #16]
 800eaa2:	4413      	add	r3, r2
 800eaa4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eaa6:	68ba      	ldr	r2, [r7, #8]
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d90e      	bls.n	800eacc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	68ba      	ldr	r2, [r7, #8]
 800eab2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	68fa      	ldr	r2, [r7, #12]
 800eab8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eaba:	4b19      	ldr	r3, [pc, #100]	; (800eb20 <prvSwitchTimerLists+0xc0>)
 800eabc:	681a      	ldr	r2, [r3, #0]
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	3304      	adds	r3, #4
 800eac2:	4619      	mov	r1, r3
 800eac4:	4610      	mov	r0, r2
 800eac6:	f7fe f8aa 	bl	800cc1e <vListInsert>
 800eaca:	e016      	b.n	800eafa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eacc:	2300      	movs	r3, #0
 800eace:	9300      	str	r3, [sp, #0]
 800ead0:	2300      	movs	r3, #0
 800ead2:	693a      	ldr	r2, [r7, #16]
 800ead4:	2100      	movs	r1, #0
 800ead6:	68f8      	ldr	r0, [r7, #12]
 800ead8:	f7ff fd60 	bl	800e59c <xTimerGenericCommand>
 800eadc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d10a      	bne.n	800eafa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800eae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae8:	f383 8811 	msr	BASEPRI, r3
 800eaec:	f3bf 8f6f 	isb	sy
 800eaf0:	f3bf 8f4f 	dsb	sy
 800eaf4:	603b      	str	r3, [r7, #0]
}
 800eaf6:	bf00      	nop
 800eaf8:	e7fe      	b.n	800eaf8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eafa:	4b09      	ldr	r3, [pc, #36]	; (800eb20 <prvSwitchTimerLists+0xc0>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d1b1      	bne.n	800ea68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800eb04:	4b06      	ldr	r3, [pc, #24]	; (800eb20 <prvSwitchTimerLists+0xc0>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800eb0a:	4b06      	ldr	r3, [pc, #24]	; (800eb24 <prvSwitchTimerLists+0xc4>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	4a04      	ldr	r2, [pc, #16]	; (800eb20 <prvSwitchTimerLists+0xc0>)
 800eb10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eb12:	4a04      	ldr	r2, [pc, #16]	; (800eb24 <prvSwitchTimerLists+0xc4>)
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	6013      	str	r3, [r2, #0]
}
 800eb18:	bf00      	nop
 800eb1a:	3718      	adds	r7, #24
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}
 800eb20:	20000f48 	.word	0x20000f48
 800eb24:	20000f4c 	.word	0x20000f4c

0800eb28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b082      	sub	sp, #8
 800eb2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800eb2e:	f000 f969 	bl	800ee04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800eb32:	4b15      	ldr	r3, [pc, #84]	; (800eb88 <prvCheckForValidListAndQueue+0x60>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d120      	bne.n	800eb7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800eb3a:	4814      	ldr	r0, [pc, #80]	; (800eb8c <prvCheckForValidListAndQueue+0x64>)
 800eb3c:	f7fe f81e 	bl	800cb7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800eb40:	4813      	ldr	r0, [pc, #76]	; (800eb90 <prvCheckForValidListAndQueue+0x68>)
 800eb42:	f7fe f81b 	bl	800cb7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800eb46:	4b13      	ldr	r3, [pc, #76]	; (800eb94 <prvCheckForValidListAndQueue+0x6c>)
 800eb48:	4a10      	ldr	r2, [pc, #64]	; (800eb8c <prvCheckForValidListAndQueue+0x64>)
 800eb4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800eb4c:	4b12      	ldr	r3, [pc, #72]	; (800eb98 <prvCheckForValidListAndQueue+0x70>)
 800eb4e:	4a10      	ldr	r2, [pc, #64]	; (800eb90 <prvCheckForValidListAndQueue+0x68>)
 800eb50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800eb52:	2300      	movs	r3, #0
 800eb54:	9300      	str	r3, [sp, #0]
 800eb56:	4b11      	ldr	r3, [pc, #68]	; (800eb9c <prvCheckForValidListAndQueue+0x74>)
 800eb58:	4a11      	ldr	r2, [pc, #68]	; (800eba0 <prvCheckForValidListAndQueue+0x78>)
 800eb5a:	2110      	movs	r1, #16
 800eb5c:	200a      	movs	r0, #10
 800eb5e:	f7fe f929 	bl	800cdb4 <xQueueGenericCreateStatic>
 800eb62:	4603      	mov	r3, r0
 800eb64:	4a08      	ldr	r2, [pc, #32]	; (800eb88 <prvCheckForValidListAndQueue+0x60>)
 800eb66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800eb68:	4b07      	ldr	r3, [pc, #28]	; (800eb88 <prvCheckForValidListAndQueue+0x60>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d005      	beq.n	800eb7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800eb70:	4b05      	ldr	r3, [pc, #20]	; (800eb88 <prvCheckForValidListAndQueue+0x60>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	490b      	ldr	r1, [pc, #44]	; (800eba4 <prvCheckForValidListAndQueue+0x7c>)
 800eb76:	4618      	mov	r0, r3
 800eb78:	f7fe fd42 	bl	800d600 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eb7c:	f000 f972 	bl	800ee64 <vPortExitCritical>
}
 800eb80:	bf00      	nop
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop
 800eb88:	20000f50 	.word	0x20000f50
 800eb8c:	20000f20 	.word	0x20000f20
 800eb90:	20000f34 	.word	0x20000f34
 800eb94:	20000f48 	.word	0x20000f48
 800eb98:	20000f4c 	.word	0x20000f4c
 800eb9c:	20000ffc 	.word	0x20000ffc
 800eba0:	20000f5c 	.word	0x20000f5c
 800eba4:	080154a8 	.word	0x080154a8

0800eba8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b085      	sub	sp, #20
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	60f8      	str	r0, [r7, #12]
 800ebb0:	60b9      	str	r1, [r7, #8]
 800ebb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	3b04      	subs	r3, #4
 800ebb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ebc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	3b04      	subs	r3, #4
 800ebc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	f023 0201 	bic.w	r2, r3, #1
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	3b04      	subs	r3, #4
 800ebd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ebd8:	4a0c      	ldr	r2, [pc, #48]	; (800ec0c <pxPortInitialiseStack+0x64>)
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	3b14      	subs	r3, #20
 800ebe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ebe4:	687a      	ldr	r2, [r7, #4]
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	3b04      	subs	r3, #4
 800ebee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f06f 0202 	mvn.w	r2, #2
 800ebf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	3b20      	subs	r3, #32
 800ebfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	3714      	adds	r7, #20
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr
 800ec0c:	0800ec11 	.word	0x0800ec11

0800ec10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ec10:	b480      	push	{r7}
 800ec12:	b085      	sub	sp, #20
 800ec14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ec16:	2300      	movs	r3, #0
 800ec18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ec1a:	4b12      	ldr	r3, [pc, #72]	; (800ec64 <prvTaskExitError+0x54>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec22:	d00a      	beq.n	800ec3a <prvTaskExitError+0x2a>
	__asm volatile
 800ec24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec28:	f383 8811 	msr	BASEPRI, r3
 800ec2c:	f3bf 8f6f 	isb	sy
 800ec30:	f3bf 8f4f 	dsb	sy
 800ec34:	60fb      	str	r3, [r7, #12]
}
 800ec36:	bf00      	nop
 800ec38:	e7fe      	b.n	800ec38 <prvTaskExitError+0x28>
	__asm volatile
 800ec3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec3e:	f383 8811 	msr	BASEPRI, r3
 800ec42:	f3bf 8f6f 	isb	sy
 800ec46:	f3bf 8f4f 	dsb	sy
 800ec4a:	60bb      	str	r3, [r7, #8]
}
 800ec4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ec4e:	bf00      	nop
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d0fc      	beq.n	800ec50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ec56:	bf00      	nop
 800ec58:	bf00      	nop
 800ec5a:	3714      	adds	r7, #20
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec62:	4770      	bx	lr
 800ec64:	20000024 	.word	0x20000024
	...

0800ec70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ec70:	4b07      	ldr	r3, [pc, #28]	; (800ec90 <pxCurrentTCBConst2>)
 800ec72:	6819      	ldr	r1, [r3, #0]
 800ec74:	6808      	ldr	r0, [r1, #0]
 800ec76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec7a:	f380 8809 	msr	PSP, r0
 800ec7e:	f3bf 8f6f 	isb	sy
 800ec82:	f04f 0000 	mov.w	r0, #0
 800ec86:	f380 8811 	msr	BASEPRI, r0
 800ec8a:	4770      	bx	lr
 800ec8c:	f3af 8000 	nop.w

0800ec90 <pxCurrentTCBConst2>:
 800ec90:	20000a20 	.word	0x20000a20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ec94:	bf00      	nop
 800ec96:	bf00      	nop

0800ec98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ec98:	4808      	ldr	r0, [pc, #32]	; (800ecbc <prvPortStartFirstTask+0x24>)
 800ec9a:	6800      	ldr	r0, [r0, #0]
 800ec9c:	6800      	ldr	r0, [r0, #0]
 800ec9e:	f380 8808 	msr	MSP, r0
 800eca2:	f04f 0000 	mov.w	r0, #0
 800eca6:	f380 8814 	msr	CONTROL, r0
 800ecaa:	b662      	cpsie	i
 800ecac:	b661      	cpsie	f
 800ecae:	f3bf 8f4f 	dsb	sy
 800ecb2:	f3bf 8f6f 	isb	sy
 800ecb6:	df00      	svc	0
 800ecb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ecba:	bf00      	nop
 800ecbc:	e000ed08 	.word	0xe000ed08

0800ecc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b086      	sub	sp, #24
 800ecc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ecc6:	4b46      	ldr	r3, [pc, #280]	; (800ede0 <xPortStartScheduler+0x120>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	4a46      	ldr	r2, [pc, #280]	; (800ede4 <xPortStartScheduler+0x124>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d10a      	bne.n	800ece6 <xPortStartScheduler+0x26>
	__asm volatile
 800ecd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd4:	f383 8811 	msr	BASEPRI, r3
 800ecd8:	f3bf 8f6f 	isb	sy
 800ecdc:	f3bf 8f4f 	dsb	sy
 800ece0:	613b      	str	r3, [r7, #16]
}
 800ece2:	bf00      	nop
 800ece4:	e7fe      	b.n	800ece4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ece6:	4b3e      	ldr	r3, [pc, #248]	; (800ede0 <xPortStartScheduler+0x120>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4a3f      	ldr	r2, [pc, #252]	; (800ede8 <xPortStartScheduler+0x128>)
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d10a      	bne.n	800ed06 <xPortStartScheduler+0x46>
	__asm volatile
 800ecf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf4:	f383 8811 	msr	BASEPRI, r3
 800ecf8:	f3bf 8f6f 	isb	sy
 800ecfc:	f3bf 8f4f 	dsb	sy
 800ed00:	60fb      	str	r3, [r7, #12]
}
 800ed02:	bf00      	nop
 800ed04:	e7fe      	b.n	800ed04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ed06:	4b39      	ldr	r3, [pc, #228]	; (800edec <xPortStartScheduler+0x12c>)
 800ed08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	781b      	ldrb	r3, [r3, #0]
 800ed0e:	b2db      	uxtb	r3, r3
 800ed10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	22ff      	movs	r2, #255	; 0xff
 800ed16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	b2db      	uxtb	r3, r3
 800ed1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ed20:	78fb      	ldrb	r3, [r7, #3]
 800ed22:	b2db      	uxtb	r3, r3
 800ed24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ed28:	b2da      	uxtb	r2, r3
 800ed2a:	4b31      	ldr	r3, [pc, #196]	; (800edf0 <xPortStartScheduler+0x130>)
 800ed2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ed2e:	4b31      	ldr	r3, [pc, #196]	; (800edf4 <xPortStartScheduler+0x134>)
 800ed30:	2207      	movs	r2, #7
 800ed32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed34:	e009      	b.n	800ed4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ed36:	4b2f      	ldr	r3, [pc, #188]	; (800edf4 <xPortStartScheduler+0x134>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	3b01      	subs	r3, #1
 800ed3c:	4a2d      	ldr	r2, [pc, #180]	; (800edf4 <xPortStartScheduler+0x134>)
 800ed3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ed40:	78fb      	ldrb	r3, [r7, #3]
 800ed42:	b2db      	uxtb	r3, r3
 800ed44:	005b      	lsls	r3, r3, #1
 800ed46:	b2db      	uxtb	r3, r3
 800ed48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ed4a:	78fb      	ldrb	r3, [r7, #3]
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed52:	2b80      	cmp	r3, #128	; 0x80
 800ed54:	d0ef      	beq.n	800ed36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ed56:	4b27      	ldr	r3, [pc, #156]	; (800edf4 <xPortStartScheduler+0x134>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	f1c3 0307 	rsb	r3, r3, #7
 800ed5e:	2b04      	cmp	r3, #4
 800ed60:	d00a      	beq.n	800ed78 <xPortStartScheduler+0xb8>
	__asm volatile
 800ed62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed66:	f383 8811 	msr	BASEPRI, r3
 800ed6a:	f3bf 8f6f 	isb	sy
 800ed6e:	f3bf 8f4f 	dsb	sy
 800ed72:	60bb      	str	r3, [r7, #8]
}
 800ed74:	bf00      	nop
 800ed76:	e7fe      	b.n	800ed76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ed78:	4b1e      	ldr	r3, [pc, #120]	; (800edf4 <xPortStartScheduler+0x134>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	021b      	lsls	r3, r3, #8
 800ed7e:	4a1d      	ldr	r2, [pc, #116]	; (800edf4 <xPortStartScheduler+0x134>)
 800ed80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ed82:	4b1c      	ldr	r3, [pc, #112]	; (800edf4 <xPortStartScheduler+0x134>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ed8a:	4a1a      	ldr	r2, [pc, #104]	; (800edf4 <xPortStartScheduler+0x134>)
 800ed8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	b2da      	uxtb	r2, r3
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ed96:	4b18      	ldr	r3, [pc, #96]	; (800edf8 <xPortStartScheduler+0x138>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	4a17      	ldr	r2, [pc, #92]	; (800edf8 <xPortStartScheduler+0x138>)
 800ed9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eda0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eda2:	4b15      	ldr	r3, [pc, #84]	; (800edf8 <xPortStartScheduler+0x138>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	4a14      	ldr	r2, [pc, #80]	; (800edf8 <xPortStartScheduler+0x138>)
 800eda8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800edac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800edae:	f000 f8dd 	bl	800ef6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800edb2:	4b12      	ldr	r3, [pc, #72]	; (800edfc <xPortStartScheduler+0x13c>)
 800edb4:	2200      	movs	r2, #0
 800edb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800edb8:	f000 f8fc 	bl	800efb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800edbc:	4b10      	ldr	r3, [pc, #64]	; (800ee00 <xPortStartScheduler+0x140>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	4a0f      	ldr	r2, [pc, #60]	; (800ee00 <xPortStartScheduler+0x140>)
 800edc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800edc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800edc8:	f7ff ff66 	bl	800ec98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800edcc:	f7ff f848 	bl	800de60 <vTaskSwitchContext>
	prvTaskExitError();
 800edd0:	f7ff ff1e 	bl	800ec10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800edd4:	2300      	movs	r3, #0
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3718      	adds	r7, #24
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	bf00      	nop
 800ede0:	e000ed00 	.word	0xe000ed00
 800ede4:	410fc271 	.word	0x410fc271
 800ede8:	410fc270 	.word	0x410fc270
 800edec:	e000e400 	.word	0xe000e400
 800edf0:	2000104c 	.word	0x2000104c
 800edf4:	20001050 	.word	0x20001050
 800edf8:	e000ed20 	.word	0xe000ed20
 800edfc:	20000024 	.word	0x20000024
 800ee00:	e000ef34 	.word	0xe000ef34

0800ee04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ee04:	b480      	push	{r7}
 800ee06:	b083      	sub	sp, #12
 800ee08:	af00      	add	r7, sp, #0
	__asm volatile
 800ee0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee0e:	f383 8811 	msr	BASEPRI, r3
 800ee12:	f3bf 8f6f 	isb	sy
 800ee16:	f3bf 8f4f 	dsb	sy
 800ee1a:	607b      	str	r3, [r7, #4]
}
 800ee1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ee1e:	4b0f      	ldr	r3, [pc, #60]	; (800ee5c <vPortEnterCritical+0x58>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	3301      	adds	r3, #1
 800ee24:	4a0d      	ldr	r2, [pc, #52]	; (800ee5c <vPortEnterCritical+0x58>)
 800ee26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ee28:	4b0c      	ldr	r3, [pc, #48]	; (800ee5c <vPortEnterCritical+0x58>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d10f      	bne.n	800ee50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ee30:	4b0b      	ldr	r3, [pc, #44]	; (800ee60 <vPortEnterCritical+0x5c>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d00a      	beq.n	800ee50 <vPortEnterCritical+0x4c>
	__asm volatile
 800ee3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee3e:	f383 8811 	msr	BASEPRI, r3
 800ee42:	f3bf 8f6f 	isb	sy
 800ee46:	f3bf 8f4f 	dsb	sy
 800ee4a:	603b      	str	r3, [r7, #0]
}
 800ee4c:	bf00      	nop
 800ee4e:	e7fe      	b.n	800ee4e <vPortEnterCritical+0x4a>
	}
}
 800ee50:	bf00      	nop
 800ee52:	370c      	adds	r7, #12
 800ee54:	46bd      	mov	sp, r7
 800ee56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5a:	4770      	bx	lr
 800ee5c:	20000024 	.word	0x20000024
 800ee60:	e000ed04 	.word	0xe000ed04

0800ee64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ee6a:	4b12      	ldr	r3, [pc, #72]	; (800eeb4 <vPortExitCritical+0x50>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d10a      	bne.n	800ee88 <vPortExitCritical+0x24>
	__asm volatile
 800ee72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee76:	f383 8811 	msr	BASEPRI, r3
 800ee7a:	f3bf 8f6f 	isb	sy
 800ee7e:	f3bf 8f4f 	dsb	sy
 800ee82:	607b      	str	r3, [r7, #4]
}
 800ee84:	bf00      	nop
 800ee86:	e7fe      	b.n	800ee86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ee88:	4b0a      	ldr	r3, [pc, #40]	; (800eeb4 <vPortExitCritical+0x50>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	3b01      	subs	r3, #1
 800ee8e:	4a09      	ldr	r2, [pc, #36]	; (800eeb4 <vPortExitCritical+0x50>)
 800ee90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ee92:	4b08      	ldr	r3, [pc, #32]	; (800eeb4 <vPortExitCritical+0x50>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d105      	bne.n	800eea6 <vPortExitCritical+0x42>
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	f383 8811 	msr	BASEPRI, r3
}
 800eea4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eea6:	bf00      	nop
 800eea8:	370c      	adds	r7, #12
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb0:	4770      	bx	lr
 800eeb2:	bf00      	nop
 800eeb4:	20000024 	.word	0x20000024
	...

0800eec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eec0:	f3ef 8009 	mrs	r0, PSP
 800eec4:	f3bf 8f6f 	isb	sy
 800eec8:	4b15      	ldr	r3, [pc, #84]	; (800ef20 <pxCurrentTCBConst>)
 800eeca:	681a      	ldr	r2, [r3, #0]
 800eecc:	f01e 0f10 	tst.w	lr, #16
 800eed0:	bf08      	it	eq
 800eed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeda:	6010      	str	r0, [r2, #0]
 800eedc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eee4:	f380 8811 	msr	BASEPRI, r0
 800eee8:	f3bf 8f4f 	dsb	sy
 800eeec:	f3bf 8f6f 	isb	sy
 800eef0:	f7fe ffb6 	bl	800de60 <vTaskSwitchContext>
 800eef4:	f04f 0000 	mov.w	r0, #0
 800eef8:	f380 8811 	msr	BASEPRI, r0
 800eefc:	bc09      	pop	{r0, r3}
 800eefe:	6819      	ldr	r1, [r3, #0]
 800ef00:	6808      	ldr	r0, [r1, #0]
 800ef02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef06:	f01e 0f10 	tst.w	lr, #16
 800ef0a:	bf08      	it	eq
 800ef0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ef10:	f380 8809 	msr	PSP, r0
 800ef14:	f3bf 8f6f 	isb	sy
 800ef18:	4770      	bx	lr
 800ef1a:	bf00      	nop
 800ef1c:	f3af 8000 	nop.w

0800ef20 <pxCurrentTCBConst>:
 800ef20:	20000a20 	.word	0x20000a20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ef24:	bf00      	nop
 800ef26:	bf00      	nop

0800ef28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
	__asm volatile
 800ef2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef32:	f383 8811 	msr	BASEPRI, r3
 800ef36:	f3bf 8f6f 	isb	sy
 800ef3a:	f3bf 8f4f 	dsb	sy
 800ef3e:	607b      	str	r3, [r7, #4]
}
 800ef40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ef42:	f7fe fed3 	bl	800dcec <xTaskIncrementTick>
 800ef46:	4603      	mov	r3, r0
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d003      	beq.n	800ef54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ef4c:	4b06      	ldr	r3, [pc, #24]	; (800ef68 <xPortSysTickHandler+0x40>)
 800ef4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef52:	601a      	str	r2, [r3, #0]
 800ef54:	2300      	movs	r3, #0
 800ef56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	f383 8811 	msr	BASEPRI, r3
}
 800ef5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ef60:	bf00      	nop
 800ef62:	3708      	adds	r7, #8
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}
 800ef68:	e000ed04 	.word	0xe000ed04

0800ef6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ef70:	4b0b      	ldr	r3, [pc, #44]	; (800efa0 <vPortSetupTimerInterrupt+0x34>)
 800ef72:	2200      	movs	r2, #0
 800ef74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ef76:	4b0b      	ldr	r3, [pc, #44]	; (800efa4 <vPortSetupTimerInterrupt+0x38>)
 800ef78:	2200      	movs	r2, #0
 800ef7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ef7c:	4b0a      	ldr	r3, [pc, #40]	; (800efa8 <vPortSetupTimerInterrupt+0x3c>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	4a0a      	ldr	r2, [pc, #40]	; (800efac <vPortSetupTimerInterrupt+0x40>)
 800ef82:	fba2 2303 	umull	r2, r3, r2, r3
 800ef86:	099b      	lsrs	r3, r3, #6
 800ef88:	4a09      	ldr	r2, [pc, #36]	; (800efb0 <vPortSetupTimerInterrupt+0x44>)
 800ef8a:	3b01      	subs	r3, #1
 800ef8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ef8e:	4b04      	ldr	r3, [pc, #16]	; (800efa0 <vPortSetupTimerInterrupt+0x34>)
 800ef90:	2207      	movs	r2, #7
 800ef92:	601a      	str	r2, [r3, #0]
}
 800ef94:	bf00      	nop
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr
 800ef9e:	bf00      	nop
 800efa0:	e000e010 	.word	0xe000e010
 800efa4:	e000e018 	.word	0xe000e018
 800efa8:	20000018 	.word	0x20000018
 800efac:	10624dd3 	.word	0x10624dd3
 800efb0:	e000e014 	.word	0xe000e014

0800efb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800efb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800efc4 <vPortEnableVFP+0x10>
 800efb8:	6801      	ldr	r1, [r0, #0]
 800efba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800efbe:	6001      	str	r1, [r0, #0]
 800efc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800efc2:	bf00      	nop
 800efc4:	e000ed88 	.word	0xe000ed88

0800efc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800efc8:	b480      	push	{r7}
 800efca:	b085      	sub	sp, #20
 800efcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800efce:	f3ef 8305 	mrs	r3, IPSR
 800efd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2b0f      	cmp	r3, #15
 800efd8:	d914      	bls.n	800f004 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800efda:	4a17      	ldr	r2, [pc, #92]	; (800f038 <vPortValidateInterruptPriority+0x70>)
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	4413      	add	r3, r2
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800efe4:	4b15      	ldr	r3, [pc, #84]	; (800f03c <vPortValidateInterruptPriority+0x74>)
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	7afa      	ldrb	r2, [r7, #11]
 800efea:	429a      	cmp	r2, r3
 800efec:	d20a      	bcs.n	800f004 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800efee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff2:	f383 8811 	msr	BASEPRI, r3
 800eff6:	f3bf 8f6f 	isb	sy
 800effa:	f3bf 8f4f 	dsb	sy
 800effe:	607b      	str	r3, [r7, #4]
}
 800f000:	bf00      	nop
 800f002:	e7fe      	b.n	800f002 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f004:	4b0e      	ldr	r3, [pc, #56]	; (800f040 <vPortValidateInterruptPriority+0x78>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f00c:	4b0d      	ldr	r3, [pc, #52]	; (800f044 <vPortValidateInterruptPriority+0x7c>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	429a      	cmp	r2, r3
 800f012:	d90a      	bls.n	800f02a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f018:	f383 8811 	msr	BASEPRI, r3
 800f01c:	f3bf 8f6f 	isb	sy
 800f020:	f3bf 8f4f 	dsb	sy
 800f024:	603b      	str	r3, [r7, #0]
}
 800f026:	bf00      	nop
 800f028:	e7fe      	b.n	800f028 <vPortValidateInterruptPriority+0x60>
	}
 800f02a:	bf00      	nop
 800f02c:	3714      	adds	r7, #20
 800f02e:	46bd      	mov	sp, r7
 800f030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f034:	4770      	bx	lr
 800f036:	bf00      	nop
 800f038:	e000e3f0 	.word	0xe000e3f0
 800f03c:	2000104c 	.word	0x2000104c
 800f040:	e000ed0c 	.word	0xe000ed0c
 800f044:	20001050 	.word	0x20001050

0800f048 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b08a      	sub	sp, #40	; 0x28
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f050:	2300      	movs	r3, #0
 800f052:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f054:	f7fe fd8e 	bl	800db74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f058:	4b5b      	ldr	r3, [pc, #364]	; (800f1c8 <pvPortMalloc+0x180>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d101      	bne.n	800f064 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f060:	f000 f920 	bl	800f2a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f064:	4b59      	ldr	r3, [pc, #356]	; (800f1cc <pvPortMalloc+0x184>)
 800f066:	681a      	ldr	r2, [r3, #0]
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	4013      	ands	r3, r2
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	f040 8093 	bne.w	800f198 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d01d      	beq.n	800f0b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f078:	2208      	movs	r2, #8
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	4413      	add	r3, r2
 800f07e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	f003 0307 	and.w	r3, r3, #7
 800f086:	2b00      	cmp	r3, #0
 800f088:	d014      	beq.n	800f0b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f023 0307 	bic.w	r3, r3, #7
 800f090:	3308      	adds	r3, #8
 800f092:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f003 0307 	and.w	r3, r3, #7
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d00a      	beq.n	800f0b4 <pvPortMalloc+0x6c>
	__asm volatile
 800f09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a2:	f383 8811 	msr	BASEPRI, r3
 800f0a6:	f3bf 8f6f 	isb	sy
 800f0aa:	f3bf 8f4f 	dsb	sy
 800f0ae:	617b      	str	r3, [r7, #20]
}
 800f0b0:	bf00      	nop
 800f0b2:	e7fe      	b.n	800f0b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d06e      	beq.n	800f198 <pvPortMalloc+0x150>
 800f0ba:	4b45      	ldr	r3, [pc, #276]	; (800f1d0 <pvPortMalloc+0x188>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	687a      	ldr	r2, [r7, #4]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d869      	bhi.n	800f198 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f0c4:	4b43      	ldr	r3, [pc, #268]	; (800f1d4 <pvPortMalloc+0x18c>)
 800f0c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f0c8:	4b42      	ldr	r3, [pc, #264]	; (800f1d4 <pvPortMalloc+0x18c>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f0ce:	e004      	b.n	800f0da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0dc:	685b      	ldr	r3, [r3, #4]
 800f0de:	687a      	ldr	r2, [r7, #4]
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d903      	bls.n	800f0ec <pvPortMalloc+0xa4>
 800f0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d1f1      	bne.n	800f0d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f0ec:	4b36      	ldr	r3, [pc, #216]	; (800f1c8 <pvPortMalloc+0x180>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d050      	beq.n	800f198 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f0f6:	6a3b      	ldr	r3, [r7, #32]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	2208      	movs	r2, #8
 800f0fc:	4413      	add	r3, r2
 800f0fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f102:	681a      	ldr	r2, [r3, #0]
 800f104:	6a3b      	ldr	r3, [r7, #32]
 800f106:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f10a:	685a      	ldr	r2, [r3, #4]
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	1ad2      	subs	r2, r2, r3
 800f110:	2308      	movs	r3, #8
 800f112:	005b      	lsls	r3, r3, #1
 800f114:	429a      	cmp	r2, r3
 800f116:	d91f      	bls.n	800f158 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	4413      	add	r3, r2
 800f11e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f120:	69bb      	ldr	r3, [r7, #24]
 800f122:	f003 0307 	and.w	r3, r3, #7
 800f126:	2b00      	cmp	r3, #0
 800f128:	d00a      	beq.n	800f140 <pvPortMalloc+0xf8>
	__asm volatile
 800f12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f12e:	f383 8811 	msr	BASEPRI, r3
 800f132:	f3bf 8f6f 	isb	sy
 800f136:	f3bf 8f4f 	dsb	sy
 800f13a:	613b      	str	r3, [r7, #16]
}
 800f13c:	bf00      	nop
 800f13e:	e7fe      	b.n	800f13e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f142:	685a      	ldr	r2, [r3, #4]
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	1ad2      	subs	r2, r2, r3
 800f148:	69bb      	ldr	r3, [r7, #24]
 800f14a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14e:	687a      	ldr	r2, [r7, #4]
 800f150:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f152:	69b8      	ldr	r0, [r7, #24]
 800f154:	f000 f908 	bl	800f368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f158:	4b1d      	ldr	r3, [pc, #116]	; (800f1d0 <pvPortMalloc+0x188>)
 800f15a:	681a      	ldr	r2, [r3, #0]
 800f15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f15e:	685b      	ldr	r3, [r3, #4]
 800f160:	1ad3      	subs	r3, r2, r3
 800f162:	4a1b      	ldr	r2, [pc, #108]	; (800f1d0 <pvPortMalloc+0x188>)
 800f164:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f166:	4b1a      	ldr	r3, [pc, #104]	; (800f1d0 <pvPortMalloc+0x188>)
 800f168:	681a      	ldr	r2, [r3, #0]
 800f16a:	4b1b      	ldr	r3, [pc, #108]	; (800f1d8 <pvPortMalloc+0x190>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	429a      	cmp	r2, r3
 800f170:	d203      	bcs.n	800f17a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f172:	4b17      	ldr	r3, [pc, #92]	; (800f1d0 <pvPortMalloc+0x188>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	4a18      	ldr	r2, [pc, #96]	; (800f1d8 <pvPortMalloc+0x190>)
 800f178:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17c:	685a      	ldr	r2, [r3, #4]
 800f17e:	4b13      	ldr	r3, [pc, #76]	; (800f1cc <pvPortMalloc+0x184>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	431a      	orrs	r2, r3
 800f184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f186:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f18a:	2200      	movs	r2, #0
 800f18c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f18e:	4b13      	ldr	r3, [pc, #76]	; (800f1dc <pvPortMalloc+0x194>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	3301      	adds	r3, #1
 800f194:	4a11      	ldr	r2, [pc, #68]	; (800f1dc <pvPortMalloc+0x194>)
 800f196:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f198:	f7fe fcfa 	bl	800db90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f19c:	69fb      	ldr	r3, [r7, #28]
 800f19e:	f003 0307 	and.w	r3, r3, #7
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d00a      	beq.n	800f1bc <pvPortMalloc+0x174>
	__asm volatile
 800f1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1aa:	f383 8811 	msr	BASEPRI, r3
 800f1ae:	f3bf 8f6f 	isb	sy
 800f1b2:	f3bf 8f4f 	dsb	sy
 800f1b6:	60fb      	str	r3, [r7, #12]
}
 800f1b8:	bf00      	nop
 800f1ba:	e7fe      	b.n	800f1ba <pvPortMalloc+0x172>
	return pvReturn;
 800f1bc:	69fb      	ldr	r3, [r7, #28]
}
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3728      	adds	r7, #40	; 0x28
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}
 800f1c6:	bf00      	nop
 800f1c8:	20001c5c 	.word	0x20001c5c
 800f1cc:	20001c70 	.word	0x20001c70
 800f1d0:	20001c60 	.word	0x20001c60
 800f1d4:	20001c54 	.word	0x20001c54
 800f1d8:	20001c64 	.word	0x20001c64
 800f1dc:	20001c68 	.word	0x20001c68

0800f1e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b086      	sub	sp, #24
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d04d      	beq.n	800f28e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f1f2:	2308      	movs	r3, #8
 800f1f4:	425b      	negs	r3, r3
 800f1f6:	697a      	ldr	r2, [r7, #20]
 800f1f8:	4413      	add	r3, r2
 800f1fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	685a      	ldr	r2, [r3, #4]
 800f204:	4b24      	ldr	r3, [pc, #144]	; (800f298 <vPortFree+0xb8>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4013      	ands	r3, r2
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d10a      	bne.n	800f224 <vPortFree+0x44>
	__asm volatile
 800f20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f212:	f383 8811 	msr	BASEPRI, r3
 800f216:	f3bf 8f6f 	isb	sy
 800f21a:	f3bf 8f4f 	dsb	sy
 800f21e:	60fb      	str	r3, [r7, #12]
}
 800f220:	bf00      	nop
 800f222:	e7fe      	b.n	800f222 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d00a      	beq.n	800f242 <vPortFree+0x62>
	__asm volatile
 800f22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f230:	f383 8811 	msr	BASEPRI, r3
 800f234:	f3bf 8f6f 	isb	sy
 800f238:	f3bf 8f4f 	dsb	sy
 800f23c:	60bb      	str	r3, [r7, #8]
}
 800f23e:	bf00      	nop
 800f240:	e7fe      	b.n	800f240 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	685a      	ldr	r2, [r3, #4]
 800f246:	4b14      	ldr	r3, [pc, #80]	; (800f298 <vPortFree+0xb8>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	4013      	ands	r3, r2
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d01e      	beq.n	800f28e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d11a      	bne.n	800f28e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	685a      	ldr	r2, [r3, #4]
 800f25c:	4b0e      	ldr	r3, [pc, #56]	; (800f298 <vPortFree+0xb8>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	43db      	mvns	r3, r3
 800f262:	401a      	ands	r2, r3
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f268:	f7fe fc84 	bl	800db74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	685a      	ldr	r2, [r3, #4]
 800f270:	4b0a      	ldr	r3, [pc, #40]	; (800f29c <vPortFree+0xbc>)
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	4413      	add	r3, r2
 800f276:	4a09      	ldr	r2, [pc, #36]	; (800f29c <vPortFree+0xbc>)
 800f278:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f27a:	6938      	ldr	r0, [r7, #16]
 800f27c:	f000 f874 	bl	800f368 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f280:	4b07      	ldr	r3, [pc, #28]	; (800f2a0 <vPortFree+0xc0>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	3301      	adds	r3, #1
 800f286:	4a06      	ldr	r2, [pc, #24]	; (800f2a0 <vPortFree+0xc0>)
 800f288:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f28a:	f7fe fc81 	bl	800db90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f28e:	bf00      	nop
 800f290:	3718      	adds	r7, #24
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
 800f296:	bf00      	nop
 800f298:	20001c70 	.word	0x20001c70
 800f29c:	20001c60 	.word	0x20001c60
 800f2a0:	20001c6c 	.word	0x20001c6c

0800f2a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b085      	sub	sp, #20
 800f2a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f2aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800f2ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f2b0:	4b27      	ldr	r3, [pc, #156]	; (800f350 <prvHeapInit+0xac>)
 800f2b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	f003 0307 	and.w	r3, r3, #7
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d00c      	beq.n	800f2d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	3307      	adds	r3, #7
 800f2c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	f023 0307 	bic.w	r3, r3, #7
 800f2ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f2cc:	68ba      	ldr	r2, [r7, #8]
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	1ad3      	subs	r3, r2, r3
 800f2d2:	4a1f      	ldr	r2, [pc, #124]	; (800f350 <prvHeapInit+0xac>)
 800f2d4:	4413      	add	r3, r2
 800f2d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f2dc:	4a1d      	ldr	r2, [pc, #116]	; (800f354 <prvHeapInit+0xb0>)
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f2e2:	4b1c      	ldr	r3, [pc, #112]	; (800f354 <prvHeapInit+0xb0>)
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	68ba      	ldr	r2, [r7, #8]
 800f2ec:	4413      	add	r3, r2
 800f2ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f2f0:	2208      	movs	r2, #8
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	1a9b      	subs	r3, r3, r2
 800f2f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	f023 0307 	bic.w	r3, r3, #7
 800f2fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	4a15      	ldr	r2, [pc, #84]	; (800f358 <prvHeapInit+0xb4>)
 800f304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f306:	4b14      	ldr	r3, [pc, #80]	; (800f358 <prvHeapInit+0xb4>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	2200      	movs	r2, #0
 800f30c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f30e:	4b12      	ldr	r3, [pc, #72]	; (800f358 <prvHeapInit+0xb4>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	2200      	movs	r2, #0
 800f314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	68fa      	ldr	r2, [r7, #12]
 800f31e:	1ad2      	subs	r2, r2, r3
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f324:	4b0c      	ldr	r3, [pc, #48]	; (800f358 <prvHeapInit+0xb4>)
 800f326:	681a      	ldr	r2, [r3, #0]
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	685b      	ldr	r3, [r3, #4]
 800f330:	4a0a      	ldr	r2, [pc, #40]	; (800f35c <prvHeapInit+0xb8>)
 800f332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	4a09      	ldr	r2, [pc, #36]	; (800f360 <prvHeapInit+0xbc>)
 800f33a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f33c:	4b09      	ldr	r3, [pc, #36]	; (800f364 <prvHeapInit+0xc0>)
 800f33e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f342:	601a      	str	r2, [r3, #0]
}
 800f344:	bf00      	nop
 800f346:	3714      	adds	r7, #20
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr
 800f350:	20001054 	.word	0x20001054
 800f354:	20001c54 	.word	0x20001c54
 800f358:	20001c5c 	.word	0x20001c5c
 800f35c:	20001c64 	.word	0x20001c64
 800f360:	20001c60 	.word	0x20001c60
 800f364:	20001c70 	.word	0x20001c70

0800f368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f368:	b480      	push	{r7}
 800f36a:	b085      	sub	sp, #20
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f370:	4b28      	ldr	r3, [pc, #160]	; (800f414 <prvInsertBlockIntoFreeList+0xac>)
 800f372:	60fb      	str	r3, [r7, #12]
 800f374:	e002      	b.n	800f37c <prvInsertBlockIntoFreeList+0x14>
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	60fb      	str	r3, [r7, #12]
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	687a      	ldr	r2, [r7, #4]
 800f382:	429a      	cmp	r2, r3
 800f384:	d8f7      	bhi.n	800f376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	68ba      	ldr	r2, [r7, #8]
 800f390:	4413      	add	r3, r2
 800f392:	687a      	ldr	r2, [r7, #4]
 800f394:	429a      	cmp	r2, r3
 800f396:	d108      	bne.n	800f3aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	685a      	ldr	r2, [r3, #4]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	685b      	ldr	r3, [r3, #4]
 800f3a0:	441a      	add	r2, r3
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	685b      	ldr	r3, [r3, #4]
 800f3b2:	68ba      	ldr	r2, [r7, #8]
 800f3b4:	441a      	add	r2, r3
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d118      	bne.n	800f3f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681a      	ldr	r2, [r3, #0]
 800f3c2:	4b15      	ldr	r3, [pc, #84]	; (800f418 <prvInsertBlockIntoFreeList+0xb0>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d00d      	beq.n	800f3e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	685a      	ldr	r2, [r3, #4]
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	685b      	ldr	r3, [r3, #4]
 800f3d4:	441a      	add	r2, r3
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	681a      	ldr	r2, [r3, #0]
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	601a      	str	r2, [r3, #0]
 800f3e4:	e008      	b.n	800f3f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f3e6:	4b0c      	ldr	r3, [pc, #48]	; (800f418 <prvInsertBlockIntoFreeList+0xb0>)
 800f3e8:	681a      	ldr	r2, [r3, #0]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	601a      	str	r2, [r3, #0]
 800f3ee:	e003      	b.n	800f3f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	681a      	ldr	r2, [r3, #0]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f3f8:	68fa      	ldr	r2, [r7, #12]
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d002      	beq.n	800f406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	687a      	ldr	r2, [r7, #4]
 800f404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f406:	bf00      	nop
 800f408:	3714      	adds	r7, #20
 800f40a:	46bd      	mov	sp, r7
 800f40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f410:	4770      	bx	lr
 800f412:	bf00      	nop
 800f414:	20001c54 	.word	0x20001c54
 800f418:	20001c5c 	.word	0x20001c5c

0800f41c <__errno>:
 800f41c:	4b01      	ldr	r3, [pc, #4]	; (800f424 <__errno+0x8>)
 800f41e:	6818      	ldr	r0, [r3, #0]
 800f420:	4770      	bx	lr
 800f422:	bf00      	nop
 800f424:	20000028 	.word	0x20000028

0800f428 <std>:
 800f428:	2300      	movs	r3, #0
 800f42a:	b510      	push	{r4, lr}
 800f42c:	4604      	mov	r4, r0
 800f42e:	e9c0 3300 	strd	r3, r3, [r0]
 800f432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f436:	6083      	str	r3, [r0, #8]
 800f438:	8181      	strh	r1, [r0, #12]
 800f43a:	6643      	str	r3, [r0, #100]	; 0x64
 800f43c:	81c2      	strh	r2, [r0, #14]
 800f43e:	6183      	str	r3, [r0, #24]
 800f440:	4619      	mov	r1, r3
 800f442:	2208      	movs	r2, #8
 800f444:	305c      	adds	r0, #92	; 0x5c
 800f446:	f000 f91a 	bl	800f67e <memset>
 800f44a:	4b05      	ldr	r3, [pc, #20]	; (800f460 <std+0x38>)
 800f44c:	6263      	str	r3, [r4, #36]	; 0x24
 800f44e:	4b05      	ldr	r3, [pc, #20]	; (800f464 <std+0x3c>)
 800f450:	62a3      	str	r3, [r4, #40]	; 0x28
 800f452:	4b05      	ldr	r3, [pc, #20]	; (800f468 <std+0x40>)
 800f454:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f456:	4b05      	ldr	r3, [pc, #20]	; (800f46c <std+0x44>)
 800f458:	6224      	str	r4, [r4, #32]
 800f45a:	6323      	str	r3, [r4, #48]	; 0x30
 800f45c:	bd10      	pop	{r4, pc}
 800f45e:	bf00      	nop
 800f460:	08010665 	.word	0x08010665
 800f464:	08010687 	.word	0x08010687
 800f468:	080106bf 	.word	0x080106bf
 800f46c:	080106e3 	.word	0x080106e3

0800f470 <_cleanup_r>:
 800f470:	4901      	ldr	r1, [pc, #4]	; (800f478 <_cleanup_r+0x8>)
 800f472:	f000 b8af 	b.w	800f5d4 <_fwalk_reent>
 800f476:	bf00      	nop
 800f478:	08012415 	.word	0x08012415

0800f47c <__sfmoreglue>:
 800f47c:	b570      	push	{r4, r5, r6, lr}
 800f47e:	1e4a      	subs	r2, r1, #1
 800f480:	2568      	movs	r5, #104	; 0x68
 800f482:	4355      	muls	r5, r2
 800f484:	460e      	mov	r6, r1
 800f486:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f48a:	f000 f901 	bl	800f690 <_malloc_r>
 800f48e:	4604      	mov	r4, r0
 800f490:	b140      	cbz	r0, 800f4a4 <__sfmoreglue+0x28>
 800f492:	2100      	movs	r1, #0
 800f494:	e9c0 1600 	strd	r1, r6, [r0]
 800f498:	300c      	adds	r0, #12
 800f49a:	60a0      	str	r0, [r4, #8]
 800f49c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f4a0:	f000 f8ed 	bl	800f67e <memset>
 800f4a4:	4620      	mov	r0, r4
 800f4a6:	bd70      	pop	{r4, r5, r6, pc}

0800f4a8 <__sfp_lock_acquire>:
 800f4a8:	4801      	ldr	r0, [pc, #4]	; (800f4b0 <__sfp_lock_acquire+0x8>)
 800f4aa:	f000 b8d8 	b.w	800f65e <__retarget_lock_acquire_recursive>
 800f4ae:	bf00      	nop
 800f4b0:	20002bc8 	.word	0x20002bc8

0800f4b4 <__sfp_lock_release>:
 800f4b4:	4801      	ldr	r0, [pc, #4]	; (800f4bc <__sfp_lock_release+0x8>)
 800f4b6:	f000 b8d3 	b.w	800f660 <__retarget_lock_release_recursive>
 800f4ba:	bf00      	nop
 800f4bc:	20002bc8 	.word	0x20002bc8

0800f4c0 <__sinit_lock_acquire>:
 800f4c0:	4801      	ldr	r0, [pc, #4]	; (800f4c8 <__sinit_lock_acquire+0x8>)
 800f4c2:	f000 b8cc 	b.w	800f65e <__retarget_lock_acquire_recursive>
 800f4c6:	bf00      	nop
 800f4c8:	20002bc3 	.word	0x20002bc3

0800f4cc <__sinit_lock_release>:
 800f4cc:	4801      	ldr	r0, [pc, #4]	; (800f4d4 <__sinit_lock_release+0x8>)
 800f4ce:	f000 b8c7 	b.w	800f660 <__retarget_lock_release_recursive>
 800f4d2:	bf00      	nop
 800f4d4:	20002bc3 	.word	0x20002bc3

0800f4d8 <__sinit>:
 800f4d8:	b510      	push	{r4, lr}
 800f4da:	4604      	mov	r4, r0
 800f4dc:	f7ff fff0 	bl	800f4c0 <__sinit_lock_acquire>
 800f4e0:	69a3      	ldr	r3, [r4, #24]
 800f4e2:	b11b      	cbz	r3, 800f4ec <__sinit+0x14>
 800f4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4e8:	f7ff bff0 	b.w	800f4cc <__sinit_lock_release>
 800f4ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f4f0:	6523      	str	r3, [r4, #80]	; 0x50
 800f4f2:	4b13      	ldr	r3, [pc, #76]	; (800f540 <__sinit+0x68>)
 800f4f4:	4a13      	ldr	r2, [pc, #76]	; (800f544 <__sinit+0x6c>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	62a2      	str	r2, [r4, #40]	; 0x28
 800f4fa:	42a3      	cmp	r3, r4
 800f4fc:	bf04      	itt	eq
 800f4fe:	2301      	moveq	r3, #1
 800f500:	61a3      	streq	r3, [r4, #24]
 800f502:	4620      	mov	r0, r4
 800f504:	f000 f820 	bl	800f548 <__sfp>
 800f508:	6060      	str	r0, [r4, #4]
 800f50a:	4620      	mov	r0, r4
 800f50c:	f000 f81c 	bl	800f548 <__sfp>
 800f510:	60a0      	str	r0, [r4, #8]
 800f512:	4620      	mov	r0, r4
 800f514:	f000 f818 	bl	800f548 <__sfp>
 800f518:	2200      	movs	r2, #0
 800f51a:	60e0      	str	r0, [r4, #12]
 800f51c:	2104      	movs	r1, #4
 800f51e:	6860      	ldr	r0, [r4, #4]
 800f520:	f7ff ff82 	bl	800f428 <std>
 800f524:	68a0      	ldr	r0, [r4, #8]
 800f526:	2201      	movs	r2, #1
 800f528:	2109      	movs	r1, #9
 800f52a:	f7ff ff7d 	bl	800f428 <std>
 800f52e:	68e0      	ldr	r0, [r4, #12]
 800f530:	2202      	movs	r2, #2
 800f532:	2112      	movs	r1, #18
 800f534:	f7ff ff78 	bl	800f428 <std>
 800f538:	2301      	movs	r3, #1
 800f53a:	61a3      	str	r3, [r4, #24]
 800f53c:	e7d2      	b.n	800f4e4 <__sinit+0xc>
 800f53e:	bf00      	nop
 800f540:	080157e0 	.word	0x080157e0
 800f544:	0800f471 	.word	0x0800f471

0800f548 <__sfp>:
 800f548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f54a:	4607      	mov	r7, r0
 800f54c:	f7ff ffac 	bl	800f4a8 <__sfp_lock_acquire>
 800f550:	4b1e      	ldr	r3, [pc, #120]	; (800f5cc <__sfp+0x84>)
 800f552:	681e      	ldr	r6, [r3, #0]
 800f554:	69b3      	ldr	r3, [r6, #24]
 800f556:	b913      	cbnz	r3, 800f55e <__sfp+0x16>
 800f558:	4630      	mov	r0, r6
 800f55a:	f7ff ffbd 	bl	800f4d8 <__sinit>
 800f55e:	3648      	adds	r6, #72	; 0x48
 800f560:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f564:	3b01      	subs	r3, #1
 800f566:	d503      	bpl.n	800f570 <__sfp+0x28>
 800f568:	6833      	ldr	r3, [r6, #0]
 800f56a:	b30b      	cbz	r3, 800f5b0 <__sfp+0x68>
 800f56c:	6836      	ldr	r6, [r6, #0]
 800f56e:	e7f7      	b.n	800f560 <__sfp+0x18>
 800f570:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f574:	b9d5      	cbnz	r5, 800f5ac <__sfp+0x64>
 800f576:	4b16      	ldr	r3, [pc, #88]	; (800f5d0 <__sfp+0x88>)
 800f578:	60e3      	str	r3, [r4, #12]
 800f57a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f57e:	6665      	str	r5, [r4, #100]	; 0x64
 800f580:	f000 f86c 	bl	800f65c <__retarget_lock_init_recursive>
 800f584:	f7ff ff96 	bl	800f4b4 <__sfp_lock_release>
 800f588:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f58c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f590:	6025      	str	r5, [r4, #0]
 800f592:	61a5      	str	r5, [r4, #24]
 800f594:	2208      	movs	r2, #8
 800f596:	4629      	mov	r1, r5
 800f598:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f59c:	f000 f86f 	bl	800f67e <memset>
 800f5a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f5a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5ac:	3468      	adds	r4, #104	; 0x68
 800f5ae:	e7d9      	b.n	800f564 <__sfp+0x1c>
 800f5b0:	2104      	movs	r1, #4
 800f5b2:	4638      	mov	r0, r7
 800f5b4:	f7ff ff62 	bl	800f47c <__sfmoreglue>
 800f5b8:	4604      	mov	r4, r0
 800f5ba:	6030      	str	r0, [r6, #0]
 800f5bc:	2800      	cmp	r0, #0
 800f5be:	d1d5      	bne.n	800f56c <__sfp+0x24>
 800f5c0:	f7ff ff78 	bl	800f4b4 <__sfp_lock_release>
 800f5c4:	230c      	movs	r3, #12
 800f5c6:	603b      	str	r3, [r7, #0]
 800f5c8:	e7ee      	b.n	800f5a8 <__sfp+0x60>
 800f5ca:	bf00      	nop
 800f5cc:	080157e0 	.word	0x080157e0
 800f5d0:	ffff0001 	.word	0xffff0001

0800f5d4 <_fwalk_reent>:
 800f5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5d8:	4606      	mov	r6, r0
 800f5da:	4688      	mov	r8, r1
 800f5dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f5e0:	2700      	movs	r7, #0
 800f5e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f5e6:	f1b9 0901 	subs.w	r9, r9, #1
 800f5ea:	d505      	bpl.n	800f5f8 <_fwalk_reent+0x24>
 800f5ec:	6824      	ldr	r4, [r4, #0]
 800f5ee:	2c00      	cmp	r4, #0
 800f5f0:	d1f7      	bne.n	800f5e2 <_fwalk_reent+0xe>
 800f5f2:	4638      	mov	r0, r7
 800f5f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5f8:	89ab      	ldrh	r3, [r5, #12]
 800f5fa:	2b01      	cmp	r3, #1
 800f5fc:	d907      	bls.n	800f60e <_fwalk_reent+0x3a>
 800f5fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f602:	3301      	adds	r3, #1
 800f604:	d003      	beq.n	800f60e <_fwalk_reent+0x3a>
 800f606:	4629      	mov	r1, r5
 800f608:	4630      	mov	r0, r6
 800f60a:	47c0      	blx	r8
 800f60c:	4307      	orrs	r7, r0
 800f60e:	3568      	adds	r5, #104	; 0x68
 800f610:	e7e9      	b.n	800f5e6 <_fwalk_reent+0x12>
	...

0800f614 <__libc_init_array>:
 800f614:	b570      	push	{r4, r5, r6, lr}
 800f616:	4d0d      	ldr	r5, [pc, #52]	; (800f64c <__libc_init_array+0x38>)
 800f618:	4c0d      	ldr	r4, [pc, #52]	; (800f650 <__libc_init_array+0x3c>)
 800f61a:	1b64      	subs	r4, r4, r5
 800f61c:	10a4      	asrs	r4, r4, #2
 800f61e:	2600      	movs	r6, #0
 800f620:	42a6      	cmp	r6, r4
 800f622:	d109      	bne.n	800f638 <__libc_init_array+0x24>
 800f624:	4d0b      	ldr	r5, [pc, #44]	; (800f654 <__libc_init_array+0x40>)
 800f626:	4c0c      	ldr	r4, [pc, #48]	; (800f658 <__libc_init_array+0x44>)
 800f628:	f005 fe9c 	bl	8015364 <_init>
 800f62c:	1b64      	subs	r4, r4, r5
 800f62e:	10a4      	asrs	r4, r4, #2
 800f630:	2600      	movs	r6, #0
 800f632:	42a6      	cmp	r6, r4
 800f634:	d105      	bne.n	800f642 <__libc_init_array+0x2e>
 800f636:	bd70      	pop	{r4, r5, r6, pc}
 800f638:	f855 3b04 	ldr.w	r3, [r5], #4
 800f63c:	4798      	blx	r3
 800f63e:	3601      	adds	r6, #1
 800f640:	e7ee      	b.n	800f620 <__libc_init_array+0xc>
 800f642:	f855 3b04 	ldr.w	r3, [r5], #4
 800f646:	4798      	blx	r3
 800f648:	3601      	adds	r6, #1
 800f64a:	e7f2      	b.n	800f632 <__libc_init_array+0x1e>
 800f64c:	08015cb8 	.word	0x08015cb8
 800f650:	08015cb8 	.word	0x08015cb8
 800f654:	08015cb8 	.word	0x08015cb8
 800f658:	08015cbc 	.word	0x08015cbc

0800f65c <__retarget_lock_init_recursive>:
 800f65c:	4770      	bx	lr

0800f65e <__retarget_lock_acquire_recursive>:
 800f65e:	4770      	bx	lr

0800f660 <__retarget_lock_release_recursive>:
 800f660:	4770      	bx	lr

0800f662 <memcpy>:
 800f662:	440a      	add	r2, r1
 800f664:	4291      	cmp	r1, r2
 800f666:	f100 33ff 	add.w	r3, r0, #4294967295
 800f66a:	d100      	bne.n	800f66e <memcpy+0xc>
 800f66c:	4770      	bx	lr
 800f66e:	b510      	push	{r4, lr}
 800f670:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f674:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f678:	4291      	cmp	r1, r2
 800f67a:	d1f9      	bne.n	800f670 <memcpy+0xe>
 800f67c:	bd10      	pop	{r4, pc}

0800f67e <memset>:
 800f67e:	4402      	add	r2, r0
 800f680:	4603      	mov	r3, r0
 800f682:	4293      	cmp	r3, r2
 800f684:	d100      	bne.n	800f688 <memset+0xa>
 800f686:	4770      	bx	lr
 800f688:	f803 1b01 	strb.w	r1, [r3], #1
 800f68c:	e7f9      	b.n	800f682 <memset+0x4>
	...

0800f690 <_malloc_r>:
 800f690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f692:	1ccd      	adds	r5, r1, #3
 800f694:	f025 0503 	bic.w	r5, r5, #3
 800f698:	3508      	adds	r5, #8
 800f69a:	2d0c      	cmp	r5, #12
 800f69c:	bf38      	it	cc
 800f69e:	250c      	movcc	r5, #12
 800f6a0:	2d00      	cmp	r5, #0
 800f6a2:	4606      	mov	r6, r0
 800f6a4:	db01      	blt.n	800f6aa <_malloc_r+0x1a>
 800f6a6:	42a9      	cmp	r1, r5
 800f6a8:	d903      	bls.n	800f6b2 <_malloc_r+0x22>
 800f6aa:	230c      	movs	r3, #12
 800f6ac:	6033      	str	r3, [r6, #0]
 800f6ae:	2000      	movs	r0, #0
 800f6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6b2:	f003 faef 	bl	8012c94 <__malloc_lock>
 800f6b6:	4921      	ldr	r1, [pc, #132]	; (800f73c <_malloc_r+0xac>)
 800f6b8:	680a      	ldr	r2, [r1, #0]
 800f6ba:	4614      	mov	r4, r2
 800f6bc:	b99c      	cbnz	r4, 800f6e6 <_malloc_r+0x56>
 800f6be:	4f20      	ldr	r7, [pc, #128]	; (800f740 <_malloc_r+0xb0>)
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	b923      	cbnz	r3, 800f6ce <_malloc_r+0x3e>
 800f6c4:	4621      	mov	r1, r4
 800f6c6:	4630      	mov	r0, r6
 800f6c8:	f000 ff96 	bl	80105f8 <_sbrk_r>
 800f6cc:	6038      	str	r0, [r7, #0]
 800f6ce:	4629      	mov	r1, r5
 800f6d0:	4630      	mov	r0, r6
 800f6d2:	f000 ff91 	bl	80105f8 <_sbrk_r>
 800f6d6:	1c43      	adds	r3, r0, #1
 800f6d8:	d123      	bne.n	800f722 <_malloc_r+0x92>
 800f6da:	230c      	movs	r3, #12
 800f6dc:	6033      	str	r3, [r6, #0]
 800f6de:	4630      	mov	r0, r6
 800f6e0:	f003 fade 	bl	8012ca0 <__malloc_unlock>
 800f6e4:	e7e3      	b.n	800f6ae <_malloc_r+0x1e>
 800f6e6:	6823      	ldr	r3, [r4, #0]
 800f6e8:	1b5b      	subs	r3, r3, r5
 800f6ea:	d417      	bmi.n	800f71c <_malloc_r+0x8c>
 800f6ec:	2b0b      	cmp	r3, #11
 800f6ee:	d903      	bls.n	800f6f8 <_malloc_r+0x68>
 800f6f0:	6023      	str	r3, [r4, #0]
 800f6f2:	441c      	add	r4, r3
 800f6f4:	6025      	str	r5, [r4, #0]
 800f6f6:	e004      	b.n	800f702 <_malloc_r+0x72>
 800f6f8:	6863      	ldr	r3, [r4, #4]
 800f6fa:	42a2      	cmp	r2, r4
 800f6fc:	bf0c      	ite	eq
 800f6fe:	600b      	streq	r3, [r1, #0]
 800f700:	6053      	strne	r3, [r2, #4]
 800f702:	4630      	mov	r0, r6
 800f704:	f003 facc 	bl	8012ca0 <__malloc_unlock>
 800f708:	f104 000b 	add.w	r0, r4, #11
 800f70c:	1d23      	adds	r3, r4, #4
 800f70e:	f020 0007 	bic.w	r0, r0, #7
 800f712:	1ac2      	subs	r2, r0, r3
 800f714:	d0cc      	beq.n	800f6b0 <_malloc_r+0x20>
 800f716:	1a1b      	subs	r3, r3, r0
 800f718:	50a3      	str	r3, [r4, r2]
 800f71a:	e7c9      	b.n	800f6b0 <_malloc_r+0x20>
 800f71c:	4622      	mov	r2, r4
 800f71e:	6864      	ldr	r4, [r4, #4]
 800f720:	e7cc      	b.n	800f6bc <_malloc_r+0x2c>
 800f722:	1cc4      	adds	r4, r0, #3
 800f724:	f024 0403 	bic.w	r4, r4, #3
 800f728:	42a0      	cmp	r0, r4
 800f72a:	d0e3      	beq.n	800f6f4 <_malloc_r+0x64>
 800f72c:	1a21      	subs	r1, r4, r0
 800f72e:	4630      	mov	r0, r6
 800f730:	f000 ff62 	bl	80105f8 <_sbrk_r>
 800f734:	3001      	adds	r0, #1
 800f736:	d1dd      	bne.n	800f6f4 <_malloc_r+0x64>
 800f738:	e7cf      	b.n	800f6da <_malloc_r+0x4a>
 800f73a:	bf00      	nop
 800f73c:	20001c74 	.word	0x20001c74
 800f740:	20001c78 	.word	0x20001c78

0800f744 <__cvt>:
 800f744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f748:	ec55 4b10 	vmov	r4, r5, d0
 800f74c:	2d00      	cmp	r5, #0
 800f74e:	460e      	mov	r6, r1
 800f750:	4619      	mov	r1, r3
 800f752:	462b      	mov	r3, r5
 800f754:	bfbb      	ittet	lt
 800f756:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f75a:	461d      	movlt	r5, r3
 800f75c:	2300      	movge	r3, #0
 800f75e:	232d      	movlt	r3, #45	; 0x2d
 800f760:	700b      	strb	r3, [r1, #0]
 800f762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f764:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f768:	4691      	mov	r9, r2
 800f76a:	f023 0820 	bic.w	r8, r3, #32
 800f76e:	bfbc      	itt	lt
 800f770:	4622      	movlt	r2, r4
 800f772:	4614      	movlt	r4, r2
 800f774:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f778:	d005      	beq.n	800f786 <__cvt+0x42>
 800f77a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f77e:	d100      	bne.n	800f782 <__cvt+0x3e>
 800f780:	3601      	adds	r6, #1
 800f782:	2102      	movs	r1, #2
 800f784:	e000      	b.n	800f788 <__cvt+0x44>
 800f786:	2103      	movs	r1, #3
 800f788:	ab03      	add	r3, sp, #12
 800f78a:	9301      	str	r3, [sp, #4]
 800f78c:	ab02      	add	r3, sp, #8
 800f78e:	9300      	str	r3, [sp, #0]
 800f790:	ec45 4b10 	vmov	d0, r4, r5
 800f794:	4653      	mov	r3, sl
 800f796:	4632      	mov	r2, r6
 800f798:	f001 ffca 	bl	8011730 <_dtoa_r>
 800f79c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f7a0:	4607      	mov	r7, r0
 800f7a2:	d102      	bne.n	800f7aa <__cvt+0x66>
 800f7a4:	f019 0f01 	tst.w	r9, #1
 800f7a8:	d022      	beq.n	800f7f0 <__cvt+0xac>
 800f7aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f7ae:	eb07 0906 	add.w	r9, r7, r6
 800f7b2:	d110      	bne.n	800f7d6 <__cvt+0x92>
 800f7b4:	783b      	ldrb	r3, [r7, #0]
 800f7b6:	2b30      	cmp	r3, #48	; 0x30
 800f7b8:	d10a      	bne.n	800f7d0 <__cvt+0x8c>
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	2300      	movs	r3, #0
 800f7be:	4620      	mov	r0, r4
 800f7c0:	4629      	mov	r1, r5
 800f7c2:	f7f1 f9a9 	bl	8000b18 <__aeabi_dcmpeq>
 800f7c6:	b918      	cbnz	r0, 800f7d0 <__cvt+0x8c>
 800f7c8:	f1c6 0601 	rsb	r6, r6, #1
 800f7cc:	f8ca 6000 	str.w	r6, [sl]
 800f7d0:	f8da 3000 	ldr.w	r3, [sl]
 800f7d4:	4499      	add	r9, r3
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	2300      	movs	r3, #0
 800f7da:	4620      	mov	r0, r4
 800f7dc:	4629      	mov	r1, r5
 800f7de:	f7f1 f99b 	bl	8000b18 <__aeabi_dcmpeq>
 800f7e2:	b108      	cbz	r0, 800f7e8 <__cvt+0xa4>
 800f7e4:	f8cd 900c 	str.w	r9, [sp, #12]
 800f7e8:	2230      	movs	r2, #48	; 0x30
 800f7ea:	9b03      	ldr	r3, [sp, #12]
 800f7ec:	454b      	cmp	r3, r9
 800f7ee:	d307      	bcc.n	800f800 <__cvt+0xbc>
 800f7f0:	9b03      	ldr	r3, [sp, #12]
 800f7f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f7f4:	1bdb      	subs	r3, r3, r7
 800f7f6:	4638      	mov	r0, r7
 800f7f8:	6013      	str	r3, [r2, #0]
 800f7fa:	b004      	add	sp, #16
 800f7fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f800:	1c59      	adds	r1, r3, #1
 800f802:	9103      	str	r1, [sp, #12]
 800f804:	701a      	strb	r2, [r3, #0]
 800f806:	e7f0      	b.n	800f7ea <__cvt+0xa6>

0800f808 <__exponent>:
 800f808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f80a:	4603      	mov	r3, r0
 800f80c:	2900      	cmp	r1, #0
 800f80e:	bfb8      	it	lt
 800f810:	4249      	neglt	r1, r1
 800f812:	f803 2b02 	strb.w	r2, [r3], #2
 800f816:	bfb4      	ite	lt
 800f818:	222d      	movlt	r2, #45	; 0x2d
 800f81a:	222b      	movge	r2, #43	; 0x2b
 800f81c:	2909      	cmp	r1, #9
 800f81e:	7042      	strb	r2, [r0, #1]
 800f820:	dd2a      	ble.n	800f878 <__exponent+0x70>
 800f822:	f10d 0407 	add.w	r4, sp, #7
 800f826:	46a4      	mov	ip, r4
 800f828:	270a      	movs	r7, #10
 800f82a:	46a6      	mov	lr, r4
 800f82c:	460a      	mov	r2, r1
 800f82e:	fb91 f6f7 	sdiv	r6, r1, r7
 800f832:	fb07 1516 	mls	r5, r7, r6, r1
 800f836:	3530      	adds	r5, #48	; 0x30
 800f838:	2a63      	cmp	r2, #99	; 0x63
 800f83a:	f104 34ff 	add.w	r4, r4, #4294967295
 800f83e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f842:	4631      	mov	r1, r6
 800f844:	dcf1      	bgt.n	800f82a <__exponent+0x22>
 800f846:	3130      	adds	r1, #48	; 0x30
 800f848:	f1ae 0502 	sub.w	r5, lr, #2
 800f84c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f850:	1c44      	adds	r4, r0, #1
 800f852:	4629      	mov	r1, r5
 800f854:	4561      	cmp	r1, ip
 800f856:	d30a      	bcc.n	800f86e <__exponent+0x66>
 800f858:	f10d 0209 	add.w	r2, sp, #9
 800f85c:	eba2 020e 	sub.w	r2, r2, lr
 800f860:	4565      	cmp	r5, ip
 800f862:	bf88      	it	hi
 800f864:	2200      	movhi	r2, #0
 800f866:	4413      	add	r3, r2
 800f868:	1a18      	subs	r0, r3, r0
 800f86a:	b003      	add	sp, #12
 800f86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f86e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f872:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f876:	e7ed      	b.n	800f854 <__exponent+0x4c>
 800f878:	2330      	movs	r3, #48	; 0x30
 800f87a:	3130      	adds	r1, #48	; 0x30
 800f87c:	7083      	strb	r3, [r0, #2]
 800f87e:	70c1      	strb	r1, [r0, #3]
 800f880:	1d03      	adds	r3, r0, #4
 800f882:	e7f1      	b.n	800f868 <__exponent+0x60>

0800f884 <_printf_float>:
 800f884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f888:	ed2d 8b02 	vpush	{d8}
 800f88c:	b08d      	sub	sp, #52	; 0x34
 800f88e:	460c      	mov	r4, r1
 800f890:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f894:	4616      	mov	r6, r2
 800f896:	461f      	mov	r7, r3
 800f898:	4605      	mov	r5, r0
 800f89a:	f003 f967 	bl	8012b6c <_localeconv_r>
 800f89e:	f8d0 a000 	ldr.w	sl, [r0]
 800f8a2:	4650      	mov	r0, sl
 800f8a4:	f7f0 fcbc 	bl	8000220 <strlen>
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	930a      	str	r3, [sp, #40]	; 0x28
 800f8ac:	6823      	ldr	r3, [r4, #0]
 800f8ae:	9305      	str	r3, [sp, #20]
 800f8b0:	f8d8 3000 	ldr.w	r3, [r8]
 800f8b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f8b8:	3307      	adds	r3, #7
 800f8ba:	f023 0307 	bic.w	r3, r3, #7
 800f8be:	f103 0208 	add.w	r2, r3, #8
 800f8c2:	f8c8 2000 	str.w	r2, [r8]
 800f8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f8ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f8d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f8d6:	9307      	str	r3, [sp, #28]
 800f8d8:	f8cd 8018 	str.w	r8, [sp, #24]
 800f8dc:	ee08 0a10 	vmov	s16, r0
 800f8e0:	4b9f      	ldr	r3, [pc, #636]	; (800fb60 <_printf_float+0x2dc>)
 800f8e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f8e6:	f04f 32ff 	mov.w	r2, #4294967295
 800f8ea:	f7f1 f947 	bl	8000b7c <__aeabi_dcmpun>
 800f8ee:	bb88      	cbnz	r0, 800f954 <_printf_float+0xd0>
 800f8f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f8f4:	4b9a      	ldr	r3, [pc, #616]	; (800fb60 <_printf_float+0x2dc>)
 800f8f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f8fa:	f7f1 f921 	bl	8000b40 <__aeabi_dcmple>
 800f8fe:	bb48      	cbnz	r0, 800f954 <_printf_float+0xd0>
 800f900:	2200      	movs	r2, #0
 800f902:	2300      	movs	r3, #0
 800f904:	4640      	mov	r0, r8
 800f906:	4649      	mov	r1, r9
 800f908:	f7f1 f910 	bl	8000b2c <__aeabi_dcmplt>
 800f90c:	b110      	cbz	r0, 800f914 <_printf_float+0x90>
 800f90e:	232d      	movs	r3, #45	; 0x2d
 800f910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f914:	4b93      	ldr	r3, [pc, #588]	; (800fb64 <_printf_float+0x2e0>)
 800f916:	4894      	ldr	r0, [pc, #592]	; (800fb68 <_printf_float+0x2e4>)
 800f918:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f91c:	bf94      	ite	ls
 800f91e:	4698      	movls	r8, r3
 800f920:	4680      	movhi	r8, r0
 800f922:	2303      	movs	r3, #3
 800f924:	6123      	str	r3, [r4, #16]
 800f926:	9b05      	ldr	r3, [sp, #20]
 800f928:	f023 0204 	bic.w	r2, r3, #4
 800f92c:	6022      	str	r2, [r4, #0]
 800f92e:	f04f 0900 	mov.w	r9, #0
 800f932:	9700      	str	r7, [sp, #0]
 800f934:	4633      	mov	r3, r6
 800f936:	aa0b      	add	r2, sp, #44	; 0x2c
 800f938:	4621      	mov	r1, r4
 800f93a:	4628      	mov	r0, r5
 800f93c:	f000 f9d8 	bl	800fcf0 <_printf_common>
 800f940:	3001      	adds	r0, #1
 800f942:	f040 8090 	bne.w	800fa66 <_printf_float+0x1e2>
 800f946:	f04f 30ff 	mov.w	r0, #4294967295
 800f94a:	b00d      	add	sp, #52	; 0x34
 800f94c:	ecbd 8b02 	vpop	{d8}
 800f950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f954:	4642      	mov	r2, r8
 800f956:	464b      	mov	r3, r9
 800f958:	4640      	mov	r0, r8
 800f95a:	4649      	mov	r1, r9
 800f95c:	f7f1 f90e 	bl	8000b7c <__aeabi_dcmpun>
 800f960:	b140      	cbz	r0, 800f974 <_printf_float+0xf0>
 800f962:	464b      	mov	r3, r9
 800f964:	2b00      	cmp	r3, #0
 800f966:	bfbc      	itt	lt
 800f968:	232d      	movlt	r3, #45	; 0x2d
 800f96a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f96e:	487f      	ldr	r0, [pc, #508]	; (800fb6c <_printf_float+0x2e8>)
 800f970:	4b7f      	ldr	r3, [pc, #508]	; (800fb70 <_printf_float+0x2ec>)
 800f972:	e7d1      	b.n	800f918 <_printf_float+0x94>
 800f974:	6863      	ldr	r3, [r4, #4]
 800f976:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f97a:	9206      	str	r2, [sp, #24]
 800f97c:	1c5a      	adds	r2, r3, #1
 800f97e:	d13f      	bne.n	800fa00 <_printf_float+0x17c>
 800f980:	2306      	movs	r3, #6
 800f982:	6063      	str	r3, [r4, #4]
 800f984:	9b05      	ldr	r3, [sp, #20]
 800f986:	6861      	ldr	r1, [r4, #4]
 800f988:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f98c:	2300      	movs	r3, #0
 800f98e:	9303      	str	r3, [sp, #12]
 800f990:	ab0a      	add	r3, sp, #40	; 0x28
 800f992:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f996:	ab09      	add	r3, sp, #36	; 0x24
 800f998:	ec49 8b10 	vmov	d0, r8, r9
 800f99c:	9300      	str	r3, [sp, #0]
 800f99e:	6022      	str	r2, [r4, #0]
 800f9a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f9a4:	4628      	mov	r0, r5
 800f9a6:	f7ff fecd 	bl	800f744 <__cvt>
 800f9aa:	9b06      	ldr	r3, [sp, #24]
 800f9ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f9ae:	2b47      	cmp	r3, #71	; 0x47
 800f9b0:	4680      	mov	r8, r0
 800f9b2:	d108      	bne.n	800f9c6 <_printf_float+0x142>
 800f9b4:	1cc8      	adds	r0, r1, #3
 800f9b6:	db02      	blt.n	800f9be <_printf_float+0x13a>
 800f9b8:	6863      	ldr	r3, [r4, #4]
 800f9ba:	4299      	cmp	r1, r3
 800f9bc:	dd41      	ble.n	800fa42 <_printf_float+0x1be>
 800f9be:	f1ab 0b02 	sub.w	fp, fp, #2
 800f9c2:	fa5f fb8b 	uxtb.w	fp, fp
 800f9c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f9ca:	d820      	bhi.n	800fa0e <_printf_float+0x18a>
 800f9cc:	3901      	subs	r1, #1
 800f9ce:	465a      	mov	r2, fp
 800f9d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f9d4:	9109      	str	r1, [sp, #36]	; 0x24
 800f9d6:	f7ff ff17 	bl	800f808 <__exponent>
 800f9da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f9dc:	1813      	adds	r3, r2, r0
 800f9de:	2a01      	cmp	r2, #1
 800f9e0:	4681      	mov	r9, r0
 800f9e2:	6123      	str	r3, [r4, #16]
 800f9e4:	dc02      	bgt.n	800f9ec <_printf_float+0x168>
 800f9e6:	6822      	ldr	r2, [r4, #0]
 800f9e8:	07d2      	lsls	r2, r2, #31
 800f9ea:	d501      	bpl.n	800f9f0 <_printf_float+0x16c>
 800f9ec:	3301      	adds	r3, #1
 800f9ee:	6123      	str	r3, [r4, #16]
 800f9f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d09c      	beq.n	800f932 <_printf_float+0xae>
 800f9f8:	232d      	movs	r3, #45	; 0x2d
 800f9fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f9fe:	e798      	b.n	800f932 <_printf_float+0xae>
 800fa00:	9a06      	ldr	r2, [sp, #24]
 800fa02:	2a47      	cmp	r2, #71	; 0x47
 800fa04:	d1be      	bne.n	800f984 <_printf_float+0x100>
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d1bc      	bne.n	800f984 <_printf_float+0x100>
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	e7b9      	b.n	800f982 <_printf_float+0xfe>
 800fa0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fa12:	d118      	bne.n	800fa46 <_printf_float+0x1c2>
 800fa14:	2900      	cmp	r1, #0
 800fa16:	6863      	ldr	r3, [r4, #4]
 800fa18:	dd0b      	ble.n	800fa32 <_printf_float+0x1ae>
 800fa1a:	6121      	str	r1, [r4, #16]
 800fa1c:	b913      	cbnz	r3, 800fa24 <_printf_float+0x1a0>
 800fa1e:	6822      	ldr	r2, [r4, #0]
 800fa20:	07d0      	lsls	r0, r2, #31
 800fa22:	d502      	bpl.n	800fa2a <_printf_float+0x1a6>
 800fa24:	3301      	adds	r3, #1
 800fa26:	440b      	add	r3, r1
 800fa28:	6123      	str	r3, [r4, #16]
 800fa2a:	65a1      	str	r1, [r4, #88]	; 0x58
 800fa2c:	f04f 0900 	mov.w	r9, #0
 800fa30:	e7de      	b.n	800f9f0 <_printf_float+0x16c>
 800fa32:	b913      	cbnz	r3, 800fa3a <_printf_float+0x1b6>
 800fa34:	6822      	ldr	r2, [r4, #0]
 800fa36:	07d2      	lsls	r2, r2, #31
 800fa38:	d501      	bpl.n	800fa3e <_printf_float+0x1ba>
 800fa3a:	3302      	adds	r3, #2
 800fa3c:	e7f4      	b.n	800fa28 <_printf_float+0x1a4>
 800fa3e:	2301      	movs	r3, #1
 800fa40:	e7f2      	b.n	800fa28 <_printf_float+0x1a4>
 800fa42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fa46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa48:	4299      	cmp	r1, r3
 800fa4a:	db05      	blt.n	800fa58 <_printf_float+0x1d4>
 800fa4c:	6823      	ldr	r3, [r4, #0]
 800fa4e:	6121      	str	r1, [r4, #16]
 800fa50:	07d8      	lsls	r0, r3, #31
 800fa52:	d5ea      	bpl.n	800fa2a <_printf_float+0x1a6>
 800fa54:	1c4b      	adds	r3, r1, #1
 800fa56:	e7e7      	b.n	800fa28 <_printf_float+0x1a4>
 800fa58:	2900      	cmp	r1, #0
 800fa5a:	bfd4      	ite	le
 800fa5c:	f1c1 0202 	rsble	r2, r1, #2
 800fa60:	2201      	movgt	r2, #1
 800fa62:	4413      	add	r3, r2
 800fa64:	e7e0      	b.n	800fa28 <_printf_float+0x1a4>
 800fa66:	6823      	ldr	r3, [r4, #0]
 800fa68:	055a      	lsls	r2, r3, #21
 800fa6a:	d407      	bmi.n	800fa7c <_printf_float+0x1f8>
 800fa6c:	6923      	ldr	r3, [r4, #16]
 800fa6e:	4642      	mov	r2, r8
 800fa70:	4631      	mov	r1, r6
 800fa72:	4628      	mov	r0, r5
 800fa74:	47b8      	blx	r7
 800fa76:	3001      	adds	r0, #1
 800fa78:	d12c      	bne.n	800fad4 <_printf_float+0x250>
 800fa7a:	e764      	b.n	800f946 <_printf_float+0xc2>
 800fa7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fa80:	f240 80e0 	bls.w	800fc44 <_printf_float+0x3c0>
 800fa84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fa88:	2200      	movs	r2, #0
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	f7f1 f844 	bl	8000b18 <__aeabi_dcmpeq>
 800fa90:	2800      	cmp	r0, #0
 800fa92:	d034      	beq.n	800fafe <_printf_float+0x27a>
 800fa94:	4a37      	ldr	r2, [pc, #220]	; (800fb74 <_printf_float+0x2f0>)
 800fa96:	2301      	movs	r3, #1
 800fa98:	4631      	mov	r1, r6
 800fa9a:	4628      	mov	r0, r5
 800fa9c:	47b8      	blx	r7
 800fa9e:	3001      	adds	r0, #1
 800faa0:	f43f af51 	beq.w	800f946 <_printf_float+0xc2>
 800faa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800faa8:	429a      	cmp	r2, r3
 800faaa:	db02      	blt.n	800fab2 <_printf_float+0x22e>
 800faac:	6823      	ldr	r3, [r4, #0]
 800faae:	07d8      	lsls	r0, r3, #31
 800fab0:	d510      	bpl.n	800fad4 <_printf_float+0x250>
 800fab2:	ee18 3a10 	vmov	r3, s16
 800fab6:	4652      	mov	r2, sl
 800fab8:	4631      	mov	r1, r6
 800faba:	4628      	mov	r0, r5
 800fabc:	47b8      	blx	r7
 800fabe:	3001      	adds	r0, #1
 800fac0:	f43f af41 	beq.w	800f946 <_printf_float+0xc2>
 800fac4:	f04f 0800 	mov.w	r8, #0
 800fac8:	f104 091a 	add.w	r9, r4, #26
 800facc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800face:	3b01      	subs	r3, #1
 800fad0:	4543      	cmp	r3, r8
 800fad2:	dc09      	bgt.n	800fae8 <_printf_float+0x264>
 800fad4:	6823      	ldr	r3, [r4, #0]
 800fad6:	079b      	lsls	r3, r3, #30
 800fad8:	f100 8105 	bmi.w	800fce6 <_printf_float+0x462>
 800fadc:	68e0      	ldr	r0, [r4, #12]
 800fade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fae0:	4298      	cmp	r0, r3
 800fae2:	bfb8      	it	lt
 800fae4:	4618      	movlt	r0, r3
 800fae6:	e730      	b.n	800f94a <_printf_float+0xc6>
 800fae8:	2301      	movs	r3, #1
 800faea:	464a      	mov	r2, r9
 800faec:	4631      	mov	r1, r6
 800faee:	4628      	mov	r0, r5
 800faf0:	47b8      	blx	r7
 800faf2:	3001      	adds	r0, #1
 800faf4:	f43f af27 	beq.w	800f946 <_printf_float+0xc2>
 800faf8:	f108 0801 	add.w	r8, r8, #1
 800fafc:	e7e6      	b.n	800facc <_printf_float+0x248>
 800fafe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	dc39      	bgt.n	800fb78 <_printf_float+0x2f4>
 800fb04:	4a1b      	ldr	r2, [pc, #108]	; (800fb74 <_printf_float+0x2f0>)
 800fb06:	2301      	movs	r3, #1
 800fb08:	4631      	mov	r1, r6
 800fb0a:	4628      	mov	r0, r5
 800fb0c:	47b8      	blx	r7
 800fb0e:	3001      	adds	r0, #1
 800fb10:	f43f af19 	beq.w	800f946 <_printf_float+0xc2>
 800fb14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fb18:	4313      	orrs	r3, r2
 800fb1a:	d102      	bne.n	800fb22 <_printf_float+0x29e>
 800fb1c:	6823      	ldr	r3, [r4, #0]
 800fb1e:	07d9      	lsls	r1, r3, #31
 800fb20:	d5d8      	bpl.n	800fad4 <_printf_float+0x250>
 800fb22:	ee18 3a10 	vmov	r3, s16
 800fb26:	4652      	mov	r2, sl
 800fb28:	4631      	mov	r1, r6
 800fb2a:	4628      	mov	r0, r5
 800fb2c:	47b8      	blx	r7
 800fb2e:	3001      	adds	r0, #1
 800fb30:	f43f af09 	beq.w	800f946 <_printf_float+0xc2>
 800fb34:	f04f 0900 	mov.w	r9, #0
 800fb38:	f104 0a1a 	add.w	sl, r4, #26
 800fb3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb3e:	425b      	negs	r3, r3
 800fb40:	454b      	cmp	r3, r9
 800fb42:	dc01      	bgt.n	800fb48 <_printf_float+0x2c4>
 800fb44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb46:	e792      	b.n	800fa6e <_printf_float+0x1ea>
 800fb48:	2301      	movs	r3, #1
 800fb4a:	4652      	mov	r2, sl
 800fb4c:	4631      	mov	r1, r6
 800fb4e:	4628      	mov	r0, r5
 800fb50:	47b8      	blx	r7
 800fb52:	3001      	adds	r0, #1
 800fb54:	f43f aef7 	beq.w	800f946 <_printf_float+0xc2>
 800fb58:	f109 0901 	add.w	r9, r9, #1
 800fb5c:	e7ee      	b.n	800fb3c <_printf_float+0x2b8>
 800fb5e:	bf00      	nop
 800fb60:	7fefffff 	.word	0x7fefffff
 800fb64:	080157e4 	.word	0x080157e4
 800fb68:	080157e8 	.word	0x080157e8
 800fb6c:	080157f0 	.word	0x080157f0
 800fb70:	080157ec 	.word	0x080157ec
 800fb74:	080157f4 	.word	0x080157f4
 800fb78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fb7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	bfa8      	it	ge
 800fb80:	461a      	movge	r2, r3
 800fb82:	2a00      	cmp	r2, #0
 800fb84:	4691      	mov	r9, r2
 800fb86:	dc37      	bgt.n	800fbf8 <_printf_float+0x374>
 800fb88:	f04f 0b00 	mov.w	fp, #0
 800fb8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fb90:	f104 021a 	add.w	r2, r4, #26
 800fb94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fb96:	9305      	str	r3, [sp, #20]
 800fb98:	eba3 0309 	sub.w	r3, r3, r9
 800fb9c:	455b      	cmp	r3, fp
 800fb9e:	dc33      	bgt.n	800fc08 <_printf_float+0x384>
 800fba0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fba4:	429a      	cmp	r2, r3
 800fba6:	db3b      	blt.n	800fc20 <_printf_float+0x39c>
 800fba8:	6823      	ldr	r3, [r4, #0]
 800fbaa:	07da      	lsls	r2, r3, #31
 800fbac:	d438      	bmi.n	800fc20 <_printf_float+0x39c>
 800fbae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fbb0:	9b05      	ldr	r3, [sp, #20]
 800fbb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fbb4:	1ad3      	subs	r3, r2, r3
 800fbb6:	eba2 0901 	sub.w	r9, r2, r1
 800fbba:	4599      	cmp	r9, r3
 800fbbc:	bfa8      	it	ge
 800fbbe:	4699      	movge	r9, r3
 800fbc0:	f1b9 0f00 	cmp.w	r9, #0
 800fbc4:	dc35      	bgt.n	800fc32 <_printf_float+0x3ae>
 800fbc6:	f04f 0800 	mov.w	r8, #0
 800fbca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fbce:	f104 0a1a 	add.w	sl, r4, #26
 800fbd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fbd6:	1a9b      	subs	r3, r3, r2
 800fbd8:	eba3 0309 	sub.w	r3, r3, r9
 800fbdc:	4543      	cmp	r3, r8
 800fbde:	f77f af79 	ble.w	800fad4 <_printf_float+0x250>
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	4652      	mov	r2, sl
 800fbe6:	4631      	mov	r1, r6
 800fbe8:	4628      	mov	r0, r5
 800fbea:	47b8      	blx	r7
 800fbec:	3001      	adds	r0, #1
 800fbee:	f43f aeaa 	beq.w	800f946 <_printf_float+0xc2>
 800fbf2:	f108 0801 	add.w	r8, r8, #1
 800fbf6:	e7ec      	b.n	800fbd2 <_printf_float+0x34e>
 800fbf8:	4613      	mov	r3, r2
 800fbfa:	4631      	mov	r1, r6
 800fbfc:	4642      	mov	r2, r8
 800fbfe:	4628      	mov	r0, r5
 800fc00:	47b8      	blx	r7
 800fc02:	3001      	adds	r0, #1
 800fc04:	d1c0      	bne.n	800fb88 <_printf_float+0x304>
 800fc06:	e69e      	b.n	800f946 <_printf_float+0xc2>
 800fc08:	2301      	movs	r3, #1
 800fc0a:	4631      	mov	r1, r6
 800fc0c:	4628      	mov	r0, r5
 800fc0e:	9205      	str	r2, [sp, #20]
 800fc10:	47b8      	blx	r7
 800fc12:	3001      	adds	r0, #1
 800fc14:	f43f ae97 	beq.w	800f946 <_printf_float+0xc2>
 800fc18:	9a05      	ldr	r2, [sp, #20]
 800fc1a:	f10b 0b01 	add.w	fp, fp, #1
 800fc1e:	e7b9      	b.n	800fb94 <_printf_float+0x310>
 800fc20:	ee18 3a10 	vmov	r3, s16
 800fc24:	4652      	mov	r2, sl
 800fc26:	4631      	mov	r1, r6
 800fc28:	4628      	mov	r0, r5
 800fc2a:	47b8      	blx	r7
 800fc2c:	3001      	adds	r0, #1
 800fc2e:	d1be      	bne.n	800fbae <_printf_float+0x32a>
 800fc30:	e689      	b.n	800f946 <_printf_float+0xc2>
 800fc32:	9a05      	ldr	r2, [sp, #20]
 800fc34:	464b      	mov	r3, r9
 800fc36:	4442      	add	r2, r8
 800fc38:	4631      	mov	r1, r6
 800fc3a:	4628      	mov	r0, r5
 800fc3c:	47b8      	blx	r7
 800fc3e:	3001      	adds	r0, #1
 800fc40:	d1c1      	bne.n	800fbc6 <_printf_float+0x342>
 800fc42:	e680      	b.n	800f946 <_printf_float+0xc2>
 800fc44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fc46:	2a01      	cmp	r2, #1
 800fc48:	dc01      	bgt.n	800fc4e <_printf_float+0x3ca>
 800fc4a:	07db      	lsls	r3, r3, #31
 800fc4c:	d538      	bpl.n	800fcc0 <_printf_float+0x43c>
 800fc4e:	2301      	movs	r3, #1
 800fc50:	4642      	mov	r2, r8
 800fc52:	4631      	mov	r1, r6
 800fc54:	4628      	mov	r0, r5
 800fc56:	47b8      	blx	r7
 800fc58:	3001      	adds	r0, #1
 800fc5a:	f43f ae74 	beq.w	800f946 <_printf_float+0xc2>
 800fc5e:	ee18 3a10 	vmov	r3, s16
 800fc62:	4652      	mov	r2, sl
 800fc64:	4631      	mov	r1, r6
 800fc66:	4628      	mov	r0, r5
 800fc68:	47b8      	blx	r7
 800fc6a:	3001      	adds	r0, #1
 800fc6c:	f43f ae6b 	beq.w	800f946 <_printf_float+0xc2>
 800fc70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fc74:	2200      	movs	r2, #0
 800fc76:	2300      	movs	r3, #0
 800fc78:	f7f0 ff4e 	bl	8000b18 <__aeabi_dcmpeq>
 800fc7c:	b9d8      	cbnz	r0, 800fcb6 <_printf_float+0x432>
 800fc7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc80:	f108 0201 	add.w	r2, r8, #1
 800fc84:	3b01      	subs	r3, #1
 800fc86:	4631      	mov	r1, r6
 800fc88:	4628      	mov	r0, r5
 800fc8a:	47b8      	blx	r7
 800fc8c:	3001      	adds	r0, #1
 800fc8e:	d10e      	bne.n	800fcae <_printf_float+0x42a>
 800fc90:	e659      	b.n	800f946 <_printf_float+0xc2>
 800fc92:	2301      	movs	r3, #1
 800fc94:	4652      	mov	r2, sl
 800fc96:	4631      	mov	r1, r6
 800fc98:	4628      	mov	r0, r5
 800fc9a:	47b8      	blx	r7
 800fc9c:	3001      	adds	r0, #1
 800fc9e:	f43f ae52 	beq.w	800f946 <_printf_float+0xc2>
 800fca2:	f108 0801 	add.w	r8, r8, #1
 800fca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fca8:	3b01      	subs	r3, #1
 800fcaa:	4543      	cmp	r3, r8
 800fcac:	dcf1      	bgt.n	800fc92 <_printf_float+0x40e>
 800fcae:	464b      	mov	r3, r9
 800fcb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fcb4:	e6dc      	b.n	800fa70 <_printf_float+0x1ec>
 800fcb6:	f04f 0800 	mov.w	r8, #0
 800fcba:	f104 0a1a 	add.w	sl, r4, #26
 800fcbe:	e7f2      	b.n	800fca6 <_printf_float+0x422>
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	4642      	mov	r2, r8
 800fcc4:	e7df      	b.n	800fc86 <_printf_float+0x402>
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	464a      	mov	r2, r9
 800fcca:	4631      	mov	r1, r6
 800fccc:	4628      	mov	r0, r5
 800fcce:	47b8      	blx	r7
 800fcd0:	3001      	adds	r0, #1
 800fcd2:	f43f ae38 	beq.w	800f946 <_printf_float+0xc2>
 800fcd6:	f108 0801 	add.w	r8, r8, #1
 800fcda:	68e3      	ldr	r3, [r4, #12]
 800fcdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fcde:	1a5b      	subs	r3, r3, r1
 800fce0:	4543      	cmp	r3, r8
 800fce2:	dcf0      	bgt.n	800fcc6 <_printf_float+0x442>
 800fce4:	e6fa      	b.n	800fadc <_printf_float+0x258>
 800fce6:	f04f 0800 	mov.w	r8, #0
 800fcea:	f104 0919 	add.w	r9, r4, #25
 800fcee:	e7f4      	b.n	800fcda <_printf_float+0x456>

0800fcf0 <_printf_common>:
 800fcf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcf4:	4616      	mov	r6, r2
 800fcf6:	4699      	mov	r9, r3
 800fcf8:	688a      	ldr	r2, [r1, #8]
 800fcfa:	690b      	ldr	r3, [r1, #16]
 800fcfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fd00:	4293      	cmp	r3, r2
 800fd02:	bfb8      	it	lt
 800fd04:	4613      	movlt	r3, r2
 800fd06:	6033      	str	r3, [r6, #0]
 800fd08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fd0c:	4607      	mov	r7, r0
 800fd0e:	460c      	mov	r4, r1
 800fd10:	b10a      	cbz	r2, 800fd16 <_printf_common+0x26>
 800fd12:	3301      	adds	r3, #1
 800fd14:	6033      	str	r3, [r6, #0]
 800fd16:	6823      	ldr	r3, [r4, #0]
 800fd18:	0699      	lsls	r1, r3, #26
 800fd1a:	bf42      	ittt	mi
 800fd1c:	6833      	ldrmi	r3, [r6, #0]
 800fd1e:	3302      	addmi	r3, #2
 800fd20:	6033      	strmi	r3, [r6, #0]
 800fd22:	6825      	ldr	r5, [r4, #0]
 800fd24:	f015 0506 	ands.w	r5, r5, #6
 800fd28:	d106      	bne.n	800fd38 <_printf_common+0x48>
 800fd2a:	f104 0a19 	add.w	sl, r4, #25
 800fd2e:	68e3      	ldr	r3, [r4, #12]
 800fd30:	6832      	ldr	r2, [r6, #0]
 800fd32:	1a9b      	subs	r3, r3, r2
 800fd34:	42ab      	cmp	r3, r5
 800fd36:	dc26      	bgt.n	800fd86 <_printf_common+0x96>
 800fd38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fd3c:	1e13      	subs	r3, r2, #0
 800fd3e:	6822      	ldr	r2, [r4, #0]
 800fd40:	bf18      	it	ne
 800fd42:	2301      	movne	r3, #1
 800fd44:	0692      	lsls	r2, r2, #26
 800fd46:	d42b      	bmi.n	800fda0 <_printf_common+0xb0>
 800fd48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fd4c:	4649      	mov	r1, r9
 800fd4e:	4638      	mov	r0, r7
 800fd50:	47c0      	blx	r8
 800fd52:	3001      	adds	r0, #1
 800fd54:	d01e      	beq.n	800fd94 <_printf_common+0xa4>
 800fd56:	6823      	ldr	r3, [r4, #0]
 800fd58:	68e5      	ldr	r5, [r4, #12]
 800fd5a:	6832      	ldr	r2, [r6, #0]
 800fd5c:	f003 0306 	and.w	r3, r3, #6
 800fd60:	2b04      	cmp	r3, #4
 800fd62:	bf08      	it	eq
 800fd64:	1aad      	subeq	r5, r5, r2
 800fd66:	68a3      	ldr	r3, [r4, #8]
 800fd68:	6922      	ldr	r2, [r4, #16]
 800fd6a:	bf0c      	ite	eq
 800fd6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd70:	2500      	movne	r5, #0
 800fd72:	4293      	cmp	r3, r2
 800fd74:	bfc4      	itt	gt
 800fd76:	1a9b      	subgt	r3, r3, r2
 800fd78:	18ed      	addgt	r5, r5, r3
 800fd7a:	2600      	movs	r6, #0
 800fd7c:	341a      	adds	r4, #26
 800fd7e:	42b5      	cmp	r5, r6
 800fd80:	d11a      	bne.n	800fdb8 <_printf_common+0xc8>
 800fd82:	2000      	movs	r0, #0
 800fd84:	e008      	b.n	800fd98 <_printf_common+0xa8>
 800fd86:	2301      	movs	r3, #1
 800fd88:	4652      	mov	r2, sl
 800fd8a:	4649      	mov	r1, r9
 800fd8c:	4638      	mov	r0, r7
 800fd8e:	47c0      	blx	r8
 800fd90:	3001      	adds	r0, #1
 800fd92:	d103      	bne.n	800fd9c <_printf_common+0xac>
 800fd94:	f04f 30ff 	mov.w	r0, #4294967295
 800fd98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd9c:	3501      	adds	r5, #1
 800fd9e:	e7c6      	b.n	800fd2e <_printf_common+0x3e>
 800fda0:	18e1      	adds	r1, r4, r3
 800fda2:	1c5a      	adds	r2, r3, #1
 800fda4:	2030      	movs	r0, #48	; 0x30
 800fda6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fdaa:	4422      	add	r2, r4
 800fdac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fdb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fdb4:	3302      	adds	r3, #2
 800fdb6:	e7c7      	b.n	800fd48 <_printf_common+0x58>
 800fdb8:	2301      	movs	r3, #1
 800fdba:	4622      	mov	r2, r4
 800fdbc:	4649      	mov	r1, r9
 800fdbe:	4638      	mov	r0, r7
 800fdc0:	47c0      	blx	r8
 800fdc2:	3001      	adds	r0, #1
 800fdc4:	d0e6      	beq.n	800fd94 <_printf_common+0xa4>
 800fdc6:	3601      	adds	r6, #1
 800fdc8:	e7d9      	b.n	800fd7e <_printf_common+0x8e>
	...

0800fdcc <_printf_i>:
 800fdcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fdd0:	460c      	mov	r4, r1
 800fdd2:	4691      	mov	r9, r2
 800fdd4:	7e27      	ldrb	r7, [r4, #24]
 800fdd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fdd8:	2f78      	cmp	r7, #120	; 0x78
 800fdda:	4680      	mov	r8, r0
 800fddc:	469a      	mov	sl, r3
 800fdde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fde2:	d807      	bhi.n	800fdf4 <_printf_i+0x28>
 800fde4:	2f62      	cmp	r7, #98	; 0x62
 800fde6:	d80a      	bhi.n	800fdfe <_printf_i+0x32>
 800fde8:	2f00      	cmp	r7, #0
 800fdea:	f000 80d8 	beq.w	800ff9e <_printf_i+0x1d2>
 800fdee:	2f58      	cmp	r7, #88	; 0x58
 800fdf0:	f000 80a3 	beq.w	800ff3a <_printf_i+0x16e>
 800fdf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fdf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fdfc:	e03a      	b.n	800fe74 <_printf_i+0xa8>
 800fdfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fe02:	2b15      	cmp	r3, #21
 800fe04:	d8f6      	bhi.n	800fdf4 <_printf_i+0x28>
 800fe06:	a001      	add	r0, pc, #4	; (adr r0, 800fe0c <_printf_i+0x40>)
 800fe08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fe0c:	0800fe65 	.word	0x0800fe65
 800fe10:	0800fe79 	.word	0x0800fe79
 800fe14:	0800fdf5 	.word	0x0800fdf5
 800fe18:	0800fdf5 	.word	0x0800fdf5
 800fe1c:	0800fdf5 	.word	0x0800fdf5
 800fe20:	0800fdf5 	.word	0x0800fdf5
 800fe24:	0800fe79 	.word	0x0800fe79
 800fe28:	0800fdf5 	.word	0x0800fdf5
 800fe2c:	0800fdf5 	.word	0x0800fdf5
 800fe30:	0800fdf5 	.word	0x0800fdf5
 800fe34:	0800fdf5 	.word	0x0800fdf5
 800fe38:	0800ff85 	.word	0x0800ff85
 800fe3c:	0800fea9 	.word	0x0800fea9
 800fe40:	0800ff67 	.word	0x0800ff67
 800fe44:	0800fdf5 	.word	0x0800fdf5
 800fe48:	0800fdf5 	.word	0x0800fdf5
 800fe4c:	0800ffa7 	.word	0x0800ffa7
 800fe50:	0800fdf5 	.word	0x0800fdf5
 800fe54:	0800fea9 	.word	0x0800fea9
 800fe58:	0800fdf5 	.word	0x0800fdf5
 800fe5c:	0800fdf5 	.word	0x0800fdf5
 800fe60:	0800ff6f 	.word	0x0800ff6f
 800fe64:	680b      	ldr	r3, [r1, #0]
 800fe66:	1d1a      	adds	r2, r3, #4
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	600a      	str	r2, [r1, #0]
 800fe6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fe70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fe74:	2301      	movs	r3, #1
 800fe76:	e0a3      	b.n	800ffc0 <_printf_i+0x1f4>
 800fe78:	6825      	ldr	r5, [r4, #0]
 800fe7a:	6808      	ldr	r0, [r1, #0]
 800fe7c:	062e      	lsls	r6, r5, #24
 800fe7e:	f100 0304 	add.w	r3, r0, #4
 800fe82:	d50a      	bpl.n	800fe9a <_printf_i+0xce>
 800fe84:	6805      	ldr	r5, [r0, #0]
 800fe86:	600b      	str	r3, [r1, #0]
 800fe88:	2d00      	cmp	r5, #0
 800fe8a:	da03      	bge.n	800fe94 <_printf_i+0xc8>
 800fe8c:	232d      	movs	r3, #45	; 0x2d
 800fe8e:	426d      	negs	r5, r5
 800fe90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe94:	485e      	ldr	r0, [pc, #376]	; (8010010 <_printf_i+0x244>)
 800fe96:	230a      	movs	r3, #10
 800fe98:	e019      	b.n	800fece <_printf_i+0x102>
 800fe9a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fe9e:	6805      	ldr	r5, [r0, #0]
 800fea0:	600b      	str	r3, [r1, #0]
 800fea2:	bf18      	it	ne
 800fea4:	b22d      	sxthne	r5, r5
 800fea6:	e7ef      	b.n	800fe88 <_printf_i+0xbc>
 800fea8:	680b      	ldr	r3, [r1, #0]
 800feaa:	6825      	ldr	r5, [r4, #0]
 800feac:	1d18      	adds	r0, r3, #4
 800feae:	6008      	str	r0, [r1, #0]
 800feb0:	0628      	lsls	r0, r5, #24
 800feb2:	d501      	bpl.n	800feb8 <_printf_i+0xec>
 800feb4:	681d      	ldr	r5, [r3, #0]
 800feb6:	e002      	b.n	800febe <_printf_i+0xf2>
 800feb8:	0669      	lsls	r1, r5, #25
 800feba:	d5fb      	bpl.n	800feb4 <_printf_i+0xe8>
 800febc:	881d      	ldrh	r5, [r3, #0]
 800febe:	4854      	ldr	r0, [pc, #336]	; (8010010 <_printf_i+0x244>)
 800fec0:	2f6f      	cmp	r7, #111	; 0x6f
 800fec2:	bf0c      	ite	eq
 800fec4:	2308      	moveq	r3, #8
 800fec6:	230a      	movne	r3, #10
 800fec8:	2100      	movs	r1, #0
 800feca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fece:	6866      	ldr	r6, [r4, #4]
 800fed0:	60a6      	str	r6, [r4, #8]
 800fed2:	2e00      	cmp	r6, #0
 800fed4:	bfa2      	ittt	ge
 800fed6:	6821      	ldrge	r1, [r4, #0]
 800fed8:	f021 0104 	bicge.w	r1, r1, #4
 800fedc:	6021      	strge	r1, [r4, #0]
 800fede:	b90d      	cbnz	r5, 800fee4 <_printf_i+0x118>
 800fee0:	2e00      	cmp	r6, #0
 800fee2:	d04d      	beq.n	800ff80 <_printf_i+0x1b4>
 800fee4:	4616      	mov	r6, r2
 800fee6:	fbb5 f1f3 	udiv	r1, r5, r3
 800feea:	fb03 5711 	mls	r7, r3, r1, r5
 800feee:	5dc7      	ldrb	r7, [r0, r7]
 800fef0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fef4:	462f      	mov	r7, r5
 800fef6:	42bb      	cmp	r3, r7
 800fef8:	460d      	mov	r5, r1
 800fefa:	d9f4      	bls.n	800fee6 <_printf_i+0x11a>
 800fefc:	2b08      	cmp	r3, #8
 800fefe:	d10b      	bne.n	800ff18 <_printf_i+0x14c>
 800ff00:	6823      	ldr	r3, [r4, #0]
 800ff02:	07df      	lsls	r7, r3, #31
 800ff04:	d508      	bpl.n	800ff18 <_printf_i+0x14c>
 800ff06:	6923      	ldr	r3, [r4, #16]
 800ff08:	6861      	ldr	r1, [r4, #4]
 800ff0a:	4299      	cmp	r1, r3
 800ff0c:	bfde      	ittt	le
 800ff0e:	2330      	movle	r3, #48	; 0x30
 800ff10:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ff14:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ff18:	1b92      	subs	r2, r2, r6
 800ff1a:	6122      	str	r2, [r4, #16]
 800ff1c:	f8cd a000 	str.w	sl, [sp]
 800ff20:	464b      	mov	r3, r9
 800ff22:	aa03      	add	r2, sp, #12
 800ff24:	4621      	mov	r1, r4
 800ff26:	4640      	mov	r0, r8
 800ff28:	f7ff fee2 	bl	800fcf0 <_printf_common>
 800ff2c:	3001      	adds	r0, #1
 800ff2e:	d14c      	bne.n	800ffca <_printf_i+0x1fe>
 800ff30:	f04f 30ff 	mov.w	r0, #4294967295
 800ff34:	b004      	add	sp, #16
 800ff36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff3a:	4835      	ldr	r0, [pc, #212]	; (8010010 <_printf_i+0x244>)
 800ff3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ff40:	6823      	ldr	r3, [r4, #0]
 800ff42:	680e      	ldr	r6, [r1, #0]
 800ff44:	061f      	lsls	r7, r3, #24
 800ff46:	f856 5b04 	ldr.w	r5, [r6], #4
 800ff4a:	600e      	str	r6, [r1, #0]
 800ff4c:	d514      	bpl.n	800ff78 <_printf_i+0x1ac>
 800ff4e:	07d9      	lsls	r1, r3, #31
 800ff50:	bf44      	itt	mi
 800ff52:	f043 0320 	orrmi.w	r3, r3, #32
 800ff56:	6023      	strmi	r3, [r4, #0]
 800ff58:	b91d      	cbnz	r5, 800ff62 <_printf_i+0x196>
 800ff5a:	6823      	ldr	r3, [r4, #0]
 800ff5c:	f023 0320 	bic.w	r3, r3, #32
 800ff60:	6023      	str	r3, [r4, #0]
 800ff62:	2310      	movs	r3, #16
 800ff64:	e7b0      	b.n	800fec8 <_printf_i+0xfc>
 800ff66:	6823      	ldr	r3, [r4, #0]
 800ff68:	f043 0320 	orr.w	r3, r3, #32
 800ff6c:	6023      	str	r3, [r4, #0]
 800ff6e:	2378      	movs	r3, #120	; 0x78
 800ff70:	4828      	ldr	r0, [pc, #160]	; (8010014 <_printf_i+0x248>)
 800ff72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ff76:	e7e3      	b.n	800ff40 <_printf_i+0x174>
 800ff78:	065e      	lsls	r6, r3, #25
 800ff7a:	bf48      	it	mi
 800ff7c:	b2ad      	uxthmi	r5, r5
 800ff7e:	e7e6      	b.n	800ff4e <_printf_i+0x182>
 800ff80:	4616      	mov	r6, r2
 800ff82:	e7bb      	b.n	800fefc <_printf_i+0x130>
 800ff84:	680b      	ldr	r3, [r1, #0]
 800ff86:	6826      	ldr	r6, [r4, #0]
 800ff88:	6960      	ldr	r0, [r4, #20]
 800ff8a:	1d1d      	adds	r5, r3, #4
 800ff8c:	600d      	str	r5, [r1, #0]
 800ff8e:	0635      	lsls	r5, r6, #24
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	d501      	bpl.n	800ff98 <_printf_i+0x1cc>
 800ff94:	6018      	str	r0, [r3, #0]
 800ff96:	e002      	b.n	800ff9e <_printf_i+0x1d2>
 800ff98:	0671      	lsls	r1, r6, #25
 800ff9a:	d5fb      	bpl.n	800ff94 <_printf_i+0x1c8>
 800ff9c:	8018      	strh	r0, [r3, #0]
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	6123      	str	r3, [r4, #16]
 800ffa2:	4616      	mov	r6, r2
 800ffa4:	e7ba      	b.n	800ff1c <_printf_i+0x150>
 800ffa6:	680b      	ldr	r3, [r1, #0]
 800ffa8:	1d1a      	adds	r2, r3, #4
 800ffaa:	600a      	str	r2, [r1, #0]
 800ffac:	681e      	ldr	r6, [r3, #0]
 800ffae:	6862      	ldr	r2, [r4, #4]
 800ffb0:	2100      	movs	r1, #0
 800ffb2:	4630      	mov	r0, r6
 800ffb4:	f7f0 f93c 	bl	8000230 <memchr>
 800ffb8:	b108      	cbz	r0, 800ffbe <_printf_i+0x1f2>
 800ffba:	1b80      	subs	r0, r0, r6
 800ffbc:	6060      	str	r0, [r4, #4]
 800ffbe:	6863      	ldr	r3, [r4, #4]
 800ffc0:	6123      	str	r3, [r4, #16]
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ffc8:	e7a8      	b.n	800ff1c <_printf_i+0x150>
 800ffca:	6923      	ldr	r3, [r4, #16]
 800ffcc:	4632      	mov	r2, r6
 800ffce:	4649      	mov	r1, r9
 800ffd0:	4640      	mov	r0, r8
 800ffd2:	47d0      	blx	sl
 800ffd4:	3001      	adds	r0, #1
 800ffd6:	d0ab      	beq.n	800ff30 <_printf_i+0x164>
 800ffd8:	6823      	ldr	r3, [r4, #0]
 800ffda:	079b      	lsls	r3, r3, #30
 800ffdc:	d413      	bmi.n	8010006 <_printf_i+0x23a>
 800ffde:	68e0      	ldr	r0, [r4, #12]
 800ffe0:	9b03      	ldr	r3, [sp, #12]
 800ffe2:	4298      	cmp	r0, r3
 800ffe4:	bfb8      	it	lt
 800ffe6:	4618      	movlt	r0, r3
 800ffe8:	e7a4      	b.n	800ff34 <_printf_i+0x168>
 800ffea:	2301      	movs	r3, #1
 800ffec:	4632      	mov	r2, r6
 800ffee:	4649      	mov	r1, r9
 800fff0:	4640      	mov	r0, r8
 800fff2:	47d0      	blx	sl
 800fff4:	3001      	adds	r0, #1
 800fff6:	d09b      	beq.n	800ff30 <_printf_i+0x164>
 800fff8:	3501      	adds	r5, #1
 800fffa:	68e3      	ldr	r3, [r4, #12]
 800fffc:	9903      	ldr	r1, [sp, #12]
 800fffe:	1a5b      	subs	r3, r3, r1
 8010000:	42ab      	cmp	r3, r5
 8010002:	dcf2      	bgt.n	800ffea <_printf_i+0x21e>
 8010004:	e7eb      	b.n	800ffde <_printf_i+0x212>
 8010006:	2500      	movs	r5, #0
 8010008:	f104 0619 	add.w	r6, r4, #25
 801000c:	e7f5      	b.n	800fffa <_printf_i+0x22e>
 801000e:	bf00      	nop
 8010010:	080157f6 	.word	0x080157f6
 8010014:	08015807 	.word	0x08015807

08010018 <_scanf_float>:
 8010018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801001c:	b087      	sub	sp, #28
 801001e:	4617      	mov	r7, r2
 8010020:	9303      	str	r3, [sp, #12]
 8010022:	688b      	ldr	r3, [r1, #8]
 8010024:	1e5a      	subs	r2, r3, #1
 8010026:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801002a:	bf83      	ittte	hi
 801002c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010030:	195b      	addhi	r3, r3, r5
 8010032:	9302      	strhi	r3, [sp, #8]
 8010034:	2300      	movls	r3, #0
 8010036:	bf86      	itte	hi
 8010038:	f240 135d 	movwhi	r3, #349	; 0x15d
 801003c:	608b      	strhi	r3, [r1, #8]
 801003e:	9302      	strls	r3, [sp, #8]
 8010040:	680b      	ldr	r3, [r1, #0]
 8010042:	468b      	mov	fp, r1
 8010044:	2500      	movs	r5, #0
 8010046:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801004a:	f84b 3b1c 	str.w	r3, [fp], #28
 801004e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010052:	4680      	mov	r8, r0
 8010054:	460c      	mov	r4, r1
 8010056:	465e      	mov	r6, fp
 8010058:	46aa      	mov	sl, r5
 801005a:	46a9      	mov	r9, r5
 801005c:	9501      	str	r5, [sp, #4]
 801005e:	68a2      	ldr	r2, [r4, #8]
 8010060:	b152      	cbz	r2, 8010078 <_scanf_float+0x60>
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	781b      	ldrb	r3, [r3, #0]
 8010066:	2b4e      	cmp	r3, #78	; 0x4e
 8010068:	d864      	bhi.n	8010134 <_scanf_float+0x11c>
 801006a:	2b40      	cmp	r3, #64	; 0x40
 801006c:	d83c      	bhi.n	80100e8 <_scanf_float+0xd0>
 801006e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010072:	b2c8      	uxtb	r0, r1
 8010074:	280e      	cmp	r0, #14
 8010076:	d93a      	bls.n	80100ee <_scanf_float+0xd6>
 8010078:	f1b9 0f00 	cmp.w	r9, #0
 801007c:	d003      	beq.n	8010086 <_scanf_float+0x6e>
 801007e:	6823      	ldr	r3, [r4, #0]
 8010080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010084:	6023      	str	r3, [r4, #0]
 8010086:	f10a 3aff 	add.w	sl, sl, #4294967295
 801008a:	f1ba 0f01 	cmp.w	sl, #1
 801008e:	f200 8113 	bhi.w	80102b8 <_scanf_float+0x2a0>
 8010092:	455e      	cmp	r6, fp
 8010094:	f200 8105 	bhi.w	80102a2 <_scanf_float+0x28a>
 8010098:	2501      	movs	r5, #1
 801009a:	4628      	mov	r0, r5
 801009c:	b007      	add	sp, #28
 801009e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80100a6:	2a0d      	cmp	r2, #13
 80100a8:	d8e6      	bhi.n	8010078 <_scanf_float+0x60>
 80100aa:	a101      	add	r1, pc, #4	; (adr r1, 80100b0 <_scanf_float+0x98>)
 80100ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80100b0:	080101ef 	.word	0x080101ef
 80100b4:	08010079 	.word	0x08010079
 80100b8:	08010079 	.word	0x08010079
 80100bc:	08010079 	.word	0x08010079
 80100c0:	0801024f 	.word	0x0801024f
 80100c4:	08010227 	.word	0x08010227
 80100c8:	08010079 	.word	0x08010079
 80100cc:	08010079 	.word	0x08010079
 80100d0:	080101fd 	.word	0x080101fd
 80100d4:	08010079 	.word	0x08010079
 80100d8:	08010079 	.word	0x08010079
 80100dc:	08010079 	.word	0x08010079
 80100e0:	08010079 	.word	0x08010079
 80100e4:	080101b5 	.word	0x080101b5
 80100e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80100ec:	e7db      	b.n	80100a6 <_scanf_float+0x8e>
 80100ee:	290e      	cmp	r1, #14
 80100f0:	d8c2      	bhi.n	8010078 <_scanf_float+0x60>
 80100f2:	a001      	add	r0, pc, #4	; (adr r0, 80100f8 <_scanf_float+0xe0>)
 80100f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80100f8:	080101a7 	.word	0x080101a7
 80100fc:	08010079 	.word	0x08010079
 8010100:	080101a7 	.word	0x080101a7
 8010104:	0801023b 	.word	0x0801023b
 8010108:	08010079 	.word	0x08010079
 801010c:	08010155 	.word	0x08010155
 8010110:	08010191 	.word	0x08010191
 8010114:	08010191 	.word	0x08010191
 8010118:	08010191 	.word	0x08010191
 801011c:	08010191 	.word	0x08010191
 8010120:	08010191 	.word	0x08010191
 8010124:	08010191 	.word	0x08010191
 8010128:	08010191 	.word	0x08010191
 801012c:	08010191 	.word	0x08010191
 8010130:	08010191 	.word	0x08010191
 8010134:	2b6e      	cmp	r3, #110	; 0x6e
 8010136:	d809      	bhi.n	801014c <_scanf_float+0x134>
 8010138:	2b60      	cmp	r3, #96	; 0x60
 801013a:	d8b2      	bhi.n	80100a2 <_scanf_float+0x8a>
 801013c:	2b54      	cmp	r3, #84	; 0x54
 801013e:	d077      	beq.n	8010230 <_scanf_float+0x218>
 8010140:	2b59      	cmp	r3, #89	; 0x59
 8010142:	d199      	bne.n	8010078 <_scanf_float+0x60>
 8010144:	2d07      	cmp	r5, #7
 8010146:	d197      	bne.n	8010078 <_scanf_float+0x60>
 8010148:	2508      	movs	r5, #8
 801014a:	e029      	b.n	80101a0 <_scanf_float+0x188>
 801014c:	2b74      	cmp	r3, #116	; 0x74
 801014e:	d06f      	beq.n	8010230 <_scanf_float+0x218>
 8010150:	2b79      	cmp	r3, #121	; 0x79
 8010152:	e7f6      	b.n	8010142 <_scanf_float+0x12a>
 8010154:	6821      	ldr	r1, [r4, #0]
 8010156:	05c8      	lsls	r0, r1, #23
 8010158:	d51a      	bpl.n	8010190 <_scanf_float+0x178>
 801015a:	9b02      	ldr	r3, [sp, #8]
 801015c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010160:	6021      	str	r1, [r4, #0]
 8010162:	f109 0901 	add.w	r9, r9, #1
 8010166:	b11b      	cbz	r3, 8010170 <_scanf_float+0x158>
 8010168:	3b01      	subs	r3, #1
 801016a:	3201      	adds	r2, #1
 801016c:	9302      	str	r3, [sp, #8]
 801016e:	60a2      	str	r2, [r4, #8]
 8010170:	68a3      	ldr	r3, [r4, #8]
 8010172:	3b01      	subs	r3, #1
 8010174:	60a3      	str	r3, [r4, #8]
 8010176:	6923      	ldr	r3, [r4, #16]
 8010178:	3301      	adds	r3, #1
 801017a:	6123      	str	r3, [r4, #16]
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	3b01      	subs	r3, #1
 8010180:	2b00      	cmp	r3, #0
 8010182:	607b      	str	r3, [r7, #4]
 8010184:	f340 8084 	ble.w	8010290 <_scanf_float+0x278>
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	3301      	adds	r3, #1
 801018c:	603b      	str	r3, [r7, #0]
 801018e:	e766      	b.n	801005e <_scanf_float+0x46>
 8010190:	eb1a 0f05 	cmn.w	sl, r5
 8010194:	f47f af70 	bne.w	8010078 <_scanf_float+0x60>
 8010198:	6822      	ldr	r2, [r4, #0]
 801019a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801019e:	6022      	str	r2, [r4, #0]
 80101a0:	f806 3b01 	strb.w	r3, [r6], #1
 80101a4:	e7e4      	b.n	8010170 <_scanf_float+0x158>
 80101a6:	6822      	ldr	r2, [r4, #0]
 80101a8:	0610      	lsls	r0, r2, #24
 80101aa:	f57f af65 	bpl.w	8010078 <_scanf_float+0x60>
 80101ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80101b2:	e7f4      	b.n	801019e <_scanf_float+0x186>
 80101b4:	f1ba 0f00 	cmp.w	sl, #0
 80101b8:	d10e      	bne.n	80101d8 <_scanf_float+0x1c0>
 80101ba:	f1b9 0f00 	cmp.w	r9, #0
 80101be:	d10e      	bne.n	80101de <_scanf_float+0x1c6>
 80101c0:	6822      	ldr	r2, [r4, #0]
 80101c2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80101c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80101ca:	d108      	bne.n	80101de <_scanf_float+0x1c6>
 80101cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80101d0:	6022      	str	r2, [r4, #0]
 80101d2:	f04f 0a01 	mov.w	sl, #1
 80101d6:	e7e3      	b.n	80101a0 <_scanf_float+0x188>
 80101d8:	f1ba 0f02 	cmp.w	sl, #2
 80101dc:	d055      	beq.n	801028a <_scanf_float+0x272>
 80101de:	2d01      	cmp	r5, #1
 80101e0:	d002      	beq.n	80101e8 <_scanf_float+0x1d0>
 80101e2:	2d04      	cmp	r5, #4
 80101e4:	f47f af48 	bne.w	8010078 <_scanf_float+0x60>
 80101e8:	3501      	adds	r5, #1
 80101ea:	b2ed      	uxtb	r5, r5
 80101ec:	e7d8      	b.n	80101a0 <_scanf_float+0x188>
 80101ee:	f1ba 0f01 	cmp.w	sl, #1
 80101f2:	f47f af41 	bne.w	8010078 <_scanf_float+0x60>
 80101f6:	f04f 0a02 	mov.w	sl, #2
 80101fa:	e7d1      	b.n	80101a0 <_scanf_float+0x188>
 80101fc:	b97d      	cbnz	r5, 801021e <_scanf_float+0x206>
 80101fe:	f1b9 0f00 	cmp.w	r9, #0
 8010202:	f47f af3c 	bne.w	801007e <_scanf_float+0x66>
 8010206:	6822      	ldr	r2, [r4, #0]
 8010208:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801020c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010210:	f47f af39 	bne.w	8010086 <_scanf_float+0x6e>
 8010214:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010218:	6022      	str	r2, [r4, #0]
 801021a:	2501      	movs	r5, #1
 801021c:	e7c0      	b.n	80101a0 <_scanf_float+0x188>
 801021e:	2d03      	cmp	r5, #3
 8010220:	d0e2      	beq.n	80101e8 <_scanf_float+0x1d0>
 8010222:	2d05      	cmp	r5, #5
 8010224:	e7de      	b.n	80101e4 <_scanf_float+0x1cc>
 8010226:	2d02      	cmp	r5, #2
 8010228:	f47f af26 	bne.w	8010078 <_scanf_float+0x60>
 801022c:	2503      	movs	r5, #3
 801022e:	e7b7      	b.n	80101a0 <_scanf_float+0x188>
 8010230:	2d06      	cmp	r5, #6
 8010232:	f47f af21 	bne.w	8010078 <_scanf_float+0x60>
 8010236:	2507      	movs	r5, #7
 8010238:	e7b2      	b.n	80101a0 <_scanf_float+0x188>
 801023a:	6822      	ldr	r2, [r4, #0]
 801023c:	0591      	lsls	r1, r2, #22
 801023e:	f57f af1b 	bpl.w	8010078 <_scanf_float+0x60>
 8010242:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010246:	6022      	str	r2, [r4, #0]
 8010248:	f8cd 9004 	str.w	r9, [sp, #4]
 801024c:	e7a8      	b.n	80101a0 <_scanf_float+0x188>
 801024e:	6822      	ldr	r2, [r4, #0]
 8010250:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010254:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010258:	d006      	beq.n	8010268 <_scanf_float+0x250>
 801025a:	0550      	lsls	r0, r2, #21
 801025c:	f57f af0c 	bpl.w	8010078 <_scanf_float+0x60>
 8010260:	f1b9 0f00 	cmp.w	r9, #0
 8010264:	f43f af0f 	beq.w	8010086 <_scanf_float+0x6e>
 8010268:	0591      	lsls	r1, r2, #22
 801026a:	bf58      	it	pl
 801026c:	9901      	ldrpl	r1, [sp, #4]
 801026e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010272:	bf58      	it	pl
 8010274:	eba9 0101 	subpl.w	r1, r9, r1
 8010278:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801027c:	bf58      	it	pl
 801027e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010282:	6022      	str	r2, [r4, #0]
 8010284:	f04f 0900 	mov.w	r9, #0
 8010288:	e78a      	b.n	80101a0 <_scanf_float+0x188>
 801028a:	f04f 0a03 	mov.w	sl, #3
 801028e:	e787      	b.n	80101a0 <_scanf_float+0x188>
 8010290:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010294:	4639      	mov	r1, r7
 8010296:	4640      	mov	r0, r8
 8010298:	4798      	blx	r3
 801029a:	2800      	cmp	r0, #0
 801029c:	f43f aedf 	beq.w	801005e <_scanf_float+0x46>
 80102a0:	e6ea      	b.n	8010078 <_scanf_float+0x60>
 80102a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80102a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80102aa:	463a      	mov	r2, r7
 80102ac:	4640      	mov	r0, r8
 80102ae:	4798      	blx	r3
 80102b0:	6923      	ldr	r3, [r4, #16]
 80102b2:	3b01      	subs	r3, #1
 80102b4:	6123      	str	r3, [r4, #16]
 80102b6:	e6ec      	b.n	8010092 <_scanf_float+0x7a>
 80102b8:	1e6b      	subs	r3, r5, #1
 80102ba:	2b06      	cmp	r3, #6
 80102bc:	d825      	bhi.n	801030a <_scanf_float+0x2f2>
 80102be:	2d02      	cmp	r5, #2
 80102c0:	d836      	bhi.n	8010330 <_scanf_float+0x318>
 80102c2:	455e      	cmp	r6, fp
 80102c4:	f67f aee8 	bls.w	8010098 <_scanf_float+0x80>
 80102c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80102cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80102d0:	463a      	mov	r2, r7
 80102d2:	4640      	mov	r0, r8
 80102d4:	4798      	blx	r3
 80102d6:	6923      	ldr	r3, [r4, #16]
 80102d8:	3b01      	subs	r3, #1
 80102da:	6123      	str	r3, [r4, #16]
 80102dc:	e7f1      	b.n	80102c2 <_scanf_float+0x2aa>
 80102de:	9802      	ldr	r0, [sp, #8]
 80102e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80102e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80102e8:	9002      	str	r0, [sp, #8]
 80102ea:	463a      	mov	r2, r7
 80102ec:	4640      	mov	r0, r8
 80102ee:	4798      	blx	r3
 80102f0:	6923      	ldr	r3, [r4, #16]
 80102f2:	3b01      	subs	r3, #1
 80102f4:	6123      	str	r3, [r4, #16]
 80102f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80102fa:	fa5f fa8a 	uxtb.w	sl, sl
 80102fe:	f1ba 0f02 	cmp.w	sl, #2
 8010302:	d1ec      	bne.n	80102de <_scanf_float+0x2c6>
 8010304:	3d03      	subs	r5, #3
 8010306:	b2ed      	uxtb	r5, r5
 8010308:	1b76      	subs	r6, r6, r5
 801030a:	6823      	ldr	r3, [r4, #0]
 801030c:	05da      	lsls	r2, r3, #23
 801030e:	d52f      	bpl.n	8010370 <_scanf_float+0x358>
 8010310:	055b      	lsls	r3, r3, #21
 8010312:	d510      	bpl.n	8010336 <_scanf_float+0x31e>
 8010314:	455e      	cmp	r6, fp
 8010316:	f67f aebf 	bls.w	8010098 <_scanf_float+0x80>
 801031a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801031e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010322:	463a      	mov	r2, r7
 8010324:	4640      	mov	r0, r8
 8010326:	4798      	blx	r3
 8010328:	6923      	ldr	r3, [r4, #16]
 801032a:	3b01      	subs	r3, #1
 801032c:	6123      	str	r3, [r4, #16]
 801032e:	e7f1      	b.n	8010314 <_scanf_float+0x2fc>
 8010330:	46aa      	mov	sl, r5
 8010332:	9602      	str	r6, [sp, #8]
 8010334:	e7df      	b.n	80102f6 <_scanf_float+0x2de>
 8010336:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801033a:	6923      	ldr	r3, [r4, #16]
 801033c:	2965      	cmp	r1, #101	; 0x65
 801033e:	f103 33ff 	add.w	r3, r3, #4294967295
 8010342:	f106 35ff 	add.w	r5, r6, #4294967295
 8010346:	6123      	str	r3, [r4, #16]
 8010348:	d00c      	beq.n	8010364 <_scanf_float+0x34c>
 801034a:	2945      	cmp	r1, #69	; 0x45
 801034c:	d00a      	beq.n	8010364 <_scanf_float+0x34c>
 801034e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010352:	463a      	mov	r2, r7
 8010354:	4640      	mov	r0, r8
 8010356:	4798      	blx	r3
 8010358:	6923      	ldr	r3, [r4, #16]
 801035a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801035e:	3b01      	subs	r3, #1
 8010360:	1eb5      	subs	r5, r6, #2
 8010362:	6123      	str	r3, [r4, #16]
 8010364:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010368:	463a      	mov	r2, r7
 801036a:	4640      	mov	r0, r8
 801036c:	4798      	blx	r3
 801036e:	462e      	mov	r6, r5
 8010370:	6825      	ldr	r5, [r4, #0]
 8010372:	f015 0510 	ands.w	r5, r5, #16
 8010376:	d158      	bne.n	801042a <_scanf_float+0x412>
 8010378:	7035      	strb	r5, [r6, #0]
 801037a:	6823      	ldr	r3, [r4, #0]
 801037c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010384:	d11c      	bne.n	80103c0 <_scanf_float+0x3a8>
 8010386:	9b01      	ldr	r3, [sp, #4]
 8010388:	454b      	cmp	r3, r9
 801038a:	eba3 0209 	sub.w	r2, r3, r9
 801038e:	d124      	bne.n	80103da <_scanf_float+0x3c2>
 8010390:	2200      	movs	r2, #0
 8010392:	4659      	mov	r1, fp
 8010394:	4640      	mov	r0, r8
 8010396:	f000 ffd1 	bl	801133c <_strtod_r>
 801039a:	9b03      	ldr	r3, [sp, #12]
 801039c:	6821      	ldr	r1, [r4, #0]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	f011 0f02 	tst.w	r1, #2
 80103a4:	ec57 6b10 	vmov	r6, r7, d0
 80103a8:	f103 0204 	add.w	r2, r3, #4
 80103ac:	d020      	beq.n	80103f0 <_scanf_float+0x3d8>
 80103ae:	9903      	ldr	r1, [sp, #12]
 80103b0:	600a      	str	r2, [r1, #0]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	e9c3 6700 	strd	r6, r7, [r3]
 80103b8:	68e3      	ldr	r3, [r4, #12]
 80103ba:	3301      	adds	r3, #1
 80103bc:	60e3      	str	r3, [r4, #12]
 80103be:	e66c      	b.n	801009a <_scanf_float+0x82>
 80103c0:	9b04      	ldr	r3, [sp, #16]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d0e4      	beq.n	8010390 <_scanf_float+0x378>
 80103c6:	9905      	ldr	r1, [sp, #20]
 80103c8:	230a      	movs	r3, #10
 80103ca:	462a      	mov	r2, r5
 80103cc:	3101      	adds	r1, #1
 80103ce:	4640      	mov	r0, r8
 80103d0:	f001 f83e 	bl	8011450 <_strtol_r>
 80103d4:	9b04      	ldr	r3, [sp, #16]
 80103d6:	9e05      	ldr	r6, [sp, #20]
 80103d8:	1ac2      	subs	r2, r0, r3
 80103da:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80103de:	429e      	cmp	r6, r3
 80103e0:	bf28      	it	cs
 80103e2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80103e6:	4912      	ldr	r1, [pc, #72]	; (8010430 <_scanf_float+0x418>)
 80103e8:	4630      	mov	r0, r6
 80103ea:	f000 f91b 	bl	8010624 <siprintf>
 80103ee:	e7cf      	b.n	8010390 <_scanf_float+0x378>
 80103f0:	f011 0f04 	tst.w	r1, #4
 80103f4:	9903      	ldr	r1, [sp, #12]
 80103f6:	600a      	str	r2, [r1, #0]
 80103f8:	d1db      	bne.n	80103b2 <_scanf_float+0x39a>
 80103fa:	f8d3 8000 	ldr.w	r8, [r3]
 80103fe:	ee10 2a10 	vmov	r2, s0
 8010402:	ee10 0a10 	vmov	r0, s0
 8010406:	463b      	mov	r3, r7
 8010408:	4639      	mov	r1, r7
 801040a:	f7f0 fbb7 	bl	8000b7c <__aeabi_dcmpun>
 801040e:	b128      	cbz	r0, 801041c <_scanf_float+0x404>
 8010410:	4808      	ldr	r0, [pc, #32]	; (8010434 <_scanf_float+0x41c>)
 8010412:	f000 f901 	bl	8010618 <nanf>
 8010416:	ed88 0a00 	vstr	s0, [r8]
 801041a:	e7cd      	b.n	80103b8 <_scanf_float+0x3a0>
 801041c:	4630      	mov	r0, r6
 801041e:	4639      	mov	r1, r7
 8010420:	f7f0 fc0a 	bl	8000c38 <__aeabi_d2f>
 8010424:	f8c8 0000 	str.w	r0, [r8]
 8010428:	e7c6      	b.n	80103b8 <_scanf_float+0x3a0>
 801042a:	2500      	movs	r5, #0
 801042c:	e635      	b.n	801009a <_scanf_float+0x82>
 801042e:	bf00      	nop
 8010430:	08015818 	.word	0x08015818
 8010434:	08015c30 	.word	0x08015c30

08010438 <_puts_r>:
 8010438:	b570      	push	{r4, r5, r6, lr}
 801043a:	460e      	mov	r6, r1
 801043c:	4605      	mov	r5, r0
 801043e:	b118      	cbz	r0, 8010448 <_puts_r+0x10>
 8010440:	6983      	ldr	r3, [r0, #24]
 8010442:	b90b      	cbnz	r3, 8010448 <_puts_r+0x10>
 8010444:	f7ff f848 	bl	800f4d8 <__sinit>
 8010448:	69ab      	ldr	r3, [r5, #24]
 801044a:	68ac      	ldr	r4, [r5, #8]
 801044c:	b913      	cbnz	r3, 8010454 <_puts_r+0x1c>
 801044e:	4628      	mov	r0, r5
 8010450:	f7ff f842 	bl	800f4d8 <__sinit>
 8010454:	4b2c      	ldr	r3, [pc, #176]	; (8010508 <_puts_r+0xd0>)
 8010456:	429c      	cmp	r4, r3
 8010458:	d120      	bne.n	801049c <_puts_r+0x64>
 801045a:	686c      	ldr	r4, [r5, #4]
 801045c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801045e:	07db      	lsls	r3, r3, #31
 8010460:	d405      	bmi.n	801046e <_puts_r+0x36>
 8010462:	89a3      	ldrh	r3, [r4, #12]
 8010464:	0598      	lsls	r0, r3, #22
 8010466:	d402      	bmi.n	801046e <_puts_r+0x36>
 8010468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801046a:	f7ff f8f8 	bl	800f65e <__retarget_lock_acquire_recursive>
 801046e:	89a3      	ldrh	r3, [r4, #12]
 8010470:	0719      	lsls	r1, r3, #28
 8010472:	d51d      	bpl.n	80104b0 <_puts_r+0x78>
 8010474:	6923      	ldr	r3, [r4, #16]
 8010476:	b1db      	cbz	r3, 80104b0 <_puts_r+0x78>
 8010478:	3e01      	subs	r6, #1
 801047a:	68a3      	ldr	r3, [r4, #8]
 801047c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010480:	3b01      	subs	r3, #1
 8010482:	60a3      	str	r3, [r4, #8]
 8010484:	bb39      	cbnz	r1, 80104d6 <_puts_r+0x9e>
 8010486:	2b00      	cmp	r3, #0
 8010488:	da38      	bge.n	80104fc <_puts_r+0xc4>
 801048a:	4622      	mov	r2, r4
 801048c:	210a      	movs	r1, #10
 801048e:	4628      	mov	r0, r5
 8010490:	f000 ffe0 	bl	8011454 <__swbuf_r>
 8010494:	3001      	adds	r0, #1
 8010496:	d011      	beq.n	80104bc <_puts_r+0x84>
 8010498:	250a      	movs	r5, #10
 801049a:	e011      	b.n	80104c0 <_puts_r+0x88>
 801049c:	4b1b      	ldr	r3, [pc, #108]	; (801050c <_puts_r+0xd4>)
 801049e:	429c      	cmp	r4, r3
 80104a0:	d101      	bne.n	80104a6 <_puts_r+0x6e>
 80104a2:	68ac      	ldr	r4, [r5, #8]
 80104a4:	e7da      	b.n	801045c <_puts_r+0x24>
 80104a6:	4b1a      	ldr	r3, [pc, #104]	; (8010510 <_puts_r+0xd8>)
 80104a8:	429c      	cmp	r4, r3
 80104aa:	bf08      	it	eq
 80104ac:	68ec      	ldreq	r4, [r5, #12]
 80104ae:	e7d5      	b.n	801045c <_puts_r+0x24>
 80104b0:	4621      	mov	r1, r4
 80104b2:	4628      	mov	r0, r5
 80104b4:	f001 f832 	bl	801151c <__swsetup_r>
 80104b8:	2800      	cmp	r0, #0
 80104ba:	d0dd      	beq.n	8010478 <_puts_r+0x40>
 80104bc:	f04f 35ff 	mov.w	r5, #4294967295
 80104c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80104c2:	07da      	lsls	r2, r3, #31
 80104c4:	d405      	bmi.n	80104d2 <_puts_r+0x9a>
 80104c6:	89a3      	ldrh	r3, [r4, #12]
 80104c8:	059b      	lsls	r3, r3, #22
 80104ca:	d402      	bmi.n	80104d2 <_puts_r+0x9a>
 80104cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80104ce:	f7ff f8c7 	bl	800f660 <__retarget_lock_release_recursive>
 80104d2:	4628      	mov	r0, r5
 80104d4:	bd70      	pop	{r4, r5, r6, pc}
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	da04      	bge.n	80104e4 <_puts_r+0xac>
 80104da:	69a2      	ldr	r2, [r4, #24]
 80104dc:	429a      	cmp	r2, r3
 80104de:	dc06      	bgt.n	80104ee <_puts_r+0xb6>
 80104e0:	290a      	cmp	r1, #10
 80104e2:	d004      	beq.n	80104ee <_puts_r+0xb6>
 80104e4:	6823      	ldr	r3, [r4, #0]
 80104e6:	1c5a      	adds	r2, r3, #1
 80104e8:	6022      	str	r2, [r4, #0]
 80104ea:	7019      	strb	r1, [r3, #0]
 80104ec:	e7c5      	b.n	801047a <_puts_r+0x42>
 80104ee:	4622      	mov	r2, r4
 80104f0:	4628      	mov	r0, r5
 80104f2:	f000 ffaf 	bl	8011454 <__swbuf_r>
 80104f6:	3001      	adds	r0, #1
 80104f8:	d1bf      	bne.n	801047a <_puts_r+0x42>
 80104fa:	e7df      	b.n	80104bc <_puts_r+0x84>
 80104fc:	6823      	ldr	r3, [r4, #0]
 80104fe:	250a      	movs	r5, #10
 8010500:	1c5a      	adds	r2, r3, #1
 8010502:	6022      	str	r2, [r4, #0]
 8010504:	701d      	strb	r5, [r3, #0]
 8010506:	e7db      	b.n	80104c0 <_puts_r+0x88>
 8010508:	080157a0 	.word	0x080157a0
 801050c:	080157c0 	.word	0x080157c0
 8010510:	08015780 	.word	0x08015780

08010514 <puts>:
 8010514:	4b02      	ldr	r3, [pc, #8]	; (8010520 <puts+0xc>)
 8010516:	4601      	mov	r1, r0
 8010518:	6818      	ldr	r0, [r3, #0]
 801051a:	f7ff bf8d 	b.w	8010438 <_puts_r>
 801051e:	bf00      	nop
 8010520:	20000028 	.word	0x20000028

08010524 <cleanup_glue>:
 8010524:	b538      	push	{r3, r4, r5, lr}
 8010526:	460c      	mov	r4, r1
 8010528:	6809      	ldr	r1, [r1, #0]
 801052a:	4605      	mov	r5, r0
 801052c:	b109      	cbz	r1, 8010532 <cleanup_glue+0xe>
 801052e:	f7ff fff9 	bl	8010524 <cleanup_glue>
 8010532:	4621      	mov	r1, r4
 8010534:	4628      	mov	r0, r5
 8010536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801053a:	f003 b881 	b.w	8013640 <_free_r>
	...

08010540 <_reclaim_reent>:
 8010540:	4b2c      	ldr	r3, [pc, #176]	; (80105f4 <_reclaim_reent+0xb4>)
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	4283      	cmp	r3, r0
 8010546:	b570      	push	{r4, r5, r6, lr}
 8010548:	4604      	mov	r4, r0
 801054a:	d051      	beq.n	80105f0 <_reclaim_reent+0xb0>
 801054c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801054e:	b143      	cbz	r3, 8010562 <_reclaim_reent+0x22>
 8010550:	68db      	ldr	r3, [r3, #12]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d14a      	bne.n	80105ec <_reclaim_reent+0xac>
 8010556:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010558:	6819      	ldr	r1, [r3, #0]
 801055a:	b111      	cbz	r1, 8010562 <_reclaim_reent+0x22>
 801055c:	4620      	mov	r0, r4
 801055e:	f003 f86f 	bl	8013640 <_free_r>
 8010562:	6961      	ldr	r1, [r4, #20]
 8010564:	b111      	cbz	r1, 801056c <_reclaim_reent+0x2c>
 8010566:	4620      	mov	r0, r4
 8010568:	f003 f86a 	bl	8013640 <_free_r>
 801056c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801056e:	b111      	cbz	r1, 8010576 <_reclaim_reent+0x36>
 8010570:	4620      	mov	r0, r4
 8010572:	f003 f865 	bl	8013640 <_free_r>
 8010576:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010578:	b111      	cbz	r1, 8010580 <_reclaim_reent+0x40>
 801057a:	4620      	mov	r0, r4
 801057c:	f003 f860 	bl	8013640 <_free_r>
 8010580:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010582:	b111      	cbz	r1, 801058a <_reclaim_reent+0x4a>
 8010584:	4620      	mov	r0, r4
 8010586:	f003 f85b 	bl	8013640 <_free_r>
 801058a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801058c:	b111      	cbz	r1, 8010594 <_reclaim_reent+0x54>
 801058e:	4620      	mov	r0, r4
 8010590:	f003 f856 	bl	8013640 <_free_r>
 8010594:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8010596:	b111      	cbz	r1, 801059e <_reclaim_reent+0x5e>
 8010598:	4620      	mov	r0, r4
 801059a:	f003 f851 	bl	8013640 <_free_r>
 801059e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80105a0:	b111      	cbz	r1, 80105a8 <_reclaim_reent+0x68>
 80105a2:	4620      	mov	r0, r4
 80105a4:	f003 f84c 	bl	8013640 <_free_r>
 80105a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80105aa:	b111      	cbz	r1, 80105b2 <_reclaim_reent+0x72>
 80105ac:	4620      	mov	r0, r4
 80105ae:	f003 f847 	bl	8013640 <_free_r>
 80105b2:	69a3      	ldr	r3, [r4, #24]
 80105b4:	b1e3      	cbz	r3, 80105f0 <_reclaim_reent+0xb0>
 80105b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80105b8:	4620      	mov	r0, r4
 80105ba:	4798      	blx	r3
 80105bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80105be:	b1b9      	cbz	r1, 80105f0 <_reclaim_reent+0xb0>
 80105c0:	4620      	mov	r0, r4
 80105c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80105c6:	f7ff bfad 	b.w	8010524 <cleanup_glue>
 80105ca:	5949      	ldr	r1, [r1, r5]
 80105cc:	b941      	cbnz	r1, 80105e0 <_reclaim_reent+0xa0>
 80105ce:	3504      	adds	r5, #4
 80105d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80105d2:	2d80      	cmp	r5, #128	; 0x80
 80105d4:	68d9      	ldr	r1, [r3, #12]
 80105d6:	d1f8      	bne.n	80105ca <_reclaim_reent+0x8a>
 80105d8:	4620      	mov	r0, r4
 80105da:	f003 f831 	bl	8013640 <_free_r>
 80105de:	e7ba      	b.n	8010556 <_reclaim_reent+0x16>
 80105e0:	680e      	ldr	r6, [r1, #0]
 80105e2:	4620      	mov	r0, r4
 80105e4:	f003 f82c 	bl	8013640 <_free_r>
 80105e8:	4631      	mov	r1, r6
 80105ea:	e7ef      	b.n	80105cc <_reclaim_reent+0x8c>
 80105ec:	2500      	movs	r5, #0
 80105ee:	e7ef      	b.n	80105d0 <_reclaim_reent+0x90>
 80105f0:	bd70      	pop	{r4, r5, r6, pc}
 80105f2:	bf00      	nop
 80105f4:	20000028 	.word	0x20000028

080105f8 <_sbrk_r>:
 80105f8:	b538      	push	{r3, r4, r5, lr}
 80105fa:	4d06      	ldr	r5, [pc, #24]	; (8010614 <_sbrk_r+0x1c>)
 80105fc:	2300      	movs	r3, #0
 80105fe:	4604      	mov	r4, r0
 8010600:	4608      	mov	r0, r1
 8010602:	602b      	str	r3, [r5, #0]
 8010604:	f7f6 fbf8 	bl	8006df8 <_sbrk>
 8010608:	1c43      	adds	r3, r0, #1
 801060a:	d102      	bne.n	8010612 <_sbrk_r+0x1a>
 801060c:	682b      	ldr	r3, [r5, #0]
 801060e:	b103      	cbz	r3, 8010612 <_sbrk_r+0x1a>
 8010610:	6023      	str	r3, [r4, #0]
 8010612:	bd38      	pop	{r3, r4, r5, pc}
 8010614:	20002bcc 	.word	0x20002bcc

08010618 <nanf>:
 8010618:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010620 <nanf+0x8>
 801061c:	4770      	bx	lr
 801061e:	bf00      	nop
 8010620:	7fc00000 	.word	0x7fc00000

08010624 <siprintf>:
 8010624:	b40e      	push	{r1, r2, r3}
 8010626:	b500      	push	{lr}
 8010628:	b09c      	sub	sp, #112	; 0x70
 801062a:	ab1d      	add	r3, sp, #116	; 0x74
 801062c:	9002      	str	r0, [sp, #8]
 801062e:	9006      	str	r0, [sp, #24]
 8010630:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010634:	4809      	ldr	r0, [pc, #36]	; (801065c <siprintf+0x38>)
 8010636:	9107      	str	r1, [sp, #28]
 8010638:	9104      	str	r1, [sp, #16]
 801063a:	4909      	ldr	r1, [pc, #36]	; (8010660 <siprintf+0x3c>)
 801063c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010640:	9105      	str	r1, [sp, #20]
 8010642:	6800      	ldr	r0, [r0, #0]
 8010644:	9301      	str	r3, [sp, #4]
 8010646:	a902      	add	r1, sp, #8
 8010648:	f003 f8a6 	bl	8013798 <_svfiprintf_r>
 801064c:	9b02      	ldr	r3, [sp, #8]
 801064e:	2200      	movs	r2, #0
 8010650:	701a      	strb	r2, [r3, #0]
 8010652:	b01c      	add	sp, #112	; 0x70
 8010654:	f85d eb04 	ldr.w	lr, [sp], #4
 8010658:	b003      	add	sp, #12
 801065a:	4770      	bx	lr
 801065c:	20000028 	.word	0x20000028
 8010660:	ffff0208 	.word	0xffff0208

08010664 <__sread>:
 8010664:	b510      	push	{r4, lr}
 8010666:	460c      	mov	r4, r1
 8010668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801066c:	f003 f994 	bl	8013998 <_read_r>
 8010670:	2800      	cmp	r0, #0
 8010672:	bfab      	itete	ge
 8010674:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010676:	89a3      	ldrhlt	r3, [r4, #12]
 8010678:	181b      	addge	r3, r3, r0
 801067a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801067e:	bfac      	ite	ge
 8010680:	6563      	strge	r3, [r4, #84]	; 0x54
 8010682:	81a3      	strhlt	r3, [r4, #12]
 8010684:	bd10      	pop	{r4, pc}

08010686 <__swrite>:
 8010686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801068a:	461f      	mov	r7, r3
 801068c:	898b      	ldrh	r3, [r1, #12]
 801068e:	05db      	lsls	r3, r3, #23
 8010690:	4605      	mov	r5, r0
 8010692:	460c      	mov	r4, r1
 8010694:	4616      	mov	r6, r2
 8010696:	d505      	bpl.n	80106a4 <__swrite+0x1e>
 8010698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801069c:	2302      	movs	r3, #2
 801069e:	2200      	movs	r2, #0
 80106a0:	f002 fa68 	bl	8012b74 <_lseek_r>
 80106a4:	89a3      	ldrh	r3, [r4, #12]
 80106a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80106ae:	81a3      	strh	r3, [r4, #12]
 80106b0:	4632      	mov	r2, r6
 80106b2:	463b      	mov	r3, r7
 80106b4:	4628      	mov	r0, r5
 80106b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106ba:	f000 bf1d 	b.w	80114f8 <_write_r>

080106be <__sseek>:
 80106be:	b510      	push	{r4, lr}
 80106c0:	460c      	mov	r4, r1
 80106c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106c6:	f002 fa55 	bl	8012b74 <_lseek_r>
 80106ca:	1c43      	adds	r3, r0, #1
 80106cc:	89a3      	ldrh	r3, [r4, #12]
 80106ce:	bf15      	itete	ne
 80106d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80106d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80106d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80106da:	81a3      	strheq	r3, [r4, #12]
 80106dc:	bf18      	it	ne
 80106de:	81a3      	strhne	r3, [r4, #12]
 80106e0:	bd10      	pop	{r4, pc}

080106e2 <__sclose>:
 80106e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106e6:	f000 bf87 	b.w	80115f8 <_close_r>

080106ea <sulp>:
 80106ea:	b570      	push	{r4, r5, r6, lr}
 80106ec:	4604      	mov	r4, r0
 80106ee:	460d      	mov	r5, r1
 80106f0:	ec45 4b10 	vmov	d0, r4, r5
 80106f4:	4616      	mov	r6, r2
 80106f6:	f002 fe45 	bl	8013384 <__ulp>
 80106fa:	ec51 0b10 	vmov	r0, r1, d0
 80106fe:	b17e      	cbz	r6, 8010720 <sulp+0x36>
 8010700:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010704:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010708:	2b00      	cmp	r3, #0
 801070a:	dd09      	ble.n	8010720 <sulp+0x36>
 801070c:	051b      	lsls	r3, r3, #20
 801070e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010712:	2400      	movs	r4, #0
 8010714:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010718:	4622      	mov	r2, r4
 801071a:	462b      	mov	r3, r5
 801071c:	f7ef ff94 	bl	8000648 <__aeabi_dmul>
 8010720:	bd70      	pop	{r4, r5, r6, pc}
 8010722:	0000      	movs	r0, r0
 8010724:	0000      	movs	r0, r0
	...

08010728 <_strtod_l>:
 8010728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801072c:	b0a3      	sub	sp, #140	; 0x8c
 801072e:	461f      	mov	r7, r3
 8010730:	2300      	movs	r3, #0
 8010732:	931e      	str	r3, [sp, #120]	; 0x78
 8010734:	4ba4      	ldr	r3, [pc, #656]	; (80109c8 <_strtod_l+0x2a0>)
 8010736:	9219      	str	r2, [sp, #100]	; 0x64
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	9307      	str	r3, [sp, #28]
 801073c:	4604      	mov	r4, r0
 801073e:	4618      	mov	r0, r3
 8010740:	4688      	mov	r8, r1
 8010742:	f7ef fd6d 	bl	8000220 <strlen>
 8010746:	f04f 0a00 	mov.w	sl, #0
 801074a:	4605      	mov	r5, r0
 801074c:	f04f 0b00 	mov.w	fp, #0
 8010750:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010754:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010756:	781a      	ldrb	r2, [r3, #0]
 8010758:	2a2b      	cmp	r2, #43	; 0x2b
 801075a:	d04c      	beq.n	80107f6 <_strtod_l+0xce>
 801075c:	d839      	bhi.n	80107d2 <_strtod_l+0xaa>
 801075e:	2a0d      	cmp	r2, #13
 8010760:	d832      	bhi.n	80107c8 <_strtod_l+0xa0>
 8010762:	2a08      	cmp	r2, #8
 8010764:	d832      	bhi.n	80107cc <_strtod_l+0xa4>
 8010766:	2a00      	cmp	r2, #0
 8010768:	d03c      	beq.n	80107e4 <_strtod_l+0xbc>
 801076a:	2300      	movs	r3, #0
 801076c:	930e      	str	r3, [sp, #56]	; 0x38
 801076e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010770:	7833      	ldrb	r3, [r6, #0]
 8010772:	2b30      	cmp	r3, #48	; 0x30
 8010774:	f040 80b4 	bne.w	80108e0 <_strtod_l+0x1b8>
 8010778:	7873      	ldrb	r3, [r6, #1]
 801077a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801077e:	2b58      	cmp	r3, #88	; 0x58
 8010780:	d16c      	bne.n	801085c <_strtod_l+0x134>
 8010782:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010784:	9301      	str	r3, [sp, #4]
 8010786:	ab1e      	add	r3, sp, #120	; 0x78
 8010788:	9702      	str	r7, [sp, #8]
 801078a:	9300      	str	r3, [sp, #0]
 801078c:	4a8f      	ldr	r2, [pc, #572]	; (80109cc <_strtod_l+0x2a4>)
 801078e:	ab1f      	add	r3, sp, #124	; 0x7c
 8010790:	a91d      	add	r1, sp, #116	; 0x74
 8010792:	4620      	mov	r0, r4
 8010794:	f001 fee2 	bl	801255c <__gethex>
 8010798:	f010 0707 	ands.w	r7, r0, #7
 801079c:	4605      	mov	r5, r0
 801079e:	d005      	beq.n	80107ac <_strtod_l+0x84>
 80107a0:	2f06      	cmp	r7, #6
 80107a2:	d12a      	bne.n	80107fa <_strtod_l+0xd2>
 80107a4:	3601      	adds	r6, #1
 80107a6:	2300      	movs	r3, #0
 80107a8:	961d      	str	r6, [sp, #116]	; 0x74
 80107aa:	930e      	str	r3, [sp, #56]	; 0x38
 80107ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	f040 8596 	bne.w	80112e0 <_strtod_l+0xbb8>
 80107b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80107b6:	b1db      	cbz	r3, 80107f0 <_strtod_l+0xc8>
 80107b8:	4652      	mov	r2, sl
 80107ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80107be:	ec43 2b10 	vmov	d0, r2, r3
 80107c2:	b023      	add	sp, #140	; 0x8c
 80107c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107c8:	2a20      	cmp	r2, #32
 80107ca:	d1ce      	bne.n	801076a <_strtod_l+0x42>
 80107cc:	3301      	adds	r3, #1
 80107ce:	931d      	str	r3, [sp, #116]	; 0x74
 80107d0:	e7c0      	b.n	8010754 <_strtod_l+0x2c>
 80107d2:	2a2d      	cmp	r2, #45	; 0x2d
 80107d4:	d1c9      	bne.n	801076a <_strtod_l+0x42>
 80107d6:	2201      	movs	r2, #1
 80107d8:	920e      	str	r2, [sp, #56]	; 0x38
 80107da:	1c5a      	adds	r2, r3, #1
 80107dc:	921d      	str	r2, [sp, #116]	; 0x74
 80107de:	785b      	ldrb	r3, [r3, #1]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d1c4      	bne.n	801076e <_strtod_l+0x46>
 80107e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80107e6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	f040 8576 	bne.w	80112dc <_strtod_l+0xbb4>
 80107f0:	4652      	mov	r2, sl
 80107f2:	465b      	mov	r3, fp
 80107f4:	e7e3      	b.n	80107be <_strtod_l+0x96>
 80107f6:	2200      	movs	r2, #0
 80107f8:	e7ee      	b.n	80107d8 <_strtod_l+0xb0>
 80107fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80107fc:	b13a      	cbz	r2, 801080e <_strtod_l+0xe6>
 80107fe:	2135      	movs	r1, #53	; 0x35
 8010800:	a820      	add	r0, sp, #128	; 0x80
 8010802:	f002 feca 	bl	801359a <__copybits>
 8010806:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010808:	4620      	mov	r0, r4
 801080a:	f002 fa8f 	bl	8012d2c <_Bfree>
 801080e:	3f01      	subs	r7, #1
 8010810:	2f05      	cmp	r7, #5
 8010812:	d807      	bhi.n	8010824 <_strtod_l+0xfc>
 8010814:	e8df f007 	tbb	[pc, r7]
 8010818:	1d180b0e 	.word	0x1d180b0e
 801081c:	030e      	.short	0x030e
 801081e:	f04f 0b00 	mov.w	fp, #0
 8010822:	46da      	mov	sl, fp
 8010824:	0728      	lsls	r0, r5, #28
 8010826:	d5c1      	bpl.n	80107ac <_strtod_l+0x84>
 8010828:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801082c:	e7be      	b.n	80107ac <_strtod_l+0x84>
 801082e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8010832:	e7f7      	b.n	8010824 <_strtod_l+0xfc>
 8010834:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8010838:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801083a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801083e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010842:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010846:	e7ed      	b.n	8010824 <_strtod_l+0xfc>
 8010848:	f8df b184 	ldr.w	fp, [pc, #388]	; 80109d0 <_strtod_l+0x2a8>
 801084c:	f04f 0a00 	mov.w	sl, #0
 8010850:	e7e8      	b.n	8010824 <_strtod_l+0xfc>
 8010852:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010856:	f04f 3aff 	mov.w	sl, #4294967295
 801085a:	e7e3      	b.n	8010824 <_strtod_l+0xfc>
 801085c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801085e:	1c5a      	adds	r2, r3, #1
 8010860:	921d      	str	r2, [sp, #116]	; 0x74
 8010862:	785b      	ldrb	r3, [r3, #1]
 8010864:	2b30      	cmp	r3, #48	; 0x30
 8010866:	d0f9      	beq.n	801085c <_strtod_l+0x134>
 8010868:	2b00      	cmp	r3, #0
 801086a:	d09f      	beq.n	80107ac <_strtod_l+0x84>
 801086c:	2301      	movs	r3, #1
 801086e:	f04f 0900 	mov.w	r9, #0
 8010872:	9304      	str	r3, [sp, #16]
 8010874:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010876:	930a      	str	r3, [sp, #40]	; 0x28
 8010878:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801087c:	464f      	mov	r7, r9
 801087e:	220a      	movs	r2, #10
 8010880:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010882:	7806      	ldrb	r6, [r0, #0]
 8010884:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010888:	b2d9      	uxtb	r1, r3
 801088a:	2909      	cmp	r1, #9
 801088c:	d92a      	bls.n	80108e4 <_strtod_l+0x1bc>
 801088e:	9907      	ldr	r1, [sp, #28]
 8010890:	462a      	mov	r2, r5
 8010892:	f003 f89d 	bl	80139d0 <strncmp>
 8010896:	b398      	cbz	r0, 8010900 <_strtod_l+0x1d8>
 8010898:	2000      	movs	r0, #0
 801089a:	4633      	mov	r3, r6
 801089c:	463d      	mov	r5, r7
 801089e:	9007      	str	r0, [sp, #28]
 80108a0:	4602      	mov	r2, r0
 80108a2:	2b65      	cmp	r3, #101	; 0x65
 80108a4:	d001      	beq.n	80108aa <_strtod_l+0x182>
 80108a6:	2b45      	cmp	r3, #69	; 0x45
 80108a8:	d118      	bne.n	80108dc <_strtod_l+0x1b4>
 80108aa:	b91d      	cbnz	r5, 80108b4 <_strtod_l+0x18c>
 80108ac:	9b04      	ldr	r3, [sp, #16]
 80108ae:	4303      	orrs	r3, r0
 80108b0:	d098      	beq.n	80107e4 <_strtod_l+0xbc>
 80108b2:	2500      	movs	r5, #0
 80108b4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80108b8:	f108 0301 	add.w	r3, r8, #1
 80108bc:	931d      	str	r3, [sp, #116]	; 0x74
 80108be:	f898 3001 	ldrb.w	r3, [r8, #1]
 80108c2:	2b2b      	cmp	r3, #43	; 0x2b
 80108c4:	d075      	beq.n	80109b2 <_strtod_l+0x28a>
 80108c6:	2b2d      	cmp	r3, #45	; 0x2d
 80108c8:	d07b      	beq.n	80109c2 <_strtod_l+0x29a>
 80108ca:	f04f 0c00 	mov.w	ip, #0
 80108ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80108d2:	2909      	cmp	r1, #9
 80108d4:	f240 8082 	bls.w	80109dc <_strtod_l+0x2b4>
 80108d8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80108dc:	2600      	movs	r6, #0
 80108de:	e09d      	b.n	8010a1c <_strtod_l+0x2f4>
 80108e0:	2300      	movs	r3, #0
 80108e2:	e7c4      	b.n	801086e <_strtod_l+0x146>
 80108e4:	2f08      	cmp	r7, #8
 80108e6:	bfd8      	it	le
 80108e8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80108ea:	f100 0001 	add.w	r0, r0, #1
 80108ee:	bfda      	itte	le
 80108f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80108f4:	9309      	strle	r3, [sp, #36]	; 0x24
 80108f6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80108fa:	3701      	adds	r7, #1
 80108fc:	901d      	str	r0, [sp, #116]	; 0x74
 80108fe:	e7bf      	b.n	8010880 <_strtod_l+0x158>
 8010900:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010902:	195a      	adds	r2, r3, r5
 8010904:	921d      	str	r2, [sp, #116]	; 0x74
 8010906:	5d5b      	ldrb	r3, [r3, r5]
 8010908:	2f00      	cmp	r7, #0
 801090a:	d037      	beq.n	801097c <_strtod_l+0x254>
 801090c:	9007      	str	r0, [sp, #28]
 801090e:	463d      	mov	r5, r7
 8010910:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8010914:	2a09      	cmp	r2, #9
 8010916:	d912      	bls.n	801093e <_strtod_l+0x216>
 8010918:	2201      	movs	r2, #1
 801091a:	e7c2      	b.n	80108a2 <_strtod_l+0x17a>
 801091c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801091e:	1c5a      	adds	r2, r3, #1
 8010920:	921d      	str	r2, [sp, #116]	; 0x74
 8010922:	785b      	ldrb	r3, [r3, #1]
 8010924:	3001      	adds	r0, #1
 8010926:	2b30      	cmp	r3, #48	; 0x30
 8010928:	d0f8      	beq.n	801091c <_strtod_l+0x1f4>
 801092a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801092e:	2a08      	cmp	r2, #8
 8010930:	f200 84db 	bhi.w	80112ea <_strtod_l+0xbc2>
 8010934:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010936:	9007      	str	r0, [sp, #28]
 8010938:	2000      	movs	r0, #0
 801093a:	920a      	str	r2, [sp, #40]	; 0x28
 801093c:	4605      	mov	r5, r0
 801093e:	3b30      	subs	r3, #48	; 0x30
 8010940:	f100 0201 	add.w	r2, r0, #1
 8010944:	d014      	beq.n	8010970 <_strtod_l+0x248>
 8010946:	9907      	ldr	r1, [sp, #28]
 8010948:	4411      	add	r1, r2
 801094a:	9107      	str	r1, [sp, #28]
 801094c:	462a      	mov	r2, r5
 801094e:	eb00 0e05 	add.w	lr, r0, r5
 8010952:	210a      	movs	r1, #10
 8010954:	4572      	cmp	r2, lr
 8010956:	d113      	bne.n	8010980 <_strtod_l+0x258>
 8010958:	182a      	adds	r2, r5, r0
 801095a:	2a08      	cmp	r2, #8
 801095c:	f105 0501 	add.w	r5, r5, #1
 8010960:	4405      	add	r5, r0
 8010962:	dc1c      	bgt.n	801099e <_strtod_l+0x276>
 8010964:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010966:	220a      	movs	r2, #10
 8010968:	fb02 3301 	mla	r3, r2, r1, r3
 801096c:	9309      	str	r3, [sp, #36]	; 0x24
 801096e:	2200      	movs	r2, #0
 8010970:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010972:	1c59      	adds	r1, r3, #1
 8010974:	911d      	str	r1, [sp, #116]	; 0x74
 8010976:	785b      	ldrb	r3, [r3, #1]
 8010978:	4610      	mov	r0, r2
 801097a:	e7c9      	b.n	8010910 <_strtod_l+0x1e8>
 801097c:	4638      	mov	r0, r7
 801097e:	e7d2      	b.n	8010926 <_strtod_l+0x1fe>
 8010980:	2a08      	cmp	r2, #8
 8010982:	dc04      	bgt.n	801098e <_strtod_l+0x266>
 8010984:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8010986:	434e      	muls	r6, r1
 8010988:	9609      	str	r6, [sp, #36]	; 0x24
 801098a:	3201      	adds	r2, #1
 801098c:	e7e2      	b.n	8010954 <_strtod_l+0x22c>
 801098e:	f102 0c01 	add.w	ip, r2, #1
 8010992:	f1bc 0f10 	cmp.w	ip, #16
 8010996:	bfd8      	it	le
 8010998:	fb01 f909 	mulle.w	r9, r1, r9
 801099c:	e7f5      	b.n	801098a <_strtod_l+0x262>
 801099e:	2d10      	cmp	r5, #16
 80109a0:	bfdc      	itt	le
 80109a2:	220a      	movle	r2, #10
 80109a4:	fb02 3909 	mlale	r9, r2, r9, r3
 80109a8:	e7e1      	b.n	801096e <_strtod_l+0x246>
 80109aa:	2300      	movs	r3, #0
 80109ac:	9307      	str	r3, [sp, #28]
 80109ae:	2201      	movs	r2, #1
 80109b0:	e77c      	b.n	80108ac <_strtod_l+0x184>
 80109b2:	f04f 0c00 	mov.w	ip, #0
 80109b6:	f108 0302 	add.w	r3, r8, #2
 80109ba:	931d      	str	r3, [sp, #116]	; 0x74
 80109bc:	f898 3002 	ldrb.w	r3, [r8, #2]
 80109c0:	e785      	b.n	80108ce <_strtod_l+0x1a6>
 80109c2:	f04f 0c01 	mov.w	ip, #1
 80109c6:	e7f6      	b.n	80109b6 <_strtod_l+0x28e>
 80109c8:	08015a70 	.word	0x08015a70
 80109cc:	08015820 	.word	0x08015820
 80109d0:	7ff00000 	.word	0x7ff00000
 80109d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80109d6:	1c59      	adds	r1, r3, #1
 80109d8:	911d      	str	r1, [sp, #116]	; 0x74
 80109da:	785b      	ldrb	r3, [r3, #1]
 80109dc:	2b30      	cmp	r3, #48	; 0x30
 80109de:	d0f9      	beq.n	80109d4 <_strtod_l+0x2ac>
 80109e0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80109e4:	2908      	cmp	r1, #8
 80109e6:	f63f af79 	bhi.w	80108dc <_strtod_l+0x1b4>
 80109ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80109ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80109f0:	9308      	str	r3, [sp, #32]
 80109f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80109f4:	1c59      	adds	r1, r3, #1
 80109f6:	911d      	str	r1, [sp, #116]	; 0x74
 80109f8:	785b      	ldrb	r3, [r3, #1]
 80109fa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80109fe:	2e09      	cmp	r6, #9
 8010a00:	d937      	bls.n	8010a72 <_strtod_l+0x34a>
 8010a02:	9e08      	ldr	r6, [sp, #32]
 8010a04:	1b89      	subs	r1, r1, r6
 8010a06:	2908      	cmp	r1, #8
 8010a08:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010a0c:	dc02      	bgt.n	8010a14 <_strtod_l+0x2ec>
 8010a0e:	4576      	cmp	r6, lr
 8010a10:	bfa8      	it	ge
 8010a12:	4676      	movge	r6, lr
 8010a14:	f1bc 0f00 	cmp.w	ip, #0
 8010a18:	d000      	beq.n	8010a1c <_strtod_l+0x2f4>
 8010a1a:	4276      	negs	r6, r6
 8010a1c:	2d00      	cmp	r5, #0
 8010a1e:	d14f      	bne.n	8010ac0 <_strtod_l+0x398>
 8010a20:	9904      	ldr	r1, [sp, #16]
 8010a22:	4301      	orrs	r1, r0
 8010a24:	f47f aec2 	bne.w	80107ac <_strtod_l+0x84>
 8010a28:	2a00      	cmp	r2, #0
 8010a2a:	f47f aedb 	bne.w	80107e4 <_strtod_l+0xbc>
 8010a2e:	2b69      	cmp	r3, #105	; 0x69
 8010a30:	d027      	beq.n	8010a82 <_strtod_l+0x35a>
 8010a32:	dc24      	bgt.n	8010a7e <_strtod_l+0x356>
 8010a34:	2b49      	cmp	r3, #73	; 0x49
 8010a36:	d024      	beq.n	8010a82 <_strtod_l+0x35a>
 8010a38:	2b4e      	cmp	r3, #78	; 0x4e
 8010a3a:	f47f aed3 	bne.w	80107e4 <_strtod_l+0xbc>
 8010a3e:	499e      	ldr	r1, [pc, #632]	; (8010cb8 <_strtod_l+0x590>)
 8010a40:	a81d      	add	r0, sp, #116	; 0x74
 8010a42:	f001 ffe3 	bl	8012a0c <__match>
 8010a46:	2800      	cmp	r0, #0
 8010a48:	f43f aecc 	beq.w	80107e4 <_strtod_l+0xbc>
 8010a4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010a4e:	781b      	ldrb	r3, [r3, #0]
 8010a50:	2b28      	cmp	r3, #40	; 0x28
 8010a52:	d12d      	bne.n	8010ab0 <_strtod_l+0x388>
 8010a54:	4999      	ldr	r1, [pc, #612]	; (8010cbc <_strtod_l+0x594>)
 8010a56:	aa20      	add	r2, sp, #128	; 0x80
 8010a58:	a81d      	add	r0, sp, #116	; 0x74
 8010a5a:	f001 ffeb 	bl	8012a34 <__hexnan>
 8010a5e:	2805      	cmp	r0, #5
 8010a60:	d126      	bne.n	8010ab0 <_strtod_l+0x388>
 8010a62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a64:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8010a68:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010a6c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010a70:	e69c      	b.n	80107ac <_strtod_l+0x84>
 8010a72:	210a      	movs	r1, #10
 8010a74:	fb01 3e0e 	mla	lr, r1, lr, r3
 8010a78:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010a7c:	e7b9      	b.n	80109f2 <_strtod_l+0x2ca>
 8010a7e:	2b6e      	cmp	r3, #110	; 0x6e
 8010a80:	e7db      	b.n	8010a3a <_strtod_l+0x312>
 8010a82:	498f      	ldr	r1, [pc, #572]	; (8010cc0 <_strtod_l+0x598>)
 8010a84:	a81d      	add	r0, sp, #116	; 0x74
 8010a86:	f001 ffc1 	bl	8012a0c <__match>
 8010a8a:	2800      	cmp	r0, #0
 8010a8c:	f43f aeaa 	beq.w	80107e4 <_strtod_l+0xbc>
 8010a90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010a92:	498c      	ldr	r1, [pc, #560]	; (8010cc4 <_strtod_l+0x59c>)
 8010a94:	3b01      	subs	r3, #1
 8010a96:	a81d      	add	r0, sp, #116	; 0x74
 8010a98:	931d      	str	r3, [sp, #116]	; 0x74
 8010a9a:	f001 ffb7 	bl	8012a0c <__match>
 8010a9e:	b910      	cbnz	r0, 8010aa6 <_strtod_l+0x37e>
 8010aa0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010aa2:	3301      	adds	r3, #1
 8010aa4:	931d      	str	r3, [sp, #116]	; 0x74
 8010aa6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8010cd4 <_strtod_l+0x5ac>
 8010aaa:	f04f 0a00 	mov.w	sl, #0
 8010aae:	e67d      	b.n	80107ac <_strtod_l+0x84>
 8010ab0:	4885      	ldr	r0, [pc, #532]	; (8010cc8 <_strtod_l+0x5a0>)
 8010ab2:	f002 ff85 	bl	80139c0 <nan>
 8010ab6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010aba:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010abe:	e675      	b.n	80107ac <_strtod_l+0x84>
 8010ac0:	9b07      	ldr	r3, [sp, #28]
 8010ac2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ac4:	1af3      	subs	r3, r6, r3
 8010ac6:	2f00      	cmp	r7, #0
 8010ac8:	bf08      	it	eq
 8010aca:	462f      	moveq	r7, r5
 8010acc:	2d10      	cmp	r5, #16
 8010ace:	9308      	str	r3, [sp, #32]
 8010ad0:	46a8      	mov	r8, r5
 8010ad2:	bfa8      	it	ge
 8010ad4:	f04f 0810 	movge.w	r8, #16
 8010ad8:	f7ef fd3c 	bl	8000554 <__aeabi_ui2d>
 8010adc:	2d09      	cmp	r5, #9
 8010ade:	4682      	mov	sl, r0
 8010ae0:	468b      	mov	fp, r1
 8010ae2:	dd13      	ble.n	8010b0c <_strtod_l+0x3e4>
 8010ae4:	4b79      	ldr	r3, [pc, #484]	; (8010ccc <_strtod_l+0x5a4>)
 8010ae6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010aea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010aee:	f7ef fdab 	bl	8000648 <__aeabi_dmul>
 8010af2:	4682      	mov	sl, r0
 8010af4:	4648      	mov	r0, r9
 8010af6:	468b      	mov	fp, r1
 8010af8:	f7ef fd2c 	bl	8000554 <__aeabi_ui2d>
 8010afc:	4602      	mov	r2, r0
 8010afe:	460b      	mov	r3, r1
 8010b00:	4650      	mov	r0, sl
 8010b02:	4659      	mov	r1, fp
 8010b04:	f7ef fbea 	bl	80002dc <__adddf3>
 8010b08:	4682      	mov	sl, r0
 8010b0a:	468b      	mov	fp, r1
 8010b0c:	2d0f      	cmp	r5, #15
 8010b0e:	dc38      	bgt.n	8010b82 <_strtod_l+0x45a>
 8010b10:	9b08      	ldr	r3, [sp, #32]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	f43f ae4a 	beq.w	80107ac <_strtod_l+0x84>
 8010b18:	dd24      	ble.n	8010b64 <_strtod_l+0x43c>
 8010b1a:	2b16      	cmp	r3, #22
 8010b1c:	dc0b      	bgt.n	8010b36 <_strtod_l+0x40e>
 8010b1e:	4d6b      	ldr	r5, [pc, #428]	; (8010ccc <_strtod_l+0x5a4>)
 8010b20:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8010b24:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010b28:	4652      	mov	r2, sl
 8010b2a:	465b      	mov	r3, fp
 8010b2c:	f7ef fd8c 	bl	8000648 <__aeabi_dmul>
 8010b30:	4682      	mov	sl, r0
 8010b32:	468b      	mov	fp, r1
 8010b34:	e63a      	b.n	80107ac <_strtod_l+0x84>
 8010b36:	9a08      	ldr	r2, [sp, #32]
 8010b38:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010b3c:	4293      	cmp	r3, r2
 8010b3e:	db20      	blt.n	8010b82 <_strtod_l+0x45a>
 8010b40:	4c62      	ldr	r4, [pc, #392]	; (8010ccc <_strtod_l+0x5a4>)
 8010b42:	f1c5 050f 	rsb	r5, r5, #15
 8010b46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010b4a:	4652      	mov	r2, sl
 8010b4c:	465b      	mov	r3, fp
 8010b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b52:	f7ef fd79 	bl	8000648 <__aeabi_dmul>
 8010b56:	9b08      	ldr	r3, [sp, #32]
 8010b58:	1b5d      	subs	r5, r3, r5
 8010b5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010b5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010b62:	e7e3      	b.n	8010b2c <_strtod_l+0x404>
 8010b64:	9b08      	ldr	r3, [sp, #32]
 8010b66:	3316      	adds	r3, #22
 8010b68:	db0b      	blt.n	8010b82 <_strtod_l+0x45a>
 8010b6a:	9b07      	ldr	r3, [sp, #28]
 8010b6c:	4a57      	ldr	r2, [pc, #348]	; (8010ccc <_strtod_l+0x5a4>)
 8010b6e:	1b9e      	subs	r6, r3, r6
 8010b70:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8010b74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010b78:	4650      	mov	r0, sl
 8010b7a:	4659      	mov	r1, fp
 8010b7c:	f7ef fe8e 	bl	800089c <__aeabi_ddiv>
 8010b80:	e7d6      	b.n	8010b30 <_strtod_l+0x408>
 8010b82:	9b08      	ldr	r3, [sp, #32]
 8010b84:	eba5 0808 	sub.w	r8, r5, r8
 8010b88:	4498      	add	r8, r3
 8010b8a:	f1b8 0f00 	cmp.w	r8, #0
 8010b8e:	dd71      	ble.n	8010c74 <_strtod_l+0x54c>
 8010b90:	f018 030f 	ands.w	r3, r8, #15
 8010b94:	d00a      	beq.n	8010bac <_strtod_l+0x484>
 8010b96:	494d      	ldr	r1, [pc, #308]	; (8010ccc <_strtod_l+0x5a4>)
 8010b98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010b9c:	4652      	mov	r2, sl
 8010b9e:	465b      	mov	r3, fp
 8010ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ba4:	f7ef fd50 	bl	8000648 <__aeabi_dmul>
 8010ba8:	4682      	mov	sl, r0
 8010baa:	468b      	mov	fp, r1
 8010bac:	f038 080f 	bics.w	r8, r8, #15
 8010bb0:	d04d      	beq.n	8010c4e <_strtod_l+0x526>
 8010bb2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010bb6:	dd22      	ble.n	8010bfe <_strtod_l+0x4d6>
 8010bb8:	2500      	movs	r5, #0
 8010bba:	462e      	mov	r6, r5
 8010bbc:	9509      	str	r5, [sp, #36]	; 0x24
 8010bbe:	9507      	str	r5, [sp, #28]
 8010bc0:	2322      	movs	r3, #34	; 0x22
 8010bc2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8010cd4 <_strtod_l+0x5ac>
 8010bc6:	6023      	str	r3, [r4, #0]
 8010bc8:	f04f 0a00 	mov.w	sl, #0
 8010bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	f43f adec 	beq.w	80107ac <_strtod_l+0x84>
 8010bd4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	f002 f8a8 	bl	8012d2c <_Bfree>
 8010bdc:	9907      	ldr	r1, [sp, #28]
 8010bde:	4620      	mov	r0, r4
 8010be0:	f002 f8a4 	bl	8012d2c <_Bfree>
 8010be4:	4631      	mov	r1, r6
 8010be6:	4620      	mov	r0, r4
 8010be8:	f002 f8a0 	bl	8012d2c <_Bfree>
 8010bec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010bee:	4620      	mov	r0, r4
 8010bf0:	f002 f89c 	bl	8012d2c <_Bfree>
 8010bf4:	4629      	mov	r1, r5
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	f002 f898 	bl	8012d2c <_Bfree>
 8010bfc:	e5d6      	b.n	80107ac <_strtod_l+0x84>
 8010bfe:	2300      	movs	r3, #0
 8010c00:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010c04:	4650      	mov	r0, sl
 8010c06:	4659      	mov	r1, fp
 8010c08:	4699      	mov	r9, r3
 8010c0a:	f1b8 0f01 	cmp.w	r8, #1
 8010c0e:	dc21      	bgt.n	8010c54 <_strtod_l+0x52c>
 8010c10:	b10b      	cbz	r3, 8010c16 <_strtod_l+0x4ee>
 8010c12:	4682      	mov	sl, r0
 8010c14:	468b      	mov	fp, r1
 8010c16:	4b2e      	ldr	r3, [pc, #184]	; (8010cd0 <_strtod_l+0x5a8>)
 8010c18:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010c1c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010c20:	4652      	mov	r2, sl
 8010c22:	465b      	mov	r3, fp
 8010c24:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010c28:	f7ef fd0e 	bl	8000648 <__aeabi_dmul>
 8010c2c:	4b29      	ldr	r3, [pc, #164]	; (8010cd4 <_strtod_l+0x5ac>)
 8010c2e:	460a      	mov	r2, r1
 8010c30:	400b      	ands	r3, r1
 8010c32:	4929      	ldr	r1, [pc, #164]	; (8010cd8 <_strtod_l+0x5b0>)
 8010c34:	428b      	cmp	r3, r1
 8010c36:	4682      	mov	sl, r0
 8010c38:	d8be      	bhi.n	8010bb8 <_strtod_l+0x490>
 8010c3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010c3e:	428b      	cmp	r3, r1
 8010c40:	bf86      	itte	hi
 8010c42:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8010cdc <_strtod_l+0x5b4>
 8010c46:	f04f 3aff 	movhi.w	sl, #4294967295
 8010c4a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010c4e:	2300      	movs	r3, #0
 8010c50:	9304      	str	r3, [sp, #16]
 8010c52:	e081      	b.n	8010d58 <_strtod_l+0x630>
 8010c54:	f018 0f01 	tst.w	r8, #1
 8010c58:	d007      	beq.n	8010c6a <_strtod_l+0x542>
 8010c5a:	4b1d      	ldr	r3, [pc, #116]	; (8010cd0 <_strtod_l+0x5a8>)
 8010c5c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c64:	f7ef fcf0 	bl	8000648 <__aeabi_dmul>
 8010c68:	2301      	movs	r3, #1
 8010c6a:	f109 0901 	add.w	r9, r9, #1
 8010c6e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010c72:	e7ca      	b.n	8010c0a <_strtod_l+0x4e2>
 8010c74:	d0eb      	beq.n	8010c4e <_strtod_l+0x526>
 8010c76:	f1c8 0800 	rsb	r8, r8, #0
 8010c7a:	f018 020f 	ands.w	r2, r8, #15
 8010c7e:	d00a      	beq.n	8010c96 <_strtod_l+0x56e>
 8010c80:	4b12      	ldr	r3, [pc, #72]	; (8010ccc <_strtod_l+0x5a4>)
 8010c82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c86:	4650      	mov	r0, sl
 8010c88:	4659      	mov	r1, fp
 8010c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c8e:	f7ef fe05 	bl	800089c <__aeabi_ddiv>
 8010c92:	4682      	mov	sl, r0
 8010c94:	468b      	mov	fp, r1
 8010c96:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010c9a:	d0d8      	beq.n	8010c4e <_strtod_l+0x526>
 8010c9c:	f1b8 0f1f 	cmp.w	r8, #31
 8010ca0:	dd1e      	ble.n	8010ce0 <_strtod_l+0x5b8>
 8010ca2:	2500      	movs	r5, #0
 8010ca4:	462e      	mov	r6, r5
 8010ca6:	9509      	str	r5, [sp, #36]	; 0x24
 8010ca8:	9507      	str	r5, [sp, #28]
 8010caa:	2322      	movs	r3, #34	; 0x22
 8010cac:	f04f 0a00 	mov.w	sl, #0
 8010cb0:	f04f 0b00 	mov.w	fp, #0
 8010cb4:	6023      	str	r3, [r4, #0]
 8010cb6:	e789      	b.n	8010bcc <_strtod_l+0x4a4>
 8010cb8:	080157f1 	.word	0x080157f1
 8010cbc:	08015834 	.word	0x08015834
 8010cc0:	080157e9 	.word	0x080157e9
 8010cc4:	08015974 	.word	0x08015974
 8010cc8:	08015c30 	.word	0x08015c30
 8010ccc:	08015b10 	.word	0x08015b10
 8010cd0:	08015ae8 	.word	0x08015ae8
 8010cd4:	7ff00000 	.word	0x7ff00000
 8010cd8:	7ca00000 	.word	0x7ca00000
 8010cdc:	7fefffff 	.word	0x7fefffff
 8010ce0:	f018 0310 	ands.w	r3, r8, #16
 8010ce4:	bf18      	it	ne
 8010ce6:	236a      	movne	r3, #106	; 0x6a
 8010ce8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80110a0 <_strtod_l+0x978>
 8010cec:	9304      	str	r3, [sp, #16]
 8010cee:	4650      	mov	r0, sl
 8010cf0:	4659      	mov	r1, fp
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	f018 0f01 	tst.w	r8, #1
 8010cf8:	d004      	beq.n	8010d04 <_strtod_l+0x5dc>
 8010cfa:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010cfe:	f7ef fca3 	bl	8000648 <__aeabi_dmul>
 8010d02:	2301      	movs	r3, #1
 8010d04:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010d08:	f109 0908 	add.w	r9, r9, #8
 8010d0c:	d1f2      	bne.n	8010cf4 <_strtod_l+0x5cc>
 8010d0e:	b10b      	cbz	r3, 8010d14 <_strtod_l+0x5ec>
 8010d10:	4682      	mov	sl, r0
 8010d12:	468b      	mov	fp, r1
 8010d14:	9b04      	ldr	r3, [sp, #16]
 8010d16:	b1bb      	cbz	r3, 8010d48 <_strtod_l+0x620>
 8010d18:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8010d1c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	4659      	mov	r1, fp
 8010d24:	dd10      	ble.n	8010d48 <_strtod_l+0x620>
 8010d26:	2b1f      	cmp	r3, #31
 8010d28:	f340 8128 	ble.w	8010f7c <_strtod_l+0x854>
 8010d2c:	2b34      	cmp	r3, #52	; 0x34
 8010d2e:	bfde      	ittt	le
 8010d30:	3b20      	suble	r3, #32
 8010d32:	f04f 32ff 	movle.w	r2, #4294967295
 8010d36:	fa02 f303 	lslle.w	r3, r2, r3
 8010d3a:	f04f 0a00 	mov.w	sl, #0
 8010d3e:	bfcc      	ite	gt
 8010d40:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010d44:	ea03 0b01 	andle.w	fp, r3, r1
 8010d48:	2200      	movs	r2, #0
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	4650      	mov	r0, sl
 8010d4e:	4659      	mov	r1, fp
 8010d50:	f7ef fee2 	bl	8000b18 <__aeabi_dcmpeq>
 8010d54:	2800      	cmp	r0, #0
 8010d56:	d1a4      	bne.n	8010ca2 <_strtod_l+0x57a>
 8010d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d5a:	9300      	str	r3, [sp, #0]
 8010d5c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010d5e:	462b      	mov	r3, r5
 8010d60:	463a      	mov	r2, r7
 8010d62:	4620      	mov	r0, r4
 8010d64:	f002 f84e 	bl	8012e04 <__s2b>
 8010d68:	9009      	str	r0, [sp, #36]	; 0x24
 8010d6a:	2800      	cmp	r0, #0
 8010d6c:	f43f af24 	beq.w	8010bb8 <_strtod_l+0x490>
 8010d70:	9b07      	ldr	r3, [sp, #28]
 8010d72:	1b9e      	subs	r6, r3, r6
 8010d74:	9b08      	ldr	r3, [sp, #32]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	bfb4      	ite	lt
 8010d7a:	4633      	movlt	r3, r6
 8010d7c:	2300      	movge	r3, #0
 8010d7e:	9310      	str	r3, [sp, #64]	; 0x40
 8010d80:	9b08      	ldr	r3, [sp, #32]
 8010d82:	2500      	movs	r5, #0
 8010d84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010d88:	9318      	str	r3, [sp, #96]	; 0x60
 8010d8a:	462e      	mov	r6, r5
 8010d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d8e:	4620      	mov	r0, r4
 8010d90:	6859      	ldr	r1, [r3, #4]
 8010d92:	f001 ff8b 	bl	8012cac <_Balloc>
 8010d96:	9007      	str	r0, [sp, #28]
 8010d98:	2800      	cmp	r0, #0
 8010d9a:	f43f af11 	beq.w	8010bc0 <_strtod_l+0x498>
 8010d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010da0:	691a      	ldr	r2, [r3, #16]
 8010da2:	3202      	adds	r2, #2
 8010da4:	f103 010c 	add.w	r1, r3, #12
 8010da8:	0092      	lsls	r2, r2, #2
 8010daa:	300c      	adds	r0, #12
 8010dac:	f7fe fc59 	bl	800f662 <memcpy>
 8010db0:	ec4b ab10 	vmov	d0, sl, fp
 8010db4:	aa20      	add	r2, sp, #128	; 0x80
 8010db6:	a91f      	add	r1, sp, #124	; 0x7c
 8010db8:	4620      	mov	r0, r4
 8010dba:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8010dbe:	f002 fb5d 	bl	801347c <__d2b>
 8010dc2:	901e      	str	r0, [sp, #120]	; 0x78
 8010dc4:	2800      	cmp	r0, #0
 8010dc6:	f43f aefb 	beq.w	8010bc0 <_strtod_l+0x498>
 8010dca:	2101      	movs	r1, #1
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f002 f8b3 	bl	8012f38 <__i2b>
 8010dd2:	4606      	mov	r6, r0
 8010dd4:	2800      	cmp	r0, #0
 8010dd6:	f43f aef3 	beq.w	8010bc0 <_strtod_l+0x498>
 8010dda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010ddc:	9904      	ldr	r1, [sp, #16]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	bfab      	itete	ge
 8010de2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8010de4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8010de6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8010de8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8010dec:	bfac      	ite	ge
 8010dee:	eb03 0902 	addge.w	r9, r3, r2
 8010df2:	1ad7      	sublt	r7, r2, r3
 8010df4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010df6:	eba3 0801 	sub.w	r8, r3, r1
 8010dfa:	4490      	add	r8, r2
 8010dfc:	4ba3      	ldr	r3, [pc, #652]	; (801108c <_strtod_l+0x964>)
 8010dfe:	f108 38ff 	add.w	r8, r8, #4294967295
 8010e02:	4598      	cmp	r8, r3
 8010e04:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010e08:	f280 80cc 	bge.w	8010fa4 <_strtod_l+0x87c>
 8010e0c:	eba3 0308 	sub.w	r3, r3, r8
 8010e10:	2b1f      	cmp	r3, #31
 8010e12:	eba2 0203 	sub.w	r2, r2, r3
 8010e16:	f04f 0101 	mov.w	r1, #1
 8010e1a:	f300 80b6 	bgt.w	8010f8a <_strtod_l+0x862>
 8010e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8010e22:	9311      	str	r3, [sp, #68]	; 0x44
 8010e24:	2300      	movs	r3, #0
 8010e26:	930c      	str	r3, [sp, #48]	; 0x30
 8010e28:	eb09 0802 	add.w	r8, r9, r2
 8010e2c:	9b04      	ldr	r3, [sp, #16]
 8010e2e:	45c1      	cmp	r9, r8
 8010e30:	4417      	add	r7, r2
 8010e32:	441f      	add	r7, r3
 8010e34:	464b      	mov	r3, r9
 8010e36:	bfa8      	it	ge
 8010e38:	4643      	movge	r3, r8
 8010e3a:	42bb      	cmp	r3, r7
 8010e3c:	bfa8      	it	ge
 8010e3e:	463b      	movge	r3, r7
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	bfc2      	ittt	gt
 8010e44:	eba8 0803 	subgt.w	r8, r8, r3
 8010e48:	1aff      	subgt	r7, r7, r3
 8010e4a:	eba9 0903 	subgt.w	r9, r9, r3
 8010e4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	dd17      	ble.n	8010e84 <_strtod_l+0x75c>
 8010e54:	4631      	mov	r1, r6
 8010e56:	461a      	mov	r2, r3
 8010e58:	4620      	mov	r0, r4
 8010e5a:	f002 f929 	bl	80130b0 <__pow5mult>
 8010e5e:	4606      	mov	r6, r0
 8010e60:	2800      	cmp	r0, #0
 8010e62:	f43f aead 	beq.w	8010bc0 <_strtod_l+0x498>
 8010e66:	4601      	mov	r1, r0
 8010e68:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010e6a:	4620      	mov	r0, r4
 8010e6c:	f002 f87a 	bl	8012f64 <__multiply>
 8010e70:	900f      	str	r0, [sp, #60]	; 0x3c
 8010e72:	2800      	cmp	r0, #0
 8010e74:	f43f aea4 	beq.w	8010bc0 <_strtod_l+0x498>
 8010e78:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010e7a:	4620      	mov	r0, r4
 8010e7c:	f001 ff56 	bl	8012d2c <_Bfree>
 8010e80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e82:	931e      	str	r3, [sp, #120]	; 0x78
 8010e84:	f1b8 0f00 	cmp.w	r8, #0
 8010e88:	f300 8091 	bgt.w	8010fae <_strtod_l+0x886>
 8010e8c:	9b08      	ldr	r3, [sp, #32]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	dd08      	ble.n	8010ea4 <_strtod_l+0x77c>
 8010e92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010e94:	9907      	ldr	r1, [sp, #28]
 8010e96:	4620      	mov	r0, r4
 8010e98:	f002 f90a 	bl	80130b0 <__pow5mult>
 8010e9c:	9007      	str	r0, [sp, #28]
 8010e9e:	2800      	cmp	r0, #0
 8010ea0:	f43f ae8e 	beq.w	8010bc0 <_strtod_l+0x498>
 8010ea4:	2f00      	cmp	r7, #0
 8010ea6:	dd08      	ble.n	8010eba <_strtod_l+0x792>
 8010ea8:	9907      	ldr	r1, [sp, #28]
 8010eaa:	463a      	mov	r2, r7
 8010eac:	4620      	mov	r0, r4
 8010eae:	f002 f959 	bl	8013164 <__lshift>
 8010eb2:	9007      	str	r0, [sp, #28]
 8010eb4:	2800      	cmp	r0, #0
 8010eb6:	f43f ae83 	beq.w	8010bc0 <_strtod_l+0x498>
 8010eba:	f1b9 0f00 	cmp.w	r9, #0
 8010ebe:	dd08      	ble.n	8010ed2 <_strtod_l+0x7aa>
 8010ec0:	4631      	mov	r1, r6
 8010ec2:	464a      	mov	r2, r9
 8010ec4:	4620      	mov	r0, r4
 8010ec6:	f002 f94d 	bl	8013164 <__lshift>
 8010eca:	4606      	mov	r6, r0
 8010ecc:	2800      	cmp	r0, #0
 8010ece:	f43f ae77 	beq.w	8010bc0 <_strtod_l+0x498>
 8010ed2:	9a07      	ldr	r2, [sp, #28]
 8010ed4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	f002 f9cc 	bl	8013274 <__mdiff>
 8010edc:	4605      	mov	r5, r0
 8010ede:	2800      	cmp	r0, #0
 8010ee0:	f43f ae6e 	beq.w	8010bc0 <_strtod_l+0x498>
 8010ee4:	68c3      	ldr	r3, [r0, #12]
 8010ee6:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ee8:	2300      	movs	r3, #0
 8010eea:	60c3      	str	r3, [r0, #12]
 8010eec:	4631      	mov	r1, r6
 8010eee:	f002 f9a5 	bl	801323c <__mcmp>
 8010ef2:	2800      	cmp	r0, #0
 8010ef4:	da65      	bge.n	8010fc2 <_strtod_l+0x89a>
 8010ef6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010ef8:	ea53 030a 	orrs.w	r3, r3, sl
 8010efc:	f040 8087 	bne.w	801100e <_strtod_l+0x8e6>
 8010f00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	f040 8082 	bne.w	801100e <_strtod_l+0x8e6>
 8010f0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010f0e:	0d1b      	lsrs	r3, r3, #20
 8010f10:	051b      	lsls	r3, r3, #20
 8010f12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010f16:	d97a      	bls.n	801100e <_strtod_l+0x8e6>
 8010f18:	696b      	ldr	r3, [r5, #20]
 8010f1a:	b913      	cbnz	r3, 8010f22 <_strtod_l+0x7fa>
 8010f1c:	692b      	ldr	r3, [r5, #16]
 8010f1e:	2b01      	cmp	r3, #1
 8010f20:	dd75      	ble.n	801100e <_strtod_l+0x8e6>
 8010f22:	4629      	mov	r1, r5
 8010f24:	2201      	movs	r2, #1
 8010f26:	4620      	mov	r0, r4
 8010f28:	f002 f91c 	bl	8013164 <__lshift>
 8010f2c:	4631      	mov	r1, r6
 8010f2e:	4605      	mov	r5, r0
 8010f30:	f002 f984 	bl	801323c <__mcmp>
 8010f34:	2800      	cmp	r0, #0
 8010f36:	dd6a      	ble.n	801100e <_strtod_l+0x8e6>
 8010f38:	9904      	ldr	r1, [sp, #16]
 8010f3a:	4a55      	ldr	r2, [pc, #340]	; (8011090 <_strtod_l+0x968>)
 8010f3c:	465b      	mov	r3, fp
 8010f3e:	2900      	cmp	r1, #0
 8010f40:	f000 8085 	beq.w	801104e <_strtod_l+0x926>
 8010f44:	ea02 010b 	and.w	r1, r2, fp
 8010f48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010f4c:	dc7f      	bgt.n	801104e <_strtod_l+0x926>
 8010f4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010f52:	f77f aeaa 	ble.w	8010caa <_strtod_l+0x582>
 8010f56:	4a4f      	ldr	r2, [pc, #316]	; (8011094 <_strtod_l+0x96c>)
 8010f58:	2300      	movs	r3, #0
 8010f5a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8010f5e:	4650      	mov	r0, sl
 8010f60:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8010f64:	4659      	mov	r1, fp
 8010f66:	f7ef fb6f 	bl	8000648 <__aeabi_dmul>
 8010f6a:	460b      	mov	r3, r1
 8010f6c:	4303      	orrs	r3, r0
 8010f6e:	bf08      	it	eq
 8010f70:	2322      	moveq	r3, #34	; 0x22
 8010f72:	4682      	mov	sl, r0
 8010f74:	468b      	mov	fp, r1
 8010f76:	bf08      	it	eq
 8010f78:	6023      	streq	r3, [r4, #0]
 8010f7a:	e62b      	b.n	8010bd4 <_strtod_l+0x4ac>
 8010f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8010f80:	fa02 f303 	lsl.w	r3, r2, r3
 8010f84:	ea03 0a0a 	and.w	sl, r3, sl
 8010f88:	e6de      	b.n	8010d48 <_strtod_l+0x620>
 8010f8a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010f8e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010f92:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010f96:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010f9a:	fa01 f308 	lsl.w	r3, r1, r8
 8010f9e:	930c      	str	r3, [sp, #48]	; 0x30
 8010fa0:	9111      	str	r1, [sp, #68]	; 0x44
 8010fa2:	e741      	b.n	8010e28 <_strtod_l+0x700>
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	930c      	str	r3, [sp, #48]	; 0x30
 8010fa8:	2301      	movs	r3, #1
 8010faa:	9311      	str	r3, [sp, #68]	; 0x44
 8010fac:	e73c      	b.n	8010e28 <_strtod_l+0x700>
 8010fae:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010fb0:	4642      	mov	r2, r8
 8010fb2:	4620      	mov	r0, r4
 8010fb4:	f002 f8d6 	bl	8013164 <__lshift>
 8010fb8:	901e      	str	r0, [sp, #120]	; 0x78
 8010fba:	2800      	cmp	r0, #0
 8010fbc:	f47f af66 	bne.w	8010e8c <_strtod_l+0x764>
 8010fc0:	e5fe      	b.n	8010bc0 <_strtod_l+0x498>
 8010fc2:	465f      	mov	r7, fp
 8010fc4:	d16e      	bne.n	80110a4 <_strtod_l+0x97c>
 8010fc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010fc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010fcc:	b342      	cbz	r2, 8011020 <_strtod_l+0x8f8>
 8010fce:	4a32      	ldr	r2, [pc, #200]	; (8011098 <_strtod_l+0x970>)
 8010fd0:	4293      	cmp	r3, r2
 8010fd2:	d128      	bne.n	8011026 <_strtod_l+0x8fe>
 8010fd4:	9b04      	ldr	r3, [sp, #16]
 8010fd6:	4650      	mov	r0, sl
 8010fd8:	b1eb      	cbz	r3, 8011016 <_strtod_l+0x8ee>
 8010fda:	4a2d      	ldr	r2, [pc, #180]	; (8011090 <_strtod_l+0x968>)
 8010fdc:	403a      	ands	r2, r7
 8010fde:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8010fe2:	f04f 31ff 	mov.w	r1, #4294967295
 8010fe6:	d819      	bhi.n	801101c <_strtod_l+0x8f4>
 8010fe8:	0d12      	lsrs	r2, r2, #20
 8010fea:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010fee:	fa01 f303 	lsl.w	r3, r1, r3
 8010ff2:	4298      	cmp	r0, r3
 8010ff4:	d117      	bne.n	8011026 <_strtod_l+0x8fe>
 8010ff6:	4b29      	ldr	r3, [pc, #164]	; (801109c <_strtod_l+0x974>)
 8010ff8:	429f      	cmp	r7, r3
 8010ffa:	d102      	bne.n	8011002 <_strtod_l+0x8da>
 8010ffc:	3001      	adds	r0, #1
 8010ffe:	f43f addf 	beq.w	8010bc0 <_strtod_l+0x498>
 8011002:	4b23      	ldr	r3, [pc, #140]	; (8011090 <_strtod_l+0x968>)
 8011004:	403b      	ands	r3, r7
 8011006:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801100a:	f04f 0a00 	mov.w	sl, #0
 801100e:	9b04      	ldr	r3, [sp, #16]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d1a0      	bne.n	8010f56 <_strtod_l+0x82e>
 8011014:	e5de      	b.n	8010bd4 <_strtod_l+0x4ac>
 8011016:	f04f 33ff 	mov.w	r3, #4294967295
 801101a:	e7ea      	b.n	8010ff2 <_strtod_l+0x8ca>
 801101c:	460b      	mov	r3, r1
 801101e:	e7e8      	b.n	8010ff2 <_strtod_l+0x8ca>
 8011020:	ea53 030a 	orrs.w	r3, r3, sl
 8011024:	d088      	beq.n	8010f38 <_strtod_l+0x810>
 8011026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011028:	b1db      	cbz	r3, 8011062 <_strtod_l+0x93a>
 801102a:	423b      	tst	r3, r7
 801102c:	d0ef      	beq.n	801100e <_strtod_l+0x8e6>
 801102e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011030:	9a04      	ldr	r2, [sp, #16]
 8011032:	4650      	mov	r0, sl
 8011034:	4659      	mov	r1, fp
 8011036:	b1c3      	cbz	r3, 801106a <_strtod_l+0x942>
 8011038:	f7ff fb57 	bl	80106ea <sulp>
 801103c:	4602      	mov	r2, r0
 801103e:	460b      	mov	r3, r1
 8011040:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011044:	f7ef f94a 	bl	80002dc <__adddf3>
 8011048:	4682      	mov	sl, r0
 801104a:	468b      	mov	fp, r1
 801104c:	e7df      	b.n	801100e <_strtod_l+0x8e6>
 801104e:	4013      	ands	r3, r2
 8011050:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011054:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011058:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801105c:	f04f 3aff 	mov.w	sl, #4294967295
 8011060:	e7d5      	b.n	801100e <_strtod_l+0x8e6>
 8011062:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011064:	ea13 0f0a 	tst.w	r3, sl
 8011068:	e7e0      	b.n	801102c <_strtod_l+0x904>
 801106a:	f7ff fb3e 	bl	80106ea <sulp>
 801106e:	4602      	mov	r2, r0
 8011070:	460b      	mov	r3, r1
 8011072:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011076:	f7ef f92f 	bl	80002d8 <__aeabi_dsub>
 801107a:	2200      	movs	r2, #0
 801107c:	2300      	movs	r3, #0
 801107e:	4682      	mov	sl, r0
 8011080:	468b      	mov	fp, r1
 8011082:	f7ef fd49 	bl	8000b18 <__aeabi_dcmpeq>
 8011086:	2800      	cmp	r0, #0
 8011088:	d0c1      	beq.n	801100e <_strtod_l+0x8e6>
 801108a:	e60e      	b.n	8010caa <_strtod_l+0x582>
 801108c:	fffffc02 	.word	0xfffffc02
 8011090:	7ff00000 	.word	0x7ff00000
 8011094:	39500000 	.word	0x39500000
 8011098:	000fffff 	.word	0x000fffff
 801109c:	7fefffff 	.word	0x7fefffff
 80110a0:	08015848 	.word	0x08015848
 80110a4:	4631      	mov	r1, r6
 80110a6:	4628      	mov	r0, r5
 80110a8:	f002 fa44 	bl	8013534 <__ratio>
 80110ac:	ec59 8b10 	vmov	r8, r9, d0
 80110b0:	ee10 0a10 	vmov	r0, s0
 80110b4:	2200      	movs	r2, #0
 80110b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80110ba:	4649      	mov	r1, r9
 80110bc:	f7ef fd40 	bl	8000b40 <__aeabi_dcmple>
 80110c0:	2800      	cmp	r0, #0
 80110c2:	d07c      	beq.n	80111be <_strtod_l+0xa96>
 80110c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d04c      	beq.n	8011164 <_strtod_l+0xa3c>
 80110ca:	4b95      	ldr	r3, [pc, #596]	; (8011320 <_strtod_l+0xbf8>)
 80110cc:	2200      	movs	r2, #0
 80110ce:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80110d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011320 <_strtod_l+0xbf8>
 80110d6:	f04f 0800 	mov.w	r8, #0
 80110da:	4b92      	ldr	r3, [pc, #584]	; (8011324 <_strtod_l+0xbfc>)
 80110dc:	403b      	ands	r3, r7
 80110de:	9311      	str	r3, [sp, #68]	; 0x44
 80110e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80110e2:	4b91      	ldr	r3, [pc, #580]	; (8011328 <_strtod_l+0xc00>)
 80110e4:	429a      	cmp	r2, r3
 80110e6:	f040 80b2 	bne.w	801124e <_strtod_l+0xb26>
 80110ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80110ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80110f2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80110f6:	ec4b ab10 	vmov	d0, sl, fp
 80110fa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80110fe:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011102:	f002 f93f 	bl	8013384 <__ulp>
 8011106:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801110a:	ec53 2b10 	vmov	r2, r3, d0
 801110e:	f7ef fa9b 	bl	8000648 <__aeabi_dmul>
 8011112:	4652      	mov	r2, sl
 8011114:	465b      	mov	r3, fp
 8011116:	f7ef f8e1 	bl	80002dc <__adddf3>
 801111a:	460b      	mov	r3, r1
 801111c:	4981      	ldr	r1, [pc, #516]	; (8011324 <_strtod_l+0xbfc>)
 801111e:	4a83      	ldr	r2, [pc, #524]	; (801132c <_strtod_l+0xc04>)
 8011120:	4019      	ands	r1, r3
 8011122:	4291      	cmp	r1, r2
 8011124:	4682      	mov	sl, r0
 8011126:	d95e      	bls.n	80111e6 <_strtod_l+0xabe>
 8011128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801112a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801112e:	4293      	cmp	r3, r2
 8011130:	d103      	bne.n	801113a <_strtod_l+0xa12>
 8011132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011134:	3301      	adds	r3, #1
 8011136:	f43f ad43 	beq.w	8010bc0 <_strtod_l+0x498>
 801113a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8011338 <_strtod_l+0xc10>
 801113e:	f04f 3aff 	mov.w	sl, #4294967295
 8011142:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011144:	4620      	mov	r0, r4
 8011146:	f001 fdf1 	bl	8012d2c <_Bfree>
 801114a:	9907      	ldr	r1, [sp, #28]
 801114c:	4620      	mov	r0, r4
 801114e:	f001 fded 	bl	8012d2c <_Bfree>
 8011152:	4631      	mov	r1, r6
 8011154:	4620      	mov	r0, r4
 8011156:	f001 fde9 	bl	8012d2c <_Bfree>
 801115a:	4629      	mov	r1, r5
 801115c:	4620      	mov	r0, r4
 801115e:	f001 fde5 	bl	8012d2c <_Bfree>
 8011162:	e613      	b.n	8010d8c <_strtod_l+0x664>
 8011164:	f1ba 0f00 	cmp.w	sl, #0
 8011168:	d11b      	bne.n	80111a2 <_strtod_l+0xa7a>
 801116a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801116e:	b9f3      	cbnz	r3, 80111ae <_strtod_l+0xa86>
 8011170:	4b6b      	ldr	r3, [pc, #428]	; (8011320 <_strtod_l+0xbf8>)
 8011172:	2200      	movs	r2, #0
 8011174:	4640      	mov	r0, r8
 8011176:	4649      	mov	r1, r9
 8011178:	f7ef fcd8 	bl	8000b2c <__aeabi_dcmplt>
 801117c:	b9d0      	cbnz	r0, 80111b4 <_strtod_l+0xa8c>
 801117e:	4640      	mov	r0, r8
 8011180:	4649      	mov	r1, r9
 8011182:	4b6b      	ldr	r3, [pc, #428]	; (8011330 <_strtod_l+0xc08>)
 8011184:	2200      	movs	r2, #0
 8011186:	f7ef fa5f 	bl	8000648 <__aeabi_dmul>
 801118a:	4680      	mov	r8, r0
 801118c:	4689      	mov	r9, r1
 801118e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011192:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8011196:	931b      	str	r3, [sp, #108]	; 0x6c
 8011198:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801119c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80111a0:	e79b      	b.n	80110da <_strtod_l+0x9b2>
 80111a2:	f1ba 0f01 	cmp.w	sl, #1
 80111a6:	d102      	bne.n	80111ae <_strtod_l+0xa86>
 80111a8:	2f00      	cmp	r7, #0
 80111aa:	f43f ad7e 	beq.w	8010caa <_strtod_l+0x582>
 80111ae:	4b61      	ldr	r3, [pc, #388]	; (8011334 <_strtod_l+0xc0c>)
 80111b0:	2200      	movs	r2, #0
 80111b2:	e78c      	b.n	80110ce <_strtod_l+0x9a6>
 80111b4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011330 <_strtod_l+0xc08>
 80111b8:	f04f 0800 	mov.w	r8, #0
 80111bc:	e7e7      	b.n	801118e <_strtod_l+0xa66>
 80111be:	4b5c      	ldr	r3, [pc, #368]	; (8011330 <_strtod_l+0xc08>)
 80111c0:	4640      	mov	r0, r8
 80111c2:	4649      	mov	r1, r9
 80111c4:	2200      	movs	r2, #0
 80111c6:	f7ef fa3f 	bl	8000648 <__aeabi_dmul>
 80111ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80111cc:	4680      	mov	r8, r0
 80111ce:	4689      	mov	r9, r1
 80111d0:	b933      	cbnz	r3, 80111e0 <_strtod_l+0xab8>
 80111d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80111d6:	9012      	str	r0, [sp, #72]	; 0x48
 80111d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80111da:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80111de:	e7dd      	b.n	801119c <_strtod_l+0xa74>
 80111e0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80111e4:	e7f9      	b.n	80111da <_strtod_l+0xab2>
 80111e6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80111ea:	9b04      	ldr	r3, [sp, #16]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d1a8      	bne.n	8011142 <_strtod_l+0xa1a>
 80111f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80111f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80111f6:	0d1b      	lsrs	r3, r3, #20
 80111f8:	051b      	lsls	r3, r3, #20
 80111fa:	429a      	cmp	r2, r3
 80111fc:	d1a1      	bne.n	8011142 <_strtod_l+0xa1a>
 80111fe:	4640      	mov	r0, r8
 8011200:	4649      	mov	r1, r9
 8011202:	f7ef fd81 	bl	8000d08 <__aeabi_d2lz>
 8011206:	f7ef f9f1 	bl	80005ec <__aeabi_l2d>
 801120a:	4602      	mov	r2, r0
 801120c:	460b      	mov	r3, r1
 801120e:	4640      	mov	r0, r8
 8011210:	4649      	mov	r1, r9
 8011212:	f7ef f861 	bl	80002d8 <__aeabi_dsub>
 8011216:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011218:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801121c:	ea43 030a 	orr.w	r3, r3, sl
 8011220:	4313      	orrs	r3, r2
 8011222:	4680      	mov	r8, r0
 8011224:	4689      	mov	r9, r1
 8011226:	d053      	beq.n	80112d0 <_strtod_l+0xba8>
 8011228:	a335      	add	r3, pc, #212	; (adr r3, 8011300 <_strtod_l+0xbd8>)
 801122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122e:	f7ef fc7d 	bl	8000b2c <__aeabi_dcmplt>
 8011232:	2800      	cmp	r0, #0
 8011234:	f47f acce 	bne.w	8010bd4 <_strtod_l+0x4ac>
 8011238:	a333      	add	r3, pc, #204	; (adr r3, 8011308 <_strtod_l+0xbe0>)
 801123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801123e:	4640      	mov	r0, r8
 8011240:	4649      	mov	r1, r9
 8011242:	f7ef fc91 	bl	8000b68 <__aeabi_dcmpgt>
 8011246:	2800      	cmp	r0, #0
 8011248:	f43f af7b 	beq.w	8011142 <_strtod_l+0xa1a>
 801124c:	e4c2      	b.n	8010bd4 <_strtod_l+0x4ac>
 801124e:	9b04      	ldr	r3, [sp, #16]
 8011250:	b333      	cbz	r3, 80112a0 <_strtod_l+0xb78>
 8011252:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011254:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011258:	d822      	bhi.n	80112a0 <_strtod_l+0xb78>
 801125a:	a32d      	add	r3, pc, #180	; (adr r3, 8011310 <_strtod_l+0xbe8>)
 801125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011260:	4640      	mov	r0, r8
 8011262:	4649      	mov	r1, r9
 8011264:	f7ef fc6c 	bl	8000b40 <__aeabi_dcmple>
 8011268:	b1a0      	cbz	r0, 8011294 <_strtod_l+0xb6c>
 801126a:	4649      	mov	r1, r9
 801126c:	4640      	mov	r0, r8
 801126e:	f7ef fcc3 	bl	8000bf8 <__aeabi_d2uiz>
 8011272:	2801      	cmp	r0, #1
 8011274:	bf38      	it	cc
 8011276:	2001      	movcc	r0, #1
 8011278:	f7ef f96c 	bl	8000554 <__aeabi_ui2d>
 801127c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801127e:	4680      	mov	r8, r0
 8011280:	4689      	mov	r9, r1
 8011282:	bb13      	cbnz	r3, 80112ca <_strtod_l+0xba2>
 8011284:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011288:	9014      	str	r0, [sp, #80]	; 0x50
 801128a:	9315      	str	r3, [sp, #84]	; 0x54
 801128c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011290:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011296:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011298:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801129c:	1a9b      	subs	r3, r3, r2
 801129e:	930d      	str	r3, [sp, #52]	; 0x34
 80112a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80112a4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80112a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80112ac:	f002 f86a 	bl	8013384 <__ulp>
 80112b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80112b4:	ec53 2b10 	vmov	r2, r3, d0
 80112b8:	f7ef f9c6 	bl	8000648 <__aeabi_dmul>
 80112bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80112c0:	f7ef f80c 	bl	80002dc <__adddf3>
 80112c4:	4682      	mov	sl, r0
 80112c6:	468b      	mov	fp, r1
 80112c8:	e78f      	b.n	80111ea <_strtod_l+0xac2>
 80112ca:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80112ce:	e7dd      	b.n	801128c <_strtod_l+0xb64>
 80112d0:	a311      	add	r3, pc, #68	; (adr r3, 8011318 <_strtod_l+0xbf0>)
 80112d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112d6:	f7ef fc29 	bl	8000b2c <__aeabi_dcmplt>
 80112da:	e7b4      	b.n	8011246 <_strtod_l+0xb1e>
 80112dc:	2300      	movs	r3, #0
 80112de:	930e      	str	r3, [sp, #56]	; 0x38
 80112e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80112e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80112e4:	6013      	str	r3, [r2, #0]
 80112e6:	f7ff ba65 	b.w	80107b4 <_strtod_l+0x8c>
 80112ea:	2b65      	cmp	r3, #101	; 0x65
 80112ec:	f43f ab5d 	beq.w	80109aa <_strtod_l+0x282>
 80112f0:	2b45      	cmp	r3, #69	; 0x45
 80112f2:	f43f ab5a 	beq.w	80109aa <_strtod_l+0x282>
 80112f6:	2201      	movs	r2, #1
 80112f8:	f7ff bb92 	b.w	8010a20 <_strtod_l+0x2f8>
 80112fc:	f3af 8000 	nop.w
 8011300:	94a03595 	.word	0x94a03595
 8011304:	3fdfffff 	.word	0x3fdfffff
 8011308:	35afe535 	.word	0x35afe535
 801130c:	3fe00000 	.word	0x3fe00000
 8011310:	ffc00000 	.word	0xffc00000
 8011314:	41dfffff 	.word	0x41dfffff
 8011318:	94a03595 	.word	0x94a03595
 801131c:	3fcfffff 	.word	0x3fcfffff
 8011320:	3ff00000 	.word	0x3ff00000
 8011324:	7ff00000 	.word	0x7ff00000
 8011328:	7fe00000 	.word	0x7fe00000
 801132c:	7c9fffff 	.word	0x7c9fffff
 8011330:	3fe00000 	.word	0x3fe00000
 8011334:	bff00000 	.word	0xbff00000
 8011338:	7fefffff 	.word	0x7fefffff

0801133c <_strtod_r>:
 801133c:	4b01      	ldr	r3, [pc, #4]	; (8011344 <_strtod_r+0x8>)
 801133e:	f7ff b9f3 	b.w	8010728 <_strtod_l>
 8011342:	bf00      	nop
 8011344:	20000090 	.word	0x20000090

08011348 <_strtol_l.isra.0>:
 8011348:	2b01      	cmp	r3, #1
 801134a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801134e:	d001      	beq.n	8011354 <_strtol_l.isra.0+0xc>
 8011350:	2b24      	cmp	r3, #36	; 0x24
 8011352:	d906      	bls.n	8011362 <_strtol_l.isra.0+0x1a>
 8011354:	f7fe f862 	bl	800f41c <__errno>
 8011358:	2316      	movs	r3, #22
 801135a:	6003      	str	r3, [r0, #0]
 801135c:	2000      	movs	r0, #0
 801135e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011362:	4f3a      	ldr	r7, [pc, #232]	; (801144c <_strtol_l.isra.0+0x104>)
 8011364:	468e      	mov	lr, r1
 8011366:	4676      	mov	r6, lr
 8011368:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801136c:	5de5      	ldrb	r5, [r4, r7]
 801136e:	f015 0508 	ands.w	r5, r5, #8
 8011372:	d1f8      	bne.n	8011366 <_strtol_l.isra.0+0x1e>
 8011374:	2c2d      	cmp	r4, #45	; 0x2d
 8011376:	d134      	bne.n	80113e2 <_strtol_l.isra.0+0x9a>
 8011378:	f89e 4000 	ldrb.w	r4, [lr]
 801137c:	f04f 0801 	mov.w	r8, #1
 8011380:	f106 0e02 	add.w	lr, r6, #2
 8011384:	2b00      	cmp	r3, #0
 8011386:	d05c      	beq.n	8011442 <_strtol_l.isra.0+0xfa>
 8011388:	2b10      	cmp	r3, #16
 801138a:	d10c      	bne.n	80113a6 <_strtol_l.isra.0+0x5e>
 801138c:	2c30      	cmp	r4, #48	; 0x30
 801138e:	d10a      	bne.n	80113a6 <_strtol_l.isra.0+0x5e>
 8011390:	f89e 4000 	ldrb.w	r4, [lr]
 8011394:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011398:	2c58      	cmp	r4, #88	; 0x58
 801139a:	d14d      	bne.n	8011438 <_strtol_l.isra.0+0xf0>
 801139c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80113a0:	2310      	movs	r3, #16
 80113a2:	f10e 0e02 	add.w	lr, lr, #2
 80113a6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80113aa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80113ae:	2600      	movs	r6, #0
 80113b0:	fbbc f9f3 	udiv	r9, ip, r3
 80113b4:	4635      	mov	r5, r6
 80113b6:	fb03 ca19 	mls	sl, r3, r9, ip
 80113ba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80113be:	2f09      	cmp	r7, #9
 80113c0:	d818      	bhi.n	80113f4 <_strtol_l.isra.0+0xac>
 80113c2:	463c      	mov	r4, r7
 80113c4:	42a3      	cmp	r3, r4
 80113c6:	dd24      	ble.n	8011412 <_strtol_l.isra.0+0xca>
 80113c8:	2e00      	cmp	r6, #0
 80113ca:	db1f      	blt.n	801140c <_strtol_l.isra.0+0xc4>
 80113cc:	45a9      	cmp	r9, r5
 80113ce:	d31d      	bcc.n	801140c <_strtol_l.isra.0+0xc4>
 80113d0:	d101      	bne.n	80113d6 <_strtol_l.isra.0+0x8e>
 80113d2:	45a2      	cmp	sl, r4
 80113d4:	db1a      	blt.n	801140c <_strtol_l.isra.0+0xc4>
 80113d6:	fb05 4503 	mla	r5, r5, r3, r4
 80113da:	2601      	movs	r6, #1
 80113dc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80113e0:	e7eb      	b.n	80113ba <_strtol_l.isra.0+0x72>
 80113e2:	2c2b      	cmp	r4, #43	; 0x2b
 80113e4:	bf08      	it	eq
 80113e6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80113ea:	46a8      	mov	r8, r5
 80113ec:	bf08      	it	eq
 80113ee:	f106 0e02 	addeq.w	lr, r6, #2
 80113f2:	e7c7      	b.n	8011384 <_strtol_l.isra.0+0x3c>
 80113f4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80113f8:	2f19      	cmp	r7, #25
 80113fa:	d801      	bhi.n	8011400 <_strtol_l.isra.0+0xb8>
 80113fc:	3c37      	subs	r4, #55	; 0x37
 80113fe:	e7e1      	b.n	80113c4 <_strtol_l.isra.0+0x7c>
 8011400:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011404:	2f19      	cmp	r7, #25
 8011406:	d804      	bhi.n	8011412 <_strtol_l.isra.0+0xca>
 8011408:	3c57      	subs	r4, #87	; 0x57
 801140a:	e7db      	b.n	80113c4 <_strtol_l.isra.0+0x7c>
 801140c:	f04f 36ff 	mov.w	r6, #4294967295
 8011410:	e7e4      	b.n	80113dc <_strtol_l.isra.0+0x94>
 8011412:	2e00      	cmp	r6, #0
 8011414:	da05      	bge.n	8011422 <_strtol_l.isra.0+0xda>
 8011416:	2322      	movs	r3, #34	; 0x22
 8011418:	6003      	str	r3, [r0, #0]
 801141a:	4665      	mov	r5, ip
 801141c:	b942      	cbnz	r2, 8011430 <_strtol_l.isra.0+0xe8>
 801141e:	4628      	mov	r0, r5
 8011420:	e79d      	b.n	801135e <_strtol_l.isra.0+0x16>
 8011422:	f1b8 0f00 	cmp.w	r8, #0
 8011426:	d000      	beq.n	801142a <_strtol_l.isra.0+0xe2>
 8011428:	426d      	negs	r5, r5
 801142a:	2a00      	cmp	r2, #0
 801142c:	d0f7      	beq.n	801141e <_strtol_l.isra.0+0xd6>
 801142e:	b10e      	cbz	r6, 8011434 <_strtol_l.isra.0+0xec>
 8011430:	f10e 31ff 	add.w	r1, lr, #4294967295
 8011434:	6011      	str	r1, [r2, #0]
 8011436:	e7f2      	b.n	801141e <_strtol_l.isra.0+0xd6>
 8011438:	2430      	movs	r4, #48	; 0x30
 801143a:	2b00      	cmp	r3, #0
 801143c:	d1b3      	bne.n	80113a6 <_strtol_l.isra.0+0x5e>
 801143e:	2308      	movs	r3, #8
 8011440:	e7b1      	b.n	80113a6 <_strtol_l.isra.0+0x5e>
 8011442:	2c30      	cmp	r4, #48	; 0x30
 8011444:	d0a4      	beq.n	8011390 <_strtol_l.isra.0+0x48>
 8011446:	230a      	movs	r3, #10
 8011448:	e7ad      	b.n	80113a6 <_strtol_l.isra.0+0x5e>
 801144a:	bf00      	nop
 801144c:	08015871 	.word	0x08015871

08011450 <_strtol_r>:
 8011450:	f7ff bf7a 	b.w	8011348 <_strtol_l.isra.0>

08011454 <__swbuf_r>:
 8011454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011456:	460e      	mov	r6, r1
 8011458:	4614      	mov	r4, r2
 801145a:	4605      	mov	r5, r0
 801145c:	b118      	cbz	r0, 8011466 <__swbuf_r+0x12>
 801145e:	6983      	ldr	r3, [r0, #24]
 8011460:	b90b      	cbnz	r3, 8011466 <__swbuf_r+0x12>
 8011462:	f7fe f839 	bl	800f4d8 <__sinit>
 8011466:	4b21      	ldr	r3, [pc, #132]	; (80114ec <__swbuf_r+0x98>)
 8011468:	429c      	cmp	r4, r3
 801146a:	d12b      	bne.n	80114c4 <__swbuf_r+0x70>
 801146c:	686c      	ldr	r4, [r5, #4]
 801146e:	69a3      	ldr	r3, [r4, #24]
 8011470:	60a3      	str	r3, [r4, #8]
 8011472:	89a3      	ldrh	r3, [r4, #12]
 8011474:	071a      	lsls	r2, r3, #28
 8011476:	d52f      	bpl.n	80114d8 <__swbuf_r+0x84>
 8011478:	6923      	ldr	r3, [r4, #16]
 801147a:	b36b      	cbz	r3, 80114d8 <__swbuf_r+0x84>
 801147c:	6923      	ldr	r3, [r4, #16]
 801147e:	6820      	ldr	r0, [r4, #0]
 8011480:	1ac0      	subs	r0, r0, r3
 8011482:	6963      	ldr	r3, [r4, #20]
 8011484:	b2f6      	uxtb	r6, r6
 8011486:	4283      	cmp	r3, r0
 8011488:	4637      	mov	r7, r6
 801148a:	dc04      	bgt.n	8011496 <__swbuf_r+0x42>
 801148c:	4621      	mov	r1, r4
 801148e:	4628      	mov	r0, r5
 8011490:	f000 ffc0 	bl	8012414 <_fflush_r>
 8011494:	bb30      	cbnz	r0, 80114e4 <__swbuf_r+0x90>
 8011496:	68a3      	ldr	r3, [r4, #8]
 8011498:	3b01      	subs	r3, #1
 801149a:	60a3      	str	r3, [r4, #8]
 801149c:	6823      	ldr	r3, [r4, #0]
 801149e:	1c5a      	adds	r2, r3, #1
 80114a0:	6022      	str	r2, [r4, #0]
 80114a2:	701e      	strb	r6, [r3, #0]
 80114a4:	6963      	ldr	r3, [r4, #20]
 80114a6:	3001      	adds	r0, #1
 80114a8:	4283      	cmp	r3, r0
 80114aa:	d004      	beq.n	80114b6 <__swbuf_r+0x62>
 80114ac:	89a3      	ldrh	r3, [r4, #12]
 80114ae:	07db      	lsls	r3, r3, #31
 80114b0:	d506      	bpl.n	80114c0 <__swbuf_r+0x6c>
 80114b2:	2e0a      	cmp	r6, #10
 80114b4:	d104      	bne.n	80114c0 <__swbuf_r+0x6c>
 80114b6:	4621      	mov	r1, r4
 80114b8:	4628      	mov	r0, r5
 80114ba:	f000 ffab 	bl	8012414 <_fflush_r>
 80114be:	b988      	cbnz	r0, 80114e4 <__swbuf_r+0x90>
 80114c0:	4638      	mov	r0, r7
 80114c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114c4:	4b0a      	ldr	r3, [pc, #40]	; (80114f0 <__swbuf_r+0x9c>)
 80114c6:	429c      	cmp	r4, r3
 80114c8:	d101      	bne.n	80114ce <__swbuf_r+0x7a>
 80114ca:	68ac      	ldr	r4, [r5, #8]
 80114cc:	e7cf      	b.n	801146e <__swbuf_r+0x1a>
 80114ce:	4b09      	ldr	r3, [pc, #36]	; (80114f4 <__swbuf_r+0xa0>)
 80114d0:	429c      	cmp	r4, r3
 80114d2:	bf08      	it	eq
 80114d4:	68ec      	ldreq	r4, [r5, #12]
 80114d6:	e7ca      	b.n	801146e <__swbuf_r+0x1a>
 80114d8:	4621      	mov	r1, r4
 80114da:	4628      	mov	r0, r5
 80114dc:	f000 f81e 	bl	801151c <__swsetup_r>
 80114e0:	2800      	cmp	r0, #0
 80114e2:	d0cb      	beq.n	801147c <__swbuf_r+0x28>
 80114e4:	f04f 37ff 	mov.w	r7, #4294967295
 80114e8:	e7ea      	b.n	80114c0 <__swbuf_r+0x6c>
 80114ea:	bf00      	nop
 80114ec:	080157a0 	.word	0x080157a0
 80114f0:	080157c0 	.word	0x080157c0
 80114f4:	08015780 	.word	0x08015780

080114f8 <_write_r>:
 80114f8:	b538      	push	{r3, r4, r5, lr}
 80114fa:	4d07      	ldr	r5, [pc, #28]	; (8011518 <_write_r+0x20>)
 80114fc:	4604      	mov	r4, r0
 80114fe:	4608      	mov	r0, r1
 8011500:	4611      	mov	r1, r2
 8011502:	2200      	movs	r2, #0
 8011504:	602a      	str	r2, [r5, #0]
 8011506:	461a      	mov	r2, r3
 8011508:	f7f2 faa2 	bl	8003a50 <_write>
 801150c:	1c43      	adds	r3, r0, #1
 801150e:	d102      	bne.n	8011516 <_write_r+0x1e>
 8011510:	682b      	ldr	r3, [r5, #0]
 8011512:	b103      	cbz	r3, 8011516 <_write_r+0x1e>
 8011514:	6023      	str	r3, [r4, #0]
 8011516:	bd38      	pop	{r3, r4, r5, pc}
 8011518:	20002bcc 	.word	0x20002bcc

0801151c <__swsetup_r>:
 801151c:	4b32      	ldr	r3, [pc, #200]	; (80115e8 <__swsetup_r+0xcc>)
 801151e:	b570      	push	{r4, r5, r6, lr}
 8011520:	681d      	ldr	r5, [r3, #0]
 8011522:	4606      	mov	r6, r0
 8011524:	460c      	mov	r4, r1
 8011526:	b125      	cbz	r5, 8011532 <__swsetup_r+0x16>
 8011528:	69ab      	ldr	r3, [r5, #24]
 801152a:	b913      	cbnz	r3, 8011532 <__swsetup_r+0x16>
 801152c:	4628      	mov	r0, r5
 801152e:	f7fd ffd3 	bl	800f4d8 <__sinit>
 8011532:	4b2e      	ldr	r3, [pc, #184]	; (80115ec <__swsetup_r+0xd0>)
 8011534:	429c      	cmp	r4, r3
 8011536:	d10f      	bne.n	8011558 <__swsetup_r+0x3c>
 8011538:	686c      	ldr	r4, [r5, #4]
 801153a:	89a3      	ldrh	r3, [r4, #12]
 801153c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011540:	0719      	lsls	r1, r3, #28
 8011542:	d42c      	bmi.n	801159e <__swsetup_r+0x82>
 8011544:	06dd      	lsls	r5, r3, #27
 8011546:	d411      	bmi.n	801156c <__swsetup_r+0x50>
 8011548:	2309      	movs	r3, #9
 801154a:	6033      	str	r3, [r6, #0]
 801154c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011550:	81a3      	strh	r3, [r4, #12]
 8011552:	f04f 30ff 	mov.w	r0, #4294967295
 8011556:	e03e      	b.n	80115d6 <__swsetup_r+0xba>
 8011558:	4b25      	ldr	r3, [pc, #148]	; (80115f0 <__swsetup_r+0xd4>)
 801155a:	429c      	cmp	r4, r3
 801155c:	d101      	bne.n	8011562 <__swsetup_r+0x46>
 801155e:	68ac      	ldr	r4, [r5, #8]
 8011560:	e7eb      	b.n	801153a <__swsetup_r+0x1e>
 8011562:	4b24      	ldr	r3, [pc, #144]	; (80115f4 <__swsetup_r+0xd8>)
 8011564:	429c      	cmp	r4, r3
 8011566:	bf08      	it	eq
 8011568:	68ec      	ldreq	r4, [r5, #12]
 801156a:	e7e6      	b.n	801153a <__swsetup_r+0x1e>
 801156c:	0758      	lsls	r0, r3, #29
 801156e:	d512      	bpl.n	8011596 <__swsetup_r+0x7a>
 8011570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011572:	b141      	cbz	r1, 8011586 <__swsetup_r+0x6a>
 8011574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011578:	4299      	cmp	r1, r3
 801157a:	d002      	beq.n	8011582 <__swsetup_r+0x66>
 801157c:	4630      	mov	r0, r6
 801157e:	f002 f85f 	bl	8013640 <_free_r>
 8011582:	2300      	movs	r3, #0
 8011584:	6363      	str	r3, [r4, #52]	; 0x34
 8011586:	89a3      	ldrh	r3, [r4, #12]
 8011588:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801158c:	81a3      	strh	r3, [r4, #12]
 801158e:	2300      	movs	r3, #0
 8011590:	6063      	str	r3, [r4, #4]
 8011592:	6923      	ldr	r3, [r4, #16]
 8011594:	6023      	str	r3, [r4, #0]
 8011596:	89a3      	ldrh	r3, [r4, #12]
 8011598:	f043 0308 	orr.w	r3, r3, #8
 801159c:	81a3      	strh	r3, [r4, #12]
 801159e:	6923      	ldr	r3, [r4, #16]
 80115a0:	b94b      	cbnz	r3, 80115b6 <__swsetup_r+0x9a>
 80115a2:	89a3      	ldrh	r3, [r4, #12]
 80115a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80115a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80115ac:	d003      	beq.n	80115b6 <__swsetup_r+0x9a>
 80115ae:	4621      	mov	r1, r4
 80115b0:	4630      	mov	r0, r6
 80115b2:	f001 fb15 	bl	8012be0 <__smakebuf_r>
 80115b6:	89a0      	ldrh	r0, [r4, #12]
 80115b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80115bc:	f010 0301 	ands.w	r3, r0, #1
 80115c0:	d00a      	beq.n	80115d8 <__swsetup_r+0xbc>
 80115c2:	2300      	movs	r3, #0
 80115c4:	60a3      	str	r3, [r4, #8]
 80115c6:	6963      	ldr	r3, [r4, #20]
 80115c8:	425b      	negs	r3, r3
 80115ca:	61a3      	str	r3, [r4, #24]
 80115cc:	6923      	ldr	r3, [r4, #16]
 80115ce:	b943      	cbnz	r3, 80115e2 <__swsetup_r+0xc6>
 80115d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80115d4:	d1ba      	bne.n	801154c <__swsetup_r+0x30>
 80115d6:	bd70      	pop	{r4, r5, r6, pc}
 80115d8:	0781      	lsls	r1, r0, #30
 80115da:	bf58      	it	pl
 80115dc:	6963      	ldrpl	r3, [r4, #20]
 80115de:	60a3      	str	r3, [r4, #8]
 80115e0:	e7f4      	b.n	80115cc <__swsetup_r+0xb0>
 80115e2:	2000      	movs	r0, #0
 80115e4:	e7f7      	b.n	80115d6 <__swsetup_r+0xba>
 80115e6:	bf00      	nop
 80115e8:	20000028 	.word	0x20000028
 80115ec:	080157a0 	.word	0x080157a0
 80115f0:	080157c0 	.word	0x080157c0
 80115f4:	08015780 	.word	0x08015780

080115f8 <_close_r>:
 80115f8:	b538      	push	{r3, r4, r5, lr}
 80115fa:	4d06      	ldr	r5, [pc, #24]	; (8011614 <_close_r+0x1c>)
 80115fc:	2300      	movs	r3, #0
 80115fe:	4604      	mov	r4, r0
 8011600:	4608      	mov	r0, r1
 8011602:	602b      	str	r3, [r5, #0]
 8011604:	f7f5 fbc3 	bl	8006d8e <_close>
 8011608:	1c43      	adds	r3, r0, #1
 801160a:	d102      	bne.n	8011612 <_close_r+0x1a>
 801160c:	682b      	ldr	r3, [r5, #0]
 801160e:	b103      	cbz	r3, 8011612 <_close_r+0x1a>
 8011610:	6023      	str	r3, [r4, #0]
 8011612:	bd38      	pop	{r3, r4, r5, pc}
 8011614:	20002bcc 	.word	0x20002bcc

08011618 <quorem>:
 8011618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801161c:	6903      	ldr	r3, [r0, #16]
 801161e:	690c      	ldr	r4, [r1, #16]
 8011620:	42a3      	cmp	r3, r4
 8011622:	4607      	mov	r7, r0
 8011624:	f2c0 8081 	blt.w	801172a <quorem+0x112>
 8011628:	3c01      	subs	r4, #1
 801162a:	f101 0814 	add.w	r8, r1, #20
 801162e:	f100 0514 	add.w	r5, r0, #20
 8011632:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011636:	9301      	str	r3, [sp, #4]
 8011638:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801163c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011640:	3301      	adds	r3, #1
 8011642:	429a      	cmp	r2, r3
 8011644:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011648:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801164c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011650:	d331      	bcc.n	80116b6 <quorem+0x9e>
 8011652:	f04f 0e00 	mov.w	lr, #0
 8011656:	4640      	mov	r0, r8
 8011658:	46ac      	mov	ip, r5
 801165a:	46f2      	mov	sl, lr
 801165c:	f850 2b04 	ldr.w	r2, [r0], #4
 8011660:	b293      	uxth	r3, r2
 8011662:	fb06 e303 	mla	r3, r6, r3, lr
 8011666:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801166a:	b29b      	uxth	r3, r3
 801166c:	ebaa 0303 	sub.w	r3, sl, r3
 8011670:	0c12      	lsrs	r2, r2, #16
 8011672:	f8dc a000 	ldr.w	sl, [ip]
 8011676:	fb06 e202 	mla	r2, r6, r2, lr
 801167a:	fa13 f38a 	uxtah	r3, r3, sl
 801167e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011682:	fa1f fa82 	uxth.w	sl, r2
 8011686:	f8dc 2000 	ldr.w	r2, [ip]
 801168a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801168e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011692:	b29b      	uxth	r3, r3
 8011694:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011698:	4581      	cmp	r9, r0
 801169a:	f84c 3b04 	str.w	r3, [ip], #4
 801169e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80116a2:	d2db      	bcs.n	801165c <quorem+0x44>
 80116a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80116a8:	b92b      	cbnz	r3, 80116b6 <quorem+0x9e>
 80116aa:	9b01      	ldr	r3, [sp, #4]
 80116ac:	3b04      	subs	r3, #4
 80116ae:	429d      	cmp	r5, r3
 80116b0:	461a      	mov	r2, r3
 80116b2:	d32e      	bcc.n	8011712 <quorem+0xfa>
 80116b4:	613c      	str	r4, [r7, #16]
 80116b6:	4638      	mov	r0, r7
 80116b8:	f001 fdc0 	bl	801323c <__mcmp>
 80116bc:	2800      	cmp	r0, #0
 80116be:	db24      	blt.n	801170a <quorem+0xf2>
 80116c0:	3601      	adds	r6, #1
 80116c2:	4628      	mov	r0, r5
 80116c4:	f04f 0c00 	mov.w	ip, #0
 80116c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80116cc:	f8d0 e000 	ldr.w	lr, [r0]
 80116d0:	b293      	uxth	r3, r2
 80116d2:	ebac 0303 	sub.w	r3, ip, r3
 80116d6:	0c12      	lsrs	r2, r2, #16
 80116d8:	fa13 f38e 	uxtah	r3, r3, lr
 80116dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80116e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80116e4:	b29b      	uxth	r3, r3
 80116e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80116ea:	45c1      	cmp	r9, r8
 80116ec:	f840 3b04 	str.w	r3, [r0], #4
 80116f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80116f4:	d2e8      	bcs.n	80116c8 <quorem+0xb0>
 80116f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80116fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80116fe:	b922      	cbnz	r2, 801170a <quorem+0xf2>
 8011700:	3b04      	subs	r3, #4
 8011702:	429d      	cmp	r5, r3
 8011704:	461a      	mov	r2, r3
 8011706:	d30a      	bcc.n	801171e <quorem+0x106>
 8011708:	613c      	str	r4, [r7, #16]
 801170a:	4630      	mov	r0, r6
 801170c:	b003      	add	sp, #12
 801170e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011712:	6812      	ldr	r2, [r2, #0]
 8011714:	3b04      	subs	r3, #4
 8011716:	2a00      	cmp	r2, #0
 8011718:	d1cc      	bne.n	80116b4 <quorem+0x9c>
 801171a:	3c01      	subs	r4, #1
 801171c:	e7c7      	b.n	80116ae <quorem+0x96>
 801171e:	6812      	ldr	r2, [r2, #0]
 8011720:	3b04      	subs	r3, #4
 8011722:	2a00      	cmp	r2, #0
 8011724:	d1f0      	bne.n	8011708 <quorem+0xf0>
 8011726:	3c01      	subs	r4, #1
 8011728:	e7eb      	b.n	8011702 <quorem+0xea>
 801172a:	2000      	movs	r0, #0
 801172c:	e7ee      	b.n	801170c <quorem+0xf4>
	...

08011730 <_dtoa_r>:
 8011730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011734:	ed2d 8b02 	vpush	{d8}
 8011738:	ec57 6b10 	vmov	r6, r7, d0
 801173c:	b095      	sub	sp, #84	; 0x54
 801173e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011740:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011744:	9105      	str	r1, [sp, #20]
 8011746:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801174a:	4604      	mov	r4, r0
 801174c:	9209      	str	r2, [sp, #36]	; 0x24
 801174e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011750:	b975      	cbnz	r5, 8011770 <_dtoa_r+0x40>
 8011752:	2010      	movs	r0, #16
 8011754:	f001 fa84 	bl	8012c60 <malloc>
 8011758:	4602      	mov	r2, r0
 801175a:	6260      	str	r0, [r4, #36]	; 0x24
 801175c:	b920      	cbnz	r0, 8011768 <_dtoa_r+0x38>
 801175e:	4bb2      	ldr	r3, [pc, #712]	; (8011a28 <_dtoa_r+0x2f8>)
 8011760:	21ea      	movs	r1, #234	; 0xea
 8011762:	48b2      	ldr	r0, [pc, #712]	; (8011a2c <_dtoa_r+0x2fc>)
 8011764:	f002 f954 	bl	8013a10 <__assert_func>
 8011768:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801176c:	6005      	str	r5, [r0, #0]
 801176e:	60c5      	str	r5, [r0, #12]
 8011770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011772:	6819      	ldr	r1, [r3, #0]
 8011774:	b151      	cbz	r1, 801178c <_dtoa_r+0x5c>
 8011776:	685a      	ldr	r2, [r3, #4]
 8011778:	604a      	str	r2, [r1, #4]
 801177a:	2301      	movs	r3, #1
 801177c:	4093      	lsls	r3, r2
 801177e:	608b      	str	r3, [r1, #8]
 8011780:	4620      	mov	r0, r4
 8011782:	f001 fad3 	bl	8012d2c <_Bfree>
 8011786:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011788:	2200      	movs	r2, #0
 801178a:	601a      	str	r2, [r3, #0]
 801178c:	1e3b      	subs	r3, r7, #0
 801178e:	bfb9      	ittee	lt
 8011790:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011794:	9303      	strlt	r3, [sp, #12]
 8011796:	2300      	movge	r3, #0
 8011798:	f8c8 3000 	strge.w	r3, [r8]
 801179c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80117a0:	4ba3      	ldr	r3, [pc, #652]	; (8011a30 <_dtoa_r+0x300>)
 80117a2:	bfbc      	itt	lt
 80117a4:	2201      	movlt	r2, #1
 80117a6:	f8c8 2000 	strlt.w	r2, [r8]
 80117aa:	ea33 0309 	bics.w	r3, r3, r9
 80117ae:	d11b      	bne.n	80117e8 <_dtoa_r+0xb8>
 80117b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80117b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80117b6:	6013      	str	r3, [r2, #0]
 80117b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80117bc:	4333      	orrs	r3, r6
 80117be:	f000 857a 	beq.w	80122b6 <_dtoa_r+0xb86>
 80117c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80117c4:	b963      	cbnz	r3, 80117e0 <_dtoa_r+0xb0>
 80117c6:	4b9b      	ldr	r3, [pc, #620]	; (8011a34 <_dtoa_r+0x304>)
 80117c8:	e024      	b.n	8011814 <_dtoa_r+0xe4>
 80117ca:	4b9b      	ldr	r3, [pc, #620]	; (8011a38 <_dtoa_r+0x308>)
 80117cc:	9300      	str	r3, [sp, #0]
 80117ce:	3308      	adds	r3, #8
 80117d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80117d2:	6013      	str	r3, [r2, #0]
 80117d4:	9800      	ldr	r0, [sp, #0]
 80117d6:	b015      	add	sp, #84	; 0x54
 80117d8:	ecbd 8b02 	vpop	{d8}
 80117dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117e0:	4b94      	ldr	r3, [pc, #592]	; (8011a34 <_dtoa_r+0x304>)
 80117e2:	9300      	str	r3, [sp, #0]
 80117e4:	3303      	adds	r3, #3
 80117e6:	e7f3      	b.n	80117d0 <_dtoa_r+0xa0>
 80117e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80117ec:	2200      	movs	r2, #0
 80117ee:	ec51 0b17 	vmov	r0, r1, d7
 80117f2:	2300      	movs	r3, #0
 80117f4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80117f8:	f7ef f98e 	bl	8000b18 <__aeabi_dcmpeq>
 80117fc:	4680      	mov	r8, r0
 80117fe:	b158      	cbz	r0, 8011818 <_dtoa_r+0xe8>
 8011800:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011802:	2301      	movs	r3, #1
 8011804:	6013      	str	r3, [r2, #0]
 8011806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011808:	2b00      	cmp	r3, #0
 801180a:	f000 8551 	beq.w	80122b0 <_dtoa_r+0xb80>
 801180e:	488b      	ldr	r0, [pc, #556]	; (8011a3c <_dtoa_r+0x30c>)
 8011810:	6018      	str	r0, [r3, #0]
 8011812:	1e43      	subs	r3, r0, #1
 8011814:	9300      	str	r3, [sp, #0]
 8011816:	e7dd      	b.n	80117d4 <_dtoa_r+0xa4>
 8011818:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801181c:	aa12      	add	r2, sp, #72	; 0x48
 801181e:	a913      	add	r1, sp, #76	; 0x4c
 8011820:	4620      	mov	r0, r4
 8011822:	f001 fe2b 	bl	801347c <__d2b>
 8011826:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801182a:	4683      	mov	fp, r0
 801182c:	2d00      	cmp	r5, #0
 801182e:	d07c      	beq.n	801192a <_dtoa_r+0x1fa>
 8011830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011832:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8011836:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801183a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801183e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011842:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011846:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801184a:	4b7d      	ldr	r3, [pc, #500]	; (8011a40 <_dtoa_r+0x310>)
 801184c:	2200      	movs	r2, #0
 801184e:	4630      	mov	r0, r6
 8011850:	4639      	mov	r1, r7
 8011852:	f7ee fd41 	bl	80002d8 <__aeabi_dsub>
 8011856:	a36e      	add	r3, pc, #440	; (adr r3, 8011a10 <_dtoa_r+0x2e0>)
 8011858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801185c:	f7ee fef4 	bl	8000648 <__aeabi_dmul>
 8011860:	a36d      	add	r3, pc, #436	; (adr r3, 8011a18 <_dtoa_r+0x2e8>)
 8011862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011866:	f7ee fd39 	bl	80002dc <__adddf3>
 801186a:	4606      	mov	r6, r0
 801186c:	4628      	mov	r0, r5
 801186e:	460f      	mov	r7, r1
 8011870:	f7ee fe80 	bl	8000574 <__aeabi_i2d>
 8011874:	a36a      	add	r3, pc, #424	; (adr r3, 8011a20 <_dtoa_r+0x2f0>)
 8011876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801187a:	f7ee fee5 	bl	8000648 <__aeabi_dmul>
 801187e:	4602      	mov	r2, r0
 8011880:	460b      	mov	r3, r1
 8011882:	4630      	mov	r0, r6
 8011884:	4639      	mov	r1, r7
 8011886:	f7ee fd29 	bl	80002dc <__adddf3>
 801188a:	4606      	mov	r6, r0
 801188c:	460f      	mov	r7, r1
 801188e:	f7ef f98b 	bl	8000ba8 <__aeabi_d2iz>
 8011892:	2200      	movs	r2, #0
 8011894:	4682      	mov	sl, r0
 8011896:	2300      	movs	r3, #0
 8011898:	4630      	mov	r0, r6
 801189a:	4639      	mov	r1, r7
 801189c:	f7ef f946 	bl	8000b2c <__aeabi_dcmplt>
 80118a0:	b148      	cbz	r0, 80118b6 <_dtoa_r+0x186>
 80118a2:	4650      	mov	r0, sl
 80118a4:	f7ee fe66 	bl	8000574 <__aeabi_i2d>
 80118a8:	4632      	mov	r2, r6
 80118aa:	463b      	mov	r3, r7
 80118ac:	f7ef f934 	bl	8000b18 <__aeabi_dcmpeq>
 80118b0:	b908      	cbnz	r0, 80118b6 <_dtoa_r+0x186>
 80118b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80118b6:	f1ba 0f16 	cmp.w	sl, #22
 80118ba:	d854      	bhi.n	8011966 <_dtoa_r+0x236>
 80118bc:	4b61      	ldr	r3, [pc, #388]	; (8011a44 <_dtoa_r+0x314>)
 80118be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80118c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80118ca:	f7ef f92f 	bl	8000b2c <__aeabi_dcmplt>
 80118ce:	2800      	cmp	r0, #0
 80118d0:	d04b      	beq.n	801196a <_dtoa_r+0x23a>
 80118d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80118d6:	2300      	movs	r3, #0
 80118d8:	930e      	str	r3, [sp, #56]	; 0x38
 80118da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80118dc:	1b5d      	subs	r5, r3, r5
 80118de:	1e6b      	subs	r3, r5, #1
 80118e0:	9304      	str	r3, [sp, #16]
 80118e2:	bf43      	ittte	mi
 80118e4:	2300      	movmi	r3, #0
 80118e6:	f1c5 0801 	rsbmi	r8, r5, #1
 80118ea:	9304      	strmi	r3, [sp, #16]
 80118ec:	f04f 0800 	movpl.w	r8, #0
 80118f0:	f1ba 0f00 	cmp.w	sl, #0
 80118f4:	db3b      	blt.n	801196e <_dtoa_r+0x23e>
 80118f6:	9b04      	ldr	r3, [sp, #16]
 80118f8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80118fc:	4453      	add	r3, sl
 80118fe:	9304      	str	r3, [sp, #16]
 8011900:	2300      	movs	r3, #0
 8011902:	9306      	str	r3, [sp, #24]
 8011904:	9b05      	ldr	r3, [sp, #20]
 8011906:	2b09      	cmp	r3, #9
 8011908:	d869      	bhi.n	80119de <_dtoa_r+0x2ae>
 801190a:	2b05      	cmp	r3, #5
 801190c:	bfc4      	itt	gt
 801190e:	3b04      	subgt	r3, #4
 8011910:	9305      	strgt	r3, [sp, #20]
 8011912:	9b05      	ldr	r3, [sp, #20]
 8011914:	f1a3 0302 	sub.w	r3, r3, #2
 8011918:	bfcc      	ite	gt
 801191a:	2500      	movgt	r5, #0
 801191c:	2501      	movle	r5, #1
 801191e:	2b03      	cmp	r3, #3
 8011920:	d869      	bhi.n	80119f6 <_dtoa_r+0x2c6>
 8011922:	e8df f003 	tbb	[pc, r3]
 8011926:	4e2c      	.short	0x4e2c
 8011928:	5a4c      	.short	0x5a4c
 801192a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801192e:	441d      	add	r5, r3
 8011930:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011934:	2b20      	cmp	r3, #32
 8011936:	bfc1      	itttt	gt
 8011938:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801193c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011940:	fa09 f303 	lslgt.w	r3, r9, r3
 8011944:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011948:	bfda      	itte	le
 801194a:	f1c3 0320 	rsble	r3, r3, #32
 801194e:	fa06 f003 	lslle.w	r0, r6, r3
 8011952:	4318      	orrgt	r0, r3
 8011954:	f7ee fdfe 	bl	8000554 <__aeabi_ui2d>
 8011958:	2301      	movs	r3, #1
 801195a:	4606      	mov	r6, r0
 801195c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011960:	3d01      	subs	r5, #1
 8011962:	9310      	str	r3, [sp, #64]	; 0x40
 8011964:	e771      	b.n	801184a <_dtoa_r+0x11a>
 8011966:	2301      	movs	r3, #1
 8011968:	e7b6      	b.n	80118d8 <_dtoa_r+0x1a8>
 801196a:	900e      	str	r0, [sp, #56]	; 0x38
 801196c:	e7b5      	b.n	80118da <_dtoa_r+0x1aa>
 801196e:	f1ca 0300 	rsb	r3, sl, #0
 8011972:	9306      	str	r3, [sp, #24]
 8011974:	2300      	movs	r3, #0
 8011976:	eba8 080a 	sub.w	r8, r8, sl
 801197a:	930d      	str	r3, [sp, #52]	; 0x34
 801197c:	e7c2      	b.n	8011904 <_dtoa_r+0x1d4>
 801197e:	2300      	movs	r3, #0
 8011980:	9308      	str	r3, [sp, #32]
 8011982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011984:	2b00      	cmp	r3, #0
 8011986:	dc39      	bgt.n	80119fc <_dtoa_r+0x2cc>
 8011988:	f04f 0901 	mov.w	r9, #1
 801198c:	f8cd 9004 	str.w	r9, [sp, #4]
 8011990:	464b      	mov	r3, r9
 8011992:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011996:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011998:	2200      	movs	r2, #0
 801199a:	6042      	str	r2, [r0, #4]
 801199c:	2204      	movs	r2, #4
 801199e:	f102 0614 	add.w	r6, r2, #20
 80119a2:	429e      	cmp	r6, r3
 80119a4:	6841      	ldr	r1, [r0, #4]
 80119a6:	d92f      	bls.n	8011a08 <_dtoa_r+0x2d8>
 80119a8:	4620      	mov	r0, r4
 80119aa:	f001 f97f 	bl	8012cac <_Balloc>
 80119ae:	9000      	str	r0, [sp, #0]
 80119b0:	2800      	cmp	r0, #0
 80119b2:	d14b      	bne.n	8011a4c <_dtoa_r+0x31c>
 80119b4:	4b24      	ldr	r3, [pc, #144]	; (8011a48 <_dtoa_r+0x318>)
 80119b6:	4602      	mov	r2, r0
 80119b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80119bc:	e6d1      	b.n	8011762 <_dtoa_r+0x32>
 80119be:	2301      	movs	r3, #1
 80119c0:	e7de      	b.n	8011980 <_dtoa_r+0x250>
 80119c2:	2300      	movs	r3, #0
 80119c4:	9308      	str	r3, [sp, #32]
 80119c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119c8:	eb0a 0903 	add.w	r9, sl, r3
 80119cc:	f109 0301 	add.w	r3, r9, #1
 80119d0:	2b01      	cmp	r3, #1
 80119d2:	9301      	str	r3, [sp, #4]
 80119d4:	bfb8      	it	lt
 80119d6:	2301      	movlt	r3, #1
 80119d8:	e7dd      	b.n	8011996 <_dtoa_r+0x266>
 80119da:	2301      	movs	r3, #1
 80119dc:	e7f2      	b.n	80119c4 <_dtoa_r+0x294>
 80119de:	2501      	movs	r5, #1
 80119e0:	2300      	movs	r3, #0
 80119e2:	9305      	str	r3, [sp, #20]
 80119e4:	9508      	str	r5, [sp, #32]
 80119e6:	f04f 39ff 	mov.w	r9, #4294967295
 80119ea:	2200      	movs	r2, #0
 80119ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80119f0:	2312      	movs	r3, #18
 80119f2:	9209      	str	r2, [sp, #36]	; 0x24
 80119f4:	e7cf      	b.n	8011996 <_dtoa_r+0x266>
 80119f6:	2301      	movs	r3, #1
 80119f8:	9308      	str	r3, [sp, #32]
 80119fa:	e7f4      	b.n	80119e6 <_dtoa_r+0x2b6>
 80119fc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011a00:	f8cd 9004 	str.w	r9, [sp, #4]
 8011a04:	464b      	mov	r3, r9
 8011a06:	e7c6      	b.n	8011996 <_dtoa_r+0x266>
 8011a08:	3101      	adds	r1, #1
 8011a0a:	6041      	str	r1, [r0, #4]
 8011a0c:	0052      	lsls	r2, r2, #1
 8011a0e:	e7c6      	b.n	801199e <_dtoa_r+0x26e>
 8011a10:	636f4361 	.word	0x636f4361
 8011a14:	3fd287a7 	.word	0x3fd287a7
 8011a18:	8b60c8b3 	.word	0x8b60c8b3
 8011a1c:	3fc68a28 	.word	0x3fc68a28
 8011a20:	509f79fb 	.word	0x509f79fb
 8011a24:	3fd34413 	.word	0x3fd34413
 8011a28:	0801597e 	.word	0x0801597e
 8011a2c:	08015995 	.word	0x08015995
 8011a30:	7ff00000 	.word	0x7ff00000
 8011a34:	0801597a 	.word	0x0801597a
 8011a38:	08015971 	.word	0x08015971
 8011a3c:	080157f5 	.word	0x080157f5
 8011a40:	3ff80000 	.word	0x3ff80000
 8011a44:	08015b10 	.word	0x08015b10
 8011a48:	080159f4 	.word	0x080159f4
 8011a4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a4e:	9a00      	ldr	r2, [sp, #0]
 8011a50:	601a      	str	r2, [r3, #0]
 8011a52:	9b01      	ldr	r3, [sp, #4]
 8011a54:	2b0e      	cmp	r3, #14
 8011a56:	f200 80ad 	bhi.w	8011bb4 <_dtoa_r+0x484>
 8011a5a:	2d00      	cmp	r5, #0
 8011a5c:	f000 80aa 	beq.w	8011bb4 <_dtoa_r+0x484>
 8011a60:	f1ba 0f00 	cmp.w	sl, #0
 8011a64:	dd36      	ble.n	8011ad4 <_dtoa_r+0x3a4>
 8011a66:	4ac3      	ldr	r2, [pc, #780]	; (8011d74 <_dtoa_r+0x644>)
 8011a68:	f00a 030f 	and.w	r3, sl, #15
 8011a6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011a70:	ed93 7b00 	vldr	d7, [r3]
 8011a74:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8011a78:	ea4f 172a 	mov.w	r7, sl, asr #4
 8011a7c:	eeb0 8a47 	vmov.f32	s16, s14
 8011a80:	eef0 8a67 	vmov.f32	s17, s15
 8011a84:	d016      	beq.n	8011ab4 <_dtoa_r+0x384>
 8011a86:	4bbc      	ldr	r3, [pc, #752]	; (8011d78 <_dtoa_r+0x648>)
 8011a88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011a8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011a90:	f7ee ff04 	bl	800089c <__aeabi_ddiv>
 8011a94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a98:	f007 070f 	and.w	r7, r7, #15
 8011a9c:	2503      	movs	r5, #3
 8011a9e:	4eb6      	ldr	r6, [pc, #728]	; (8011d78 <_dtoa_r+0x648>)
 8011aa0:	b957      	cbnz	r7, 8011ab8 <_dtoa_r+0x388>
 8011aa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011aa6:	ec53 2b18 	vmov	r2, r3, d8
 8011aaa:	f7ee fef7 	bl	800089c <__aeabi_ddiv>
 8011aae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ab2:	e029      	b.n	8011b08 <_dtoa_r+0x3d8>
 8011ab4:	2502      	movs	r5, #2
 8011ab6:	e7f2      	b.n	8011a9e <_dtoa_r+0x36e>
 8011ab8:	07f9      	lsls	r1, r7, #31
 8011aba:	d508      	bpl.n	8011ace <_dtoa_r+0x39e>
 8011abc:	ec51 0b18 	vmov	r0, r1, d8
 8011ac0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011ac4:	f7ee fdc0 	bl	8000648 <__aeabi_dmul>
 8011ac8:	ec41 0b18 	vmov	d8, r0, r1
 8011acc:	3501      	adds	r5, #1
 8011ace:	107f      	asrs	r7, r7, #1
 8011ad0:	3608      	adds	r6, #8
 8011ad2:	e7e5      	b.n	8011aa0 <_dtoa_r+0x370>
 8011ad4:	f000 80a6 	beq.w	8011c24 <_dtoa_r+0x4f4>
 8011ad8:	f1ca 0600 	rsb	r6, sl, #0
 8011adc:	4ba5      	ldr	r3, [pc, #660]	; (8011d74 <_dtoa_r+0x644>)
 8011ade:	4fa6      	ldr	r7, [pc, #664]	; (8011d78 <_dtoa_r+0x648>)
 8011ae0:	f006 020f 	and.w	r2, r6, #15
 8011ae4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011af0:	f7ee fdaa 	bl	8000648 <__aeabi_dmul>
 8011af4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011af8:	1136      	asrs	r6, r6, #4
 8011afa:	2300      	movs	r3, #0
 8011afc:	2502      	movs	r5, #2
 8011afe:	2e00      	cmp	r6, #0
 8011b00:	f040 8085 	bne.w	8011c0e <_dtoa_r+0x4de>
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d1d2      	bne.n	8011aae <_dtoa_r+0x37e>
 8011b08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	f000 808c 	beq.w	8011c28 <_dtoa_r+0x4f8>
 8011b10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011b14:	4b99      	ldr	r3, [pc, #612]	; (8011d7c <_dtoa_r+0x64c>)
 8011b16:	2200      	movs	r2, #0
 8011b18:	4630      	mov	r0, r6
 8011b1a:	4639      	mov	r1, r7
 8011b1c:	f7ef f806 	bl	8000b2c <__aeabi_dcmplt>
 8011b20:	2800      	cmp	r0, #0
 8011b22:	f000 8081 	beq.w	8011c28 <_dtoa_r+0x4f8>
 8011b26:	9b01      	ldr	r3, [sp, #4]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d07d      	beq.n	8011c28 <_dtoa_r+0x4f8>
 8011b2c:	f1b9 0f00 	cmp.w	r9, #0
 8011b30:	dd3c      	ble.n	8011bac <_dtoa_r+0x47c>
 8011b32:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011b36:	9307      	str	r3, [sp, #28]
 8011b38:	2200      	movs	r2, #0
 8011b3a:	4b91      	ldr	r3, [pc, #580]	; (8011d80 <_dtoa_r+0x650>)
 8011b3c:	4630      	mov	r0, r6
 8011b3e:	4639      	mov	r1, r7
 8011b40:	f7ee fd82 	bl	8000648 <__aeabi_dmul>
 8011b44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b48:	3501      	adds	r5, #1
 8011b4a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8011b4e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011b52:	4628      	mov	r0, r5
 8011b54:	f7ee fd0e 	bl	8000574 <__aeabi_i2d>
 8011b58:	4632      	mov	r2, r6
 8011b5a:	463b      	mov	r3, r7
 8011b5c:	f7ee fd74 	bl	8000648 <__aeabi_dmul>
 8011b60:	4b88      	ldr	r3, [pc, #544]	; (8011d84 <_dtoa_r+0x654>)
 8011b62:	2200      	movs	r2, #0
 8011b64:	f7ee fbba 	bl	80002dc <__adddf3>
 8011b68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8011b6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b70:	9303      	str	r3, [sp, #12]
 8011b72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d15c      	bne.n	8011c32 <_dtoa_r+0x502>
 8011b78:	4b83      	ldr	r3, [pc, #524]	; (8011d88 <_dtoa_r+0x658>)
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	4630      	mov	r0, r6
 8011b7e:	4639      	mov	r1, r7
 8011b80:	f7ee fbaa 	bl	80002d8 <__aeabi_dsub>
 8011b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011b88:	4606      	mov	r6, r0
 8011b8a:	460f      	mov	r7, r1
 8011b8c:	f7ee ffec 	bl	8000b68 <__aeabi_dcmpgt>
 8011b90:	2800      	cmp	r0, #0
 8011b92:	f040 8296 	bne.w	80120c2 <_dtoa_r+0x992>
 8011b96:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011b9a:	4630      	mov	r0, r6
 8011b9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ba0:	4639      	mov	r1, r7
 8011ba2:	f7ee ffc3 	bl	8000b2c <__aeabi_dcmplt>
 8011ba6:	2800      	cmp	r0, #0
 8011ba8:	f040 8288 	bne.w	80120bc <_dtoa_r+0x98c>
 8011bac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011bb0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011bb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	f2c0 8158 	blt.w	8011e6c <_dtoa_r+0x73c>
 8011bbc:	f1ba 0f0e 	cmp.w	sl, #14
 8011bc0:	f300 8154 	bgt.w	8011e6c <_dtoa_r+0x73c>
 8011bc4:	4b6b      	ldr	r3, [pc, #428]	; (8011d74 <_dtoa_r+0x644>)
 8011bc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011bca:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	f280 80e3 	bge.w	8011d9c <_dtoa_r+0x66c>
 8011bd6:	9b01      	ldr	r3, [sp, #4]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	f300 80df 	bgt.w	8011d9c <_dtoa_r+0x66c>
 8011bde:	f040 826d 	bne.w	80120bc <_dtoa_r+0x98c>
 8011be2:	4b69      	ldr	r3, [pc, #420]	; (8011d88 <_dtoa_r+0x658>)
 8011be4:	2200      	movs	r2, #0
 8011be6:	4640      	mov	r0, r8
 8011be8:	4649      	mov	r1, r9
 8011bea:	f7ee fd2d 	bl	8000648 <__aeabi_dmul>
 8011bee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011bf2:	f7ee ffaf 	bl	8000b54 <__aeabi_dcmpge>
 8011bf6:	9e01      	ldr	r6, [sp, #4]
 8011bf8:	4637      	mov	r7, r6
 8011bfa:	2800      	cmp	r0, #0
 8011bfc:	f040 8243 	bne.w	8012086 <_dtoa_r+0x956>
 8011c00:	9d00      	ldr	r5, [sp, #0]
 8011c02:	2331      	movs	r3, #49	; 0x31
 8011c04:	f805 3b01 	strb.w	r3, [r5], #1
 8011c08:	f10a 0a01 	add.w	sl, sl, #1
 8011c0c:	e23f      	b.n	801208e <_dtoa_r+0x95e>
 8011c0e:	07f2      	lsls	r2, r6, #31
 8011c10:	d505      	bpl.n	8011c1e <_dtoa_r+0x4ee>
 8011c12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011c16:	f7ee fd17 	bl	8000648 <__aeabi_dmul>
 8011c1a:	3501      	adds	r5, #1
 8011c1c:	2301      	movs	r3, #1
 8011c1e:	1076      	asrs	r6, r6, #1
 8011c20:	3708      	adds	r7, #8
 8011c22:	e76c      	b.n	8011afe <_dtoa_r+0x3ce>
 8011c24:	2502      	movs	r5, #2
 8011c26:	e76f      	b.n	8011b08 <_dtoa_r+0x3d8>
 8011c28:	9b01      	ldr	r3, [sp, #4]
 8011c2a:	f8cd a01c 	str.w	sl, [sp, #28]
 8011c2e:	930c      	str	r3, [sp, #48]	; 0x30
 8011c30:	e78d      	b.n	8011b4e <_dtoa_r+0x41e>
 8011c32:	9900      	ldr	r1, [sp, #0]
 8011c34:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011c36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c38:	4b4e      	ldr	r3, [pc, #312]	; (8011d74 <_dtoa_r+0x644>)
 8011c3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011c3e:	4401      	add	r1, r0
 8011c40:	9102      	str	r1, [sp, #8]
 8011c42:	9908      	ldr	r1, [sp, #32]
 8011c44:	eeb0 8a47 	vmov.f32	s16, s14
 8011c48:	eef0 8a67 	vmov.f32	s17, s15
 8011c4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011c50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011c54:	2900      	cmp	r1, #0
 8011c56:	d045      	beq.n	8011ce4 <_dtoa_r+0x5b4>
 8011c58:	494c      	ldr	r1, [pc, #304]	; (8011d8c <_dtoa_r+0x65c>)
 8011c5a:	2000      	movs	r0, #0
 8011c5c:	f7ee fe1e 	bl	800089c <__aeabi_ddiv>
 8011c60:	ec53 2b18 	vmov	r2, r3, d8
 8011c64:	f7ee fb38 	bl	80002d8 <__aeabi_dsub>
 8011c68:	9d00      	ldr	r5, [sp, #0]
 8011c6a:	ec41 0b18 	vmov	d8, r0, r1
 8011c6e:	4639      	mov	r1, r7
 8011c70:	4630      	mov	r0, r6
 8011c72:	f7ee ff99 	bl	8000ba8 <__aeabi_d2iz>
 8011c76:	900c      	str	r0, [sp, #48]	; 0x30
 8011c78:	f7ee fc7c 	bl	8000574 <__aeabi_i2d>
 8011c7c:	4602      	mov	r2, r0
 8011c7e:	460b      	mov	r3, r1
 8011c80:	4630      	mov	r0, r6
 8011c82:	4639      	mov	r1, r7
 8011c84:	f7ee fb28 	bl	80002d8 <__aeabi_dsub>
 8011c88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c8a:	3330      	adds	r3, #48	; 0x30
 8011c8c:	f805 3b01 	strb.w	r3, [r5], #1
 8011c90:	ec53 2b18 	vmov	r2, r3, d8
 8011c94:	4606      	mov	r6, r0
 8011c96:	460f      	mov	r7, r1
 8011c98:	f7ee ff48 	bl	8000b2c <__aeabi_dcmplt>
 8011c9c:	2800      	cmp	r0, #0
 8011c9e:	d165      	bne.n	8011d6c <_dtoa_r+0x63c>
 8011ca0:	4632      	mov	r2, r6
 8011ca2:	463b      	mov	r3, r7
 8011ca4:	4935      	ldr	r1, [pc, #212]	; (8011d7c <_dtoa_r+0x64c>)
 8011ca6:	2000      	movs	r0, #0
 8011ca8:	f7ee fb16 	bl	80002d8 <__aeabi_dsub>
 8011cac:	ec53 2b18 	vmov	r2, r3, d8
 8011cb0:	f7ee ff3c 	bl	8000b2c <__aeabi_dcmplt>
 8011cb4:	2800      	cmp	r0, #0
 8011cb6:	f040 80b9 	bne.w	8011e2c <_dtoa_r+0x6fc>
 8011cba:	9b02      	ldr	r3, [sp, #8]
 8011cbc:	429d      	cmp	r5, r3
 8011cbe:	f43f af75 	beq.w	8011bac <_dtoa_r+0x47c>
 8011cc2:	4b2f      	ldr	r3, [pc, #188]	; (8011d80 <_dtoa_r+0x650>)
 8011cc4:	ec51 0b18 	vmov	r0, r1, d8
 8011cc8:	2200      	movs	r2, #0
 8011cca:	f7ee fcbd 	bl	8000648 <__aeabi_dmul>
 8011cce:	4b2c      	ldr	r3, [pc, #176]	; (8011d80 <_dtoa_r+0x650>)
 8011cd0:	ec41 0b18 	vmov	d8, r0, r1
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	4630      	mov	r0, r6
 8011cd8:	4639      	mov	r1, r7
 8011cda:	f7ee fcb5 	bl	8000648 <__aeabi_dmul>
 8011cde:	4606      	mov	r6, r0
 8011ce0:	460f      	mov	r7, r1
 8011ce2:	e7c4      	b.n	8011c6e <_dtoa_r+0x53e>
 8011ce4:	ec51 0b17 	vmov	r0, r1, d7
 8011ce8:	f7ee fcae 	bl	8000648 <__aeabi_dmul>
 8011cec:	9b02      	ldr	r3, [sp, #8]
 8011cee:	9d00      	ldr	r5, [sp, #0]
 8011cf0:	930c      	str	r3, [sp, #48]	; 0x30
 8011cf2:	ec41 0b18 	vmov	d8, r0, r1
 8011cf6:	4639      	mov	r1, r7
 8011cf8:	4630      	mov	r0, r6
 8011cfa:	f7ee ff55 	bl	8000ba8 <__aeabi_d2iz>
 8011cfe:	9011      	str	r0, [sp, #68]	; 0x44
 8011d00:	f7ee fc38 	bl	8000574 <__aeabi_i2d>
 8011d04:	4602      	mov	r2, r0
 8011d06:	460b      	mov	r3, r1
 8011d08:	4630      	mov	r0, r6
 8011d0a:	4639      	mov	r1, r7
 8011d0c:	f7ee fae4 	bl	80002d8 <__aeabi_dsub>
 8011d10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011d12:	3330      	adds	r3, #48	; 0x30
 8011d14:	f805 3b01 	strb.w	r3, [r5], #1
 8011d18:	9b02      	ldr	r3, [sp, #8]
 8011d1a:	429d      	cmp	r5, r3
 8011d1c:	4606      	mov	r6, r0
 8011d1e:	460f      	mov	r7, r1
 8011d20:	f04f 0200 	mov.w	r2, #0
 8011d24:	d134      	bne.n	8011d90 <_dtoa_r+0x660>
 8011d26:	4b19      	ldr	r3, [pc, #100]	; (8011d8c <_dtoa_r+0x65c>)
 8011d28:	ec51 0b18 	vmov	r0, r1, d8
 8011d2c:	f7ee fad6 	bl	80002dc <__adddf3>
 8011d30:	4602      	mov	r2, r0
 8011d32:	460b      	mov	r3, r1
 8011d34:	4630      	mov	r0, r6
 8011d36:	4639      	mov	r1, r7
 8011d38:	f7ee ff16 	bl	8000b68 <__aeabi_dcmpgt>
 8011d3c:	2800      	cmp	r0, #0
 8011d3e:	d175      	bne.n	8011e2c <_dtoa_r+0x6fc>
 8011d40:	ec53 2b18 	vmov	r2, r3, d8
 8011d44:	4911      	ldr	r1, [pc, #68]	; (8011d8c <_dtoa_r+0x65c>)
 8011d46:	2000      	movs	r0, #0
 8011d48:	f7ee fac6 	bl	80002d8 <__aeabi_dsub>
 8011d4c:	4602      	mov	r2, r0
 8011d4e:	460b      	mov	r3, r1
 8011d50:	4630      	mov	r0, r6
 8011d52:	4639      	mov	r1, r7
 8011d54:	f7ee feea 	bl	8000b2c <__aeabi_dcmplt>
 8011d58:	2800      	cmp	r0, #0
 8011d5a:	f43f af27 	beq.w	8011bac <_dtoa_r+0x47c>
 8011d5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011d60:	1e6b      	subs	r3, r5, #1
 8011d62:	930c      	str	r3, [sp, #48]	; 0x30
 8011d64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011d68:	2b30      	cmp	r3, #48	; 0x30
 8011d6a:	d0f8      	beq.n	8011d5e <_dtoa_r+0x62e>
 8011d6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011d70:	e04a      	b.n	8011e08 <_dtoa_r+0x6d8>
 8011d72:	bf00      	nop
 8011d74:	08015b10 	.word	0x08015b10
 8011d78:	08015ae8 	.word	0x08015ae8
 8011d7c:	3ff00000 	.word	0x3ff00000
 8011d80:	40240000 	.word	0x40240000
 8011d84:	401c0000 	.word	0x401c0000
 8011d88:	40140000 	.word	0x40140000
 8011d8c:	3fe00000 	.word	0x3fe00000
 8011d90:	4baf      	ldr	r3, [pc, #700]	; (8012050 <_dtoa_r+0x920>)
 8011d92:	f7ee fc59 	bl	8000648 <__aeabi_dmul>
 8011d96:	4606      	mov	r6, r0
 8011d98:	460f      	mov	r7, r1
 8011d9a:	e7ac      	b.n	8011cf6 <_dtoa_r+0x5c6>
 8011d9c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011da0:	9d00      	ldr	r5, [sp, #0]
 8011da2:	4642      	mov	r2, r8
 8011da4:	464b      	mov	r3, r9
 8011da6:	4630      	mov	r0, r6
 8011da8:	4639      	mov	r1, r7
 8011daa:	f7ee fd77 	bl	800089c <__aeabi_ddiv>
 8011dae:	f7ee fefb 	bl	8000ba8 <__aeabi_d2iz>
 8011db2:	9002      	str	r0, [sp, #8]
 8011db4:	f7ee fbde 	bl	8000574 <__aeabi_i2d>
 8011db8:	4642      	mov	r2, r8
 8011dba:	464b      	mov	r3, r9
 8011dbc:	f7ee fc44 	bl	8000648 <__aeabi_dmul>
 8011dc0:	4602      	mov	r2, r0
 8011dc2:	460b      	mov	r3, r1
 8011dc4:	4630      	mov	r0, r6
 8011dc6:	4639      	mov	r1, r7
 8011dc8:	f7ee fa86 	bl	80002d8 <__aeabi_dsub>
 8011dcc:	9e02      	ldr	r6, [sp, #8]
 8011dce:	9f01      	ldr	r7, [sp, #4]
 8011dd0:	3630      	adds	r6, #48	; 0x30
 8011dd2:	f805 6b01 	strb.w	r6, [r5], #1
 8011dd6:	9e00      	ldr	r6, [sp, #0]
 8011dd8:	1bae      	subs	r6, r5, r6
 8011dda:	42b7      	cmp	r7, r6
 8011ddc:	4602      	mov	r2, r0
 8011dde:	460b      	mov	r3, r1
 8011de0:	d137      	bne.n	8011e52 <_dtoa_r+0x722>
 8011de2:	f7ee fa7b 	bl	80002dc <__adddf3>
 8011de6:	4642      	mov	r2, r8
 8011de8:	464b      	mov	r3, r9
 8011dea:	4606      	mov	r6, r0
 8011dec:	460f      	mov	r7, r1
 8011dee:	f7ee febb 	bl	8000b68 <__aeabi_dcmpgt>
 8011df2:	b9c8      	cbnz	r0, 8011e28 <_dtoa_r+0x6f8>
 8011df4:	4642      	mov	r2, r8
 8011df6:	464b      	mov	r3, r9
 8011df8:	4630      	mov	r0, r6
 8011dfa:	4639      	mov	r1, r7
 8011dfc:	f7ee fe8c 	bl	8000b18 <__aeabi_dcmpeq>
 8011e00:	b110      	cbz	r0, 8011e08 <_dtoa_r+0x6d8>
 8011e02:	9b02      	ldr	r3, [sp, #8]
 8011e04:	07d9      	lsls	r1, r3, #31
 8011e06:	d40f      	bmi.n	8011e28 <_dtoa_r+0x6f8>
 8011e08:	4620      	mov	r0, r4
 8011e0a:	4659      	mov	r1, fp
 8011e0c:	f000 ff8e 	bl	8012d2c <_Bfree>
 8011e10:	2300      	movs	r3, #0
 8011e12:	702b      	strb	r3, [r5, #0]
 8011e14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e16:	f10a 0001 	add.w	r0, sl, #1
 8011e1a:	6018      	str	r0, [r3, #0]
 8011e1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	f43f acd8 	beq.w	80117d4 <_dtoa_r+0xa4>
 8011e24:	601d      	str	r5, [r3, #0]
 8011e26:	e4d5      	b.n	80117d4 <_dtoa_r+0xa4>
 8011e28:	f8cd a01c 	str.w	sl, [sp, #28]
 8011e2c:	462b      	mov	r3, r5
 8011e2e:	461d      	mov	r5, r3
 8011e30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011e34:	2a39      	cmp	r2, #57	; 0x39
 8011e36:	d108      	bne.n	8011e4a <_dtoa_r+0x71a>
 8011e38:	9a00      	ldr	r2, [sp, #0]
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d1f7      	bne.n	8011e2e <_dtoa_r+0x6fe>
 8011e3e:	9a07      	ldr	r2, [sp, #28]
 8011e40:	9900      	ldr	r1, [sp, #0]
 8011e42:	3201      	adds	r2, #1
 8011e44:	9207      	str	r2, [sp, #28]
 8011e46:	2230      	movs	r2, #48	; 0x30
 8011e48:	700a      	strb	r2, [r1, #0]
 8011e4a:	781a      	ldrb	r2, [r3, #0]
 8011e4c:	3201      	adds	r2, #1
 8011e4e:	701a      	strb	r2, [r3, #0]
 8011e50:	e78c      	b.n	8011d6c <_dtoa_r+0x63c>
 8011e52:	4b7f      	ldr	r3, [pc, #508]	; (8012050 <_dtoa_r+0x920>)
 8011e54:	2200      	movs	r2, #0
 8011e56:	f7ee fbf7 	bl	8000648 <__aeabi_dmul>
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	4606      	mov	r6, r0
 8011e60:	460f      	mov	r7, r1
 8011e62:	f7ee fe59 	bl	8000b18 <__aeabi_dcmpeq>
 8011e66:	2800      	cmp	r0, #0
 8011e68:	d09b      	beq.n	8011da2 <_dtoa_r+0x672>
 8011e6a:	e7cd      	b.n	8011e08 <_dtoa_r+0x6d8>
 8011e6c:	9a08      	ldr	r2, [sp, #32]
 8011e6e:	2a00      	cmp	r2, #0
 8011e70:	f000 80c4 	beq.w	8011ffc <_dtoa_r+0x8cc>
 8011e74:	9a05      	ldr	r2, [sp, #20]
 8011e76:	2a01      	cmp	r2, #1
 8011e78:	f300 80a8 	bgt.w	8011fcc <_dtoa_r+0x89c>
 8011e7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011e7e:	2a00      	cmp	r2, #0
 8011e80:	f000 80a0 	beq.w	8011fc4 <_dtoa_r+0x894>
 8011e84:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011e88:	9e06      	ldr	r6, [sp, #24]
 8011e8a:	4645      	mov	r5, r8
 8011e8c:	9a04      	ldr	r2, [sp, #16]
 8011e8e:	2101      	movs	r1, #1
 8011e90:	441a      	add	r2, r3
 8011e92:	4620      	mov	r0, r4
 8011e94:	4498      	add	r8, r3
 8011e96:	9204      	str	r2, [sp, #16]
 8011e98:	f001 f84e 	bl	8012f38 <__i2b>
 8011e9c:	4607      	mov	r7, r0
 8011e9e:	2d00      	cmp	r5, #0
 8011ea0:	dd0b      	ble.n	8011eba <_dtoa_r+0x78a>
 8011ea2:	9b04      	ldr	r3, [sp, #16]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	dd08      	ble.n	8011eba <_dtoa_r+0x78a>
 8011ea8:	42ab      	cmp	r3, r5
 8011eaa:	9a04      	ldr	r2, [sp, #16]
 8011eac:	bfa8      	it	ge
 8011eae:	462b      	movge	r3, r5
 8011eb0:	eba8 0803 	sub.w	r8, r8, r3
 8011eb4:	1aed      	subs	r5, r5, r3
 8011eb6:	1ad3      	subs	r3, r2, r3
 8011eb8:	9304      	str	r3, [sp, #16]
 8011eba:	9b06      	ldr	r3, [sp, #24]
 8011ebc:	b1fb      	cbz	r3, 8011efe <_dtoa_r+0x7ce>
 8011ebe:	9b08      	ldr	r3, [sp, #32]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	f000 809f 	beq.w	8012004 <_dtoa_r+0x8d4>
 8011ec6:	2e00      	cmp	r6, #0
 8011ec8:	dd11      	ble.n	8011eee <_dtoa_r+0x7be>
 8011eca:	4639      	mov	r1, r7
 8011ecc:	4632      	mov	r2, r6
 8011ece:	4620      	mov	r0, r4
 8011ed0:	f001 f8ee 	bl	80130b0 <__pow5mult>
 8011ed4:	465a      	mov	r2, fp
 8011ed6:	4601      	mov	r1, r0
 8011ed8:	4607      	mov	r7, r0
 8011eda:	4620      	mov	r0, r4
 8011edc:	f001 f842 	bl	8012f64 <__multiply>
 8011ee0:	4659      	mov	r1, fp
 8011ee2:	9007      	str	r0, [sp, #28]
 8011ee4:	4620      	mov	r0, r4
 8011ee6:	f000 ff21 	bl	8012d2c <_Bfree>
 8011eea:	9b07      	ldr	r3, [sp, #28]
 8011eec:	469b      	mov	fp, r3
 8011eee:	9b06      	ldr	r3, [sp, #24]
 8011ef0:	1b9a      	subs	r2, r3, r6
 8011ef2:	d004      	beq.n	8011efe <_dtoa_r+0x7ce>
 8011ef4:	4659      	mov	r1, fp
 8011ef6:	4620      	mov	r0, r4
 8011ef8:	f001 f8da 	bl	80130b0 <__pow5mult>
 8011efc:	4683      	mov	fp, r0
 8011efe:	2101      	movs	r1, #1
 8011f00:	4620      	mov	r0, r4
 8011f02:	f001 f819 	bl	8012f38 <__i2b>
 8011f06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	4606      	mov	r6, r0
 8011f0c:	dd7c      	ble.n	8012008 <_dtoa_r+0x8d8>
 8011f0e:	461a      	mov	r2, r3
 8011f10:	4601      	mov	r1, r0
 8011f12:	4620      	mov	r0, r4
 8011f14:	f001 f8cc 	bl	80130b0 <__pow5mult>
 8011f18:	9b05      	ldr	r3, [sp, #20]
 8011f1a:	2b01      	cmp	r3, #1
 8011f1c:	4606      	mov	r6, r0
 8011f1e:	dd76      	ble.n	801200e <_dtoa_r+0x8de>
 8011f20:	2300      	movs	r3, #0
 8011f22:	9306      	str	r3, [sp, #24]
 8011f24:	6933      	ldr	r3, [r6, #16]
 8011f26:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011f2a:	6918      	ldr	r0, [r3, #16]
 8011f2c:	f000 ffb4 	bl	8012e98 <__hi0bits>
 8011f30:	f1c0 0020 	rsb	r0, r0, #32
 8011f34:	9b04      	ldr	r3, [sp, #16]
 8011f36:	4418      	add	r0, r3
 8011f38:	f010 001f 	ands.w	r0, r0, #31
 8011f3c:	f000 8086 	beq.w	801204c <_dtoa_r+0x91c>
 8011f40:	f1c0 0320 	rsb	r3, r0, #32
 8011f44:	2b04      	cmp	r3, #4
 8011f46:	dd7f      	ble.n	8012048 <_dtoa_r+0x918>
 8011f48:	f1c0 001c 	rsb	r0, r0, #28
 8011f4c:	9b04      	ldr	r3, [sp, #16]
 8011f4e:	4403      	add	r3, r0
 8011f50:	4480      	add	r8, r0
 8011f52:	4405      	add	r5, r0
 8011f54:	9304      	str	r3, [sp, #16]
 8011f56:	f1b8 0f00 	cmp.w	r8, #0
 8011f5a:	dd05      	ble.n	8011f68 <_dtoa_r+0x838>
 8011f5c:	4659      	mov	r1, fp
 8011f5e:	4642      	mov	r2, r8
 8011f60:	4620      	mov	r0, r4
 8011f62:	f001 f8ff 	bl	8013164 <__lshift>
 8011f66:	4683      	mov	fp, r0
 8011f68:	9b04      	ldr	r3, [sp, #16]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	dd05      	ble.n	8011f7a <_dtoa_r+0x84a>
 8011f6e:	4631      	mov	r1, r6
 8011f70:	461a      	mov	r2, r3
 8011f72:	4620      	mov	r0, r4
 8011f74:	f001 f8f6 	bl	8013164 <__lshift>
 8011f78:	4606      	mov	r6, r0
 8011f7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d069      	beq.n	8012054 <_dtoa_r+0x924>
 8011f80:	4631      	mov	r1, r6
 8011f82:	4658      	mov	r0, fp
 8011f84:	f001 f95a 	bl	801323c <__mcmp>
 8011f88:	2800      	cmp	r0, #0
 8011f8a:	da63      	bge.n	8012054 <_dtoa_r+0x924>
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	4659      	mov	r1, fp
 8011f90:	220a      	movs	r2, #10
 8011f92:	4620      	mov	r0, r4
 8011f94:	f000 feec 	bl	8012d70 <__multadd>
 8011f98:	9b08      	ldr	r3, [sp, #32]
 8011f9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011f9e:	4683      	mov	fp, r0
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	f000 818f 	beq.w	80122c4 <_dtoa_r+0xb94>
 8011fa6:	4639      	mov	r1, r7
 8011fa8:	2300      	movs	r3, #0
 8011faa:	220a      	movs	r2, #10
 8011fac:	4620      	mov	r0, r4
 8011fae:	f000 fedf 	bl	8012d70 <__multadd>
 8011fb2:	f1b9 0f00 	cmp.w	r9, #0
 8011fb6:	4607      	mov	r7, r0
 8011fb8:	f300 808e 	bgt.w	80120d8 <_dtoa_r+0x9a8>
 8011fbc:	9b05      	ldr	r3, [sp, #20]
 8011fbe:	2b02      	cmp	r3, #2
 8011fc0:	dc50      	bgt.n	8012064 <_dtoa_r+0x934>
 8011fc2:	e089      	b.n	80120d8 <_dtoa_r+0x9a8>
 8011fc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011fc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011fca:	e75d      	b.n	8011e88 <_dtoa_r+0x758>
 8011fcc:	9b01      	ldr	r3, [sp, #4]
 8011fce:	1e5e      	subs	r6, r3, #1
 8011fd0:	9b06      	ldr	r3, [sp, #24]
 8011fd2:	42b3      	cmp	r3, r6
 8011fd4:	bfbf      	itttt	lt
 8011fd6:	9b06      	ldrlt	r3, [sp, #24]
 8011fd8:	9606      	strlt	r6, [sp, #24]
 8011fda:	1af2      	sublt	r2, r6, r3
 8011fdc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8011fde:	bfb6      	itet	lt
 8011fe0:	189b      	addlt	r3, r3, r2
 8011fe2:	1b9e      	subge	r6, r3, r6
 8011fe4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8011fe6:	9b01      	ldr	r3, [sp, #4]
 8011fe8:	bfb8      	it	lt
 8011fea:	2600      	movlt	r6, #0
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	bfb5      	itete	lt
 8011ff0:	eba8 0503 	sublt.w	r5, r8, r3
 8011ff4:	9b01      	ldrge	r3, [sp, #4]
 8011ff6:	2300      	movlt	r3, #0
 8011ff8:	4645      	movge	r5, r8
 8011ffa:	e747      	b.n	8011e8c <_dtoa_r+0x75c>
 8011ffc:	9e06      	ldr	r6, [sp, #24]
 8011ffe:	9f08      	ldr	r7, [sp, #32]
 8012000:	4645      	mov	r5, r8
 8012002:	e74c      	b.n	8011e9e <_dtoa_r+0x76e>
 8012004:	9a06      	ldr	r2, [sp, #24]
 8012006:	e775      	b.n	8011ef4 <_dtoa_r+0x7c4>
 8012008:	9b05      	ldr	r3, [sp, #20]
 801200a:	2b01      	cmp	r3, #1
 801200c:	dc18      	bgt.n	8012040 <_dtoa_r+0x910>
 801200e:	9b02      	ldr	r3, [sp, #8]
 8012010:	b9b3      	cbnz	r3, 8012040 <_dtoa_r+0x910>
 8012012:	9b03      	ldr	r3, [sp, #12]
 8012014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012018:	b9a3      	cbnz	r3, 8012044 <_dtoa_r+0x914>
 801201a:	9b03      	ldr	r3, [sp, #12]
 801201c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012020:	0d1b      	lsrs	r3, r3, #20
 8012022:	051b      	lsls	r3, r3, #20
 8012024:	b12b      	cbz	r3, 8012032 <_dtoa_r+0x902>
 8012026:	9b04      	ldr	r3, [sp, #16]
 8012028:	3301      	adds	r3, #1
 801202a:	9304      	str	r3, [sp, #16]
 801202c:	f108 0801 	add.w	r8, r8, #1
 8012030:	2301      	movs	r3, #1
 8012032:	9306      	str	r3, [sp, #24]
 8012034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012036:	2b00      	cmp	r3, #0
 8012038:	f47f af74 	bne.w	8011f24 <_dtoa_r+0x7f4>
 801203c:	2001      	movs	r0, #1
 801203e:	e779      	b.n	8011f34 <_dtoa_r+0x804>
 8012040:	2300      	movs	r3, #0
 8012042:	e7f6      	b.n	8012032 <_dtoa_r+0x902>
 8012044:	9b02      	ldr	r3, [sp, #8]
 8012046:	e7f4      	b.n	8012032 <_dtoa_r+0x902>
 8012048:	d085      	beq.n	8011f56 <_dtoa_r+0x826>
 801204a:	4618      	mov	r0, r3
 801204c:	301c      	adds	r0, #28
 801204e:	e77d      	b.n	8011f4c <_dtoa_r+0x81c>
 8012050:	40240000 	.word	0x40240000
 8012054:	9b01      	ldr	r3, [sp, #4]
 8012056:	2b00      	cmp	r3, #0
 8012058:	dc38      	bgt.n	80120cc <_dtoa_r+0x99c>
 801205a:	9b05      	ldr	r3, [sp, #20]
 801205c:	2b02      	cmp	r3, #2
 801205e:	dd35      	ble.n	80120cc <_dtoa_r+0x99c>
 8012060:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012064:	f1b9 0f00 	cmp.w	r9, #0
 8012068:	d10d      	bne.n	8012086 <_dtoa_r+0x956>
 801206a:	4631      	mov	r1, r6
 801206c:	464b      	mov	r3, r9
 801206e:	2205      	movs	r2, #5
 8012070:	4620      	mov	r0, r4
 8012072:	f000 fe7d 	bl	8012d70 <__multadd>
 8012076:	4601      	mov	r1, r0
 8012078:	4606      	mov	r6, r0
 801207a:	4658      	mov	r0, fp
 801207c:	f001 f8de 	bl	801323c <__mcmp>
 8012080:	2800      	cmp	r0, #0
 8012082:	f73f adbd 	bgt.w	8011c00 <_dtoa_r+0x4d0>
 8012086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012088:	9d00      	ldr	r5, [sp, #0]
 801208a:	ea6f 0a03 	mvn.w	sl, r3
 801208e:	f04f 0800 	mov.w	r8, #0
 8012092:	4631      	mov	r1, r6
 8012094:	4620      	mov	r0, r4
 8012096:	f000 fe49 	bl	8012d2c <_Bfree>
 801209a:	2f00      	cmp	r7, #0
 801209c:	f43f aeb4 	beq.w	8011e08 <_dtoa_r+0x6d8>
 80120a0:	f1b8 0f00 	cmp.w	r8, #0
 80120a4:	d005      	beq.n	80120b2 <_dtoa_r+0x982>
 80120a6:	45b8      	cmp	r8, r7
 80120a8:	d003      	beq.n	80120b2 <_dtoa_r+0x982>
 80120aa:	4641      	mov	r1, r8
 80120ac:	4620      	mov	r0, r4
 80120ae:	f000 fe3d 	bl	8012d2c <_Bfree>
 80120b2:	4639      	mov	r1, r7
 80120b4:	4620      	mov	r0, r4
 80120b6:	f000 fe39 	bl	8012d2c <_Bfree>
 80120ba:	e6a5      	b.n	8011e08 <_dtoa_r+0x6d8>
 80120bc:	2600      	movs	r6, #0
 80120be:	4637      	mov	r7, r6
 80120c0:	e7e1      	b.n	8012086 <_dtoa_r+0x956>
 80120c2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80120c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80120c8:	4637      	mov	r7, r6
 80120ca:	e599      	b.n	8011c00 <_dtoa_r+0x4d0>
 80120cc:	9b08      	ldr	r3, [sp, #32]
 80120ce:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	f000 80fd 	beq.w	80122d2 <_dtoa_r+0xba2>
 80120d8:	2d00      	cmp	r5, #0
 80120da:	dd05      	ble.n	80120e8 <_dtoa_r+0x9b8>
 80120dc:	4639      	mov	r1, r7
 80120de:	462a      	mov	r2, r5
 80120e0:	4620      	mov	r0, r4
 80120e2:	f001 f83f 	bl	8013164 <__lshift>
 80120e6:	4607      	mov	r7, r0
 80120e8:	9b06      	ldr	r3, [sp, #24]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d05c      	beq.n	80121a8 <_dtoa_r+0xa78>
 80120ee:	6879      	ldr	r1, [r7, #4]
 80120f0:	4620      	mov	r0, r4
 80120f2:	f000 fddb 	bl	8012cac <_Balloc>
 80120f6:	4605      	mov	r5, r0
 80120f8:	b928      	cbnz	r0, 8012106 <_dtoa_r+0x9d6>
 80120fa:	4b80      	ldr	r3, [pc, #512]	; (80122fc <_dtoa_r+0xbcc>)
 80120fc:	4602      	mov	r2, r0
 80120fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012102:	f7ff bb2e 	b.w	8011762 <_dtoa_r+0x32>
 8012106:	693a      	ldr	r2, [r7, #16]
 8012108:	3202      	adds	r2, #2
 801210a:	0092      	lsls	r2, r2, #2
 801210c:	f107 010c 	add.w	r1, r7, #12
 8012110:	300c      	adds	r0, #12
 8012112:	f7fd faa6 	bl	800f662 <memcpy>
 8012116:	2201      	movs	r2, #1
 8012118:	4629      	mov	r1, r5
 801211a:	4620      	mov	r0, r4
 801211c:	f001 f822 	bl	8013164 <__lshift>
 8012120:	9b00      	ldr	r3, [sp, #0]
 8012122:	3301      	adds	r3, #1
 8012124:	9301      	str	r3, [sp, #4]
 8012126:	9b00      	ldr	r3, [sp, #0]
 8012128:	444b      	add	r3, r9
 801212a:	9307      	str	r3, [sp, #28]
 801212c:	9b02      	ldr	r3, [sp, #8]
 801212e:	f003 0301 	and.w	r3, r3, #1
 8012132:	46b8      	mov	r8, r7
 8012134:	9306      	str	r3, [sp, #24]
 8012136:	4607      	mov	r7, r0
 8012138:	9b01      	ldr	r3, [sp, #4]
 801213a:	4631      	mov	r1, r6
 801213c:	3b01      	subs	r3, #1
 801213e:	4658      	mov	r0, fp
 8012140:	9302      	str	r3, [sp, #8]
 8012142:	f7ff fa69 	bl	8011618 <quorem>
 8012146:	4603      	mov	r3, r0
 8012148:	3330      	adds	r3, #48	; 0x30
 801214a:	9004      	str	r0, [sp, #16]
 801214c:	4641      	mov	r1, r8
 801214e:	4658      	mov	r0, fp
 8012150:	9308      	str	r3, [sp, #32]
 8012152:	f001 f873 	bl	801323c <__mcmp>
 8012156:	463a      	mov	r2, r7
 8012158:	4681      	mov	r9, r0
 801215a:	4631      	mov	r1, r6
 801215c:	4620      	mov	r0, r4
 801215e:	f001 f889 	bl	8013274 <__mdiff>
 8012162:	68c2      	ldr	r2, [r0, #12]
 8012164:	9b08      	ldr	r3, [sp, #32]
 8012166:	4605      	mov	r5, r0
 8012168:	bb02      	cbnz	r2, 80121ac <_dtoa_r+0xa7c>
 801216a:	4601      	mov	r1, r0
 801216c:	4658      	mov	r0, fp
 801216e:	f001 f865 	bl	801323c <__mcmp>
 8012172:	9b08      	ldr	r3, [sp, #32]
 8012174:	4602      	mov	r2, r0
 8012176:	4629      	mov	r1, r5
 8012178:	4620      	mov	r0, r4
 801217a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801217e:	f000 fdd5 	bl	8012d2c <_Bfree>
 8012182:	9b05      	ldr	r3, [sp, #20]
 8012184:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012186:	9d01      	ldr	r5, [sp, #4]
 8012188:	ea43 0102 	orr.w	r1, r3, r2
 801218c:	9b06      	ldr	r3, [sp, #24]
 801218e:	430b      	orrs	r3, r1
 8012190:	9b08      	ldr	r3, [sp, #32]
 8012192:	d10d      	bne.n	80121b0 <_dtoa_r+0xa80>
 8012194:	2b39      	cmp	r3, #57	; 0x39
 8012196:	d029      	beq.n	80121ec <_dtoa_r+0xabc>
 8012198:	f1b9 0f00 	cmp.w	r9, #0
 801219c:	dd01      	ble.n	80121a2 <_dtoa_r+0xa72>
 801219e:	9b04      	ldr	r3, [sp, #16]
 80121a0:	3331      	adds	r3, #49	; 0x31
 80121a2:	9a02      	ldr	r2, [sp, #8]
 80121a4:	7013      	strb	r3, [r2, #0]
 80121a6:	e774      	b.n	8012092 <_dtoa_r+0x962>
 80121a8:	4638      	mov	r0, r7
 80121aa:	e7b9      	b.n	8012120 <_dtoa_r+0x9f0>
 80121ac:	2201      	movs	r2, #1
 80121ae:	e7e2      	b.n	8012176 <_dtoa_r+0xa46>
 80121b0:	f1b9 0f00 	cmp.w	r9, #0
 80121b4:	db06      	blt.n	80121c4 <_dtoa_r+0xa94>
 80121b6:	9905      	ldr	r1, [sp, #20]
 80121b8:	ea41 0909 	orr.w	r9, r1, r9
 80121bc:	9906      	ldr	r1, [sp, #24]
 80121be:	ea59 0101 	orrs.w	r1, r9, r1
 80121c2:	d120      	bne.n	8012206 <_dtoa_r+0xad6>
 80121c4:	2a00      	cmp	r2, #0
 80121c6:	ddec      	ble.n	80121a2 <_dtoa_r+0xa72>
 80121c8:	4659      	mov	r1, fp
 80121ca:	2201      	movs	r2, #1
 80121cc:	4620      	mov	r0, r4
 80121ce:	9301      	str	r3, [sp, #4]
 80121d0:	f000 ffc8 	bl	8013164 <__lshift>
 80121d4:	4631      	mov	r1, r6
 80121d6:	4683      	mov	fp, r0
 80121d8:	f001 f830 	bl	801323c <__mcmp>
 80121dc:	2800      	cmp	r0, #0
 80121de:	9b01      	ldr	r3, [sp, #4]
 80121e0:	dc02      	bgt.n	80121e8 <_dtoa_r+0xab8>
 80121e2:	d1de      	bne.n	80121a2 <_dtoa_r+0xa72>
 80121e4:	07da      	lsls	r2, r3, #31
 80121e6:	d5dc      	bpl.n	80121a2 <_dtoa_r+0xa72>
 80121e8:	2b39      	cmp	r3, #57	; 0x39
 80121ea:	d1d8      	bne.n	801219e <_dtoa_r+0xa6e>
 80121ec:	9a02      	ldr	r2, [sp, #8]
 80121ee:	2339      	movs	r3, #57	; 0x39
 80121f0:	7013      	strb	r3, [r2, #0]
 80121f2:	462b      	mov	r3, r5
 80121f4:	461d      	mov	r5, r3
 80121f6:	3b01      	subs	r3, #1
 80121f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80121fc:	2a39      	cmp	r2, #57	; 0x39
 80121fe:	d050      	beq.n	80122a2 <_dtoa_r+0xb72>
 8012200:	3201      	adds	r2, #1
 8012202:	701a      	strb	r2, [r3, #0]
 8012204:	e745      	b.n	8012092 <_dtoa_r+0x962>
 8012206:	2a00      	cmp	r2, #0
 8012208:	dd03      	ble.n	8012212 <_dtoa_r+0xae2>
 801220a:	2b39      	cmp	r3, #57	; 0x39
 801220c:	d0ee      	beq.n	80121ec <_dtoa_r+0xabc>
 801220e:	3301      	adds	r3, #1
 8012210:	e7c7      	b.n	80121a2 <_dtoa_r+0xa72>
 8012212:	9a01      	ldr	r2, [sp, #4]
 8012214:	9907      	ldr	r1, [sp, #28]
 8012216:	f802 3c01 	strb.w	r3, [r2, #-1]
 801221a:	428a      	cmp	r2, r1
 801221c:	d02a      	beq.n	8012274 <_dtoa_r+0xb44>
 801221e:	4659      	mov	r1, fp
 8012220:	2300      	movs	r3, #0
 8012222:	220a      	movs	r2, #10
 8012224:	4620      	mov	r0, r4
 8012226:	f000 fda3 	bl	8012d70 <__multadd>
 801222a:	45b8      	cmp	r8, r7
 801222c:	4683      	mov	fp, r0
 801222e:	f04f 0300 	mov.w	r3, #0
 8012232:	f04f 020a 	mov.w	r2, #10
 8012236:	4641      	mov	r1, r8
 8012238:	4620      	mov	r0, r4
 801223a:	d107      	bne.n	801224c <_dtoa_r+0xb1c>
 801223c:	f000 fd98 	bl	8012d70 <__multadd>
 8012240:	4680      	mov	r8, r0
 8012242:	4607      	mov	r7, r0
 8012244:	9b01      	ldr	r3, [sp, #4]
 8012246:	3301      	adds	r3, #1
 8012248:	9301      	str	r3, [sp, #4]
 801224a:	e775      	b.n	8012138 <_dtoa_r+0xa08>
 801224c:	f000 fd90 	bl	8012d70 <__multadd>
 8012250:	4639      	mov	r1, r7
 8012252:	4680      	mov	r8, r0
 8012254:	2300      	movs	r3, #0
 8012256:	220a      	movs	r2, #10
 8012258:	4620      	mov	r0, r4
 801225a:	f000 fd89 	bl	8012d70 <__multadd>
 801225e:	4607      	mov	r7, r0
 8012260:	e7f0      	b.n	8012244 <_dtoa_r+0xb14>
 8012262:	f1b9 0f00 	cmp.w	r9, #0
 8012266:	9a00      	ldr	r2, [sp, #0]
 8012268:	bfcc      	ite	gt
 801226a:	464d      	movgt	r5, r9
 801226c:	2501      	movle	r5, #1
 801226e:	4415      	add	r5, r2
 8012270:	f04f 0800 	mov.w	r8, #0
 8012274:	4659      	mov	r1, fp
 8012276:	2201      	movs	r2, #1
 8012278:	4620      	mov	r0, r4
 801227a:	9301      	str	r3, [sp, #4]
 801227c:	f000 ff72 	bl	8013164 <__lshift>
 8012280:	4631      	mov	r1, r6
 8012282:	4683      	mov	fp, r0
 8012284:	f000 ffda 	bl	801323c <__mcmp>
 8012288:	2800      	cmp	r0, #0
 801228a:	dcb2      	bgt.n	80121f2 <_dtoa_r+0xac2>
 801228c:	d102      	bne.n	8012294 <_dtoa_r+0xb64>
 801228e:	9b01      	ldr	r3, [sp, #4]
 8012290:	07db      	lsls	r3, r3, #31
 8012292:	d4ae      	bmi.n	80121f2 <_dtoa_r+0xac2>
 8012294:	462b      	mov	r3, r5
 8012296:	461d      	mov	r5, r3
 8012298:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801229c:	2a30      	cmp	r2, #48	; 0x30
 801229e:	d0fa      	beq.n	8012296 <_dtoa_r+0xb66>
 80122a0:	e6f7      	b.n	8012092 <_dtoa_r+0x962>
 80122a2:	9a00      	ldr	r2, [sp, #0]
 80122a4:	429a      	cmp	r2, r3
 80122a6:	d1a5      	bne.n	80121f4 <_dtoa_r+0xac4>
 80122a8:	f10a 0a01 	add.w	sl, sl, #1
 80122ac:	2331      	movs	r3, #49	; 0x31
 80122ae:	e779      	b.n	80121a4 <_dtoa_r+0xa74>
 80122b0:	4b13      	ldr	r3, [pc, #76]	; (8012300 <_dtoa_r+0xbd0>)
 80122b2:	f7ff baaf 	b.w	8011814 <_dtoa_r+0xe4>
 80122b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	f47f aa86 	bne.w	80117ca <_dtoa_r+0x9a>
 80122be:	4b11      	ldr	r3, [pc, #68]	; (8012304 <_dtoa_r+0xbd4>)
 80122c0:	f7ff baa8 	b.w	8011814 <_dtoa_r+0xe4>
 80122c4:	f1b9 0f00 	cmp.w	r9, #0
 80122c8:	dc03      	bgt.n	80122d2 <_dtoa_r+0xba2>
 80122ca:	9b05      	ldr	r3, [sp, #20]
 80122cc:	2b02      	cmp	r3, #2
 80122ce:	f73f aec9 	bgt.w	8012064 <_dtoa_r+0x934>
 80122d2:	9d00      	ldr	r5, [sp, #0]
 80122d4:	4631      	mov	r1, r6
 80122d6:	4658      	mov	r0, fp
 80122d8:	f7ff f99e 	bl	8011618 <quorem>
 80122dc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80122e0:	f805 3b01 	strb.w	r3, [r5], #1
 80122e4:	9a00      	ldr	r2, [sp, #0]
 80122e6:	1aaa      	subs	r2, r5, r2
 80122e8:	4591      	cmp	r9, r2
 80122ea:	ddba      	ble.n	8012262 <_dtoa_r+0xb32>
 80122ec:	4659      	mov	r1, fp
 80122ee:	2300      	movs	r3, #0
 80122f0:	220a      	movs	r2, #10
 80122f2:	4620      	mov	r0, r4
 80122f4:	f000 fd3c 	bl	8012d70 <__multadd>
 80122f8:	4683      	mov	fp, r0
 80122fa:	e7eb      	b.n	80122d4 <_dtoa_r+0xba4>
 80122fc:	080159f4 	.word	0x080159f4
 8012300:	080157f4 	.word	0x080157f4
 8012304:	08015971 	.word	0x08015971

08012308 <__sflush_r>:
 8012308:	898a      	ldrh	r2, [r1, #12]
 801230a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801230e:	4605      	mov	r5, r0
 8012310:	0710      	lsls	r0, r2, #28
 8012312:	460c      	mov	r4, r1
 8012314:	d458      	bmi.n	80123c8 <__sflush_r+0xc0>
 8012316:	684b      	ldr	r3, [r1, #4]
 8012318:	2b00      	cmp	r3, #0
 801231a:	dc05      	bgt.n	8012328 <__sflush_r+0x20>
 801231c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801231e:	2b00      	cmp	r3, #0
 8012320:	dc02      	bgt.n	8012328 <__sflush_r+0x20>
 8012322:	2000      	movs	r0, #0
 8012324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012328:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801232a:	2e00      	cmp	r6, #0
 801232c:	d0f9      	beq.n	8012322 <__sflush_r+0x1a>
 801232e:	2300      	movs	r3, #0
 8012330:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012334:	682f      	ldr	r7, [r5, #0]
 8012336:	602b      	str	r3, [r5, #0]
 8012338:	d032      	beq.n	80123a0 <__sflush_r+0x98>
 801233a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801233c:	89a3      	ldrh	r3, [r4, #12]
 801233e:	075a      	lsls	r2, r3, #29
 8012340:	d505      	bpl.n	801234e <__sflush_r+0x46>
 8012342:	6863      	ldr	r3, [r4, #4]
 8012344:	1ac0      	subs	r0, r0, r3
 8012346:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012348:	b10b      	cbz	r3, 801234e <__sflush_r+0x46>
 801234a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801234c:	1ac0      	subs	r0, r0, r3
 801234e:	2300      	movs	r3, #0
 8012350:	4602      	mov	r2, r0
 8012352:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012354:	6a21      	ldr	r1, [r4, #32]
 8012356:	4628      	mov	r0, r5
 8012358:	47b0      	blx	r6
 801235a:	1c43      	adds	r3, r0, #1
 801235c:	89a3      	ldrh	r3, [r4, #12]
 801235e:	d106      	bne.n	801236e <__sflush_r+0x66>
 8012360:	6829      	ldr	r1, [r5, #0]
 8012362:	291d      	cmp	r1, #29
 8012364:	d82c      	bhi.n	80123c0 <__sflush_r+0xb8>
 8012366:	4a2a      	ldr	r2, [pc, #168]	; (8012410 <__sflush_r+0x108>)
 8012368:	40ca      	lsrs	r2, r1
 801236a:	07d6      	lsls	r6, r2, #31
 801236c:	d528      	bpl.n	80123c0 <__sflush_r+0xb8>
 801236e:	2200      	movs	r2, #0
 8012370:	6062      	str	r2, [r4, #4]
 8012372:	04d9      	lsls	r1, r3, #19
 8012374:	6922      	ldr	r2, [r4, #16]
 8012376:	6022      	str	r2, [r4, #0]
 8012378:	d504      	bpl.n	8012384 <__sflush_r+0x7c>
 801237a:	1c42      	adds	r2, r0, #1
 801237c:	d101      	bne.n	8012382 <__sflush_r+0x7a>
 801237e:	682b      	ldr	r3, [r5, #0]
 8012380:	b903      	cbnz	r3, 8012384 <__sflush_r+0x7c>
 8012382:	6560      	str	r0, [r4, #84]	; 0x54
 8012384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012386:	602f      	str	r7, [r5, #0]
 8012388:	2900      	cmp	r1, #0
 801238a:	d0ca      	beq.n	8012322 <__sflush_r+0x1a>
 801238c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012390:	4299      	cmp	r1, r3
 8012392:	d002      	beq.n	801239a <__sflush_r+0x92>
 8012394:	4628      	mov	r0, r5
 8012396:	f001 f953 	bl	8013640 <_free_r>
 801239a:	2000      	movs	r0, #0
 801239c:	6360      	str	r0, [r4, #52]	; 0x34
 801239e:	e7c1      	b.n	8012324 <__sflush_r+0x1c>
 80123a0:	6a21      	ldr	r1, [r4, #32]
 80123a2:	2301      	movs	r3, #1
 80123a4:	4628      	mov	r0, r5
 80123a6:	47b0      	blx	r6
 80123a8:	1c41      	adds	r1, r0, #1
 80123aa:	d1c7      	bne.n	801233c <__sflush_r+0x34>
 80123ac:	682b      	ldr	r3, [r5, #0]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d0c4      	beq.n	801233c <__sflush_r+0x34>
 80123b2:	2b1d      	cmp	r3, #29
 80123b4:	d001      	beq.n	80123ba <__sflush_r+0xb2>
 80123b6:	2b16      	cmp	r3, #22
 80123b8:	d101      	bne.n	80123be <__sflush_r+0xb6>
 80123ba:	602f      	str	r7, [r5, #0]
 80123bc:	e7b1      	b.n	8012322 <__sflush_r+0x1a>
 80123be:	89a3      	ldrh	r3, [r4, #12]
 80123c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123c4:	81a3      	strh	r3, [r4, #12]
 80123c6:	e7ad      	b.n	8012324 <__sflush_r+0x1c>
 80123c8:	690f      	ldr	r7, [r1, #16]
 80123ca:	2f00      	cmp	r7, #0
 80123cc:	d0a9      	beq.n	8012322 <__sflush_r+0x1a>
 80123ce:	0793      	lsls	r3, r2, #30
 80123d0:	680e      	ldr	r6, [r1, #0]
 80123d2:	bf08      	it	eq
 80123d4:	694b      	ldreq	r3, [r1, #20]
 80123d6:	600f      	str	r7, [r1, #0]
 80123d8:	bf18      	it	ne
 80123da:	2300      	movne	r3, #0
 80123dc:	eba6 0807 	sub.w	r8, r6, r7
 80123e0:	608b      	str	r3, [r1, #8]
 80123e2:	f1b8 0f00 	cmp.w	r8, #0
 80123e6:	dd9c      	ble.n	8012322 <__sflush_r+0x1a>
 80123e8:	6a21      	ldr	r1, [r4, #32]
 80123ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80123ec:	4643      	mov	r3, r8
 80123ee:	463a      	mov	r2, r7
 80123f0:	4628      	mov	r0, r5
 80123f2:	47b0      	blx	r6
 80123f4:	2800      	cmp	r0, #0
 80123f6:	dc06      	bgt.n	8012406 <__sflush_r+0xfe>
 80123f8:	89a3      	ldrh	r3, [r4, #12]
 80123fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123fe:	81a3      	strh	r3, [r4, #12]
 8012400:	f04f 30ff 	mov.w	r0, #4294967295
 8012404:	e78e      	b.n	8012324 <__sflush_r+0x1c>
 8012406:	4407      	add	r7, r0
 8012408:	eba8 0800 	sub.w	r8, r8, r0
 801240c:	e7e9      	b.n	80123e2 <__sflush_r+0xda>
 801240e:	bf00      	nop
 8012410:	20400001 	.word	0x20400001

08012414 <_fflush_r>:
 8012414:	b538      	push	{r3, r4, r5, lr}
 8012416:	690b      	ldr	r3, [r1, #16]
 8012418:	4605      	mov	r5, r0
 801241a:	460c      	mov	r4, r1
 801241c:	b913      	cbnz	r3, 8012424 <_fflush_r+0x10>
 801241e:	2500      	movs	r5, #0
 8012420:	4628      	mov	r0, r5
 8012422:	bd38      	pop	{r3, r4, r5, pc}
 8012424:	b118      	cbz	r0, 801242e <_fflush_r+0x1a>
 8012426:	6983      	ldr	r3, [r0, #24]
 8012428:	b90b      	cbnz	r3, 801242e <_fflush_r+0x1a>
 801242a:	f7fd f855 	bl	800f4d8 <__sinit>
 801242e:	4b14      	ldr	r3, [pc, #80]	; (8012480 <_fflush_r+0x6c>)
 8012430:	429c      	cmp	r4, r3
 8012432:	d11b      	bne.n	801246c <_fflush_r+0x58>
 8012434:	686c      	ldr	r4, [r5, #4]
 8012436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d0ef      	beq.n	801241e <_fflush_r+0xa>
 801243e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012440:	07d0      	lsls	r0, r2, #31
 8012442:	d404      	bmi.n	801244e <_fflush_r+0x3a>
 8012444:	0599      	lsls	r1, r3, #22
 8012446:	d402      	bmi.n	801244e <_fflush_r+0x3a>
 8012448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801244a:	f7fd f908 	bl	800f65e <__retarget_lock_acquire_recursive>
 801244e:	4628      	mov	r0, r5
 8012450:	4621      	mov	r1, r4
 8012452:	f7ff ff59 	bl	8012308 <__sflush_r>
 8012456:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012458:	07da      	lsls	r2, r3, #31
 801245a:	4605      	mov	r5, r0
 801245c:	d4e0      	bmi.n	8012420 <_fflush_r+0xc>
 801245e:	89a3      	ldrh	r3, [r4, #12]
 8012460:	059b      	lsls	r3, r3, #22
 8012462:	d4dd      	bmi.n	8012420 <_fflush_r+0xc>
 8012464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012466:	f7fd f8fb 	bl	800f660 <__retarget_lock_release_recursive>
 801246a:	e7d9      	b.n	8012420 <_fflush_r+0xc>
 801246c:	4b05      	ldr	r3, [pc, #20]	; (8012484 <_fflush_r+0x70>)
 801246e:	429c      	cmp	r4, r3
 8012470:	d101      	bne.n	8012476 <_fflush_r+0x62>
 8012472:	68ac      	ldr	r4, [r5, #8]
 8012474:	e7df      	b.n	8012436 <_fflush_r+0x22>
 8012476:	4b04      	ldr	r3, [pc, #16]	; (8012488 <_fflush_r+0x74>)
 8012478:	429c      	cmp	r4, r3
 801247a:	bf08      	it	eq
 801247c:	68ec      	ldreq	r4, [r5, #12]
 801247e:	e7da      	b.n	8012436 <_fflush_r+0x22>
 8012480:	080157a0 	.word	0x080157a0
 8012484:	080157c0 	.word	0x080157c0
 8012488:	08015780 	.word	0x08015780

0801248c <rshift>:
 801248c:	6903      	ldr	r3, [r0, #16]
 801248e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012492:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012496:	ea4f 1261 	mov.w	r2, r1, asr #5
 801249a:	f100 0414 	add.w	r4, r0, #20
 801249e:	dd45      	ble.n	801252c <rshift+0xa0>
 80124a0:	f011 011f 	ands.w	r1, r1, #31
 80124a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80124a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80124ac:	d10c      	bne.n	80124c8 <rshift+0x3c>
 80124ae:	f100 0710 	add.w	r7, r0, #16
 80124b2:	4629      	mov	r1, r5
 80124b4:	42b1      	cmp	r1, r6
 80124b6:	d334      	bcc.n	8012522 <rshift+0x96>
 80124b8:	1a9b      	subs	r3, r3, r2
 80124ba:	009b      	lsls	r3, r3, #2
 80124bc:	1eea      	subs	r2, r5, #3
 80124be:	4296      	cmp	r6, r2
 80124c0:	bf38      	it	cc
 80124c2:	2300      	movcc	r3, #0
 80124c4:	4423      	add	r3, r4
 80124c6:	e015      	b.n	80124f4 <rshift+0x68>
 80124c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80124cc:	f1c1 0820 	rsb	r8, r1, #32
 80124d0:	40cf      	lsrs	r7, r1
 80124d2:	f105 0e04 	add.w	lr, r5, #4
 80124d6:	46a1      	mov	r9, r4
 80124d8:	4576      	cmp	r6, lr
 80124da:	46f4      	mov	ip, lr
 80124dc:	d815      	bhi.n	801250a <rshift+0x7e>
 80124de:	1a9b      	subs	r3, r3, r2
 80124e0:	009a      	lsls	r2, r3, #2
 80124e2:	3a04      	subs	r2, #4
 80124e4:	3501      	adds	r5, #1
 80124e6:	42ae      	cmp	r6, r5
 80124e8:	bf38      	it	cc
 80124ea:	2200      	movcc	r2, #0
 80124ec:	18a3      	adds	r3, r4, r2
 80124ee:	50a7      	str	r7, [r4, r2]
 80124f0:	b107      	cbz	r7, 80124f4 <rshift+0x68>
 80124f2:	3304      	adds	r3, #4
 80124f4:	1b1a      	subs	r2, r3, r4
 80124f6:	42a3      	cmp	r3, r4
 80124f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80124fc:	bf08      	it	eq
 80124fe:	2300      	moveq	r3, #0
 8012500:	6102      	str	r2, [r0, #16]
 8012502:	bf08      	it	eq
 8012504:	6143      	streq	r3, [r0, #20]
 8012506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801250a:	f8dc c000 	ldr.w	ip, [ip]
 801250e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012512:	ea4c 0707 	orr.w	r7, ip, r7
 8012516:	f849 7b04 	str.w	r7, [r9], #4
 801251a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801251e:	40cf      	lsrs	r7, r1
 8012520:	e7da      	b.n	80124d8 <rshift+0x4c>
 8012522:	f851 cb04 	ldr.w	ip, [r1], #4
 8012526:	f847 cf04 	str.w	ip, [r7, #4]!
 801252a:	e7c3      	b.n	80124b4 <rshift+0x28>
 801252c:	4623      	mov	r3, r4
 801252e:	e7e1      	b.n	80124f4 <rshift+0x68>

08012530 <__hexdig_fun>:
 8012530:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012534:	2b09      	cmp	r3, #9
 8012536:	d802      	bhi.n	801253e <__hexdig_fun+0xe>
 8012538:	3820      	subs	r0, #32
 801253a:	b2c0      	uxtb	r0, r0
 801253c:	4770      	bx	lr
 801253e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012542:	2b05      	cmp	r3, #5
 8012544:	d801      	bhi.n	801254a <__hexdig_fun+0x1a>
 8012546:	3847      	subs	r0, #71	; 0x47
 8012548:	e7f7      	b.n	801253a <__hexdig_fun+0xa>
 801254a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801254e:	2b05      	cmp	r3, #5
 8012550:	d801      	bhi.n	8012556 <__hexdig_fun+0x26>
 8012552:	3827      	subs	r0, #39	; 0x27
 8012554:	e7f1      	b.n	801253a <__hexdig_fun+0xa>
 8012556:	2000      	movs	r0, #0
 8012558:	4770      	bx	lr
	...

0801255c <__gethex>:
 801255c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012560:	ed2d 8b02 	vpush	{d8}
 8012564:	b089      	sub	sp, #36	; 0x24
 8012566:	ee08 0a10 	vmov	s16, r0
 801256a:	9304      	str	r3, [sp, #16]
 801256c:	4bbc      	ldr	r3, [pc, #752]	; (8012860 <__gethex+0x304>)
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	9301      	str	r3, [sp, #4]
 8012572:	4618      	mov	r0, r3
 8012574:	468b      	mov	fp, r1
 8012576:	4690      	mov	r8, r2
 8012578:	f7ed fe52 	bl	8000220 <strlen>
 801257c:	9b01      	ldr	r3, [sp, #4]
 801257e:	f8db 2000 	ldr.w	r2, [fp]
 8012582:	4403      	add	r3, r0
 8012584:	4682      	mov	sl, r0
 8012586:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801258a:	9305      	str	r3, [sp, #20]
 801258c:	1c93      	adds	r3, r2, #2
 801258e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012592:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012596:	32fe      	adds	r2, #254	; 0xfe
 8012598:	18d1      	adds	r1, r2, r3
 801259a:	461f      	mov	r7, r3
 801259c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80125a0:	9100      	str	r1, [sp, #0]
 80125a2:	2830      	cmp	r0, #48	; 0x30
 80125a4:	d0f8      	beq.n	8012598 <__gethex+0x3c>
 80125a6:	f7ff ffc3 	bl	8012530 <__hexdig_fun>
 80125aa:	4604      	mov	r4, r0
 80125ac:	2800      	cmp	r0, #0
 80125ae:	d13a      	bne.n	8012626 <__gethex+0xca>
 80125b0:	9901      	ldr	r1, [sp, #4]
 80125b2:	4652      	mov	r2, sl
 80125b4:	4638      	mov	r0, r7
 80125b6:	f001 fa0b 	bl	80139d0 <strncmp>
 80125ba:	4605      	mov	r5, r0
 80125bc:	2800      	cmp	r0, #0
 80125be:	d168      	bne.n	8012692 <__gethex+0x136>
 80125c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80125c4:	eb07 060a 	add.w	r6, r7, sl
 80125c8:	f7ff ffb2 	bl	8012530 <__hexdig_fun>
 80125cc:	2800      	cmp	r0, #0
 80125ce:	d062      	beq.n	8012696 <__gethex+0x13a>
 80125d0:	4633      	mov	r3, r6
 80125d2:	7818      	ldrb	r0, [r3, #0]
 80125d4:	2830      	cmp	r0, #48	; 0x30
 80125d6:	461f      	mov	r7, r3
 80125d8:	f103 0301 	add.w	r3, r3, #1
 80125dc:	d0f9      	beq.n	80125d2 <__gethex+0x76>
 80125de:	f7ff ffa7 	bl	8012530 <__hexdig_fun>
 80125e2:	2301      	movs	r3, #1
 80125e4:	fab0 f480 	clz	r4, r0
 80125e8:	0964      	lsrs	r4, r4, #5
 80125ea:	4635      	mov	r5, r6
 80125ec:	9300      	str	r3, [sp, #0]
 80125ee:	463a      	mov	r2, r7
 80125f0:	4616      	mov	r6, r2
 80125f2:	3201      	adds	r2, #1
 80125f4:	7830      	ldrb	r0, [r6, #0]
 80125f6:	f7ff ff9b 	bl	8012530 <__hexdig_fun>
 80125fa:	2800      	cmp	r0, #0
 80125fc:	d1f8      	bne.n	80125f0 <__gethex+0x94>
 80125fe:	9901      	ldr	r1, [sp, #4]
 8012600:	4652      	mov	r2, sl
 8012602:	4630      	mov	r0, r6
 8012604:	f001 f9e4 	bl	80139d0 <strncmp>
 8012608:	b980      	cbnz	r0, 801262c <__gethex+0xd0>
 801260a:	b94d      	cbnz	r5, 8012620 <__gethex+0xc4>
 801260c:	eb06 050a 	add.w	r5, r6, sl
 8012610:	462a      	mov	r2, r5
 8012612:	4616      	mov	r6, r2
 8012614:	3201      	adds	r2, #1
 8012616:	7830      	ldrb	r0, [r6, #0]
 8012618:	f7ff ff8a 	bl	8012530 <__hexdig_fun>
 801261c:	2800      	cmp	r0, #0
 801261e:	d1f8      	bne.n	8012612 <__gethex+0xb6>
 8012620:	1bad      	subs	r5, r5, r6
 8012622:	00ad      	lsls	r5, r5, #2
 8012624:	e004      	b.n	8012630 <__gethex+0xd4>
 8012626:	2400      	movs	r4, #0
 8012628:	4625      	mov	r5, r4
 801262a:	e7e0      	b.n	80125ee <__gethex+0x92>
 801262c:	2d00      	cmp	r5, #0
 801262e:	d1f7      	bne.n	8012620 <__gethex+0xc4>
 8012630:	7833      	ldrb	r3, [r6, #0]
 8012632:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012636:	2b50      	cmp	r3, #80	; 0x50
 8012638:	d13b      	bne.n	80126b2 <__gethex+0x156>
 801263a:	7873      	ldrb	r3, [r6, #1]
 801263c:	2b2b      	cmp	r3, #43	; 0x2b
 801263e:	d02c      	beq.n	801269a <__gethex+0x13e>
 8012640:	2b2d      	cmp	r3, #45	; 0x2d
 8012642:	d02e      	beq.n	80126a2 <__gethex+0x146>
 8012644:	1c71      	adds	r1, r6, #1
 8012646:	f04f 0900 	mov.w	r9, #0
 801264a:	7808      	ldrb	r0, [r1, #0]
 801264c:	f7ff ff70 	bl	8012530 <__hexdig_fun>
 8012650:	1e43      	subs	r3, r0, #1
 8012652:	b2db      	uxtb	r3, r3
 8012654:	2b18      	cmp	r3, #24
 8012656:	d82c      	bhi.n	80126b2 <__gethex+0x156>
 8012658:	f1a0 0210 	sub.w	r2, r0, #16
 801265c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012660:	f7ff ff66 	bl	8012530 <__hexdig_fun>
 8012664:	1e43      	subs	r3, r0, #1
 8012666:	b2db      	uxtb	r3, r3
 8012668:	2b18      	cmp	r3, #24
 801266a:	d91d      	bls.n	80126a8 <__gethex+0x14c>
 801266c:	f1b9 0f00 	cmp.w	r9, #0
 8012670:	d000      	beq.n	8012674 <__gethex+0x118>
 8012672:	4252      	negs	r2, r2
 8012674:	4415      	add	r5, r2
 8012676:	f8cb 1000 	str.w	r1, [fp]
 801267a:	b1e4      	cbz	r4, 80126b6 <__gethex+0x15a>
 801267c:	9b00      	ldr	r3, [sp, #0]
 801267e:	2b00      	cmp	r3, #0
 8012680:	bf14      	ite	ne
 8012682:	2700      	movne	r7, #0
 8012684:	2706      	moveq	r7, #6
 8012686:	4638      	mov	r0, r7
 8012688:	b009      	add	sp, #36	; 0x24
 801268a:	ecbd 8b02 	vpop	{d8}
 801268e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012692:	463e      	mov	r6, r7
 8012694:	4625      	mov	r5, r4
 8012696:	2401      	movs	r4, #1
 8012698:	e7ca      	b.n	8012630 <__gethex+0xd4>
 801269a:	f04f 0900 	mov.w	r9, #0
 801269e:	1cb1      	adds	r1, r6, #2
 80126a0:	e7d3      	b.n	801264a <__gethex+0xee>
 80126a2:	f04f 0901 	mov.w	r9, #1
 80126a6:	e7fa      	b.n	801269e <__gethex+0x142>
 80126a8:	230a      	movs	r3, #10
 80126aa:	fb03 0202 	mla	r2, r3, r2, r0
 80126ae:	3a10      	subs	r2, #16
 80126b0:	e7d4      	b.n	801265c <__gethex+0x100>
 80126b2:	4631      	mov	r1, r6
 80126b4:	e7df      	b.n	8012676 <__gethex+0x11a>
 80126b6:	1bf3      	subs	r3, r6, r7
 80126b8:	3b01      	subs	r3, #1
 80126ba:	4621      	mov	r1, r4
 80126bc:	2b07      	cmp	r3, #7
 80126be:	dc0b      	bgt.n	80126d8 <__gethex+0x17c>
 80126c0:	ee18 0a10 	vmov	r0, s16
 80126c4:	f000 faf2 	bl	8012cac <_Balloc>
 80126c8:	4604      	mov	r4, r0
 80126ca:	b940      	cbnz	r0, 80126de <__gethex+0x182>
 80126cc:	4b65      	ldr	r3, [pc, #404]	; (8012864 <__gethex+0x308>)
 80126ce:	4602      	mov	r2, r0
 80126d0:	21de      	movs	r1, #222	; 0xde
 80126d2:	4865      	ldr	r0, [pc, #404]	; (8012868 <__gethex+0x30c>)
 80126d4:	f001 f99c 	bl	8013a10 <__assert_func>
 80126d8:	3101      	adds	r1, #1
 80126da:	105b      	asrs	r3, r3, #1
 80126dc:	e7ee      	b.n	80126bc <__gethex+0x160>
 80126de:	f100 0914 	add.w	r9, r0, #20
 80126e2:	f04f 0b00 	mov.w	fp, #0
 80126e6:	f1ca 0301 	rsb	r3, sl, #1
 80126ea:	f8cd 9008 	str.w	r9, [sp, #8]
 80126ee:	f8cd b000 	str.w	fp, [sp]
 80126f2:	9306      	str	r3, [sp, #24]
 80126f4:	42b7      	cmp	r7, r6
 80126f6:	d340      	bcc.n	801277a <__gethex+0x21e>
 80126f8:	9802      	ldr	r0, [sp, #8]
 80126fa:	9b00      	ldr	r3, [sp, #0]
 80126fc:	f840 3b04 	str.w	r3, [r0], #4
 8012700:	eba0 0009 	sub.w	r0, r0, r9
 8012704:	1080      	asrs	r0, r0, #2
 8012706:	0146      	lsls	r6, r0, #5
 8012708:	6120      	str	r0, [r4, #16]
 801270a:	4618      	mov	r0, r3
 801270c:	f000 fbc4 	bl	8012e98 <__hi0bits>
 8012710:	1a30      	subs	r0, r6, r0
 8012712:	f8d8 6000 	ldr.w	r6, [r8]
 8012716:	42b0      	cmp	r0, r6
 8012718:	dd63      	ble.n	80127e2 <__gethex+0x286>
 801271a:	1b87      	subs	r7, r0, r6
 801271c:	4639      	mov	r1, r7
 801271e:	4620      	mov	r0, r4
 8012720:	f000 ff5e 	bl	80135e0 <__any_on>
 8012724:	4682      	mov	sl, r0
 8012726:	b1a8      	cbz	r0, 8012754 <__gethex+0x1f8>
 8012728:	1e7b      	subs	r3, r7, #1
 801272a:	1159      	asrs	r1, r3, #5
 801272c:	f003 021f 	and.w	r2, r3, #31
 8012730:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012734:	f04f 0a01 	mov.w	sl, #1
 8012738:	fa0a f202 	lsl.w	r2, sl, r2
 801273c:	420a      	tst	r2, r1
 801273e:	d009      	beq.n	8012754 <__gethex+0x1f8>
 8012740:	4553      	cmp	r3, sl
 8012742:	dd05      	ble.n	8012750 <__gethex+0x1f4>
 8012744:	1eb9      	subs	r1, r7, #2
 8012746:	4620      	mov	r0, r4
 8012748:	f000 ff4a 	bl	80135e0 <__any_on>
 801274c:	2800      	cmp	r0, #0
 801274e:	d145      	bne.n	80127dc <__gethex+0x280>
 8012750:	f04f 0a02 	mov.w	sl, #2
 8012754:	4639      	mov	r1, r7
 8012756:	4620      	mov	r0, r4
 8012758:	f7ff fe98 	bl	801248c <rshift>
 801275c:	443d      	add	r5, r7
 801275e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012762:	42ab      	cmp	r3, r5
 8012764:	da4c      	bge.n	8012800 <__gethex+0x2a4>
 8012766:	ee18 0a10 	vmov	r0, s16
 801276a:	4621      	mov	r1, r4
 801276c:	f000 fade 	bl	8012d2c <_Bfree>
 8012770:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012772:	2300      	movs	r3, #0
 8012774:	6013      	str	r3, [r2, #0]
 8012776:	27a3      	movs	r7, #163	; 0xa3
 8012778:	e785      	b.n	8012686 <__gethex+0x12a>
 801277a:	1e73      	subs	r3, r6, #1
 801277c:	9a05      	ldr	r2, [sp, #20]
 801277e:	9303      	str	r3, [sp, #12]
 8012780:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012784:	4293      	cmp	r3, r2
 8012786:	d019      	beq.n	80127bc <__gethex+0x260>
 8012788:	f1bb 0f20 	cmp.w	fp, #32
 801278c:	d107      	bne.n	801279e <__gethex+0x242>
 801278e:	9b02      	ldr	r3, [sp, #8]
 8012790:	9a00      	ldr	r2, [sp, #0]
 8012792:	f843 2b04 	str.w	r2, [r3], #4
 8012796:	9302      	str	r3, [sp, #8]
 8012798:	2300      	movs	r3, #0
 801279a:	9300      	str	r3, [sp, #0]
 801279c:	469b      	mov	fp, r3
 801279e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80127a2:	f7ff fec5 	bl	8012530 <__hexdig_fun>
 80127a6:	9b00      	ldr	r3, [sp, #0]
 80127a8:	f000 000f 	and.w	r0, r0, #15
 80127ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80127b0:	4303      	orrs	r3, r0
 80127b2:	9300      	str	r3, [sp, #0]
 80127b4:	f10b 0b04 	add.w	fp, fp, #4
 80127b8:	9b03      	ldr	r3, [sp, #12]
 80127ba:	e00d      	b.n	80127d8 <__gethex+0x27c>
 80127bc:	9b03      	ldr	r3, [sp, #12]
 80127be:	9a06      	ldr	r2, [sp, #24]
 80127c0:	4413      	add	r3, r2
 80127c2:	42bb      	cmp	r3, r7
 80127c4:	d3e0      	bcc.n	8012788 <__gethex+0x22c>
 80127c6:	4618      	mov	r0, r3
 80127c8:	9901      	ldr	r1, [sp, #4]
 80127ca:	9307      	str	r3, [sp, #28]
 80127cc:	4652      	mov	r2, sl
 80127ce:	f001 f8ff 	bl	80139d0 <strncmp>
 80127d2:	9b07      	ldr	r3, [sp, #28]
 80127d4:	2800      	cmp	r0, #0
 80127d6:	d1d7      	bne.n	8012788 <__gethex+0x22c>
 80127d8:	461e      	mov	r6, r3
 80127da:	e78b      	b.n	80126f4 <__gethex+0x198>
 80127dc:	f04f 0a03 	mov.w	sl, #3
 80127e0:	e7b8      	b.n	8012754 <__gethex+0x1f8>
 80127e2:	da0a      	bge.n	80127fa <__gethex+0x29e>
 80127e4:	1a37      	subs	r7, r6, r0
 80127e6:	4621      	mov	r1, r4
 80127e8:	ee18 0a10 	vmov	r0, s16
 80127ec:	463a      	mov	r2, r7
 80127ee:	f000 fcb9 	bl	8013164 <__lshift>
 80127f2:	1bed      	subs	r5, r5, r7
 80127f4:	4604      	mov	r4, r0
 80127f6:	f100 0914 	add.w	r9, r0, #20
 80127fa:	f04f 0a00 	mov.w	sl, #0
 80127fe:	e7ae      	b.n	801275e <__gethex+0x202>
 8012800:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012804:	42a8      	cmp	r0, r5
 8012806:	dd72      	ble.n	80128ee <__gethex+0x392>
 8012808:	1b45      	subs	r5, r0, r5
 801280a:	42ae      	cmp	r6, r5
 801280c:	dc36      	bgt.n	801287c <__gethex+0x320>
 801280e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012812:	2b02      	cmp	r3, #2
 8012814:	d02a      	beq.n	801286c <__gethex+0x310>
 8012816:	2b03      	cmp	r3, #3
 8012818:	d02c      	beq.n	8012874 <__gethex+0x318>
 801281a:	2b01      	cmp	r3, #1
 801281c:	d115      	bne.n	801284a <__gethex+0x2ee>
 801281e:	42ae      	cmp	r6, r5
 8012820:	d113      	bne.n	801284a <__gethex+0x2ee>
 8012822:	2e01      	cmp	r6, #1
 8012824:	d10b      	bne.n	801283e <__gethex+0x2e2>
 8012826:	9a04      	ldr	r2, [sp, #16]
 8012828:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801282c:	6013      	str	r3, [r2, #0]
 801282e:	2301      	movs	r3, #1
 8012830:	6123      	str	r3, [r4, #16]
 8012832:	f8c9 3000 	str.w	r3, [r9]
 8012836:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012838:	2762      	movs	r7, #98	; 0x62
 801283a:	601c      	str	r4, [r3, #0]
 801283c:	e723      	b.n	8012686 <__gethex+0x12a>
 801283e:	1e71      	subs	r1, r6, #1
 8012840:	4620      	mov	r0, r4
 8012842:	f000 fecd 	bl	80135e0 <__any_on>
 8012846:	2800      	cmp	r0, #0
 8012848:	d1ed      	bne.n	8012826 <__gethex+0x2ca>
 801284a:	ee18 0a10 	vmov	r0, s16
 801284e:	4621      	mov	r1, r4
 8012850:	f000 fa6c 	bl	8012d2c <_Bfree>
 8012854:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012856:	2300      	movs	r3, #0
 8012858:	6013      	str	r3, [r2, #0]
 801285a:	2750      	movs	r7, #80	; 0x50
 801285c:	e713      	b.n	8012686 <__gethex+0x12a>
 801285e:	bf00      	nop
 8012860:	08015a70 	.word	0x08015a70
 8012864:	080159f4 	.word	0x080159f4
 8012868:	08015a05 	.word	0x08015a05
 801286c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801286e:	2b00      	cmp	r3, #0
 8012870:	d1eb      	bne.n	801284a <__gethex+0x2ee>
 8012872:	e7d8      	b.n	8012826 <__gethex+0x2ca>
 8012874:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012876:	2b00      	cmp	r3, #0
 8012878:	d1d5      	bne.n	8012826 <__gethex+0x2ca>
 801287a:	e7e6      	b.n	801284a <__gethex+0x2ee>
 801287c:	1e6f      	subs	r7, r5, #1
 801287e:	f1ba 0f00 	cmp.w	sl, #0
 8012882:	d131      	bne.n	80128e8 <__gethex+0x38c>
 8012884:	b127      	cbz	r7, 8012890 <__gethex+0x334>
 8012886:	4639      	mov	r1, r7
 8012888:	4620      	mov	r0, r4
 801288a:	f000 fea9 	bl	80135e0 <__any_on>
 801288e:	4682      	mov	sl, r0
 8012890:	117b      	asrs	r3, r7, #5
 8012892:	2101      	movs	r1, #1
 8012894:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012898:	f007 071f 	and.w	r7, r7, #31
 801289c:	fa01 f707 	lsl.w	r7, r1, r7
 80128a0:	421f      	tst	r7, r3
 80128a2:	4629      	mov	r1, r5
 80128a4:	4620      	mov	r0, r4
 80128a6:	bf18      	it	ne
 80128a8:	f04a 0a02 	orrne.w	sl, sl, #2
 80128ac:	1b76      	subs	r6, r6, r5
 80128ae:	f7ff fded 	bl	801248c <rshift>
 80128b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80128b6:	2702      	movs	r7, #2
 80128b8:	f1ba 0f00 	cmp.w	sl, #0
 80128bc:	d048      	beq.n	8012950 <__gethex+0x3f4>
 80128be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80128c2:	2b02      	cmp	r3, #2
 80128c4:	d015      	beq.n	80128f2 <__gethex+0x396>
 80128c6:	2b03      	cmp	r3, #3
 80128c8:	d017      	beq.n	80128fa <__gethex+0x39e>
 80128ca:	2b01      	cmp	r3, #1
 80128cc:	d109      	bne.n	80128e2 <__gethex+0x386>
 80128ce:	f01a 0f02 	tst.w	sl, #2
 80128d2:	d006      	beq.n	80128e2 <__gethex+0x386>
 80128d4:	f8d9 0000 	ldr.w	r0, [r9]
 80128d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80128dc:	f01a 0f01 	tst.w	sl, #1
 80128e0:	d10e      	bne.n	8012900 <__gethex+0x3a4>
 80128e2:	f047 0710 	orr.w	r7, r7, #16
 80128e6:	e033      	b.n	8012950 <__gethex+0x3f4>
 80128e8:	f04f 0a01 	mov.w	sl, #1
 80128ec:	e7d0      	b.n	8012890 <__gethex+0x334>
 80128ee:	2701      	movs	r7, #1
 80128f0:	e7e2      	b.n	80128b8 <__gethex+0x35c>
 80128f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80128f4:	f1c3 0301 	rsb	r3, r3, #1
 80128f8:	9315      	str	r3, [sp, #84]	; 0x54
 80128fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d0f0      	beq.n	80128e2 <__gethex+0x386>
 8012900:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012904:	f104 0314 	add.w	r3, r4, #20
 8012908:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801290c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012910:	f04f 0c00 	mov.w	ip, #0
 8012914:	4618      	mov	r0, r3
 8012916:	f853 2b04 	ldr.w	r2, [r3], #4
 801291a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801291e:	d01c      	beq.n	801295a <__gethex+0x3fe>
 8012920:	3201      	adds	r2, #1
 8012922:	6002      	str	r2, [r0, #0]
 8012924:	2f02      	cmp	r7, #2
 8012926:	f104 0314 	add.w	r3, r4, #20
 801292a:	d13f      	bne.n	80129ac <__gethex+0x450>
 801292c:	f8d8 2000 	ldr.w	r2, [r8]
 8012930:	3a01      	subs	r2, #1
 8012932:	42b2      	cmp	r2, r6
 8012934:	d10a      	bne.n	801294c <__gethex+0x3f0>
 8012936:	1171      	asrs	r1, r6, #5
 8012938:	2201      	movs	r2, #1
 801293a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801293e:	f006 061f 	and.w	r6, r6, #31
 8012942:	fa02 f606 	lsl.w	r6, r2, r6
 8012946:	421e      	tst	r6, r3
 8012948:	bf18      	it	ne
 801294a:	4617      	movne	r7, r2
 801294c:	f047 0720 	orr.w	r7, r7, #32
 8012950:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012952:	601c      	str	r4, [r3, #0]
 8012954:	9b04      	ldr	r3, [sp, #16]
 8012956:	601d      	str	r5, [r3, #0]
 8012958:	e695      	b.n	8012686 <__gethex+0x12a>
 801295a:	4299      	cmp	r1, r3
 801295c:	f843 cc04 	str.w	ip, [r3, #-4]
 8012960:	d8d8      	bhi.n	8012914 <__gethex+0x3b8>
 8012962:	68a3      	ldr	r3, [r4, #8]
 8012964:	459b      	cmp	fp, r3
 8012966:	db19      	blt.n	801299c <__gethex+0x440>
 8012968:	6861      	ldr	r1, [r4, #4]
 801296a:	ee18 0a10 	vmov	r0, s16
 801296e:	3101      	adds	r1, #1
 8012970:	f000 f99c 	bl	8012cac <_Balloc>
 8012974:	4681      	mov	r9, r0
 8012976:	b918      	cbnz	r0, 8012980 <__gethex+0x424>
 8012978:	4b1a      	ldr	r3, [pc, #104]	; (80129e4 <__gethex+0x488>)
 801297a:	4602      	mov	r2, r0
 801297c:	2184      	movs	r1, #132	; 0x84
 801297e:	e6a8      	b.n	80126d2 <__gethex+0x176>
 8012980:	6922      	ldr	r2, [r4, #16]
 8012982:	3202      	adds	r2, #2
 8012984:	f104 010c 	add.w	r1, r4, #12
 8012988:	0092      	lsls	r2, r2, #2
 801298a:	300c      	adds	r0, #12
 801298c:	f7fc fe69 	bl	800f662 <memcpy>
 8012990:	4621      	mov	r1, r4
 8012992:	ee18 0a10 	vmov	r0, s16
 8012996:	f000 f9c9 	bl	8012d2c <_Bfree>
 801299a:	464c      	mov	r4, r9
 801299c:	6923      	ldr	r3, [r4, #16]
 801299e:	1c5a      	adds	r2, r3, #1
 80129a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80129a4:	6122      	str	r2, [r4, #16]
 80129a6:	2201      	movs	r2, #1
 80129a8:	615a      	str	r2, [r3, #20]
 80129aa:	e7bb      	b.n	8012924 <__gethex+0x3c8>
 80129ac:	6922      	ldr	r2, [r4, #16]
 80129ae:	455a      	cmp	r2, fp
 80129b0:	dd0b      	ble.n	80129ca <__gethex+0x46e>
 80129b2:	2101      	movs	r1, #1
 80129b4:	4620      	mov	r0, r4
 80129b6:	f7ff fd69 	bl	801248c <rshift>
 80129ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80129be:	3501      	adds	r5, #1
 80129c0:	42ab      	cmp	r3, r5
 80129c2:	f6ff aed0 	blt.w	8012766 <__gethex+0x20a>
 80129c6:	2701      	movs	r7, #1
 80129c8:	e7c0      	b.n	801294c <__gethex+0x3f0>
 80129ca:	f016 061f 	ands.w	r6, r6, #31
 80129ce:	d0fa      	beq.n	80129c6 <__gethex+0x46a>
 80129d0:	449a      	add	sl, r3
 80129d2:	f1c6 0620 	rsb	r6, r6, #32
 80129d6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80129da:	f000 fa5d 	bl	8012e98 <__hi0bits>
 80129de:	42b0      	cmp	r0, r6
 80129e0:	dbe7      	blt.n	80129b2 <__gethex+0x456>
 80129e2:	e7f0      	b.n	80129c6 <__gethex+0x46a>
 80129e4:	080159f4 	.word	0x080159f4

080129e8 <L_shift>:
 80129e8:	f1c2 0208 	rsb	r2, r2, #8
 80129ec:	0092      	lsls	r2, r2, #2
 80129ee:	b570      	push	{r4, r5, r6, lr}
 80129f0:	f1c2 0620 	rsb	r6, r2, #32
 80129f4:	6843      	ldr	r3, [r0, #4]
 80129f6:	6804      	ldr	r4, [r0, #0]
 80129f8:	fa03 f506 	lsl.w	r5, r3, r6
 80129fc:	432c      	orrs	r4, r5
 80129fe:	40d3      	lsrs	r3, r2
 8012a00:	6004      	str	r4, [r0, #0]
 8012a02:	f840 3f04 	str.w	r3, [r0, #4]!
 8012a06:	4288      	cmp	r0, r1
 8012a08:	d3f4      	bcc.n	80129f4 <L_shift+0xc>
 8012a0a:	bd70      	pop	{r4, r5, r6, pc}

08012a0c <__match>:
 8012a0c:	b530      	push	{r4, r5, lr}
 8012a0e:	6803      	ldr	r3, [r0, #0]
 8012a10:	3301      	adds	r3, #1
 8012a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a16:	b914      	cbnz	r4, 8012a1e <__match+0x12>
 8012a18:	6003      	str	r3, [r0, #0]
 8012a1a:	2001      	movs	r0, #1
 8012a1c:	bd30      	pop	{r4, r5, pc}
 8012a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a22:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012a26:	2d19      	cmp	r5, #25
 8012a28:	bf98      	it	ls
 8012a2a:	3220      	addls	r2, #32
 8012a2c:	42a2      	cmp	r2, r4
 8012a2e:	d0f0      	beq.n	8012a12 <__match+0x6>
 8012a30:	2000      	movs	r0, #0
 8012a32:	e7f3      	b.n	8012a1c <__match+0x10>

08012a34 <__hexnan>:
 8012a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a38:	680b      	ldr	r3, [r1, #0]
 8012a3a:	6801      	ldr	r1, [r0, #0]
 8012a3c:	115e      	asrs	r6, r3, #5
 8012a3e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012a42:	f013 031f 	ands.w	r3, r3, #31
 8012a46:	b087      	sub	sp, #28
 8012a48:	bf18      	it	ne
 8012a4a:	3604      	addne	r6, #4
 8012a4c:	2500      	movs	r5, #0
 8012a4e:	1f37      	subs	r7, r6, #4
 8012a50:	4682      	mov	sl, r0
 8012a52:	4690      	mov	r8, r2
 8012a54:	9301      	str	r3, [sp, #4]
 8012a56:	f846 5c04 	str.w	r5, [r6, #-4]
 8012a5a:	46b9      	mov	r9, r7
 8012a5c:	463c      	mov	r4, r7
 8012a5e:	9502      	str	r5, [sp, #8]
 8012a60:	46ab      	mov	fp, r5
 8012a62:	784a      	ldrb	r2, [r1, #1]
 8012a64:	1c4b      	adds	r3, r1, #1
 8012a66:	9303      	str	r3, [sp, #12]
 8012a68:	b342      	cbz	r2, 8012abc <__hexnan+0x88>
 8012a6a:	4610      	mov	r0, r2
 8012a6c:	9105      	str	r1, [sp, #20]
 8012a6e:	9204      	str	r2, [sp, #16]
 8012a70:	f7ff fd5e 	bl	8012530 <__hexdig_fun>
 8012a74:	2800      	cmp	r0, #0
 8012a76:	d14f      	bne.n	8012b18 <__hexnan+0xe4>
 8012a78:	9a04      	ldr	r2, [sp, #16]
 8012a7a:	9905      	ldr	r1, [sp, #20]
 8012a7c:	2a20      	cmp	r2, #32
 8012a7e:	d818      	bhi.n	8012ab2 <__hexnan+0x7e>
 8012a80:	9b02      	ldr	r3, [sp, #8]
 8012a82:	459b      	cmp	fp, r3
 8012a84:	dd13      	ble.n	8012aae <__hexnan+0x7a>
 8012a86:	454c      	cmp	r4, r9
 8012a88:	d206      	bcs.n	8012a98 <__hexnan+0x64>
 8012a8a:	2d07      	cmp	r5, #7
 8012a8c:	dc04      	bgt.n	8012a98 <__hexnan+0x64>
 8012a8e:	462a      	mov	r2, r5
 8012a90:	4649      	mov	r1, r9
 8012a92:	4620      	mov	r0, r4
 8012a94:	f7ff ffa8 	bl	80129e8 <L_shift>
 8012a98:	4544      	cmp	r4, r8
 8012a9a:	d950      	bls.n	8012b3e <__hexnan+0x10a>
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	f1a4 0904 	sub.w	r9, r4, #4
 8012aa2:	f844 3c04 	str.w	r3, [r4, #-4]
 8012aa6:	f8cd b008 	str.w	fp, [sp, #8]
 8012aaa:	464c      	mov	r4, r9
 8012aac:	461d      	mov	r5, r3
 8012aae:	9903      	ldr	r1, [sp, #12]
 8012ab0:	e7d7      	b.n	8012a62 <__hexnan+0x2e>
 8012ab2:	2a29      	cmp	r2, #41	; 0x29
 8012ab4:	d156      	bne.n	8012b64 <__hexnan+0x130>
 8012ab6:	3102      	adds	r1, #2
 8012ab8:	f8ca 1000 	str.w	r1, [sl]
 8012abc:	f1bb 0f00 	cmp.w	fp, #0
 8012ac0:	d050      	beq.n	8012b64 <__hexnan+0x130>
 8012ac2:	454c      	cmp	r4, r9
 8012ac4:	d206      	bcs.n	8012ad4 <__hexnan+0xa0>
 8012ac6:	2d07      	cmp	r5, #7
 8012ac8:	dc04      	bgt.n	8012ad4 <__hexnan+0xa0>
 8012aca:	462a      	mov	r2, r5
 8012acc:	4649      	mov	r1, r9
 8012ace:	4620      	mov	r0, r4
 8012ad0:	f7ff ff8a 	bl	80129e8 <L_shift>
 8012ad4:	4544      	cmp	r4, r8
 8012ad6:	d934      	bls.n	8012b42 <__hexnan+0x10e>
 8012ad8:	f1a8 0204 	sub.w	r2, r8, #4
 8012adc:	4623      	mov	r3, r4
 8012ade:	f853 1b04 	ldr.w	r1, [r3], #4
 8012ae2:	f842 1f04 	str.w	r1, [r2, #4]!
 8012ae6:	429f      	cmp	r7, r3
 8012ae8:	d2f9      	bcs.n	8012ade <__hexnan+0xaa>
 8012aea:	1b3b      	subs	r3, r7, r4
 8012aec:	f023 0303 	bic.w	r3, r3, #3
 8012af0:	3304      	adds	r3, #4
 8012af2:	3401      	adds	r4, #1
 8012af4:	3e03      	subs	r6, #3
 8012af6:	42b4      	cmp	r4, r6
 8012af8:	bf88      	it	hi
 8012afa:	2304      	movhi	r3, #4
 8012afc:	4443      	add	r3, r8
 8012afe:	2200      	movs	r2, #0
 8012b00:	f843 2b04 	str.w	r2, [r3], #4
 8012b04:	429f      	cmp	r7, r3
 8012b06:	d2fb      	bcs.n	8012b00 <__hexnan+0xcc>
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	b91b      	cbnz	r3, 8012b14 <__hexnan+0xe0>
 8012b0c:	4547      	cmp	r7, r8
 8012b0e:	d127      	bne.n	8012b60 <__hexnan+0x12c>
 8012b10:	2301      	movs	r3, #1
 8012b12:	603b      	str	r3, [r7, #0]
 8012b14:	2005      	movs	r0, #5
 8012b16:	e026      	b.n	8012b66 <__hexnan+0x132>
 8012b18:	3501      	adds	r5, #1
 8012b1a:	2d08      	cmp	r5, #8
 8012b1c:	f10b 0b01 	add.w	fp, fp, #1
 8012b20:	dd06      	ble.n	8012b30 <__hexnan+0xfc>
 8012b22:	4544      	cmp	r4, r8
 8012b24:	d9c3      	bls.n	8012aae <__hexnan+0x7a>
 8012b26:	2300      	movs	r3, #0
 8012b28:	f844 3c04 	str.w	r3, [r4, #-4]
 8012b2c:	2501      	movs	r5, #1
 8012b2e:	3c04      	subs	r4, #4
 8012b30:	6822      	ldr	r2, [r4, #0]
 8012b32:	f000 000f 	and.w	r0, r0, #15
 8012b36:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012b3a:	6022      	str	r2, [r4, #0]
 8012b3c:	e7b7      	b.n	8012aae <__hexnan+0x7a>
 8012b3e:	2508      	movs	r5, #8
 8012b40:	e7b5      	b.n	8012aae <__hexnan+0x7a>
 8012b42:	9b01      	ldr	r3, [sp, #4]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d0df      	beq.n	8012b08 <__hexnan+0xd4>
 8012b48:	f04f 32ff 	mov.w	r2, #4294967295
 8012b4c:	f1c3 0320 	rsb	r3, r3, #32
 8012b50:	fa22 f303 	lsr.w	r3, r2, r3
 8012b54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012b58:	401a      	ands	r2, r3
 8012b5a:	f846 2c04 	str.w	r2, [r6, #-4]
 8012b5e:	e7d3      	b.n	8012b08 <__hexnan+0xd4>
 8012b60:	3f04      	subs	r7, #4
 8012b62:	e7d1      	b.n	8012b08 <__hexnan+0xd4>
 8012b64:	2004      	movs	r0, #4
 8012b66:	b007      	add	sp, #28
 8012b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012b6c <_localeconv_r>:
 8012b6c:	4800      	ldr	r0, [pc, #0]	; (8012b70 <_localeconv_r+0x4>)
 8012b6e:	4770      	bx	lr
 8012b70:	20000180 	.word	0x20000180

08012b74 <_lseek_r>:
 8012b74:	b538      	push	{r3, r4, r5, lr}
 8012b76:	4d07      	ldr	r5, [pc, #28]	; (8012b94 <_lseek_r+0x20>)
 8012b78:	4604      	mov	r4, r0
 8012b7a:	4608      	mov	r0, r1
 8012b7c:	4611      	mov	r1, r2
 8012b7e:	2200      	movs	r2, #0
 8012b80:	602a      	str	r2, [r5, #0]
 8012b82:	461a      	mov	r2, r3
 8012b84:	f7f4 f92a 	bl	8006ddc <_lseek>
 8012b88:	1c43      	adds	r3, r0, #1
 8012b8a:	d102      	bne.n	8012b92 <_lseek_r+0x1e>
 8012b8c:	682b      	ldr	r3, [r5, #0]
 8012b8e:	b103      	cbz	r3, 8012b92 <_lseek_r+0x1e>
 8012b90:	6023      	str	r3, [r4, #0]
 8012b92:	bd38      	pop	{r3, r4, r5, pc}
 8012b94:	20002bcc 	.word	0x20002bcc

08012b98 <__swhatbuf_r>:
 8012b98:	b570      	push	{r4, r5, r6, lr}
 8012b9a:	460e      	mov	r6, r1
 8012b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ba0:	2900      	cmp	r1, #0
 8012ba2:	b096      	sub	sp, #88	; 0x58
 8012ba4:	4614      	mov	r4, r2
 8012ba6:	461d      	mov	r5, r3
 8012ba8:	da07      	bge.n	8012bba <__swhatbuf_r+0x22>
 8012baa:	2300      	movs	r3, #0
 8012bac:	602b      	str	r3, [r5, #0]
 8012bae:	89b3      	ldrh	r3, [r6, #12]
 8012bb0:	061a      	lsls	r2, r3, #24
 8012bb2:	d410      	bmi.n	8012bd6 <__swhatbuf_r+0x3e>
 8012bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012bb8:	e00e      	b.n	8012bd8 <__swhatbuf_r+0x40>
 8012bba:	466a      	mov	r2, sp
 8012bbc:	f000 ff58 	bl	8013a70 <_fstat_r>
 8012bc0:	2800      	cmp	r0, #0
 8012bc2:	dbf2      	blt.n	8012baa <__swhatbuf_r+0x12>
 8012bc4:	9a01      	ldr	r2, [sp, #4]
 8012bc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012bca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012bce:	425a      	negs	r2, r3
 8012bd0:	415a      	adcs	r2, r3
 8012bd2:	602a      	str	r2, [r5, #0]
 8012bd4:	e7ee      	b.n	8012bb4 <__swhatbuf_r+0x1c>
 8012bd6:	2340      	movs	r3, #64	; 0x40
 8012bd8:	2000      	movs	r0, #0
 8012bda:	6023      	str	r3, [r4, #0]
 8012bdc:	b016      	add	sp, #88	; 0x58
 8012bde:	bd70      	pop	{r4, r5, r6, pc}

08012be0 <__smakebuf_r>:
 8012be0:	898b      	ldrh	r3, [r1, #12]
 8012be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012be4:	079d      	lsls	r5, r3, #30
 8012be6:	4606      	mov	r6, r0
 8012be8:	460c      	mov	r4, r1
 8012bea:	d507      	bpl.n	8012bfc <__smakebuf_r+0x1c>
 8012bec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012bf0:	6023      	str	r3, [r4, #0]
 8012bf2:	6123      	str	r3, [r4, #16]
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	6163      	str	r3, [r4, #20]
 8012bf8:	b002      	add	sp, #8
 8012bfa:	bd70      	pop	{r4, r5, r6, pc}
 8012bfc:	ab01      	add	r3, sp, #4
 8012bfe:	466a      	mov	r2, sp
 8012c00:	f7ff ffca 	bl	8012b98 <__swhatbuf_r>
 8012c04:	9900      	ldr	r1, [sp, #0]
 8012c06:	4605      	mov	r5, r0
 8012c08:	4630      	mov	r0, r6
 8012c0a:	f7fc fd41 	bl	800f690 <_malloc_r>
 8012c0e:	b948      	cbnz	r0, 8012c24 <__smakebuf_r+0x44>
 8012c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c14:	059a      	lsls	r2, r3, #22
 8012c16:	d4ef      	bmi.n	8012bf8 <__smakebuf_r+0x18>
 8012c18:	f023 0303 	bic.w	r3, r3, #3
 8012c1c:	f043 0302 	orr.w	r3, r3, #2
 8012c20:	81a3      	strh	r3, [r4, #12]
 8012c22:	e7e3      	b.n	8012bec <__smakebuf_r+0xc>
 8012c24:	4b0d      	ldr	r3, [pc, #52]	; (8012c5c <__smakebuf_r+0x7c>)
 8012c26:	62b3      	str	r3, [r6, #40]	; 0x28
 8012c28:	89a3      	ldrh	r3, [r4, #12]
 8012c2a:	6020      	str	r0, [r4, #0]
 8012c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c30:	81a3      	strh	r3, [r4, #12]
 8012c32:	9b00      	ldr	r3, [sp, #0]
 8012c34:	6163      	str	r3, [r4, #20]
 8012c36:	9b01      	ldr	r3, [sp, #4]
 8012c38:	6120      	str	r0, [r4, #16]
 8012c3a:	b15b      	cbz	r3, 8012c54 <__smakebuf_r+0x74>
 8012c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c40:	4630      	mov	r0, r6
 8012c42:	f000 ff27 	bl	8013a94 <_isatty_r>
 8012c46:	b128      	cbz	r0, 8012c54 <__smakebuf_r+0x74>
 8012c48:	89a3      	ldrh	r3, [r4, #12]
 8012c4a:	f023 0303 	bic.w	r3, r3, #3
 8012c4e:	f043 0301 	orr.w	r3, r3, #1
 8012c52:	81a3      	strh	r3, [r4, #12]
 8012c54:	89a0      	ldrh	r0, [r4, #12]
 8012c56:	4305      	orrs	r5, r0
 8012c58:	81a5      	strh	r5, [r4, #12]
 8012c5a:	e7cd      	b.n	8012bf8 <__smakebuf_r+0x18>
 8012c5c:	0800f471 	.word	0x0800f471

08012c60 <malloc>:
 8012c60:	4b02      	ldr	r3, [pc, #8]	; (8012c6c <malloc+0xc>)
 8012c62:	4601      	mov	r1, r0
 8012c64:	6818      	ldr	r0, [r3, #0]
 8012c66:	f7fc bd13 	b.w	800f690 <_malloc_r>
 8012c6a:	bf00      	nop
 8012c6c:	20000028 	.word	0x20000028

08012c70 <__ascii_mbtowc>:
 8012c70:	b082      	sub	sp, #8
 8012c72:	b901      	cbnz	r1, 8012c76 <__ascii_mbtowc+0x6>
 8012c74:	a901      	add	r1, sp, #4
 8012c76:	b142      	cbz	r2, 8012c8a <__ascii_mbtowc+0x1a>
 8012c78:	b14b      	cbz	r3, 8012c8e <__ascii_mbtowc+0x1e>
 8012c7a:	7813      	ldrb	r3, [r2, #0]
 8012c7c:	600b      	str	r3, [r1, #0]
 8012c7e:	7812      	ldrb	r2, [r2, #0]
 8012c80:	1e10      	subs	r0, r2, #0
 8012c82:	bf18      	it	ne
 8012c84:	2001      	movne	r0, #1
 8012c86:	b002      	add	sp, #8
 8012c88:	4770      	bx	lr
 8012c8a:	4610      	mov	r0, r2
 8012c8c:	e7fb      	b.n	8012c86 <__ascii_mbtowc+0x16>
 8012c8e:	f06f 0001 	mvn.w	r0, #1
 8012c92:	e7f8      	b.n	8012c86 <__ascii_mbtowc+0x16>

08012c94 <__malloc_lock>:
 8012c94:	4801      	ldr	r0, [pc, #4]	; (8012c9c <__malloc_lock+0x8>)
 8012c96:	f7fc bce2 	b.w	800f65e <__retarget_lock_acquire_recursive>
 8012c9a:	bf00      	nop
 8012c9c:	20002bc4 	.word	0x20002bc4

08012ca0 <__malloc_unlock>:
 8012ca0:	4801      	ldr	r0, [pc, #4]	; (8012ca8 <__malloc_unlock+0x8>)
 8012ca2:	f7fc bcdd 	b.w	800f660 <__retarget_lock_release_recursive>
 8012ca6:	bf00      	nop
 8012ca8:	20002bc4 	.word	0x20002bc4

08012cac <_Balloc>:
 8012cac:	b570      	push	{r4, r5, r6, lr}
 8012cae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012cb0:	4604      	mov	r4, r0
 8012cb2:	460d      	mov	r5, r1
 8012cb4:	b976      	cbnz	r6, 8012cd4 <_Balloc+0x28>
 8012cb6:	2010      	movs	r0, #16
 8012cb8:	f7ff ffd2 	bl	8012c60 <malloc>
 8012cbc:	4602      	mov	r2, r0
 8012cbe:	6260      	str	r0, [r4, #36]	; 0x24
 8012cc0:	b920      	cbnz	r0, 8012ccc <_Balloc+0x20>
 8012cc2:	4b18      	ldr	r3, [pc, #96]	; (8012d24 <_Balloc+0x78>)
 8012cc4:	4818      	ldr	r0, [pc, #96]	; (8012d28 <_Balloc+0x7c>)
 8012cc6:	2166      	movs	r1, #102	; 0x66
 8012cc8:	f000 fea2 	bl	8013a10 <__assert_func>
 8012ccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012cd0:	6006      	str	r6, [r0, #0]
 8012cd2:	60c6      	str	r6, [r0, #12]
 8012cd4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012cd6:	68f3      	ldr	r3, [r6, #12]
 8012cd8:	b183      	cbz	r3, 8012cfc <_Balloc+0x50>
 8012cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012cdc:	68db      	ldr	r3, [r3, #12]
 8012cde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012ce2:	b9b8      	cbnz	r0, 8012d14 <_Balloc+0x68>
 8012ce4:	2101      	movs	r1, #1
 8012ce6:	fa01 f605 	lsl.w	r6, r1, r5
 8012cea:	1d72      	adds	r2, r6, #5
 8012cec:	0092      	lsls	r2, r2, #2
 8012cee:	4620      	mov	r0, r4
 8012cf0:	f000 fc97 	bl	8013622 <_calloc_r>
 8012cf4:	b160      	cbz	r0, 8012d10 <_Balloc+0x64>
 8012cf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012cfa:	e00e      	b.n	8012d1a <_Balloc+0x6e>
 8012cfc:	2221      	movs	r2, #33	; 0x21
 8012cfe:	2104      	movs	r1, #4
 8012d00:	4620      	mov	r0, r4
 8012d02:	f000 fc8e 	bl	8013622 <_calloc_r>
 8012d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d08:	60f0      	str	r0, [r6, #12]
 8012d0a:	68db      	ldr	r3, [r3, #12]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d1e4      	bne.n	8012cda <_Balloc+0x2e>
 8012d10:	2000      	movs	r0, #0
 8012d12:	bd70      	pop	{r4, r5, r6, pc}
 8012d14:	6802      	ldr	r2, [r0, #0]
 8012d16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012d20:	e7f7      	b.n	8012d12 <_Balloc+0x66>
 8012d22:	bf00      	nop
 8012d24:	0801597e 	.word	0x0801597e
 8012d28:	08015a84 	.word	0x08015a84

08012d2c <_Bfree>:
 8012d2c:	b570      	push	{r4, r5, r6, lr}
 8012d2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012d30:	4605      	mov	r5, r0
 8012d32:	460c      	mov	r4, r1
 8012d34:	b976      	cbnz	r6, 8012d54 <_Bfree+0x28>
 8012d36:	2010      	movs	r0, #16
 8012d38:	f7ff ff92 	bl	8012c60 <malloc>
 8012d3c:	4602      	mov	r2, r0
 8012d3e:	6268      	str	r0, [r5, #36]	; 0x24
 8012d40:	b920      	cbnz	r0, 8012d4c <_Bfree+0x20>
 8012d42:	4b09      	ldr	r3, [pc, #36]	; (8012d68 <_Bfree+0x3c>)
 8012d44:	4809      	ldr	r0, [pc, #36]	; (8012d6c <_Bfree+0x40>)
 8012d46:	218a      	movs	r1, #138	; 0x8a
 8012d48:	f000 fe62 	bl	8013a10 <__assert_func>
 8012d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d50:	6006      	str	r6, [r0, #0]
 8012d52:	60c6      	str	r6, [r0, #12]
 8012d54:	b13c      	cbz	r4, 8012d66 <_Bfree+0x3a>
 8012d56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012d58:	6862      	ldr	r2, [r4, #4]
 8012d5a:	68db      	ldr	r3, [r3, #12]
 8012d5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012d60:	6021      	str	r1, [r4, #0]
 8012d62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012d66:	bd70      	pop	{r4, r5, r6, pc}
 8012d68:	0801597e 	.word	0x0801597e
 8012d6c:	08015a84 	.word	0x08015a84

08012d70 <__multadd>:
 8012d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d74:	690e      	ldr	r6, [r1, #16]
 8012d76:	4607      	mov	r7, r0
 8012d78:	4698      	mov	r8, r3
 8012d7a:	460c      	mov	r4, r1
 8012d7c:	f101 0014 	add.w	r0, r1, #20
 8012d80:	2300      	movs	r3, #0
 8012d82:	6805      	ldr	r5, [r0, #0]
 8012d84:	b2a9      	uxth	r1, r5
 8012d86:	fb02 8101 	mla	r1, r2, r1, r8
 8012d8a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012d8e:	0c2d      	lsrs	r5, r5, #16
 8012d90:	fb02 c505 	mla	r5, r2, r5, ip
 8012d94:	b289      	uxth	r1, r1
 8012d96:	3301      	adds	r3, #1
 8012d98:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012d9c:	429e      	cmp	r6, r3
 8012d9e:	f840 1b04 	str.w	r1, [r0], #4
 8012da2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012da6:	dcec      	bgt.n	8012d82 <__multadd+0x12>
 8012da8:	f1b8 0f00 	cmp.w	r8, #0
 8012dac:	d022      	beq.n	8012df4 <__multadd+0x84>
 8012dae:	68a3      	ldr	r3, [r4, #8]
 8012db0:	42b3      	cmp	r3, r6
 8012db2:	dc19      	bgt.n	8012de8 <__multadd+0x78>
 8012db4:	6861      	ldr	r1, [r4, #4]
 8012db6:	4638      	mov	r0, r7
 8012db8:	3101      	adds	r1, #1
 8012dba:	f7ff ff77 	bl	8012cac <_Balloc>
 8012dbe:	4605      	mov	r5, r0
 8012dc0:	b928      	cbnz	r0, 8012dce <__multadd+0x5e>
 8012dc2:	4602      	mov	r2, r0
 8012dc4:	4b0d      	ldr	r3, [pc, #52]	; (8012dfc <__multadd+0x8c>)
 8012dc6:	480e      	ldr	r0, [pc, #56]	; (8012e00 <__multadd+0x90>)
 8012dc8:	21b5      	movs	r1, #181	; 0xb5
 8012dca:	f000 fe21 	bl	8013a10 <__assert_func>
 8012dce:	6922      	ldr	r2, [r4, #16]
 8012dd0:	3202      	adds	r2, #2
 8012dd2:	f104 010c 	add.w	r1, r4, #12
 8012dd6:	0092      	lsls	r2, r2, #2
 8012dd8:	300c      	adds	r0, #12
 8012dda:	f7fc fc42 	bl	800f662 <memcpy>
 8012dde:	4621      	mov	r1, r4
 8012de0:	4638      	mov	r0, r7
 8012de2:	f7ff ffa3 	bl	8012d2c <_Bfree>
 8012de6:	462c      	mov	r4, r5
 8012de8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012dec:	3601      	adds	r6, #1
 8012dee:	f8c3 8014 	str.w	r8, [r3, #20]
 8012df2:	6126      	str	r6, [r4, #16]
 8012df4:	4620      	mov	r0, r4
 8012df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dfa:	bf00      	nop
 8012dfc:	080159f4 	.word	0x080159f4
 8012e00:	08015a84 	.word	0x08015a84

08012e04 <__s2b>:
 8012e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e08:	460c      	mov	r4, r1
 8012e0a:	4615      	mov	r5, r2
 8012e0c:	461f      	mov	r7, r3
 8012e0e:	2209      	movs	r2, #9
 8012e10:	3308      	adds	r3, #8
 8012e12:	4606      	mov	r6, r0
 8012e14:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e18:	2100      	movs	r1, #0
 8012e1a:	2201      	movs	r2, #1
 8012e1c:	429a      	cmp	r2, r3
 8012e1e:	db09      	blt.n	8012e34 <__s2b+0x30>
 8012e20:	4630      	mov	r0, r6
 8012e22:	f7ff ff43 	bl	8012cac <_Balloc>
 8012e26:	b940      	cbnz	r0, 8012e3a <__s2b+0x36>
 8012e28:	4602      	mov	r2, r0
 8012e2a:	4b19      	ldr	r3, [pc, #100]	; (8012e90 <__s2b+0x8c>)
 8012e2c:	4819      	ldr	r0, [pc, #100]	; (8012e94 <__s2b+0x90>)
 8012e2e:	21ce      	movs	r1, #206	; 0xce
 8012e30:	f000 fdee 	bl	8013a10 <__assert_func>
 8012e34:	0052      	lsls	r2, r2, #1
 8012e36:	3101      	adds	r1, #1
 8012e38:	e7f0      	b.n	8012e1c <__s2b+0x18>
 8012e3a:	9b08      	ldr	r3, [sp, #32]
 8012e3c:	6143      	str	r3, [r0, #20]
 8012e3e:	2d09      	cmp	r5, #9
 8012e40:	f04f 0301 	mov.w	r3, #1
 8012e44:	6103      	str	r3, [r0, #16]
 8012e46:	dd16      	ble.n	8012e76 <__s2b+0x72>
 8012e48:	f104 0909 	add.w	r9, r4, #9
 8012e4c:	46c8      	mov	r8, r9
 8012e4e:	442c      	add	r4, r5
 8012e50:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012e54:	4601      	mov	r1, r0
 8012e56:	3b30      	subs	r3, #48	; 0x30
 8012e58:	220a      	movs	r2, #10
 8012e5a:	4630      	mov	r0, r6
 8012e5c:	f7ff ff88 	bl	8012d70 <__multadd>
 8012e60:	45a0      	cmp	r8, r4
 8012e62:	d1f5      	bne.n	8012e50 <__s2b+0x4c>
 8012e64:	f1a5 0408 	sub.w	r4, r5, #8
 8012e68:	444c      	add	r4, r9
 8012e6a:	1b2d      	subs	r5, r5, r4
 8012e6c:	1963      	adds	r3, r4, r5
 8012e6e:	42bb      	cmp	r3, r7
 8012e70:	db04      	blt.n	8012e7c <__s2b+0x78>
 8012e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e76:	340a      	adds	r4, #10
 8012e78:	2509      	movs	r5, #9
 8012e7a:	e7f6      	b.n	8012e6a <__s2b+0x66>
 8012e7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012e80:	4601      	mov	r1, r0
 8012e82:	3b30      	subs	r3, #48	; 0x30
 8012e84:	220a      	movs	r2, #10
 8012e86:	4630      	mov	r0, r6
 8012e88:	f7ff ff72 	bl	8012d70 <__multadd>
 8012e8c:	e7ee      	b.n	8012e6c <__s2b+0x68>
 8012e8e:	bf00      	nop
 8012e90:	080159f4 	.word	0x080159f4
 8012e94:	08015a84 	.word	0x08015a84

08012e98 <__hi0bits>:
 8012e98:	0c03      	lsrs	r3, r0, #16
 8012e9a:	041b      	lsls	r3, r3, #16
 8012e9c:	b9d3      	cbnz	r3, 8012ed4 <__hi0bits+0x3c>
 8012e9e:	0400      	lsls	r0, r0, #16
 8012ea0:	2310      	movs	r3, #16
 8012ea2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012ea6:	bf04      	itt	eq
 8012ea8:	0200      	lsleq	r0, r0, #8
 8012eaa:	3308      	addeq	r3, #8
 8012eac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012eb0:	bf04      	itt	eq
 8012eb2:	0100      	lsleq	r0, r0, #4
 8012eb4:	3304      	addeq	r3, #4
 8012eb6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012eba:	bf04      	itt	eq
 8012ebc:	0080      	lsleq	r0, r0, #2
 8012ebe:	3302      	addeq	r3, #2
 8012ec0:	2800      	cmp	r0, #0
 8012ec2:	db05      	blt.n	8012ed0 <__hi0bits+0x38>
 8012ec4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012ec8:	f103 0301 	add.w	r3, r3, #1
 8012ecc:	bf08      	it	eq
 8012ece:	2320      	moveq	r3, #32
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	4770      	bx	lr
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	e7e4      	b.n	8012ea2 <__hi0bits+0xa>

08012ed8 <__lo0bits>:
 8012ed8:	6803      	ldr	r3, [r0, #0]
 8012eda:	f013 0207 	ands.w	r2, r3, #7
 8012ede:	4601      	mov	r1, r0
 8012ee0:	d00b      	beq.n	8012efa <__lo0bits+0x22>
 8012ee2:	07da      	lsls	r2, r3, #31
 8012ee4:	d424      	bmi.n	8012f30 <__lo0bits+0x58>
 8012ee6:	0798      	lsls	r0, r3, #30
 8012ee8:	bf49      	itett	mi
 8012eea:	085b      	lsrmi	r3, r3, #1
 8012eec:	089b      	lsrpl	r3, r3, #2
 8012eee:	2001      	movmi	r0, #1
 8012ef0:	600b      	strmi	r3, [r1, #0]
 8012ef2:	bf5c      	itt	pl
 8012ef4:	600b      	strpl	r3, [r1, #0]
 8012ef6:	2002      	movpl	r0, #2
 8012ef8:	4770      	bx	lr
 8012efa:	b298      	uxth	r0, r3
 8012efc:	b9b0      	cbnz	r0, 8012f2c <__lo0bits+0x54>
 8012efe:	0c1b      	lsrs	r3, r3, #16
 8012f00:	2010      	movs	r0, #16
 8012f02:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012f06:	bf04      	itt	eq
 8012f08:	0a1b      	lsreq	r3, r3, #8
 8012f0a:	3008      	addeq	r0, #8
 8012f0c:	071a      	lsls	r2, r3, #28
 8012f0e:	bf04      	itt	eq
 8012f10:	091b      	lsreq	r3, r3, #4
 8012f12:	3004      	addeq	r0, #4
 8012f14:	079a      	lsls	r2, r3, #30
 8012f16:	bf04      	itt	eq
 8012f18:	089b      	lsreq	r3, r3, #2
 8012f1a:	3002      	addeq	r0, #2
 8012f1c:	07da      	lsls	r2, r3, #31
 8012f1e:	d403      	bmi.n	8012f28 <__lo0bits+0x50>
 8012f20:	085b      	lsrs	r3, r3, #1
 8012f22:	f100 0001 	add.w	r0, r0, #1
 8012f26:	d005      	beq.n	8012f34 <__lo0bits+0x5c>
 8012f28:	600b      	str	r3, [r1, #0]
 8012f2a:	4770      	bx	lr
 8012f2c:	4610      	mov	r0, r2
 8012f2e:	e7e8      	b.n	8012f02 <__lo0bits+0x2a>
 8012f30:	2000      	movs	r0, #0
 8012f32:	4770      	bx	lr
 8012f34:	2020      	movs	r0, #32
 8012f36:	4770      	bx	lr

08012f38 <__i2b>:
 8012f38:	b510      	push	{r4, lr}
 8012f3a:	460c      	mov	r4, r1
 8012f3c:	2101      	movs	r1, #1
 8012f3e:	f7ff feb5 	bl	8012cac <_Balloc>
 8012f42:	4602      	mov	r2, r0
 8012f44:	b928      	cbnz	r0, 8012f52 <__i2b+0x1a>
 8012f46:	4b05      	ldr	r3, [pc, #20]	; (8012f5c <__i2b+0x24>)
 8012f48:	4805      	ldr	r0, [pc, #20]	; (8012f60 <__i2b+0x28>)
 8012f4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012f4e:	f000 fd5f 	bl	8013a10 <__assert_func>
 8012f52:	2301      	movs	r3, #1
 8012f54:	6144      	str	r4, [r0, #20]
 8012f56:	6103      	str	r3, [r0, #16]
 8012f58:	bd10      	pop	{r4, pc}
 8012f5a:	bf00      	nop
 8012f5c:	080159f4 	.word	0x080159f4
 8012f60:	08015a84 	.word	0x08015a84

08012f64 <__multiply>:
 8012f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f68:	4614      	mov	r4, r2
 8012f6a:	690a      	ldr	r2, [r1, #16]
 8012f6c:	6923      	ldr	r3, [r4, #16]
 8012f6e:	429a      	cmp	r2, r3
 8012f70:	bfb8      	it	lt
 8012f72:	460b      	movlt	r3, r1
 8012f74:	460d      	mov	r5, r1
 8012f76:	bfbc      	itt	lt
 8012f78:	4625      	movlt	r5, r4
 8012f7a:	461c      	movlt	r4, r3
 8012f7c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012f80:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012f84:	68ab      	ldr	r3, [r5, #8]
 8012f86:	6869      	ldr	r1, [r5, #4]
 8012f88:	eb0a 0709 	add.w	r7, sl, r9
 8012f8c:	42bb      	cmp	r3, r7
 8012f8e:	b085      	sub	sp, #20
 8012f90:	bfb8      	it	lt
 8012f92:	3101      	addlt	r1, #1
 8012f94:	f7ff fe8a 	bl	8012cac <_Balloc>
 8012f98:	b930      	cbnz	r0, 8012fa8 <__multiply+0x44>
 8012f9a:	4602      	mov	r2, r0
 8012f9c:	4b42      	ldr	r3, [pc, #264]	; (80130a8 <__multiply+0x144>)
 8012f9e:	4843      	ldr	r0, [pc, #268]	; (80130ac <__multiply+0x148>)
 8012fa0:	f240 115d 	movw	r1, #349	; 0x15d
 8012fa4:	f000 fd34 	bl	8013a10 <__assert_func>
 8012fa8:	f100 0614 	add.w	r6, r0, #20
 8012fac:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012fb0:	4633      	mov	r3, r6
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	4543      	cmp	r3, r8
 8012fb6:	d31e      	bcc.n	8012ff6 <__multiply+0x92>
 8012fb8:	f105 0c14 	add.w	ip, r5, #20
 8012fbc:	f104 0314 	add.w	r3, r4, #20
 8012fc0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012fc4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012fc8:	9202      	str	r2, [sp, #8]
 8012fca:	ebac 0205 	sub.w	r2, ip, r5
 8012fce:	3a15      	subs	r2, #21
 8012fd0:	f022 0203 	bic.w	r2, r2, #3
 8012fd4:	3204      	adds	r2, #4
 8012fd6:	f105 0115 	add.w	r1, r5, #21
 8012fda:	458c      	cmp	ip, r1
 8012fdc:	bf38      	it	cc
 8012fde:	2204      	movcc	r2, #4
 8012fe0:	9201      	str	r2, [sp, #4]
 8012fe2:	9a02      	ldr	r2, [sp, #8]
 8012fe4:	9303      	str	r3, [sp, #12]
 8012fe6:	429a      	cmp	r2, r3
 8012fe8:	d808      	bhi.n	8012ffc <__multiply+0x98>
 8012fea:	2f00      	cmp	r7, #0
 8012fec:	dc55      	bgt.n	801309a <__multiply+0x136>
 8012fee:	6107      	str	r7, [r0, #16]
 8012ff0:	b005      	add	sp, #20
 8012ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ff6:	f843 2b04 	str.w	r2, [r3], #4
 8012ffa:	e7db      	b.n	8012fb4 <__multiply+0x50>
 8012ffc:	f8b3 a000 	ldrh.w	sl, [r3]
 8013000:	f1ba 0f00 	cmp.w	sl, #0
 8013004:	d020      	beq.n	8013048 <__multiply+0xe4>
 8013006:	f105 0e14 	add.w	lr, r5, #20
 801300a:	46b1      	mov	r9, r6
 801300c:	2200      	movs	r2, #0
 801300e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013012:	f8d9 b000 	ldr.w	fp, [r9]
 8013016:	b2a1      	uxth	r1, r4
 8013018:	fa1f fb8b 	uxth.w	fp, fp
 801301c:	fb0a b101 	mla	r1, sl, r1, fp
 8013020:	4411      	add	r1, r2
 8013022:	f8d9 2000 	ldr.w	r2, [r9]
 8013026:	0c24      	lsrs	r4, r4, #16
 8013028:	0c12      	lsrs	r2, r2, #16
 801302a:	fb0a 2404 	mla	r4, sl, r4, r2
 801302e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013032:	b289      	uxth	r1, r1
 8013034:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013038:	45f4      	cmp	ip, lr
 801303a:	f849 1b04 	str.w	r1, [r9], #4
 801303e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013042:	d8e4      	bhi.n	801300e <__multiply+0xaa>
 8013044:	9901      	ldr	r1, [sp, #4]
 8013046:	5072      	str	r2, [r6, r1]
 8013048:	9a03      	ldr	r2, [sp, #12]
 801304a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801304e:	3304      	adds	r3, #4
 8013050:	f1b9 0f00 	cmp.w	r9, #0
 8013054:	d01f      	beq.n	8013096 <__multiply+0x132>
 8013056:	6834      	ldr	r4, [r6, #0]
 8013058:	f105 0114 	add.w	r1, r5, #20
 801305c:	46b6      	mov	lr, r6
 801305e:	f04f 0a00 	mov.w	sl, #0
 8013062:	880a      	ldrh	r2, [r1, #0]
 8013064:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013068:	fb09 b202 	mla	r2, r9, r2, fp
 801306c:	4492      	add	sl, r2
 801306e:	b2a4      	uxth	r4, r4
 8013070:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013074:	f84e 4b04 	str.w	r4, [lr], #4
 8013078:	f851 4b04 	ldr.w	r4, [r1], #4
 801307c:	f8be 2000 	ldrh.w	r2, [lr]
 8013080:	0c24      	lsrs	r4, r4, #16
 8013082:	fb09 2404 	mla	r4, r9, r4, r2
 8013086:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801308a:	458c      	cmp	ip, r1
 801308c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013090:	d8e7      	bhi.n	8013062 <__multiply+0xfe>
 8013092:	9a01      	ldr	r2, [sp, #4]
 8013094:	50b4      	str	r4, [r6, r2]
 8013096:	3604      	adds	r6, #4
 8013098:	e7a3      	b.n	8012fe2 <__multiply+0x7e>
 801309a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d1a5      	bne.n	8012fee <__multiply+0x8a>
 80130a2:	3f01      	subs	r7, #1
 80130a4:	e7a1      	b.n	8012fea <__multiply+0x86>
 80130a6:	bf00      	nop
 80130a8:	080159f4 	.word	0x080159f4
 80130ac:	08015a84 	.word	0x08015a84

080130b0 <__pow5mult>:
 80130b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130b4:	4615      	mov	r5, r2
 80130b6:	f012 0203 	ands.w	r2, r2, #3
 80130ba:	4606      	mov	r6, r0
 80130bc:	460f      	mov	r7, r1
 80130be:	d007      	beq.n	80130d0 <__pow5mult+0x20>
 80130c0:	4c25      	ldr	r4, [pc, #148]	; (8013158 <__pow5mult+0xa8>)
 80130c2:	3a01      	subs	r2, #1
 80130c4:	2300      	movs	r3, #0
 80130c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80130ca:	f7ff fe51 	bl	8012d70 <__multadd>
 80130ce:	4607      	mov	r7, r0
 80130d0:	10ad      	asrs	r5, r5, #2
 80130d2:	d03d      	beq.n	8013150 <__pow5mult+0xa0>
 80130d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80130d6:	b97c      	cbnz	r4, 80130f8 <__pow5mult+0x48>
 80130d8:	2010      	movs	r0, #16
 80130da:	f7ff fdc1 	bl	8012c60 <malloc>
 80130de:	4602      	mov	r2, r0
 80130e0:	6270      	str	r0, [r6, #36]	; 0x24
 80130e2:	b928      	cbnz	r0, 80130f0 <__pow5mult+0x40>
 80130e4:	4b1d      	ldr	r3, [pc, #116]	; (801315c <__pow5mult+0xac>)
 80130e6:	481e      	ldr	r0, [pc, #120]	; (8013160 <__pow5mult+0xb0>)
 80130e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80130ec:	f000 fc90 	bl	8013a10 <__assert_func>
 80130f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80130f4:	6004      	str	r4, [r0, #0]
 80130f6:	60c4      	str	r4, [r0, #12]
 80130f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80130fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013100:	b94c      	cbnz	r4, 8013116 <__pow5mult+0x66>
 8013102:	f240 2171 	movw	r1, #625	; 0x271
 8013106:	4630      	mov	r0, r6
 8013108:	f7ff ff16 	bl	8012f38 <__i2b>
 801310c:	2300      	movs	r3, #0
 801310e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013112:	4604      	mov	r4, r0
 8013114:	6003      	str	r3, [r0, #0]
 8013116:	f04f 0900 	mov.w	r9, #0
 801311a:	07eb      	lsls	r3, r5, #31
 801311c:	d50a      	bpl.n	8013134 <__pow5mult+0x84>
 801311e:	4639      	mov	r1, r7
 8013120:	4622      	mov	r2, r4
 8013122:	4630      	mov	r0, r6
 8013124:	f7ff ff1e 	bl	8012f64 <__multiply>
 8013128:	4639      	mov	r1, r7
 801312a:	4680      	mov	r8, r0
 801312c:	4630      	mov	r0, r6
 801312e:	f7ff fdfd 	bl	8012d2c <_Bfree>
 8013132:	4647      	mov	r7, r8
 8013134:	106d      	asrs	r5, r5, #1
 8013136:	d00b      	beq.n	8013150 <__pow5mult+0xa0>
 8013138:	6820      	ldr	r0, [r4, #0]
 801313a:	b938      	cbnz	r0, 801314c <__pow5mult+0x9c>
 801313c:	4622      	mov	r2, r4
 801313e:	4621      	mov	r1, r4
 8013140:	4630      	mov	r0, r6
 8013142:	f7ff ff0f 	bl	8012f64 <__multiply>
 8013146:	6020      	str	r0, [r4, #0]
 8013148:	f8c0 9000 	str.w	r9, [r0]
 801314c:	4604      	mov	r4, r0
 801314e:	e7e4      	b.n	801311a <__pow5mult+0x6a>
 8013150:	4638      	mov	r0, r7
 8013152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013156:	bf00      	nop
 8013158:	08015bd8 	.word	0x08015bd8
 801315c:	0801597e 	.word	0x0801597e
 8013160:	08015a84 	.word	0x08015a84

08013164 <__lshift>:
 8013164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013168:	460c      	mov	r4, r1
 801316a:	6849      	ldr	r1, [r1, #4]
 801316c:	6923      	ldr	r3, [r4, #16]
 801316e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013172:	68a3      	ldr	r3, [r4, #8]
 8013174:	4607      	mov	r7, r0
 8013176:	4691      	mov	r9, r2
 8013178:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801317c:	f108 0601 	add.w	r6, r8, #1
 8013180:	42b3      	cmp	r3, r6
 8013182:	db0b      	blt.n	801319c <__lshift+0x38>
 8013184:	4638      	mov	r0, r7
 8013186:	f7ff fd91 	bl	8012cac <_Balloc>
 801318a:	4605      	mov	r5, r0
 801318c:	b948      	cbnz	r0, 80131a2 <__lshift+0x3e>
 801318e:	4602      	mov	r2, r0
 8013190:	4b28      	ldr	r3, [pc, #160]	; (8013234 <__lshift+0xd0>)
 8013192:	4829      	ldr	r0, [pc, #164]	; (8013238 <__lshift+0xd4>)
 8013194:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013198:	f000 fc3a 	bl	8013a10 <__assert_func>
 801319c:	3101      	adds	r1, #1
 801319e:	005b      	lsls	r3, r3, #1
 80131a0:	e7ee      	b.n	8013180 <__lshift+0x1c>
 80131a2:	2300      	movs	r3, #0
 80131a4:	f100 0114 	add.w	r1, r0, #20
 80131a8:	f100 0210 	add.w	r2, r0, #16
 80131ac:	4618      	mov	r0, r3
 80131ae:	4553      	cmp	r3, sl
 80131b0:	db33      	blt.n	801321a <__lshift+0xb6>
 80131b2:	6920      	ldr	r0, [r4, #16]
 80131b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80131b8:	f104 0314 	add.w	r3, r4, #20
 80131bc:	f019 091f 	ands.w	r9, r9, #31
 80131c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80131c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80131c8:	d02b      	beq.n	8013222 <__lshift+0xbe>
 80131ca:	f1c9 0e20 	rsb	lr, r9, #32
 80131ce:	468a      	mov	sl, r1
 80131d0:	2200      	movs	r2, #0
 80131d2:	6818      	ldr	r0, [r3, #0]
 80131d4:	fa00 f009 	lsl.w	r0, r0, r9
 80131d8:	4302      	orrs	r2, r0
 80131da:	f84a 2b04 	str.w	r2, [sl], #4
 80131de:	f853 2b04 	ldr.w	r2, [r3], #4
 80131e2:	459c      	cmp	ip, r3
 80131e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80131e8:	d8f3      	bhi.n	80131d2 <__lshift+0x6e>
 80131ea:	ebac 0304 	sub.w	r3, ip, r4
 80131ee:	3b15      	subs	r3, #21
 80131f0:	f023 0303 	bic.w	r3, r3, #3
 80131f4:	3304      	adds	r3, #4
 80131f6:	f104 0015 	add.w	r0, r4, #21
 80131fa:	4584      	cmp	ip, r0
 80131fc:	bf38      	it	cc
 80131fe:	2304      	movcc	r3, #4
 8013200:	50ca      	str	r2, [r1, r3]
 8013202:	b10a      	cbz	r2, 8013208 <__lshift+0xa4>
 8013204:	f108 0602 	add.w	r6, r8, #2
 8013208:	3e01      	subs	r6, #1
 801320a:	4638      	mov	r0, r7
 801320c:	612e      	str	r6, [r5, #16]
 801320e:	4621      	mov	r1, r4
 8013210:	f7ff fd8c 	bl	8012d2c <_Bfree>
 8013214:	4628      	mov	r0, r5
 8013216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801321a:	f842 0f04 	str.w	r0, [r2, #4]!
 801321e:	3301      	adds	r3, #1
 8013220:	e7c5      	b.n	80131ae <__lshift+0x4a>
 8013222:	3904      	subs	r1, #4
 8013224:	f853 2b04 	ldr.w	r2, [r3], #4
 8013228:	f841 2f04 	str.w	r2, [r1, #4]!
 801322c:	459c      	cmp	ip, r3
 801322e:	d8f9      	bhi.n	8013224 <__lshift+0xc0>
 8013230:	e7ea      	b.n	8013208 <__lshift+0xa4>
 8013232:	bf00      	nop
 8013234:	080159f4 	.word	0x080159f4
 8013238:	08015a84 	.word	0x08015a84

0801323c <__mcmp>:
 801323c:	b530      	push	{r4, r5, lr}
 801323e:	6902      	ldr	r2, [r0, #16]
 8013240:	690c      	ldr	r4, [r1, #16]
 8013242:	1b12      	subs	r2, r2, r4
 8013244:	d10e      	bne.n	8013264 <__mcmp+0x28>
 8013246:	f100 0314 	add.w	r3, r0, #20
 801324a:	3114      	adds	r1, #20
 801324c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013250:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013254:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013258:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801325c:	42a5      	cmp	r5, r4
 801325e:	d003      	beq.n	8013268 <__mcmp+0x2c>
 8013260:	d305      	bcc.n	801326e <__mcmp+0x32>
 8013262:	2201      	movs	r2, #1
 8013264:	4610      	mov	r0, r2
 8013266:	bd30      	pop	{r4, r5, pc}
 8013268:	4283      	cmp	r3, r0
 801326a:	d3f3      	bcc.n	8013254 <__mcmp+0x18>
 801326c:	e7fa      	b.n	8013264 <__mcmp+0x28>
 801326e:	f04f 32ff 	mov.w	r2, #4294967295
 8013272:	e7f7      	b.n	8013264 <__mcmp+0x28>

08013274 <__mdiff>:
 8013274:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013278:	460c      	mov	r4, r1
 801327a:	4606      	mov	r6, r0
 801327c:	4611      	mov	r1, r2
 801327e:	4620      	mov	r0, r4
 8013280:	4617      	mov	r7, r2
 8013282:	f7ff ffdb 	bl	801323c <__mcmp>
 8013286:	1e05      	subs	r5, r0, #0
 8013288:	d110      	bne.n	80132ac <__mdiff+0x38>
 801328a:	4629      	mov	r1, r5
 801328c:	4630      	mov	r0, r6
 801328e:	f7ff fd0d 	bl	8012cac <_Balloc>
 8013292:	b930      	cbnz	r0, 80132a2 <__mdiff+0x2e>
 8013294:	4b39      	ldr	r3, [pc, #228]	; (801337c <__mdiff+0x108>)
 8013296:	4602      	mov	r2, r0
 8013298:	f240 2132 	movw	r1, #562	; 0x232
 801329c:	4838      	ldr	r0, [pc, #224]	; (8013380 <__mdiff+0x10c>)
 801329e:	f000 fbb7 	bl	8013a10 <__assert_func>
 80132a2:	2301      	movs	r3, #1
 80132a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80132a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132ac:	bfa4      	itt	ge
 80132ae:	463b      	movge	r3, r7
 80132b0:	4627      	movge	r7, r4
 80132b2:	4630      	mov	r0, r6
 80132b4:	6879      	ldr	r1, [r7, #4]
 80132b6:	bfa6      	itte	ge
 80132b8:	461c      	movge	r4, r3
 80132ba:	2500      	movge	r5, #0
 80132bc:	2501      	movlt	r5, #1
 80132be:	f7ff fcf5 	bl	8012cac <_Balloc>
 80132c2:	b920      	cbnz	r0, 80132ce <__mdiff+0x5a>
 80132c4:	4b2d      	ldr	r3, [pc, #180]	; (801337c <__mdiff+0x108>)
 80132c6:	4602      	mov	r2, r0
 80132c8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80132cc:	e7e6      	b.n	801329c <__mdiff+0x28>
 80132ce:	693e      	ldr	r6, [r7, #16]
 80132d0:	60c5      	str	r5, [r0, #12]
 80132d2:	6925      	ldr	r5, [r4, #16]
 80132d4:	f107 0114 	add.w	r1, r7, #20
 80132d8:	f104 0914 	add.w	r9, r4, #20
 80132dc:	f100 0e14 	add.w	lr, r0, #20
 80132e0:	f107 0210 	add.w	r2, r7, #16
 80132e4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80132e8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80132ec:	46f2      	mov	sl, lr
 80132ee:	2700      	movs	r7, #0
 80132f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80132f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80132f8:	fa1f f883 	uxth.w	r8, r3
 80132fc:	fa17 f78b 	uxtah	r7, r7, fp
 8013300:	0c1b      	lsrs	r3, r3, #16
 8013302:	eba7 0808 	sub.w	r8, r7, r8
 8013306:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801330a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801330e:	fa1f f888 	uxth.w	r8, r8
 8013312:	141f      	asrs	r7, r3, #16
 8013314:	454d      	cmp	r5, r9
 8013316:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801331a:	f84a 3b04 	str.w	r3, [sl], #4
 801331e:	d8e7      	bhi.n	80132f0 <__mdiff+0x7c>
 8013320:	1b2b      	subs	r3, r5, r4
 8013322:	3b15      	subs	r3, #21
 8013324:	f023 0303 	bic.w	r3, r3, #3
 8013328:	3304      	adds	r3, #4
 801332a:	3415      	adds	r4, #21
 801332c:	42a5      	cmp	r5, r4
 801332e:	bf38      	it	cc
 8013330:	2304      	movcc	r3, #4
 8013332:	4419      	add	r1, r3
 8013334:	4473      	add	r3, lr
 8013336:	469e      	mov	lr, r3
 8013338:	460d      	mov	r5, r1
 801333a:	4565      	cmp	r5, ip
 801333c:	d30e      	bcc.n	801335c <__mdiff+0xe8>
 801333e:	f10c 0203 	add.w	r2, ip, #3
 8013342:	1a52      	subs	r2, r2, r1
 8013344:	f022 0203 	bic.w	r2, r2, #3
 8013348:	3903      	subs	r1, #3
 801334a:	458c      	cmp	ip, r1
 801334c:	bf38      	it	cc
 801334e:	2200      	movcc	r2, #0
 8013350:	441a      	add	r2, r3
 8013352:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013356:	b17b      	cbz	r3, 8013378 <__mdiff+0x104>
 8013358:	6106      	str	r6, [r0, #16]
 801335a:	e7a5      	b.n	80132a8 <__mdiff+0x34>
 801335c:	f855 8b04 	ldr.w	r8, [r5], #4
 8013360:	fa17 f488 	uxtah	r4, r7, r8
 8013364:	1422      	asrs	r2, r4, #16
 8013366:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801336a:	b2a4      	uxth	r4, r4
 801336c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013370:	f84e 4b04 	str.w	r4, [lr], #4
 8013374:	1417      	asrs	r7, r2, #16
 8013376:	e7e0      	b.n	801333a <__mdiff+0xc6>
 8013378:	3e01      	subs	r6, #1
 801337a:	e7ea      	b.n	8013352 <__mdiff+0xde>
 801337c:	080159f4 	.word	0x080159f4
 8013380:	08015a84 	.word	0x08015a84

08013384 <__ulp>:
 8013384:	b082      	sub	sp, #8
 8013386:	ed8d 0b00 	vstr	d0, [sp]
 801338a:	9b01      	ldr	r3, [sp, #4]
 801338c:	4912      	ldr	r1, [pc, #72]	; (80133d8 <__ulp+0x54>)
 801338e:	4019      	ands	r1, r3
 8013390:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013394:	2900      	cmp	r1, #0
 8013396:	dd05      	ble.n	80133a4 <__ulp+0x20>
 8013398:	2200      	movs	r2, #0
 801339a:	460b      	mov	r3, r1
 801339c:	ec43 2b10 	vmov	d0, r2, r3
 80133a0:	b002      	add	sp, #8
 80133a2:	4770      	bx	lr
 80133a4:	4249      	negs	r1, r1
 80133a6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80133aa:	ea4f 5021 	mov.w	r0, r1, asr #20
 80133ae:	f04f 0200 	mov.w	r2, #0
 80133b2:	f04f 0300 	mov.w	r3, #0
 80133b6:	da04      	bge.n	80133c2 <__ulp+0x3e>
 80133b8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80133bc:	fa41 f300 	asr.w	r3, r1, r0
 80133c0:	e7ec      	b.n	801339c <__ulp+0x18>
 80133c2:	f1a0 0114 	sub.w	r1, r0, #20
 80133c6:	291e      	cmp	r1, #30
 80133c8:	bfda      	itte	le
 80133ca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80133ce:	fa20 f101 	lsrle.w	r1, r0, r1
 80133d2:	2101      	movgt	r1, #1
 80133d4:	460a      	mov	r2, r1
 80133d6:	e7e1      	b.n	801339c <__ulp+0x18>
 80133d8:	7ff00000 	.word	0x7ff00000

080133dc <__b2d>:
 80133dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133de:	6905      	ldr	r5, [r0, #16]
 80133e0:	f100 0714 	add.w	r7, r0, #20
 80133e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80133e8:	1f2e      	subs	r6, r5, #4
 80133ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80133ee:	4620      	mov	r0, r4
 80133f0:	f7ff fd52 	bl	8012e98 <__hi0bits>
 80133f4:	f1c0 0320 	rsb	r3, r0, #32
 80133f8:	280a      	cmp	r0, #10
 80133fa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013478 <__b2d+0x9c>
 80133fe:	600b      	str	r3, [r1, #0]
 8013400:	dc14      	bgt.n	801342c <__b2d+0x50>
 8013402:	f1c0 0e0b 	rsb	lr, r0, #11
 8013406:	fa24 f10e 	lsr.w	r1, r4, lr
 801340a:	42b7      	cmp	r7, r6
 801340c:	ea41 030c 	orr.w	r3, r1, ip
 8013410:	bf34      	ite	cc
 8013412:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013416:	2100      	movcs	r1, #0
 8013418:	3015      	adds	r0, #21
 801341a:	fa04 f000 	lsl.w	r0, r4, r0
 801341e:	fa21 f10e 	lsr.w	r1, r1, lr
 8013422:	ea40 0201 	orr.w	r2, r0, r1
 8013426:	ec43 2b10 	vmov	d0, r2, r3
 801342a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801342c:	42b7      	cmp	r7, r6
 801342e:	bf3a      	itte	cc
 8013430:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013434:	f1a5 0608 	subcc.w	r6, r5, #8
 8013438:	2100      	movcs	r1, #0
 801343a:	380b      	subs	r0, #11
 801343c:	d017      	beq.n	801346e <__b2d+0x92>
 801343e:	f1c0 0c20 	rsb	ip, r0, #32
 8013442:	fa04 f500 	lsl.w	r5, r4, r0
 8013446:	42be      	cmp	r6, r7
 8013448:	fa21 f40c 	lsr.w	r4, r1, ip
 801344c:	ea45 0504 	orr.w	r5, r5, r4
 8013450:	bf8c      	ite	hi
 8013452:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013456:	2400      	movls	r4, #0
 8013458:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801345c:	fa01 f000 	lsl.w	r0, r1, r0
 8013460:	fa24 f40c 	lsr.w	r4, r4, ip
 8013464:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013468:	ea40 0204 	orr.w	r2, r0, r4
 801346c:	e7db      	b.n	8013426 <__b2d+0x4a>
 801346e:	ea44 030c 	orr.w	r3, r4, ip
 8013472:	460a      	mov	r2, r1
 8013474:	e7d7      	b.n	8013426 <__b2d+0x4a>
 8013476:	bf00      	nop
 8013478:	3ff00000 	.word	0x3ff00000

0801347c <__d2b>:
 801347c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013480:	4689      	mov	r9, r1
 8013482:	2101      	movs	r1, #1
 8013484:	ec57 6b10 	vmov	r6, r7, d0
 8013488:	4690      	mov	r8, r2
 801348a:	f7ff fc0f 	bl	8012cac <_Balloc>
 801348e:	4604      	mov	r4, r0
 8013490:	b930      	cbnz	r0, 80134a0 <__d2b+0x24>
 8013492:	4602      	mov	r2, r0
 8013494:	4b25      	ldr	r3, [pc, #148]	; (801352c <__d2b+0xb0>)
 8013496:	4826      	ldr	r0, [pc, #152]	; (8013530 <__d2b+0xb4>)
 8013498:	f240 310a 	movw	r1, #778	; 0x30a
 801349c:	f000 fab8 	bl	8013a10 <__assert_func>
 80134a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80134a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80134a8:	bb35      	cbnz	r5, 80134f8 <__d2b+0x7c>
 80134aa:	2e00      	cmp	r6, #0
 80134ac:	9301      	str	r3, [sp, #4]
 80134ae:	d028      	beq.n	8013502 <__d2b+0x86>
 80134b0:	4668      	mov	r0, sp
 80134b2:	9600      	str	r6, [sp, #0]
 80134b4:	f7ff fd10 	bl	8012ed8 <__lo0bits>
 80134b8:	9900      	ldr	r1, [sp, #0]
 80134ba:	b300      	cbz	r0, 80134fe <__d2b+0x82>
 80134bc:	9a01      	ldr	r2, [sp, #4]
 80134be:	f1c0 0320 	rsb	r3, r0, #32
 80134c2:	fa02 f303 	lsl.w	r3, r2, r3
 80134c6:	430b      	orrs	r3, r1
 80134c8:	40c2      	lsrs	r2, r0
 80134ca:	6163      	str	r3, [r4, #20]
 80134cc:	9201      	str	r2, [sp, #4]
 80134ce:	9b01      	ldr	r3, [sp, #4]
 80134d0:	61a3      	str	r3, [r4, #24]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	bf14      	ite	ne
 80134d6:	2202      	movne	r2, #2
 80134d8:	2201      	moveq	r2, #1
 80134da:	6122      	str	r2, [r4, #16]
 80134dc:	b1d5      	cbz	r5, 8013514 <__d2b+0x98>
 80134de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80134e2:	4405      	add	r5, r0
 80134e4:	f8c9 5000 	str.w	r5, [r9]
 80134e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80134ec:	f8c8 0000 	str.w	r0, [r8]
 80134f0:	4620      	mov	r0, r4
 80134f2:	b003      	add	sp, #12
 80134f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80134fc:	e7d5      	b.n	80134aa <__d2b+0x2e>
 80134fe:	6161      	str	r1, [r4, #20]
 8013500:	e7e5      	b.n	80134ce <__d2b+0x52>
 8013502:	a801      	add	r0, sp, #4
 8013504:	f7ff fce8 	bl	8012ed8 <__lo0bits>
 8013508:	9b01      	ldr	r3, [sp, #4]
 801350a:	6163      	str	r3, [r4, #20]
 801350c:	2201      	movs	r2, #1
 801350e:	6122      	str	r2, [r4, #16]
 8013510:	3020      	adds	r0, #32
 8013512:	e7e3      	b.n	80134dc <__d2b+0x60>
 8013514:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013518:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801351c:	f8c9 0000 	str.w	r0, [r9]
 8013520:	6918      	ldr	r0, [r3, #16]
 8013522:	f7ff fcb9 	bl	8012e98 <__hi0bits>
 8013526:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801352a:	e7df      	b.n	80134ec <__d2b+0x70>
 801352c:	080159f4 	.word	0x080159f4
 8013530:	08015a84 	.word	0x08015a84

08013534 <__ratio>:
 8013534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013538:	4688      	mov	r8, r1
 801353a:	4669      	mov	r1, sp
 801353c:	4681      	mov	r9, r0
 801353e:	f7ff ff4d 	bl	80133dc <__b2d>
 8013542:	a901      	add	r1, sp, #4
 8013544:	4640      	mov	r0, r8
 8013546:	ec55 4b10 	vmov	r4, r5, d0
 801354a:	f7ff ff47 	bl	80133dc <__b2d>
 801354e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013552:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013556:	eba3 0c02 	sub.w	ip, r3, r2
 801355a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801355e:	1a9b      	subs	r3, r3, r2
 8013560:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013564:	ec51 0b10 	vmov	r0, r1, d0
 8013568:	2b00      	cmp	r3, #0
 801356a:	bfd6      	itet	le
 801356c:	460a      	movle	r2, r1
 801356e:	462a      	movgt	r2, r5
 8013570:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013574:	468b      	mov	fp, r1
 8013576:	462f      	mov	r7, r5
 8013578:	bfd4      	ite	le
 801357a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801357e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013582:	4620      	mov	r0, r4
 8013584:	ee10 2a10 	vmov	r2, s0
 8013588:	465b      	mov	r3, fp
 801358a:	4639      	mov	r1, r7
 801358c:	f7ed f986 	bl	800089c <__aeabi_ddiv>
 8013590:	ec41 0b10 	vmov	d0, r0, r1
 8013594:	b003      	add	sp, #12
 8013596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801359a <__copybits>:
 801359a:	3901      	subs	r1, #1
 801359c:	b570      	push	{r4, r5, r6, lr}
 801359e:	1149      	asrs	r1, r1, #5
 80135a0:	6914      	ldr	r4, [r2, #16]
 80135a2:	3101      	adds	r1, #1
 80135a4:	f102 0314 	add.w	r3, r2, #20
 80135a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80135ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80135b0:	1f05      	subs	r5, r0, #4
 80135b2:	42a3      	cmp	r3, r4
 80135b4:	d30c      	bcc.n	80135d0 <__copybits+0x36>
 80135b6:	1aa3      	subs	r3, r4, r2
 80135b8:	3b11      	subs	r3, #17
 80135ba:	f023 0303 	bic.w	r3, r3, #3
 80135be:	3211      	adds	r2, #17
 80135c0:	42a2      	cmp	r2, r4
 80135c2:	bf88      	it	hi
 80135c4:	2300      	movhi	r3, #0
 80135c6:	4418      	add	r0, r3
 80135c8:	2300      	movs	r3, #0
 80135ca:	4288      	cmp	r0, r1
 80135cc:	d305      	bcc.n	80135da <__copybits+0x40>
 80135ce:	bd70      	pop	{r4, r5, r6, pc}
 80135d0:	f853 6b04 	ldr.w	r6, [r3], #4
 80135d4:	f845 6f04 	str.w	r6, [r5, #4]!
 80135d8:	e7eb      	b.n	80135b2 <__copybits+0x18>
 80135da:	f840 3b04 	str.w	r3, [r0], #4
 80135de:	e7f4      	b.n	80135ca <__copybits+0x30>

080135e0 <__any_on>:
 80135e0:	f100 0214 	add.w	r2, r0, #20
 80135e4:	6900      	ldr	r0, [r0, #16]
 80135e6:	114b      	asrs	r3, r1, #5
 80135e8:	4298      	cmp	r0, r3
 80135ea:	b510      	push	{r4, lr}
 80135ec:	db11      	blt.n	8013612 <__any_on+0x32>
 80135ee:	dd0a      	ble.n	8013606 <__any_on+0x26>
 80135f0:	f011 011f 	ands.w	r1, r1, #31
 80135f4:	d007      	beq.n	8013606 <__any_on+0x26>
 80135f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80135fa:	fa24 f001 	lsr.w	r0, r4, r1
 80135fe:	fa00 f101 	lsl.w	r1, r0, r1
 8013602:	428c      	cmp	r4, r1
 8013604:	d10b      	bne.n	801361e <__any_on+0x3e>
 8013606:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801360a:	4293      	cmp	r3, r2
 801360c:	d803      	bhi.n	8013616 <__any_on+0x36>
 801360e:	2000      	movs	r0, #0
 8013610:	bd10      	pop	{r4, pc}
 8013612:	4603      	mov	r3, r0
 8013614:	e7f7      	b.n	8013606 <__any_on+0x26>
 8013616:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801361a:	2900      	cmp	r1, #0
 801361c:	d0f5      	beq.n	801360a <__any_on+0x2a>
 801361e:	2001      	movs	r0, #1
 8013620:	e7f6      	b.n	8013610 <__any_on+0x30>

08013622 <_calloc_r>:
 8013622:	b513      	push	{r0, r1, r4, lr}
 8013624:	434a      	muls	r2, r1
 8013626:	4611      	mov	r1, r2
 8013628:	9201      	str	r2, [sp, #4]
 801362a:	f7fc f831 	bl	800f690 <_malloc_r>
 801362e:	4604      	mov	r4, r0
 8013630:	b118      	cbz	r0, 801363a <_calloc_r+0x18>
 8013632:	9a01      	ldr	r2, [sp, #4]
 8013634:	2100      	movs	r1, #0
 8013636:	f7fc f822 	bl	800f67e <memset>
 801363a:	4620      	mov	r0, r4
 801363c:	b002      	add	sp, #8
 801363e:	bd10      	pop	{r4, pc}

08013640 <_free_r>:
 8013640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013642:	2900      	cmp	r1, #0
 8013644:	d048      	beq.n	80136d8 <_free_r+0x98>
 8013646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801364a:	9001      	str	r0, [sp, #4]
 801364c:	2b00      	cmp	r3, #0
 801364e:	f1a1 0404 	sub.w	r4, r1, #4
 8013652:	bfb8      	it	lt
 8013654:	18e4      	addlt	r4, r4, r3
 8013656:	f7ff fb1d 	bl	8012c94 <__malloc_lock>
 801365a:	4a20      	ldr	r2, [pc, #128]	; (80136dc <_free_r+0x9c>)
 801365c:	9801      	ldr	r0, [sp, #4]
 801365e:	6813      	ldr	r3, [r2, #0]
 8013660:	4615      	mov	r5, r2
 8013662:	b933      	cbnz	r3, 8013672 <_free_r+0x32>
 8013664:	6063      	str	r3, [r4, #4]
 8013666:	6014      	str	r4, [r2, #0]
 8013668:	b003      	add	sp, #12
 801366a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801366e:	f7ff bb17 	b.w	8012ca0 <__malloc_unlock>
 8013672:	42a3      	cmp	r3, r4
 8013674:	d90b      	bls.n	801368e <_free_r+0x4e>
 8013676:	6821      	ldr	r1, [r4, #0]
 8013678:	1862      	adds	r2, r4, r1
 801367a:	4293      	cmp	r3, r2
 801367c:	bf04      	itt	eq
 801367e:	681a      	ldreq	r2, [r3, #0]
 8013680:	685b      	ldreq	r3, [r3, #4]
 8013682:	6063      	str	r3, [r4, #4]
 8013684:	bf04      	itt	eq
 8013686:	1852      	addeq	r2, r2, r1
 8013688:	6022      	streq	r2, [r4, #0]
 801368a:	602c      	str	r4, [r5, #0]
 801368c:	e7ec      	b.n	8013668 <_free_r+0x28>
 801368e:	461a      	mov	r2, r3
 8013690:	685b      	ldr	r3, [r3, #4]
 8013692:	b10b      	cbz	r3, 8013698 <_free_r+0x58>
 8013694:	42a3      	cmp	r3, r4
 8013696:	d9fa      	bls.n	801368e <_free_r+0x4e>
 8013698:	6811      	ldr	r1, [r2, #0]
 801369a:	1855      	adds	r5, r2, r1
 801369c:	42a5      	cmp	r5, r4
 801369e:	d10b      	bne.n	80136b8 <_free_r+0x78>
 80136a0:	6824      	ldr	r4, [r4, #0]
 80136a2:	4421      	add	r1, r4
 80136a4:	1854      	adds	r4, r2, r1
 80136a6:	42a3      	cmp	r3, r4
 80136a8:	6011      	str	r1, [r2, #0]
 80136aa:	d1dd      	bne.n	8013668 <_free_r+0x28>
 80136ac:	681c      	ldr	r4, [r3, #0]
 80136ae:	685b      	ldr	r3, [r3, #4]
 80136b0:	6053      	str	r3, [r2, #4]
 80136b2:	4421      	add	r1, r4
 80136b4:	6011      	str	r1, [r2, #0]
 80136b6:	e7d7      	b.n	8013668 <_free_r+0x28>
 80136b8:	d902      	bls.n	80136c0 <_free_r+0x80>
 80136ba:	230c      	movs	r3, #12
 80136bc:	6003      	str	r3, [r0, #0]
 80136be:	e7d3      	b.n	8013668 <_free_r+0x28>
 80136c0:	6825      	ldr	r5, [r4, #0]
 80136c2:	1961      	adds	r1, r4, r5
 80136c4:	428b      	cmp	r3, r1
 80136c6:	bf04      	itt	eq
 80136c8:	6819      	ldreq	r1, [r3, #0]
 80136ca:	685b      	ldreq	r3, [r3, #4]
 80136cc:	6063      	str	r3, [r4, #4]
 80136ce:	bf04      	itt	eq
 80136d0:	1949      	addeq	r1, r1, r5
 80136d2:	6021      	streq	r1, [r4, #0]
 80136d4:	6054      	str	r4, [r2, #4]
 80136d6:	e7c7      	b.n	8013668 <_free_r+0x28>
 80136d8:	b003      	add	sp, #12
 80136da:	bd30      	pop	{r4, r5, pc}
 80136dc:	20001c74 	.word	0x20001c74

080136e0 <__ssputs_r>:
 80136e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136e4:	688e      	ldr	r6, [r1, #8]
 80136e6:	429e      	cmp	r6, r3
 80136e8:	4682      	mov	sl, r0
 80136ea:	460c      	mov	r4, r1
 80136ec:	4690      	mov	r8, r2
 80136ee:	461f      	mov	r7, r3
 80136f0:	d838      	bhi.n	8013764 <__ssputs_r+0x84>
 80136f2:	898a      	ldrh	r2, [r1, #12]
 80136f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80136f8:	d032      	beq.n	8013760 <__ssputs_r+0x80>
 80136fa:	6825      	ldr	r5, [r4, #0]
 80136fc:	6909      	ldr	r1, [r1, #16]
 80136fe:	eba5 0901 	sub.w	r9, r5, r1
 8013702:	6965      	ldr	r5, [r4, #20]
 8013704:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013708:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801370c:	3301      	adds	r3, #1
 801370e:	444b      	add	r3, r9
 8013710:	106d      	asrs	r5, r5, #1
 8013712:	429d      	cmp	r5, r3
 8013714:	bf38      	it	cc
 8013716:	461d      	movcc	r5, r3
 8013718:	0553      	lsls	r3, r2, #21
 801371a:	d531      	bpl.n	8013780 <__ssputs_r+0xa0>
 801371c:	4629      	mov	r1, r5
 801371e:	f7fb ffb7 	bl	800f690 <_malloc_r>
 8013722:	4606      	mov	r6, r0
 8013724:	b950      	cbnz	r0, 801373c <__ssputs_r+0x5c>
 8013726:	230c      	movs	r3, #12
 8013728:	f8ca 3000 	str.w	r3, [sl]
 801372c:	89a3      	ldrh	r3, [r4, #12]
 801372e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013732:	81a3      	strh	r3, [r4, #12]
 8013734:	f04f 30ff 	mov.w	r0, #4294967295
 8013738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801373c:	6921      	ldr	r1, [r4, #16]
 801373e:	464a      	mov	r2, r9
 8013740:	f7fb ff8f 	bl	800f662 <memcpy>
 8013744:	89a3      	ldrh	r3, [r4, #12]
 8013746:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801374a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801374e:	81a3      	strh	r3, [r4, #12]
 8013750:	6126      	str	r6, [r4, #16]
 8013752:	6165      	str	r5, [r4, #20]
 8013754:	444e      	add	r6, r9
 8013756:	eba5 0509 	sub.w	r5, r5, r9
 801375a:	6026      	str	r6, [r4, #0]
 801375c:	60a5      	str	r5, [r4, #8]
 801375e:	463e      	mov	r6, r7
 8013760:	42be      	cmp	r6, r7
 8013762:	d900      	bls.n	8013766 <__ssputs_r+0x86>
 8013764:	463e      	mov	r6, r7
 8013766:	4632      	mov	r2, r6
 8013768:	6820      	ldr	r0, [r4, #0]
 801376a:	4641      	mov	r1, r8
 801376c:	f000 f9a2 	bl	8013ab4 <memmove>
 8013770:	68a3      	ldr	r3, [r4, #8]
 8013772:	6822      	ldr	r2, [r4, #0]
 8013774:	1b9b      	subs	r3, r3, r6
 8013776:	4432      	add	r2, r6
 8013778:	60a3      	str	r3, [r4, #8]
 801377a:	6022      	str	r2, [r4, #0]
 801377c:	2000      	movs	r0, #0
 801377e:	e7db      	b.n	8013738 <__ssputs_r+0x58>
 8013780:	462a      	mov	r2, r5
 8013782:	f000 f9b1 	bl	8013ae8 <_realloc_r>
 8013786:	4606      	mov	r6, r0
 8013788:	2800      	cmp	r0, #0
 801378a:	d1e1      	bne.n	8013750 <__ssputs_r+0x70>
 801378c:	6921      	ldr	r1, [r4, #16]
 801378e:	4650      	mov	r0, sl
 8013790:	f7ff ff56 	bl	8013640 <_free_r>
 8013794:	e7c7      	b.n	8013726 <__ssputs_r+0x46>
	...

08013798 <_svfiprintf_r>:
 8013798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801379c:	4698      	mov	r8, r3
 801379e:	898b      	ldrh	r3, [r1, #12]
 80137a0:	061b      	lsls	r3, r3, #24
 80137a2:	b09d      	sub	sp, #116	; 0x74
 80137a4:	4607      	mov	r7, r0
 80137a6:	460d      	mov	r5, r1
 80137a8:	4614      	mov	r4, r2
 80137aa:	d50e      	bpl.n	80137ca <_svfiprintf_r+0x32>
 80137ac:	690b      	ldr	r3, [r1, #16]
 80137ae:	b963      	cbnz	r3, 80137ca <_svfiprintf_r+0x32>
 80137b0:	2140      	movs	r1, #64	; 0x40
 80137b2:	f7fb ff6d 	bl	800f690 <_malloc_r>
 80137b6:	6028      	str	r0, [r5, #0]
 80137b8:	6128      	str	r0, [r5, #16]
 80137ba:	b920      	cbnz	r0, 80137c6 <_svfiprintf_r+0x2e>
 80137bc:	230c      	movs	r3, #12
 80137be:	603b      	str	r3, [r7, #0]
 80137c0:	f04f 30ff 	mov.w	r0, #4294967295
 80137c4:	e0d1      	b.n	801396a <_svfiprintf_r+0x1d2>
 80137c6:	2340      	movs	r3, #64	; 0x40
 80137c8:	616b      	str	r3, [r5, #20]
 80137ca:	2300      	movs	r3, #0
 80137cc:	9309      	str	r3, [sp, #36]	; 0x24
 80137ce:	2320      	movs	r3, #32
 80137d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80137d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80137d8:	2330      	movs	r3, #48	; 0x30
 80137da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013984 <_svfiprintf_r+0x1ec>
 80137de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80137e2:	f04f 0901 	mov.w	r9, #1
 80137e6:	4623      	mov	r3, r4
 80137e8:	469a      	mov	sl, r3
 80137ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80137ee:	b10a      	cbz	r2, 80137f4 <_svfiprintf_r+0x5c>
 80137f0:	2a25      	cmp	r2, #37	; 0x25
 80137f2:	d1f9      	bne.n	80137e8 <_svfiprintf_r+0x50>
 80137f4:	ebba 0b04 	subs.w	fp, sl, r4
 80137f8:	d00b      	beq.n	8013812 <_svfiprintf_r+0x7a>
 80137fa:	465b      	mov	r3, fp
 80137fc:	4622      	mov	r2, r4
 80137fe:	4629      	mov	r1, r5
 8013800:	4638      	mov	r0, r7
 8013802:	f7ff ff6d 	bl	80136e0 <__ssputs_r>
 8013806:	3001      	adds	r0, #1
 8013808:	f000 80aa 	beq.w	8013960 <_svfiprintf_r+0x1c8>
 801380c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801380e:	445a      	add	r2, fp
 8013810:	9209      	str	r2, [sp, #36]	; 0x24
 8013812:	f89a 3000 	ldrb.w	r3, [sl]
 8013816:	2b00      	cmp	r3, #0
 8013818:	f000 80a2 	beq.w	8013960 <_svfiprintf_r+0x1c8>
 801381c:	2300      	movs	r3, #0
 801381e:	f04f 32ff 	mov.w	r2, #4294967295
 8013822:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013826:	f10a 0a01 	add.w	sl, sl, #1
 801382a:	9304      	str	r3, [sp, #16]
 801382c:	9307      	str	r3, [sp, #28]
 801382e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013832:	931a      	str	r3, [sp, #104]	; 0x68
 8013834:	4654      	mov	r4, sl
 8013836:	2205      	movs	r2, #5
 8013838:	f814 1b01 	ldrb.w	r1, [r4], #1
 801383c:	4851      	ldr	r0, [pc, #324]	; (8013984 <_svfiprintf_r+0x1ec>)
 801383e:	f7ec fcf7 	bl	8000230 <memchr>
 8013842:	9a04      	ldr	r2, [sp, #16]
 8013844:	b9d8      	cbnz	r0, 801387e <_svfiprintf_r+0xe6>
 8013846:	06d0      	lsls	r0, r2, #27
 8013848:	bf44      	itt	mi
 801384a:	2320      	movmi	r3, #32
 801384c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013850:	0711      	lsls	r1, r2, #28
 8013852:	bf44      	itt	mi
 8013854:	232b      	movmi	r3, #43	; 0x2b
 8013856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801385a:	f89a 3000 	ldrb.w	r3, [sl]
 801385e:	2b2a      	cmp	r3, #42	; 0x2a
 8013860:	d015      	beq.n	801388e <_svfiprintf_r+0xf6>
 8013862:	9a07      	ldr	r2, [sp, #28]
 8013864:	4654      	mov	r4, sl
 8013866:	2000      	movs	r0, #0
 8013868:	f04f 0c0a 	mov.w	ip, #10
 801386c:	4621      	mov	r1, r4
 801386e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013872:	3b30      	subs	r3, #48	; 0x30
 8013874:	2b09      	cmp	r3, #9
 8013876:	d94e      	bls.n	8013916 <_svfiprintf_r+0x17e>
 8013878:	b1b0      	cbz	r0, 80138a8 <_svfiprintf_r+0x110>
 801387a:	9207      	str	r2, [sp, #28]
 801387c:	e014      	b.n	80138a8 <_svfiprintf_r+0x110>
 801387e:	eba0 0308 	sub.w	r3, r0, r8
 8013882:	fa09 f303 	lsl.w	r3, r9, r3
 8013886:	4313      	orrs	r3, r2
 8013888:	9304      	str	r3, [sp, #16]
 801388a:	46a2      	mov	sl, r4
 801388c:	e7d2      	b.n	8013834 <_svfiprintf_r+0x9c>
 801388e:	9b03      	ldr	r3, [sp, #12]
 8013890:	1d19      	adds	r1, r3, #4
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	9103      	str	r1, [sp, #12]
 8013896:	2b00      	cmp	r3, #0
 8013898:	bfbb      	ittet	lt
 801389a:	425b      	neglt	r3, r3
 801389c:	f042 0202 	orrlt.w	r2, r2, #2
 80138a0:	9307      	strge	r3, [sp, #28]
 80138a2:	9307      	strlt	r3, [sp, #28]
 80138a4:	bfb8      	it	lt
 80138a6:	9204      	strlt	r2, [sp, #16]
 80138a8:	7823      	ldrb	r3, [r4, #0]
 80138aa:	2b2e      	cmp	r3, #46	; 0x2e
 80138ac:	d10c      	bne.n	80138c8 <_svfiprintf_r+0x130>
 80138ae:	7863      	ldrb	r3, [r4, #1]
 80138b0:	2b2a      	cmp	r3, #42	; 0x2a
 80138b2:	d135      	bne.n	8013920 <_svfiprintf_r+0x188>
 80138b4:	9b03      	ldr	r3, [sp, #12]
 80138b6:	1d1a      	adds	r2, r3, #4
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	9203      	str	r2, [sp, #12]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	bfb8      	it	lt
 80138c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80138c4:	3402      	adds	r4, #2
 80138c6:	9305      	str	r3, [sp, #20]
 80138c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013994 <_svfiprintf_r+0x1fc>
 80138cc:	7821      	ldrb	r1, [r4, #0]
 80138ce:	2203      	movs	r2, #3
 80138d0:	4650      	mov	r0, sl
 80138d2:	f7ec fcad 	bl	8000230 <memchr>
 80138d6:	b140      	cbz	r0, 80138ea <_svfiprintf_r+0x152>
 80138d8:	2340      	movs	r3, #64	; 0x40
 80138da:	eba0 000a 	sub.w	r0, r0, sl
 80138de:	fa03 f000 	lsl.w	r0, r3, r0
 80138e2:	9b04      	ldr	r3, [sp, #16]
 80138e4:	4303      	orrs	r3, r0
 80138e6:	3401      	adds	r4, #1
 80138e8:	9304      	str	r3, [sp, #16]
 80138ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138ee:	4826      	ldr	r0, [pc, #152]	; (8013988 <_svfiprintf_r+0x1f0>)
 80138f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80138f4:	2206      	movs	r2, #6
 80138f6:	f7ec fc9b 	bl	8000230 <memchr>
 80138fa:	2800      	cmp	r0, #0
 80138fc:	d038      	beq.n	8013970 <_svfiprintf_r+0x1d8>
 80138fe:	4b23      	ldr	r3, [pc, #140]	; (801398c <_svfiprintf_r+0x1f4>)
 8013900:	bb1b      	cbnz	r3, 801394a <_svfiprintf_r+0x1b2>
 8013902:	9b03      	ldr	r3, [sp, #12]
 8013904:	3307      	adds	r3, #7
 8013906:	f023 0307 	bic.w	r3, r3, #7
 801390a:	3308      	adds	r3, #8
 801390c:	9303      	str	r3, [sp, #12]
 801390e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013910:	4433      	add	r3, r6
 8013912:	9309      	str	r3, [sp, #36]	; 0x24
 8013914:	e767      	b.n	80137e6 <_svfiprintf_r+0x4e>
 8013916:	fb0c 3202 	mla	r2, ip, r2, r3
 801391a:	460c      	mov	r4, r1
 801391c:	2001      	movs	r0, #1
 801391e:	e7a5      	b.n	801386c <_svfiprintf_r+0xd4>
 8013920:	2300      	movs	r3, #0
 8013922:	3401      	adds	r4, #1
 8013924:	9305      	str	r3, [sp, #20]
 8013926:	4619      	mov	r1, r3
 8013928:	f04f 0c0a 	mov.w	ip, #10
 801392c:	4620      	mov	r0, r4
 801392e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013932:	3a30      	subs	r2, #48	; 0x30
 8013934:	2a09      	cmp	r2, #9
 8013936:	d903      	bls.n	8013940 <_svfiprintf_r+0x1a8>
 8013938:	2b00      	cmp	r3, #0
 801393a:	d0c5      	beq.n	80138c8 <_svfiprintf_r+0x130>
 801393c:	9105      	str	r1, [sp, #20]
 801393e:	e7c3      	b.n	80138c8 <_svfiprintf_r+0x130>
 8013940:	fb0c 2101 	mla	r1, ip, r1, r2
 8013944:	4604      	mov	r4, r0
 8013946:	2301      	movs	r3, #1
 8013948:	e7f0      	b.n	801392c <_svfiprintf_r+0x194>
 801394a:	ab03      	add	r3, sp, #12
 801394c:	9300      	str	r3, [sp, #0]
 801394e:	462a      	mov	r2, r5
 8013950:	4b0f      	ldr	r3, [pc, #60]	; (8013990 <_svfiprintf_r+0x1f8>)
 8013952:	a904      	add	r1, sp, #16
 8013954:	4638      	mov	r0, r7
 8013956:	f7fb ff95 	bl	800f884 <_printf_float>
 801395a:	1c42      	adds	r2, r0, #1
 801395c:	4606      	mov	r6, r0
 801395e:	d1d6      	bne.n	801390e <_svfiprintf_r+0x176>
 8013960:	89ab      	ldrh	r3, [r5, #12]
 8013962:	065b      	lsls	r3, r3, #25
 8013964:	f53f af2c 	bmi.w	80137c0 <_svfiprintf_r+0x28>
 8013968:	9809      	ldr	r0, [sp, #36]	; 0x24
 801396a:	b01d      	add	sp, #116	; 0x74
 801396c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013970:	ab03      	add	r3, sp, #12
 8013972:	9300      	str	r3, [sp, #0]
 8013974:	462a      	mov	r2, r5
 8013976:	4b06      	ldr	r3, [pc, #24]	; (8013990 <_svfiprintf_r+0x1f8>)
 8013978:	a904      	add	r1, sp, #16
 801397a:	4638      	mov	r0, r7
 801397c:	f7fc fa26 	bl	800fdcc <_printf_i>
 8013980:	e7eb      	b.n	801395a <_svfiprintf_r+0x1c2>
 8013982:	bf00      	nop
 8013984:	08015be4 	.word	0x08015be4
 8013988:	08015bee 	.word	0x08015bee
 801398c:	0800f885 	.word	0x0800f885
 8013990:	080136e1 	.word	0x080136e1
 8013994:	08015bea 	.word	0x08015bea

08013998 <_read_r>:
 8013998:	b538      	push	{r3, r4, r5, lr}
 801399a:	4d07      	ldr	r5, [pc, #28]	; (80139b8 <_read_r+0x20>)
 801399c:	4604      	mov	r4, r0
 801399e:	4608      	mov	r0, r1
 80139a0:	4611      	mov	r1, r2
 80139a2:	2200      	movs	r2, #0
 80139a4:	602a      	str	r2, [r5, #0]
 80139a6:	461a      	mov	r2, r3
 80139a8:	f7f3 f9d4 	bl	8006d54 <_read>
 80139ac:	1c43      	adds	r3, r0, #1
 80139ae:	d102      	bne.n	80139b6 <_read_r+0x1e>
 80139b0:	682b      	ldr	r3, [r5, #0]
 80139b2:	b103      	cbz	r3, 80139b6 <_read_r+0x1e>
 80139b4:	6023      	str	r3, [r4, #0]
 80139b6:	bd38      	pop	{r3, r4, r5, pc}
 80139b8:	20002bcc 	.word	0x20002bcc
 80139bc:	00000000 	.word	0x00000000

080139c0 <nan>:
 80139c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80139c8 <nan+0x8>
 80139c4:	4770      	bx	lr
 80139c6:	bf00      	nop
 80139c8:	00000000 	.word	0x00000000
 80139cc:	7ff80000 	.word	0x7ff80000

080139d0 <strncmp>:
 80139d0:	b510      	push	{r4, lr}
 80139d2:	b16a      	cbz	r2, 80139f0 <strncmp+0x20>
 80139d4:	3901      	subs	r1, #1
 80139d6:	1884      	adds	r4, r0, r2
 80139d8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80139dc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80139e0:	4293      	cmp	r3, r2
 80139e2:	d103      	bne.n	80139ec <strncmp+0x1c>
 80139e4:	42a0      	cmp	r0, r4
 80139e6:	d001      	beq.n	80139ec <strncmp+0x1c>
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d1f5      	bne.n	80139d8 <strncmp+0x8>
 80139ec:	1a98      	subs	r0, r3, r2
 80139ee:	bd10      	pop	{r4, pc}
 80139f0:	4610      	mov	r0, r2
 80139f2:	e7fc      	b.n	80139ee <strncmp+0x1e>

080139f4 <__ascii_wctomb>:
 80139f4:	b149      	cbz	r1, 8013a0a <__ascii_wctomb+0x16>
 80139f6:	2aff      	cmp	r2, #255	; 0xff
 80139f8:	bf85      	ittet	hi
 80139fa:	238a      	movhi	r3, #138	; 0x8a
 80139fc:	6003      	strhi	r3, [r0, #0]
 80139fe:	700a      	strbls	r2, [r1, #0]
 8013a00:	f04f 30ff 	movhi.w	r0, #4294967295
 8013a04:	bf98      	it	ls
 8013a06:	2001      	movls	r0, #1
 8013a08:	4770      	bx	lr
 8013a0a:	4608      	mov	r0, r1
 8013a0c:	4770      	bx	lr
	...

08013a10 <__assert_func>:
 8013a10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013a12:	4614      	mov	r4, r2
 8013a14:	461a      	mov	r2, r3
 8013a16:	4b09      	ldr	r3, [pc, #36]	; (8013a3c <__assert_func+0x2c>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	4605      	mov	r5, r0
 8013a1c:	68d8      	ldr	r0, [r3, #12]
 8013a1e:	b14c      	cbz	r4, 8013a34 <__assert_func+0x24>
 8013a20:	4b07      	ldr	r3, [pc, #28]	; (8013a40 <__assert_func+0x30>)
 8013a22:	9100      	str	r1, [sp, #0]
 8013a24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013a28:	4906      	ldr	r1, [pc, #24]	; (8013a44 <__assert_func+0x34>)
 8013a2a:	462b      	mov	r3, r5
 8013a2c:	f000 f80e 	bl	8013a4c <fiprintf>
 8013a30:	f000 f9da 	bl	8013de8 <abort>
 8013a34:	4b04      	ldr	r3, [pc, #16]	; (8013a48 <__assert_func+0x38>)
 8013a36:	461c      	mov	r4, r3
 8013a38:	e7f3      	b.n	8013a22 <__assert_func+0x12>
 8013a3a:	bf00      	nop
 8013a3c:	20000028 	.word	0x20000028
 8013a40:	08015bf5 	.word	0x08015bf5
 8013a44:	08015c02 	.word	0x08015c02
 8013a48:	08015c30 	.word	0x08015c30

08013a4c <fiprintf>:
 8013a4c:	b40e      	push	{r1, r2, r3}
 8013a4e:	b503      	push	{r0, r1, lr}
 8013a50:	4601      	mov	r1, r0
 8013a52:	ab03      	add	r3, sp, #12
 8013a54:	4805      	ldr	r0, [pc, #20]	; (8013a6c <fiprintf+0x20>)
 8013a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a5a:	6800      	ldr	r0, [r0, #0]
 8013a5c:	9301      	str	r3, [sp, #4]
 8013a5e:	f000 f893 	bl	8013b88 <_vfiprintf_r>
 8013a62:	b002      	add	sp, #8
 8013a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a68:	b003      	add	sp, #12
 8013a6a:	4770      	bx	lr
 8013a6c:	20000028 	.word	0x20000028

08013a70 <_fstat_r>:
 8013a70:	b538      	push	{r3, r4, r5, lr}
 8013a72:	4d07      	ldr	r5, [pc, #28]	; (8013a90 <_fstat_r+0x20>)
 8013a74:	2300      	movs	r3, #0
 8013a76:	4604      	mov	r4, r0
 8013a78:	4608      	mov	r0, r1
 8013a7a:	4611      	mov	r1, r2
 8013a7c:	602b      	str	r3, [r5, #0]
 8013a7e:	f7f3 f992 	bl	8006da6 <_fstat>
 8013a82:	1c43      	adds	r3, r0, #1
 8013a84:	d102      	bne.n	8013a8c <_fstat_r+0x1c>
 8013a86:	682b      	ldr	r3, [r5, #0]
 8013a88:	b103      	cbz	r3, 8013a8c <_fstat_r+0x1c>
 8013a8a:	6023      	str	r3, [r4, #0]
 8013a8c:	bd38      	pop	{r3, r4, r5, pc}
 8013a8e:	bf00      	nop
 8013a90:	20002bcc 	.word	0x20002bcc

08013a94 <_isatty_r>:
 8013a94:	b538      	push	{r3, r4, r5, lr}
 8013a96:	4d06      	ldr	r5, [pc, #24]	; (8013ab0 <_isatty_r+0x1c>)
 8013a98:	2300      	movs	r3, #0
 8013a9a:	4604      	mov	r4, r0
 8013a9c:	4608      	mov	r0, r1
 8013a9e:	602b      	str	r3, [r5, #0]
 8013aa0:	f7f3 f991 	bl	8006dc6 <_isatty>
 8013aa4:	1c43      	adds	r3, r0, #1
 8013aa6:	d102      	bne.n	8013aae <_isatty_r+0x1a>
 8013aa8:	682b      	ldr	r3, [r5, #0]
 8013aaa:	b103      	cbz	r3, 8013aae <_isatty_r+0x1a>
 8013aac:	6023      	str	r3, [r4, #0]
 8013aae:	bd38      	pop	{r3, r4, r5, pc}
 8013ab0:	20002bcc 	.word	0x20002bcc

08013ab4 <memmove>:
 8013ab4:	4288      	cmp	r0, r1
 8013ab6:	b510      	push	{r4, lr}
 8013ab8:	eb01 0402 	add.w	r4, r1, r2
 8013abc:	d902      	bls.n	8013ac4 <memmove+0x10>
 8013abe:	4284      	cmp	r4, r0
 8013ac0:	4623      	mov	r3, r4
 8013ac2:	d807      	bhi.n	8013ad4 <memmove+0x20>
 8013ac4:	1e43      	subs	r3, r0, #1
 8013ac6:	42a1      	cmp	r1, r4
 8013ac8:	d008      	beq.n	8013adc <memmove+0x28>
 8013aca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013ace:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013ad2:	e7f8      	b.n	8013ac6 <memmove+0x12>
 8013ad4:	4402      	add	r2, r0
 8013ad6:	4601      	mov	r1, r0
 8013ad8:	428a      	cmp	r2, r1
 8013ada:	d100      	bne.n	8013ade <memmove+0x2a>
 8013adc:	bd10      	pop	{r4, pc}
 8013ade:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013ae2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013ae6:	e7f7      	b.n	8013ad8 <memmove+0x24>

08013ae8 <_realloc_r>:
 8013ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013aea:	4607      	mov	r7, r0
 8013aec:	4614      	mov	r4, r2
 8013aee:	460e      	mov	r6, r1
 8013af0:	b921      	cbnz	r1, 8013afc <_realloc_r+0x14>
 8013af2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013af6:	4611      	mov	r1, r2
 8013af8:	f7fb bdca 	b.w	800f690 <_malloc_r>
 8013afc:	b922      	cbnz	r2, 8013b08 <_realloc_r+0x20>
 8013afe:	f7ff fd9f 	bl	8013640 <_free_r>
 8013b02:	4625      	mov	r5, r4
 8013b04:	4628      	mov	r0, r5
 8013b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b08:	f000 f975 	bl	8013df6 <_malloc_usable_size_r>
 8013b0c:	42a0      	cmp	r0, r4
 8013b0e:	d20f      	bcs.n	8013b30 <_realloc_r+0x48>
 8013b10:	4621      	mov	r1, r4
 8013b12:	4638      	mov	r0, r7
 8013b14:	f7fb fdbc 	bl	800f690 <_malloc_r>
 8013b18:	4605      	mov	r5, r0
 8013b1a:	2800      	cmp	r0, #0
 8013b1c:	d0f2      	beq.n	8013b04 <_realloc_r+0x1c>
 8013b1e:	4631      	mov	r1, r6
 8013b20:	4622      	mov	r2, r4
 8013b22:	f7fb fd9e 	bl	800f662 <memcpy>
 8013b26:	4631      	mov	r1, r6
 8013b28:	4638      	mov	r0, r7
 8013b2a:	f7ff fd89 	bl	8013640 <_free_r>
 8013b2e:	e7e9      	b.n	8013b04 <_realloc_r+0x1c>
 8013b30:	4635      	mov	r5, r6
 8013b32:	e7e7      	b.n	8013b04 <_realloc_r+0x1c>

08013b34 <__sfputc_r>:
 8013b34:	6893      	ldr	r3, [r2, #8]
 8013b36:	3b01      	subs	r3, #1
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	b410      	push	{r4}
 8013b3c:	6093      	str	r3, [r2, #8]
 8013b3e:	da08      	bge.n	8013b52 <__sfputc_r+0x1e>
 8013b40:	6994      	ldr	r4, [r2, #24]
 8013b42:	42a3      	cmp	r3, r4
 8013b44:	db01      	blt.n	8013b4a <__sfputc_r+0x16>
 8013b46:	290a      	cmp	r1, #10
 8013b48:	d103      	bne.n	8013b52 <__sfputc_r+0x1e>
 8013b4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b4e:	f7fd bc81 	b.w	8011454 <__swbuf_r>
 8013b52:	6813      	ldr	r3, [r2, #0]
 8013b54:	1c58      	adds	r0, r3, #1
 8013b56:	6010      	str	r0, [r2, #0]
 8013b58:	7019      	strb	r1, [r3, #0]
 8013b5a:	4608      	mov	r0, r1
 8013b5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b60:	4770      	bx	lr

08013b62 <__sfputs_r>:
 8013b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b64:	4606      	mov	r6, r0
 8013b66:	460f      	mov	r7, r1
 8013b68:	4614      	mov	r4, r2
 8013b6a:	18d5      	adds	r5, r2, r3
 8013b6c:	42ac      	cmp	r4, r5
 8013b6e:	d101      	bne.n	8013b74 <__sfputs_r+0x12>
 8013b70:	2000      	movs	r0, #0
 8013b72:	e007      	b.n	8013b84 <__sfputs_r+0x22>
 8013b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b78:	463a      	mov	r2, r7
 8013b7a:	4630      	mov	r0, r6
 8013b7c:	f7ff ffda 	bl	8013b34 <__sfputc_r>
 8013b80:	1c43      	adds	r3, r0, #1
 8013b82:	d1f3      	bne.n	8013b6c <__sfputs_r+0xa>
 8013b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013b88 <_vfiprintf_r>:
 8013b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b8c:	460d      	mov	r5, r1
 8013b8e:	b09d      	sub	sp, #116	; 0x74
 8013b90:	4614      	mov	r4, r2
 8013b92:	4698      	mov	r8, r3
 8013b94:	4606      	mov	r6, r0
 8013b96:	b118      	cbz	r0, 8013ba0 <_vfiprintf_r+0x18>
 8013b98:	6983      	ldr	r3, [r0, #24]
 8013b9a:	b90b      	cbnz	r3, 8013ba0 <_vfiprintf_r+0x18>
 8013b9c:	f7fb fc9c 	bl	800f4d8 <__sinit>
 8013ba0:	4b89      	ldr	r3, [pc, #548]	; (8013dc8 <_vfiprintf_r+0x240>)
 8013ba2:	429d      	cmp	r5, r3
 8013ba4:	d11b      	bne.n	8013bde <_vfiprintf_r+0x56>
 8013ba6:	6875      	ldr	r5, [r6, #4]
 8013ba8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013baa:	07d9      	lsls	r1, r3, #31
 8013bac:	d405      	bmi.n	8013bba <_vfiprintf_r+0x32>
 8013bae:	89ab      	ldrh	r3, [r5, #12]
 8013bb0:	059a      	lsls	r2, r3, #22
 8013bb2:	d402      	bmi.n	8013bba <_vfiprintf_r+0x32>
 8013bb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013bb6:	f7fb fd52 	bl	800f65e <__retarget_lock_acquire_recursive>
 8013bba:	89ab      	ldrh	r3, [r5, #12]
 8013bbc:	071b      	lsls	r3, r3, #28
 8013bbe:	d501      	bpl.n	8013bc4 <_vfiprintf_r+0x3c>
 8013bc0:	692b      	ldr	r3, [r5, #16]
 8013bc2:	b9eb      	cbnz	r3, 8013c00 <_vfiprintf_r+0x78>
 8013bc4:	4629      	mov	r1, r5
 8013bc6:	4630      	mov	r0, r6
 8013bc8:	f7fd fca8 	bl	801151c <__swsetup_r>
 8013bcc:	b1c0      	cbz	r0, 8013c00 <_vfiprintf_r+0x78>
 8013bce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013bd0:	07dc      	lsls	r4, r3, #31
 8013bd2:	d50e      	bpl.n	8013bf2 <_vfiprintf_r+0x6a>
 8013bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8013bd8:	b01d      	add	sp, #116	; 0x74
 8013bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bde:	4b7b      	ldr	r3, [pc, #492]	; (8013dcc <_vfiprintf_r+0x244>)
 8013be0:	429d      	cmp	r5, r3
 8013be2:	d101      	bne.n	8013be8 <_vfiprintf_r+0x60>
 8013be4:	68b5      	ldr	r5, [r6, #8]
 8013be6:	e7df      	b.n	8013ba8 <_vfiprintf_r+0x20>
 8013be8:	4b79      	ldr	r3, [pc, #484]	; (8013dd0 <_vfiprintf_r+0x248>)
 8013bea:	429d      	cmp	r5, r3
 8013bec:	bf08      	it	eq
 8013bee:	68f5      	ldreq	r5, [r6, #12]
 8013bf0:	e7da      	b.n	8013ba8 <_vfiprintf_r+0x20>
 8013bf2:	89ab      	ldrh	r3, [r5, #12]
 8013bf4:	0598      	lsls	r0, r3, #22
 8013bf6:	d4ed      	bmi.n	8013bd4 <_vfiprintf_r+0x4c>
 8013bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013bfa:	f7fb fd31 	bl	800f660 <__retarget_lock_release_recursive>
 8013bfe:	e7e9      	b.n	8013bd4 <_vfiprintf_r+0x4c>
 8013c00:	2300      	movs	r3, #0
 8013c02:	9309      	str	r3, [sp, #36]	; 0x24
 8013c04:	2320      	movs	r3, #32
 8013c06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013c0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c0e:	2330      	movs	r3, #48	; 0x30
 8013c10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013dd4 <_vfiprintf_r+0x24c>
 8013c14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013c18:	f04f 0901 	mov.w	r9, #1
 8013c1c:	4623      	mov	r3, r4
 8013c1e:	469a      	mov	sl, r3
 8013c20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c24:	b10a      	cbz	r2, 8013c2a <_vfiprintf_r+0xa2>
 8013c26:	2a25      	cmp	r2, #37	; 0x25
 8013c28:	d1f9      	bne.n	8013c1e <_vfiprintf_r+0x96>
 8013c2a:	ebba 0b04 	subs.w	fp, sl, r4
 8013c2e:	d00b      	beq.n	8013c48 <_vfiprintf_r+0xc0>
 8013c30:	465b      	mov	r3, fp
 8013c32:	4622      	mov	r2, r4
 8013c34:	4629      	mov	r1, r5
 8013c36:	4630      	mov	r0, r6
 8013c38:	f7ff ff93 	bl	8013b62 <__sfputs_r>
 8013c3c:	3001      	adds	r0, #1
 8013c3e:	f000 80aa 	beq.w	8013d96 <_vfiprintf_r+0x20e>
 8013c42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013c44:	445a      	add	r2, fp
 8013c46:	9209      	str	r2, [sp, #36]	; 0x24
 8013c48:	f89a 3000 	ldrb.w	r3, [sl]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	f000 80a2 	beq.w	8013d96 <_vfiprintf_r+0x20e>
 8013c52:	2300      	movs	r3, #0
 8013c54:	f04f 32ff 	mov.w	r2, #4294967295
 8013c58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c5c:	f10a 0a01 	add.w	sl, sl, #1
 8013c60:	9304      	str	r3, [sp, #16]
 8013c62:	9307      	str	r3, [sp, #28]
 8013c64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013c68:	931a      	str	r3, [sp, #104]	; 0x68
 8013c6a:	4654      	mov	r4, sl
 8013c6c:	2205      	movs	r2, #5
 8013c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c72:	4858      	ldr	r0, [pc, #352]	; (8013dd4 <_vfiprintf_r+0x24c>)
 8013c74:	f7ec fadc 	bl	8000230 <memchr>
 8013c78:	9a04      	ldr	r2, [sp, #16]
 8013c7a:	b9d8      	cbnz	r0, 8013cb4 <_vfiprintf_r+0x12c>
 8013c7c:	06d1      	lsls	r1, r2, #27
 8013c7e:	bf44      	itt	mi
 8013c80:	2320      	movmi	r3, #32
 8013c82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c86:	0713      	lsls	r3, r2, #28
 8013c88:	bf44      	itt	mi
 8013c8a:	232b      	movmi	r3, #43	; 0x2b
 8013c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013c90:	f89a 3000 	ldrb.w	r3, [sl]
 8013c94:	2b2a      	cmp	r3, #42	; 0x2a
 8013c96:	d015      	beq.n	8013cc4 <_vfiprintf_r+0x13c>
 8013c98:	9a07      	ldr	r2, [sp, #28]
 8013c9a:	4654      	mov	r4, sl
 8013c9c:	2000      	movs	r0, #0
 8013c9e:	f04f 0c0a 	mov.w	ip, #10
 8013ca2:	4621      	mov	r1, r4
 8013ca4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ca8:	3b30      	subs	r3, #48	; 0x30
 8013caa:	2b09      	cmp	r3, #9
 8013cac:	d94e      	bls.n	8013d4c <_vfiprintf_r+0x1c4>
 8013cae:	b1b0      	cbz	r0, 8013cde <_vfiprintf_r+0x156>
 8013cb0:	9207      	str	r2, [sp, #28]
 8013cb2:	e014      	b.n	8013cde <_vfiprintf_r+0x156>
 8013cb4:	eba0 0308 	sub.w	r3, r0, r8
 8013cb8:	fa09 f303 	lsl.w	r3, r9, r3
 8013cbc:	4313      	orrs	r3, r2
 8013cbe:	9304      	str	r3, [sp, #16]
 8013cc0:	46a2      	mov	sl, r4
 8013cc2:	e7d2      	b.n	8013c6a <_vfiprintf_r+0xe2>
 8013cc4:	9b03      	ldr	r3, [sp, #12]
 8013cc6:	1d19      	adds	r1, r3, #4
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	9103      	str	r1, [sp, #12]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	bfbb      	ittet	lt
 8013cd0:	425b      	neglt	r3, r3
 8013cd2:	f042 0202 	orrlt.w	r2, r2, #2
 8013cd6:	9307      	strge	r3, [sp, #28]
 8013cd8:	9307      	strlt	r3, [sp, #28]
 8013cda:	bfb8      	it	lt
 8013cdc:	9204      	strlt	r2, [sp, #16]
 8013cde:	7823      	ldrb	r3, [r4, #0]
 8013ce0:	2b2e      	cmp	r3, #46	; 0x2e
 8013ce2:	d10c      	bne.n	8013cfe <_vfiprintf_r+0x176>
 8013ce4:	7863      	ldrb	r3, [r4, #1]
 8013ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8013ce8:	d135      	bne.n	8013d56 <_vfiprintf_r+0x1ce>
 8013cea:	9b03      	ldr	r3, [sp, #12]
 8013cec:	1d1a      	adds	r2, r3, #4
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	9203      	str	r2, [sp, #12]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	bfb8      	it	lt
 8013cf6:	f04f 33ff 	movlt.w	r3, #4294967295
 8013cfa:	3402      	adds	r4, #2
 8013cfc:	9305      	str	r3, [sp, #20]
 8013cfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013de4 <_vfiprintf_r+0x25c>
 8013d02:	7821      	ldrb	r1, [r4, #0]
 8013d04:	2203      	movs	r2, #3
 8013d06:	4650      	mov	r0, sl
 8013d08:	f7ec fa92 	bl	8000230 <memchr>
 8013d0c:	b140      	cbz	r0, 8013d20 <_vfiprintf_r+0x198>
 8013d0e:	2340      	movs	r3, #64	; 0x40
 8013d10:	eba0 000a 	sub.w	r0, r0, sl
 8013d14:	fa03 f000 	lsl.w	r0, r3, r0
 8013d18:	9b04      	ldr	r3, [sp, #16]
 8013d1a:	4303      	orrs	r3, r0
 8013d1c:	3401      	adds	r4, #1
 8013d1e:	9304      	str	r3, [sp, #16]
 8013d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d24:	482c      	ldr	r0, [pc, #176]	; (8013dd8 <_vfiprintf_r+0x250>)
 8013d26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013d2a:	2206      	movs	r2, #6
 8013d2c:	f7ec fa80 	bl	8000230 <memchr>
 8013d30:	2800      	cmp	r0, #0
 8013d32:	d03f      	beq.n	8013db4 <_vfiprintf_r+0x22c>
 8013d34:	4b29      	ldr	r3, [pc, #164]	; (8013ddc <_vfiprintf_r+0x254>)
 8013d36:	bb1b      	cbnz	r3, 8013d80 <_vfiprintf_r+0x1f8>
 8013d38:	9b03      	ldr	r3, [sp, #12]
 8013d3a:	3307      	adds	r3, #7
 8013d3c:	f023 0307 	bic.w	r3, r3, #7
 8013d40:	3308      	adds	r3, #8
 8013d42:	9303      	str	r3, [sp, #12]
 8013d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d46:	443b      	add	r3, r7
 8013d48:	9309      	str	r3, [sp, #36]	; 0x24
 8013d4a:	e767      	b.n	8013c1c <_vfiprintf_r+0x94>
 8013d4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d50:	460c      	mov	r4, r1
 8013d52:	2001      	movs	r0, #1
 8013d54:	e7a5      	b.n	8013ca2 <_vfiprintf_r+0x11a>
 8013d56:	2300      	movs	r3, #0
 8013d58:	3401      	adds	r4, #1
 8013d5a:	9305      	str	r3, [sp, #20]
 8013d5c:	4619      	mov	r1, r3
 8013d5e:	f04f 0c0a 	mov.w	ip, #10
 8013d62:	4620      	mov	r0, r4
 8013d64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d68:	3a30      	subs	r2, #48	; 0x30
 8013d6a:	2a09      	cmp	r2, #9
 8013d6c:	d903      	bls.n	8013d76 <_vfiprintf_r+0x1ee>
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d0c5      	beq.n	8013cfe <_vfiprintf_r+0x176>
 8013d72:	9105      	str	r1, [sp, #20]
 8013d74:	e7c3      	b.n	8013cfe <_vfiprintf_r+0x176>
 8013d76:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d7a:	4604      	mov	r4, r0
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	e7f0      	b.n	8013d62 <_vfiprintf_r+0x1da>
 8013d80:	ab03      	add	r3, sp, #12
 8013d82:	9300      	str	r3, [sp, #0]
 8013d84:	462a      	mov	r2, r5
 8013d86:	4b16      	ldr	r3, [pc, #88]	; (8013de0 <_vfiprintf_r+0x258>)
 8013d88:	a904      	add	r1, sp, #16
 8013d8a:	4630      	mov	r0, r6
 8013d8c:	f7fb fd7a 	bl	800f884 <_printf_float>
 8013d90:	4607      	mov	r7, r0
 8013d92:	1c78      	adds	r0, r7, #1
 8013d94:	d1d6      	bne.n	8013d44 <_vfiprintf_r+0x1bc>
 8013d96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d98:	07d9      	lsls	r1, r3, #31
 8013d9a:	d405      	bmi.n	8013da8 <_vfiprintf_r+0x220>
 8013d9c:	89ab      	ldrh	r3, [r5, #12]
 8013d9e:	059a      	lsls	r2, r3, #22
 8013da0:	d402      	bmi.n	8013da8 <_vfiprintf_r+0x220>
 8013da2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013da4:	f7fb fc5c 	bl	800f660 <__retarget_lock_release_recursive>
 8013da8:	89ab      	ldrh	r3, [r5, #12]
 8013daa:	065b      	lsls	r3, r3, #25
 8013dac:	f53f af12 	bmi.w	8013bd4 <_vfiprintf_r+0x4c>
 8013db0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013db2:	e711      	b.n	8013bd8 <_vfiprintf_r+0x50>
 8013db4:	ab03      	add	r3, sp, #12
 8013db6:	9300      	str	r3, [sp, #0]
 8013db8:	462a      	mov	r2, r5
 8013dba:	4b09      	ldr	r3, [pc, #36]	; (8013de0 <_vfiprintf_r+0x258>)
 8013dbc:	a904      	add	r1, sp, #16
 8013dbe:	4630      	mov	r0, r6
 8013dc0:	f7fc f804 	bl	800fdcc <_printf_i>
 8013dc4:	e7e4      	b.n	8013d90 <_vfiprintf_r+0x208>
 8013dc6:	bf00      	nop
 8013dc8:	080157a0 	.word	0x080157a0
 8013dcc:	080157c0 	.word	0x080157c0
 8013dd0:	08015780 	.word	0x08015780
 8013dd4:	08015be4 	.word	0x08015be4
 8013dd8:	08015bee 	.word	0x08015bee
 8013ddc:	0800f885 	.word	0x0800f885
 8013de0:	08013b63 	.word	0x08013b63
 8013de4:	08015bea 	.word	0x08015bea

08013de8 <abort>:
 8013de8:	b508      	push	{r3, lr}
 8013dea:	2006      	movs	r0, #6
 8013dec:	f000 f834 	bl	8013e58 <raise>
 8013df0:	2001      	movs	r0, #1
 8013df2:	f7f2 ffa5 	bl	8006d40 <_exit>

08013df6 <_malloc_usable_size_r>:
 8013df6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013dfa:	1f18      	subs	r0, r3, #4
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	bfbc      	itt	lt
 8013e00:	580b      	ldrlt	r3, [r1, r0]
 8013e02:	18c0      	addlt	r0, r0, r3
 8013e04:	4770      	bx	lr

08013e06 <_raise_r>:
 8013e06:	291f      	cmp	r1, #31
 8013e08:	b538      	push	{r3, r4, r5, lr}
 8013e0a:	4604      	mov	r4, r0
 8013e0c:	460d      	mov	r5, r1
 8013e0e:	d904      	bls.n	8013e1a <_raise_r+0x14>
 8013e10:	2316      	movs	r3, #22
 8013e12:	6003      	str	r3, [r0, #0]
 8013e14:	f04f 30ff 	mov.w	r0, #4294967295
 8013e18:	bd38      	pop	{r3, r4, r5, pc}
 8013e1a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013e1c:	b112      	cbz	r2, 8013e24 <_raise_r+0x1e>
 8013e1e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013e22:	b94b      	cbnz	r3, 8013e38 <_raise_r+0x32>
 8013e24:	4620      	mov	r0, r4
 8013e26:	f000 f831 	bl	8013e8c <_getpid_r>
 8013e2a:	462a      	mov	r2, r5
 8013e2c:	4601      	mov	r1, r0
 8013e2e:	4620      	mov	r0, r4
 8013e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013e34:	f000 b818 	b.w	8013e68 <_kill_r>
 8013e38:	2b01      	cmp	r3, #1
 8013e3a:	d00a      	beq.n	8013e52 <_raise_r+0x4c>
 8013e3c:	1c59      	adds	r1, r3, #1
 8013e3e:	d103      	bne.n	8013e48 <_raise_r+0x42>
 8013e40:	2316      	movs	r3, #22
 8013e42:	6003      	str	r3, [r0, #0]
 8013e44:	2001      	movs	r0, #1
 8013e46:	e7e7      	b.n	8013e18 <_raise_r+0x12>
 8013e48:	2400      	movs	r4, #0
 8013e4a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013e4e:	4628      	mov	r0, r5
 8013e50:	4798      	blx	r3
 8013e52:	2000      	movs	r0, #0
 8013e54:	e7e0      	b.n	8013e18 <_raise_r+0x12>
	...

08013e58 <raise>:
 8013e58:	4b02      	ldr	r3, [pc, #8]	; (8013e64 <raise+0xc>)
 8013e5a:	4601      	mov	r1, r0
 8013e5c:	6818      	ldr	r0, [r3, #0]
 8013e5e:	f7ff bfd2 	b.w	8013e06 <_raise_r>
 8013e62:	bf00      	nop
 8013e64:	20000028 	.word	0x20000028

08013e68 <_kill_r>:
 8013e68:	b538      	push	{r3, r4, r5, lr}
 8013e6a:	4d07      	ldr	r5, [pc, #28]	; (8013e88 <_kill_r+0x20>)
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	4604      	mov	r4, r0
 8013e70:	4608      	mov	r0, r1
 8013e72:	4611      	mov	r1, r2
 8013e74:	602b      	str	r3, [r5, #0]
 8013e76:	f7f2 ff53 	bl	8006d20 <_kill>
 8013e7a:	1c43      	adds	r3, r0, #1
 8013e7c:	d102      	bne.n	8013e84 <_kill_r+0x1c>
 8013e7e:	682b      	ldr	r3, [r5, #0]
 8013e80:	b103      	cbz	r3, 8013e84 <_kill_r+0x1c>
 8013e82:	6023      	str	r3, [r4, #0]
 8013e84:	bd38      	pop	{r3, r4, r5, pc}
 8013e86:	bf00      	nop
 8013e88:	20002bcc 	.word	0x20002bcc

08013e8c <_getpid_r>:
 8013e8c:	f7f2 bf40 	b.w	8006d10 <_getpid>

08013e90 <pow>:
 8013e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e94:	ec59 8b10 	vmov	r8, r9, d0
 8013e98:	ec57 6b11 	vmov	r6, r7, d1
 8013e9c:	f000 f900 	bl	80140a0 <__ieee754_pow>
 8013ea0:	4b4e      	ldr	r3, [pc, #312]	; (8013fdc <pow+0x14c>)
 8013ea2:	f993 3000 	ldrsb.w	r3, [r3]
 8013ea6:	3301      	adds	r3, #1
 8013ea8:	ec55 4b10 	vmov	r4, r5, d0
 8013eac:	d015      	beq.n	8013eda <pow+0x4a>
 8013eae:	4632      	mov	r2, r6
 8013eb0:	463b      	mov	r3, r7
 8013eb2:	4630      	mov	r0, r6
 8013eb4:	4639      	mov	r1, r7
 8013eb6:	f7ec fe61 	bl	8000b7c <__aeabi_dcmpun>
 8013eba:	b970      	cbnz	r0, 8013eda <pow+0x4a>
 8013ebc:	4642      	mov	r2, r8
 8013ebe:	464b      	mov	r3, r9
 8013ec0:	4640      	mov	r0, r8
 8013ec2:	4649      	mov	r1, r9
 8013ec4:	f7ec fe5a 	bl	8000b7c <__aeabi_dcmpun>
 8013ec8:	2200      	movs	r2, #0
 8013eca:	2300      	movs	r3, #0
 8013ecc:	b148      	cbz	r0, 8013ee2 <pow+0x52>
 8013ece:	4630      	mov	r0, r6
 8013ed0:	4639      	mov	r1, r7
 8013ed2:	f7ec fe21 	bl	8000b18 <__aeabi_dcmpeq>
 8013ed6:	2800      	cmp	r0, #0
 8013ed8:	d17d      	bne.n	8013fd6 <pow+0x146>
 8013eda:	ec45 4b10 	vmov	d0, r4, r5
 8013ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ee2:	4640      	mov	r0, r8
 8013ee4:	4649      	mov	r1, r9
 8013ee6:	f7ec fe17 	bl	8000b18 <__aeabi_dcmpeq>
 8013eea:	b1e0      	cbz	r0, 8013f26 <pow+0x96>
 8013eec:	2200      	movs	r2, #0
 8013eee:	2300      	movs	r3, #0
 8013ef0:	4630      	mov	r0, r6
 8013ef2:	4639      	mov	r1, r7
 8013ef4:	f7ec fe10 	bl	8000b18 <__aeabi_dcmpeq>
 8013ef8:	2800      	cmp	r0, #0
 8013efa:	d16c      	bne.n	8013fd6 <pow+0x146>
 8013efc:	ec47 6b10 	vmov	d0, r6, r7
 8013f00:	f001 f836 	bl	8014f70 <finite>
 8013f04:	2800      	cmp	r0, #0
 8013f06:	d0e8      	beq.n	8013eda <pow+0x4a>
 8013f08:	2200      	movs	r2, #0
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	4630      	mov	r0, r6
 8013f0e:	4639      	mov	r1, r7
 8013f10:	f7ec fe0c 	bl	8000b2c <__aeabi_dcmplt>
 8013f14:	2800      	cmp	r0, #0
 8013f16:	d0e0      	beq.n	8013eda <pow+0x4a>
 8013f18:	f7fb fa80 	bl	800f41c <__errno>
 8013f1c:	2321      	movs	r3, #33	; 0x21
 8013f1e:	6003      	str	r3, [r0, #0]
 8013f20:	2400      	movs	r4, #0
 8013f22:	4d2f      	ldr	r5, [pc, #188]	; (8013fe0 <pow+0x150>)
 8013f24:	e7d9      	b.n	8013eda <pow+0x4a>
 8013f26:	ec45 4b10 	vmov	d0, r4, r5
 8013f2a:	f001 f821 	bl	8014f70 <finite>
 8013f2e:	bbb8      	cbnz	r0, 8013fa0 <pow+0x110>
 8013f30:	ec49 8b10 	vmov	d0, r8, r9
 8013f34:	f001 f81c 	bl	8014f70 <finite>
 8013f38:	b390      	cbz	r0, 8013fa0 <pow+0x110>
 8013f3a:	ec47 6b10 	vmov	d0, r6, r7
 8013f3e:	f001 f817 	bl	8014f70 <finite>
 8013f42:	b368      	cbz	r0, 8013fa0 <pow+0x110>
 8013f44:	4622      	mov	r2, r4
 8013f46:	462b      	mov	r3, r5
 8013f48:	4620      	mov	r0, r4
 8013f4a:	4629      	mov	r1, r5
 8013f4c:	f7ec fe16 	bl	8000b7c <__aeabi_dcmpun>
 8013f50:	b160      	cbz	r0, 8013f6c <pow+0xdc>
 8013f52:	f7fb fa63 	bl	800f41c <__errno>
 8013f56:	2321      	movs	r3, #33	; 0x21
 8013f58:	6003      	str	r3, [r0, #0]
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	4610      	mov	r0, r2
 8013f60:	4619      	mov	r1, r3
 8013f62:	f7ec fc9b 	bl	800089c <__aeabi_ddiv>
 8013f66:	4604      	mov	r4, r0
 8013f68:	460d      	mov	r5, r1
 8013f6a:	e7b6      	b.n	8013eda <pow+0x4a>
 8013f6c:	f7fb fa56 	bl	800f41c <__errno>
 8013f70:	2322      	movs	r3, #34	; 0x22
 8013f72:	6003      	str	r3, [r0, #0]
 8013f74:	2200      	movs	r2, #0
 8013f76:	2300      	movs	r3, #0
 8013f78:	4640      	mov	r0, r8
 8013f7a:	4649      	mov	r1, r9
 8013f7c:	f7ec fdd6 	bl	8000b2c <__aeabi_dcmplt>
 8013f80:	2400      	movs	r4, #0
 8013f82:	b158      	cbz	r0, 8013f9c <pow+0x10c>
 8013f84:	ec47 6b10 	vmov	d0, r6, r7
 8013f88:	f000 fffe 	bl	8014f88 <rint>
 8013f8c:	4632      	mov	r2, r6
 8013f8e:	ec51 0b10 	vmov	r0, r1, d0
 8013f92:	463b      	mov	r3, r7
 8013f94:	f7ec fdc0 	bl	8000b18 <__aeabi_dcmpeq>
 8013f98:	2800      	cmp	r0, #0
 8013f9a:	d0c2      	beq.n	8013f22 <pow+0x92>
 8013f9c:	4d11      	ldr	r5, [pc, #68]	; (8013fe4 <pow+0x154>)
 8013f9e:	e79c      	b.n	8013eda <pow+0x4a>
 8013fa0:	2200      	movs	r2, #0
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	4620      	mov	r0, r4
 8013fa6:	4629      	mov	r1, r5
 8013fa8:	f7ec fdb6 	bl	8000b18 <__aeabi_dcmpeq>
 8013fac:	2800      	cmp	r0, #0
 8013fae:	d094      	beq.n	8013eda <pow+0x4a>
 8013fb0:	ec49 8b10 	vmov	d0, r8, r9
 8013fb4:	f000 ffdc 	bl	8014f70 <finite>
 8013fb8:	2800      	cmp	r0, #0
 8013fba:	d08e      	beq.n	8013eda <pow+0x4a>
 8013fbc:	ec47 6b10 	vmov	d0, r6, r7
 8013fc0:	f000 ffd6 	bl	8014f70 <finite>
 8013fc4:	2800      	cmp	r0, #0
 8013fc6:	d088      	beq.n	8013eda <pow+0x4a>
 8013fc8:	f7fb fa28 	bl	800f41c <__errno>
 8013fcc:	2322      	movs	r3, #34	; 0x22
 8013fce:	6003      	str	r3, [r0, #0]
 8013fd0:	2400      	movs	r4, #0
 8013fd2:	2500      	movs	r5, #0
 8013fd4:	e781      	b.n	8013eda <pow+0x4a>
 8013fd6:	4d04      	ldr	r5, [pc, #16]	; (8013fe8 <pow+0x158>)
 8013fd8:	2400      	movs	r4, #0
 8013fda:	e77e      	b.n	8013eda <pow+0x4a>
 8013fdc:	200001fc 	.word	0x200001fc
 8013fe0:	fff00000 	.word	0xfff00000
 8013fe4:	7ff00000 	.word	0x7ff00000
 8013fe8:	3ff00000 	.word	0x3ff00000

08013fec <asinf>:
 8013fec:	b508      	push	{r3, lr}
 8013fee:	ed2d 8b02 	vpush	{d8}
 8013ff2:	eeb0 8a40 	vmov.f32	s16, s0
 8013ff6:	f000 fe29 	bl	8014c4c <__ieee754_asinf>
 8013ffa:	4b13      	ldr	r3, [pc, #76]	; (8014048 <asinf+0x5c>)
 8013ffc:	f993 3000 	ldrsb.w	r3, [r3]
 8014000:	3301      	adds	r3, #1
 8014002:	eef0 8a40 	vmov.f32	s17, s0
 8014006:	d01a      	beq.n	801403e <asinf+0x52>
 8014008:	eeb4 8a48 	vcmp.f32	s16, s16
 801400c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014010:	d615      	bvs.n	801403e <asinf+0x52>
 8014012:	eeb0 0a48 	vmov.f32	s0, s16
 8014016:	f001 f99d 	bl	8015354 <fabsf>
 801401a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801401e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014026:	dd0a      	ble.n	801403e <asinf+0x52>
 8014028:	f7fb f9f8 	bl	800f41c <__errno>
 801402c:	ecbd 8b02 	vpop	{d8}
 8014030:	2321      	movs	r3, #33	; 0x21
 8014032:	6003      	str	r3, [r0, #0]
 8014034:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014038:	4804      	ldr	r0, [pc, #16]	; (801404c <asinf+0x60>)
 801403a:	f7fc baed 	b.w	8010618 <nanf>
 801403e:	eeb0 0a68 	vmov.f32	s0, s17
 8014042:	ecbd 8b02 	vpop	{d8}
 8014046:	bd08      	pop	{r3, pc}
 8014048:	200001fc 	.word	0x200001fc
 801404c:	08015c30 	.word	0x08015c30

08014050 <atan2f>:
 8014050:	f000 bee2 	b.w	8014e18 <__ieee754_atan2f>

08014054 <sqrtf>:
 8014054:	b508      	push	{r3, lr}
 8014056:	ed2d 8b02 	vpush	{d8}
 801405a:	eeb0 8a40 	vmov.f32	s16, s0
 801405e:	f000 ff7b 	bl	8014f58 <__ieee754_sqrtf>
 8014062:	4b0d      	ldr	r3, [pc, #52]	; (8014098 <sqrtf+0x44>)
 8014064:	f993 3000 	ldrsb.w	r3, [r3]
 8014068:	3301      	adds	r3, #1
 801406a:	d011      	beq.n	8014090 <sqrtf+0x3c>
 801406c:	eeb4 8a48 	vcmp.f32	s16, s16
 8014070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014074:	d60c      	bvs.n	8014090 <sqrtf+0x3c>
 8014076:	eddf 8a09 	vldr	s17, [pc, #36]	; 801409c <sqrtf+0x48>
 801407a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801407e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014082:	d505      	bpl.n	8014090 <sqrtf+0x3c>
 8014084:	f7fb f9ca 	bl	800f41c <__errno>
 8014088:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801408c:	2321      	movs	r3, #33	; 0x21
 801408e:	6003      	str	r3, [r0, #0]
 8014090:	ecbd 8b02 	vpop	{d8}
 8014094:	bd08      	pop	{r3, pc}
 8014096:	bf00      	nop
 8014098:	200001fc 	.word	0x200001fc
 801409c:	00000000 	.word	0x00000000

080140a0 <__ieee754_pow>:
 80140a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140a4:	ed2d 8b06 	vpush	{d8-d10}
 80140a8:	b08d      	sub	sp, #52	; 0x34
 80140aa:	ed8d 1b02 	vstr	d1, [sp, #8]
 80140ae:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80140b2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80140b6:	ea56 0100 	orrs.w	r1, r6, r0
 80140ba:	ec53 2b10 	vmov	r2, r3, d0
 80140be:	f000 84d1 	beq.w	8014a64 <__ieee754_pow+0x9c4>
 80140c2:	497f      	ldr	r1, [pc, #508]	; (80142c0 <__ieee754_pow+0x220>)
 80140c4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80140c8:	428c      	cmp	r4, r1
 80140ca:	ee10 8a10 	vmov	r8, s0
 80140ce:	4699      	mov	r9, r3
 80140d0:	dc09      	bgt.n	80140e6 <__ieee754_pow+0x46>
 80140d2:	d103      	bne.n	80140dc <__ieee754_pow+0x3c>
 80140d4:	b97a      	cbnz	r2, 80140f6 <__ieee754_pow+0x56>
 80140d6:	42a6      	cmp	r6, r4
 80140d8:	dd02      	ble.n	80140e0 <__ieee754_pow+0x40>
 80140da:	e00c      	b.n	80140f6 <__ieee754_pow+0x56>
 80140dc:	428e      	cmp	r6, r1
 80140de:	dc02      	bgt.n	80140e6 <__ieee754_pow+0x46>
 80140e0:	428e      	cmp	r6, r1
 80140e2:	d110      	bne.n	8014106 <__ieee754_pow+0x66>
 80140e4:	b178      	cbz	r0, 8014106 <__ieee754_pow+0x66>
 80140e6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80140ea:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80140ee:	ea54 0308 	orrs.w	r3, r4, r8
 80140f2:	f000 84b7 	beq.w	8014a64 <__ieee754_pow+0x9c4>
 80140f6:	4873      	ldr	r0, [pc, #460]	; (80142c4 <__ieee754_pow+0x224>)
 80140f8:	b00d      	add	sp, #52	; 0x34
 80140fa:	ecbd 8b06 	vpop	{d8-d10}
 80140fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014102:	f7ff bc5d 	b.w	80139c0 <nan>
 8014106:	f1b9 0f00 	cmp.w	r9, #0
 801410a:	da36      	bge.n	801417a <__ieee754_pow+0xda>
 801410c:	496e      	ldr	r1, [pc, #440]	; (80142c8 <__ieee754_pow+0x228>)
 801410e:	428e      	cmp	r6, r1
 8014110:	dc51      	bgt.n	80141b6 <__ieee754_pow+0x116>
 8014112:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8014116:	428e      	cmp	r6, r1
 8014118:	f340 84af 	ble.w	8014a7a <__ieee754_pow+0x9da>
 801411c:	1531      	asrs	r1, r6, #20
 801411e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8014122:	2914      	cmp	r1, #20
 8014124:	dd0f      	ble.n	8014146 <__ieee754_pow+0xa6>
 8014126:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801412a:	fa20 fc01 	lsr.w	ip, r0, r1
 801412e:	fa0c f101 	lsl.w	r1, ip, r1
 8014132:	4281      	cmp	r1, r0
 8014134:	f040 84a1 	bne.w	8014a7a <__ieee754_pow+0x9da>
 8014138:	f00c 0c01 	and.w	ip, ip, #1
 801413c:	f1cc 0102 	rsb	r1, ip, #2
 8014140:	9100      	str	r1, [sp, #0]
 8014142:	b180      	cbz	r0, 8014166 <__ieee754_pow+0xc6>
 8014144:	e059      	b.n	80141fa <__ieee754_pow+0x15a>
 8014146:	2800      	cmp	r0, #0
 8014148:	d155      	bne.n	80141f6 <__ieee754_pow+0x156>
 801414a:	f1c1 0114 	rsb	r1, r1, #20
 801414e:	fa46 fc01 	asr.w	ip, r6, r1
 8014152:	fa0c f101 	lsl.w	r1, ip, r1
 8014156:	42b1      	cmp	r1, r6
 8014158:	f040 848c 	bne.w	8014a74 <__ieee754_pow+0x9d4>
 801415c:	f00c 0c01 	and.w	ip, ip, #1
 8014160:	f1cc 0102 	rsb	r1, ip, #2
 8014164:	9100      	str	r1, [sp, #0]
 8014166:	4959      	ldr	r1, [pc, #356]	; (80142cc <__ieee754_pow+0x22c>)
 8014168:	428e      	cmp	r6, r1
 801416a:	d12d      	bne.n	80141c8 <__ieee754_pow+0x128>
 801416c:	2f00      	cmp	r7, #0
 801416e:	da79      	bge.n	8014264 <__ieee754_pow+0x1c4>
 8014170:	4956      	ldr	r1, [pc, #344]	; (80142cc <__ieee754_pow+0x22c>)
 8014172:	2000      	movs	r0, #0
 8014174:	f7ec fb92 	bl	800089c <__aeabi_ddiv>
 8014178:	e016      	b.n	80141a8 <__ieee754_pow+0x108>
 801417a:	2100      	movs	r1, #0
 801417c:	9100      	str	r1, [sp, #0]
 801417e:	2800      	cmp	r0, #0
 8014180:	d13b      	bne.n	80141fa <__ieee754_pow+0x15a>
 8014182:	494f      	ldr	r1, [pc, #316]	; (80142c0 <__ieee754_pow+0x220>)
 8014184:	428e      	cmp	r6, r1
 8014186:	d1ee      	bne.n	8014166 <__ieee754_pow+0xc6>
 8014188:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801418c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014190:	ea53 0308 	orrs.w	r3, r3, r8
 8014194:	f000 8466 	beq.w	8014a64 <__ieee754_pow+0x9c4>
 8014198:	4b4d      	ldr	r3, [pc, #308]	; (80142d0 <__ieee754_pow+0x230>)
 801419a:	429c      	cmp	r4, r3
 801419c:	dd0d      	ble.n	80141ba <__ieee754_pow+0x11a>
 801419e:	2f00      	cmp	r7, #0
 80141a0:	f280 8464 	bge.w	8014a6c <__ieee754_pow+0x9cc>
 80141a4:	2000      	movs	r0, #0
 80141a6:	2100      	movs	r1, #0
 80141a8:	ec41 0b10 	vmov	d0, r0, r1
 80141ac:	b00d      	add	sp, #52	; 0x34
 80141ae:	ecbd 8b06 	vpop	{d8-d10}
 80141b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141b6:	2102      	movs	r1, #2
 80141b8:	e7e0      	b.n	801417c <__ieee754_pow+0xdc>
 80141ba:	2f00      	cmp	r7, #0
 80141bc:	daf2      	bge.n	80141a4 <__ieee754_pow+0x104>
 80141be:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80141c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80141c6:	e7ef      	b.n	80141a8 <__ieee754_pow+0x108>
 80141c8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80141cc:	d104      	bne.n	80141d8 <__ieee754_pow+0x138>
 80141ce:	4610      	mov	r0, r2
 80141d0:	4619      	mov	r1, r3
 80141d2:	f7ec fa39 	bl	8000648 <__aeabi_dmul>
 80141d6:	e7e7      	b.n	80141a8 <__ieee754_pow+0x108>
 80141d8:	493e      	ldr	r1, [pc, #248]	; (80142d4 <__ieee754_pow+0x234>)
 80141da:	428f      	cmp	r7, r1
 80141dc:	d10d      	bne.n	80141fa <__ieee754_pow+0x15a>
 80141de:	f1b9 0f00 	cmp.w	r9, #0
 80141e2:	db0a      	blt.n	80141fa <__ieee754_pow+0x15a>
 80141e4:	ec43 2b10 	vmov	d0, r2, r3
 80141e8:	b00d      	add	sp, #52	; 0x34
 80141ea:	ecbd 8b06 	vpop	{d8-d10}
 80141ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141f2:	f000 bc77 	b.w	8014ae4 <__ieee754_sqrt>
 80141f6:	2100      	movs	r1, #0
 80141f8:	9100      	str	r1, [sp, #0]
 80141fa:	ec43 2b10 	vmov	d0, r2, r3
 80141fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014202:	f000 feac 	bl	8014f5e <fabs>
 8014206:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801420a:	ec51 0b10 	vmov	r0, r1, d0
 801420e:	f1b8 0f00 	cmp.w	r8, #0
 8014212:	d12a      	bne.n	801426a <__ieee754_pow+0x1ca>
 8014214:	b12c      	cbz	r4, 8014222 <__ieee754_pow+0x182>
 8014216:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80142cc <__ieee754_pow+0x22c>
 801421a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801421e:	45e6      	cmp	lr, ip
 8014220:	d123      	bne.n	801426a <__ieee754_pow+0x1ca>
 8014222:	2f00      	cmp	r7, #0
 8014224:	da05      	bge.n	8014232 <__ieee754_pow+0x192>
 8014226:	4602      	mov	r2, r0
 8014228:	460b      	mov	r3, r1
 801422a:	2000      	movs	r0, #0
 801422c:	4927      	ldr	r1, [pc, #156]	; (80142cc <__ieee754_pow+0x22c>)
 801422e:	f7ec fb35 	bl	800089c <__aeabi_ddiv>
 8014232:	f1b9 0f00 	cmp.w	r9, #0
 8014236:	dab7      	bge.n	80141a8 <__ieee754_pow+0x108>
 8014238:	9b00      	ldr	r3, [sp, #0]
 801423a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801423e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014242:	4323      	orrs	r3, r4
 8014244:	d108      	bne.n	8014258 <__ieee754_pow+0x1b8>
 8014246:	4602      	mov	r2, r0
 8014248:	460b      	mov	r3, r1
 801424a:	4610      	mov	r0, r2
 801424c:	4619      	mov	r1, r3
 801424e:	f7ec f843 	bl	80002d8 <__aeabi_dsub>
 8014252:	4602      	mov	r2, r0
 8014254:	460b      	mov	r3, r1
 8014256:	e78d      	b.n	8014174 <__ieee754_pow+0xd4>
 8014258:	9b00      	ldr	r3, [sp, #0]
 801425a:	2b01      	cmp	r3, #1
 801425c:	d1a4      	bne.n	80141a8 <__ieee754_pow+0x108>
 801425e:	4602      	mov	r2, r0
 8014260:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014264:	4610      	mov	r0, r2
 8014266:	4619      	mov	r1, r3
 8014268:	e79e      	b.n	80141a8 <__ieee754_pow+0x108>
 801426a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801426e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8014272:	950a      	str	r5, [sp, #40]	; 0x28
 8014274:	9d00      	ldr	r5, [sp, #0]
 8014276:	46ac      	mov	ip, r5
 8014278:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801427a:	ea5c 0505 	orrs.w	r5, ip, r5
 801427e:	d0e4      	beq.n	801424a <__ieee754_pow+0x1aa>
 8014280:	4b15      	ldr	r3, [pc, #84]	; (80142d8 <__ieee754_pow+0x238>)
 8014282:	429e      	cmp	r6, r3
 8014284:	f340 80fc 	ble.w	8014480 <__ieee754_pow+0x3e0>
 8014288:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801428c:	429e      	cmp	r6, r3
 801428e:	4b10      	ldr	r3, [pc, #64]	; (80142d0 <__ieee754_pow+0x230>)
 8014290:	dd07      	ble.n	80142a2 <__ieee754_pow+0x202>
 8014292:	429c      	cmp	r4, r3
 8014294:	dc0a      	bgt.n	80142ac <__ieee754_pow+0x20c>
 8014296:	2f00      	cmp	r7, #0
 8014298:	da84      	bge.n	80141a4 <__ieee754_pow+0x104>
 801429a:	a307      	add	r3, pc, #28	; (adr r3, 80142b8 <__ieee754_pow+0x218>)
 801429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142a0:	e795      	b.n	80141ce <__ieee754_pow+0x12e>
 80142a2:	429c      	cmp	r4, r3
 80142a4:	dbf7      	blt.n	8014296 <__ieee754_pow+0x1f6>
 80142a6:	4b09      	ldr	r3, [pc, #36]	; (80142cc <__ieee754_pow+0x22c>)
 80142a8:	429c      	cmp	r4, r3
 80142aa:	dd17      	ble.n	80142dc <__ieee754_pow+0x23c>
 80142ac:	2f00      	cmp	r7, #0
 80142ae:	dcf4      	bgt.n	801429a <__ieee754_pow+0x1fa>
 80142b0:	e778      	b.n	80141a4 <__ieee754_pow+0x104>
 80142b2:	bf00      	nop
 80142b4:	f3af 8000 	nop.w
 80142b8:	8800759c 	.word	0x8800759c
 80142bc:	7e37e43c 	.word	0x7e37e43c
 80142c0:	7ff00000 	.word	0x7ff00000
 80142c4:	08015c30 	.word	0x08015c30
 80142c8:	433fffff 	.word	0x433fffff
 80142cc:	3ff00000 	.word	0x3ff00000
 80142d0:	3fefffff 	.word	0x3fefffff
 80142d4:	3fe00000 	.word	0x3fe00000
 80142d8:	41e00000 	.word	0x41e00000
 80142dc:	4b64      	ldr	r3, [pc, #400]	; (8014470 <__ieee754_pow+0x3d0>)
 80142de:	2200      	movs	r2, #0
 80142e0:	f7eb fffa 	bl	80002d8 <__aeabi_dsub>
 80142e4:	a356      	add	r3, pc, #344	; (adr r3, 8014440 <__ieee754_pow+0x3a0>)
 80142e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ea:	4604      	mov	r4, r0
 80142ec:	460d      	mov	r5, r1
 80142ee:	f7ec f9ab 	bl	8000648 <__aeabi_dmul>
 80142f2:	a355      	add	r3, pc, #340	; (adr r3, 8014448 <__ieee754_pow+0x3a8>)
 80142f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142f8:	4606      	mov	r6, r0
 80142fa:	460f      	mov	r7, r1
 80142fc:	4620      	mov	r0, r4
 80142fe:	4629      	mov	r1, r5
 8014300:	f7ec f9a2 	bl	8000648 <__aeabi_dmul>
 8014304:	4b5b      	ldr	r3, [pc, #364]	; (8014474 <__ieee754_pow+0x3d4>)
 8014306:	4682      	mov	sl, r0
 8014308:	468b      	mov	fp, r1
 801430a:	2200      	movs	r2, #0
 801430c:	4620      	mov	r0, r4
 801430e:	4629      	mov	r1, r5
 8014310:	f7ec f99a 	bl	8000648 <__aeabi_dmul>
 8014314:	4602      	mov	r2, r0
 8014316:	460b      	mov	r3, r1
 8014318:	a14d      	add	r1, pc, #308	; (adr r1, 8014450 <__ieee754_pow+0x3b0>)
 801431a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801431e:	f7eb ffdb 	bl	80002d8 <__aeabi_dsub>
 8014322:	4622      	mov	r2, r4
 8014324:	462b      	mov	r3, r5
 8014326:	f7ec f98f 	bl	8000648 <__aeabi_dmul>
 801432a:	4602      	mov	r2, r0
 801432c:	460b      	mov	r3, r1
 801432e:	2000      	movs	r0, #0
 8014330:	4951      	ldr	r1, [pc, #324]	; (8014478 <__ieee754_pow+0x3d8>)
 8014332:	f7eb ffd1 	bl	80002d8 <__aeabi_dsub>
 8014336:	4622      	mov	r2, r4
 8014338:	4680      	mov	r8, r0
 801433a:	4689      	mov	r9, r1
 801433c:	462b      	mov	r3, r5
 801433e:	4620      	mov	r0, r4
 8014340:	4629      	mov	r1, r5
 8014342:	f7ec f981 	bl	8000648 <__aeabi_dmul>
 8014346:	4602      	mov	r2, r0
 8014348:	460b      	mov	r3, r1
 801434a:	4640      	mov	r0, r8
 801434c:	4649      	mov	r1, r9
 801434e:	f7ec f97b 	bl	8000648 <__aeabi_dmul>
 8014352:	a341      	add	r3, pc, #260	; (adr r3, 8014458 <__ieee754_pow+0x3b8>)
 8014354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014358:	f7ec f976 	bl	8000648 <__aeabi_dmul>
 801435c:	4602      	mov	r2, r0
 801435e:	460b      	mov	r3, r1
 8014360:	4650      	mov	r0, sl
 8014362:	4659      	mov	r1, fp
 8014364:	f7eb ffb8 	bl	80002d8 <__aeabi_dsub>
 8014368:	4602      	mov	r2, r0
 801436a:	460b      	mov	r3, r1
 801436c:	4680      	mov	r8, r0
 801436e:	4689      	mov	r9, r1
 8014370:	4630      	mov	r0, r6
 8014372:	4639      	mov	r1, r7
 8014374:	f7eb ffb2 	bl	80002dc <__adddf3>
 8014378:	2400      	movs	r4, #0
 801437a:	4632      	mov	r2, r6
 801437c:	463b      	mov	r3, r7
 801437e:	4620      	mov	r0, r4
 8014380:	460d      	mov	r5, r1
 8014382:	f7eb ffa9 	bl	80002d8 <__aeabi_dsub>
 8014386:	4602      	mov	r2, r0
 8014388:	460b      	mov	r3, r1
 801438a:	4640      	mov	r0, r8
 801438c:	4649      	mov	r1, r9
 801438e:	f7eb ffa3 	bl	80002d8 <__aeabi_dsub>
 8014392:	9b00      	ldr	r3, [sp, #0]
 8014394:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014396:	3b01      	subs	r3, #1
 8014398:	4313      	orrs	r3, r2
 801439a:	4682      	mov	sl, r0
 801439c:	468b      	mov	fp, r1
 801439e:	f040 81f1 	bne.w	8014784 <__ieee754_pow+0x6e4>
 80143a2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8014460 <__ieee754_pow+0x3c0>
 80143a6:	eeb0 8a47 	vmov.f32	s16, s14
 80143aa:	eef0 8a67 	vmov.f32	s17, s15
 80143ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80143b2:	2600      	movs	r6, #0
 80143b4:	4632      	mov	r2, r6
 80143b6:	463b      	mov	r3, r7
 80143b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80143bc:	f7eb ff8c 	bl	80002d8 <__aeabi_dsub>
 80143c0:	4622      	mov	r2, r4
 80143c2:	462b      	mov	r3, r5
 80143c4:	f7ec f940 	bl	8000648 <__aeabi_dmul>
 80143c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80143cc:	4680      	mov	r8, r0
 80143ce:	4689      	mov	r9, r1
 80143d0:	4650      	mov	r0, sl
 80143d2:	4659      	mov	r1, fp
 80143d4:	f7ec f938 	bl	8000648 <__aeabi_dmul>
 80143d8:	4602      	mov	r2, r0
 80143da:	460b      	mov	r3, r1
 80143dc:	4640      	mov	r0, r8
 80143de:	4649      	mov	r1, r9
 80143e0:	f7eb ff7c 	bl	80002dc <__adddf3>
 80143e4:	4632      	mov	r2, r6
 80143e6:	463b      	mov	r3, r7
 80143e8:	4680      	mov	r8, r0
 80143ea:	4689      	mov	r9, r1
 80143ec:	4620      	mov	r0, r4
 80143ee:	4629      	mov	r1, r5
 80143f0:	f7ec f92a 	bl	8000648 <__aeabi_dmul>
 80143f4:	460b      	mov	r3, r1
 80143f6:	4604      	mov	r4, r0
 80143f8:	460d      	mov	r5, r1
 80143fa:	4602      	mov	r2, r0
 80143fc:	4649      	mov	r1, r9
 80143fe:	4640      	mov	r0, r8
 8014400:	f7eb ff6c 	bl	80002dc <__adddf3>
 8014404:	4b1d      	ldr	r3, [pc, #116]	; (801447c <__ieee754_pow+0x3dc>)
 8014406:	4299      	cmp	r1, r3
 8014408:	ec45 4b19 	vmov	d9, r4, r5
 801440c:	4606      	mov	r6, r0
 801440e:	460f      	mov	r7, r1
 8014410:	468b      	mov	fp, r1
 8014412:	f340 82fe 	ble.w	8014a12 <__ieee754_pow+0x972>
 8014416:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801441a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801441e:	4303      	orrs	r3, r0
 8014420:	f000 81f0 	beq.w	8014804 <__ieee754_pow+0x764>
 8014424:	a310      	add	r3, pc, #64	; (adr r3, 8014468 <__ieee754_pow+0x3c8>)
 8014426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801442a:	ec51 0b18 	vmov	r0, r1, d8
 801442e:	f7ec f90b 	bl	8000648 <__aeabi_dmul>
 8014432:	a30d      	add	r3, pc, #52	; (adr r3, 8014468 <__ieee754_pow+0x3c8>)
 8014434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014438:	e6cb      	b.n	80141d2 <__ieee754_pow+0x132>
 801443a:	bf00      	nop
 801443c:	f3af 8000 	nop.w
 8014440:	60000000 	.word	0x60000000
 8014444:	3ff71547 	.word	0x3ff71547
 8014448:	f85ddf44 	.word	0xf85ddf44
 801444c:	3e54ae0b 	.word	0x3e54ae0b
 8014450:	55555555 	.word	0x55555555
 8014454:	3fd55555 	.word	0x3fd55555
 8014458:	652b82fe 	.word	0x652b82fe
 801445c:	3ff71547 	.word	0x3ff71547
 8014460:	00000000 	.word	0x00000000
 8014464:	bff00000 	.word	0xbff00000
 8014468:	8800759c 	.word	0x8800759c
 801446c:	7e37e43c 	.word	0x7e37e43c
 8014470:	3ff00000 	.word	0x3ff00000
 8014474:	3fd00000 	.word	0x3fd00000
 8014478:	3fe00000 	.word	0x3fe00000
 801447c:	408fffff 	.word	0x408fffff
 8014480:	4bd7      	ldr	r3, [pc, #860]	; (80147e0 <__ieee754_pow+0x740>)
 8014482:	ea03 0309 	and.w	r3, r3, r9
 8014486:	2200      	movs	r2, #0
 8014488:	b92b      	cbnz	r3, 8014496 <__ieee754_pow+0x3f6>
 801448a:	4bd6      	ldr	r3, [pc, #856]	; (80147e4 <__ieee754_pow+0x744>)
 801448c:	f7ec f8dc 	bl	8000648 <__aeabi_dmul>
 8014490:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014494:	460c      	mov	r4, r1
 8014496:	1523      	asrs	r3, r4, #20
 8014498:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801449c:	4413      	add	r3, r2
 801449e:	9309      	str	r3, [sp, #36]	; 0x24
 80144a0:	4bd1      	ldr	r3, [pc, #836]	; (80147e8 <__ieee754_pow+0x748>)
 80144a2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80144a6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80144aa:	429c      	cmp	r4, r3
 80144ac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80144b0:	dd08      	ble.n	80144c4 <__ieee754_pow+0x424>
 80144b2:	4bce      	ldr	r3, [pc, #824]	; (80147ec <__ieee754_pow+0x74c>)
 80144b4:	429c      	cmp	r4, r3
 80144b6:	f340 8163 	ble.w	8014780 <__ieee754_pow+0x6e0>
 80144ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144bc:	3301      	adds	r3, #1
 80144be:	9309      	str	r3, [sp, #36]	; 0x24
 80144c0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80144c4:	2400      	movs	r4, #0
 80144c6:	00e3      	lsls	r3, r4, #3
 80144c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80144ca:	4bc9      	ldr	r3, [pc, #804]	; (80147f0 <__ieee754_pow+0x750>)
 80144cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80144d0:	ed93 7b00 	vldr	d7, [r3]
 80144d4:	4629      	mov	r1, r5
 80144d6:	ec53 2b17 	vmov	r2, r3, d7
 80144da:	eeb0 8a47 	vmov.f32	s16, s14
 80144de:	eef0 8a67 	vmov.f32	s17, s15
 80144e2:	4682      	mov	sl, r0
 80144e4:	f7eb fef8 	bl	80002d8 <__aeabi_dsub>
 80144e8:	4652      	mov	r2, sl
 80144ea:	4606      	mov	r6, r0
 80144ec:	460f      	mov	r7, r1
 80144ee:	462b      	mov	r3, r5
 80144f0:	ec51 0b18 	vmov	r0, r1, d8
 80144f4:	f7eb fef2 	bl	80002dc <__adddf3>
 80144f8:	4602      	mov	r2, r0
 80144fa:	460b      	mov	r3, r1
 80144fc:	2000      	movs	r0, #0
 80144fe:	49bd      	ldr	r1, [pc, #756]	; (80147f4 <__ieee754_pow+0x754>)
 8014500:	f7ec f9cc 	bl	800089c <__aeabi_ddiv>
 8014504:	ec41 0b19 	vmov	d9, r0, r1
 8014508:	4602      	mov	r2, r0
 801450a:	460b      	mov	r3, r1
 801450c:	4630      	mov	r0, r6
 801450e:	4639      	mov	r1, r7
 8014510:	f7ec f89a 	bl	8000648 <__aeabi_dmul>
 8014514:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014518:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801451c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014520:	2300      	movs	r3, #0
 8014522:	9304      	str	r3, [sp, #16]
 8014524:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8014528:	46ab      	mov	fp, r5
 801452a:	106d      	asrs	r5, r5, #1
 801452c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014530:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8014534:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8014538:	2200      	movs	r2, #0
 801453a:	4640      	mov	r0, r8
 801453c:	4649      	mov	r1, r9
 801453e:	4614      	mov	r4, r2
 8014540:	461d      	mov	r5, r3
 8014542:	f7ec f881 	bl	8000648 <__aeabi_dmul>
 8014546:	4602      	mov	r2, r0
 8014548:	460b      	mov	r3, r1
 801454a:	4630      	mov	r0, r6
 801454c:	4639      	mov	r1, r7
 801454e:	f7eb fec3 	bl	80002d8 <__aeabi_dsub>
 8014552:	ec53 2b18 	vmov	r2, r3, d8
 8014556:	4606      	mov	r6, r0
 8014558:	460f      	mov	r7, r1
 801455a:	4620      	mov	r0, r4
 801455c:	4629      	mov	r1, r5
 801455e:	f7eb febb 	bl	80002d8 <__aeabi_dsub>
 8014562:	4602      	mov	r2, r0
 8014564:	460b      	mov	r3, r1
 8014566:	4650      	mov	r0, sl
 8014568:	4659      	mov	r1, fp
 801456a:	f7eb feb5 	bl	80002d8 <__aeabi_dsub>
 801456e:	4642      	mov	r2, r8
 8014570:	464b      	mov	r3, r9
 8014572:	f7ec f869 	bl	8000648 <__aeabi_dmul>
 8014576:	4602      	mov	r2, r0
 8014578:	460b      	mov	r3, r1
 801457a:	4630      	mov	r0, r6
 801457c:	4639      	mov	r1, r7
 801457e:	f7eb feab 	bl	80002d8 <__aeabi_dsub>
 8014582:	ec53 2b19 	vmov	r2, r3, d9
 8014586:	f7ec f85f 	bl	8000648 <__aeabi_dmul>
 801458a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801458e:	ec41 0b18 	vmov	d8, r0, r1
 8014592:	4610      	mov	r0, r2
 8014594:	4619      	mov	r1, r3
 8014596:	f7ec f857 	bl	8000648 <__aeabi_dmul>
 801459a:	a37d      	add	r3, pc, #500	; (adr r3, 8014790 <__ieee754_pow+0x6f0>)
 801459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145a0:	4604      	mov	r4, r0
 80145a2:	460d      	mov	r5, r1
 80145a4:	f7ec f850 	bl	8000648 <__aeabi_dmul>
 80145a8:	a37b      	add	r3, pc, #492	; (adr r3, 8014798 <__ieee754_pow+0x6f8>)
 80145aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ae:	f7eb fe95 	bl	80002dc <__adddf3>
 80145b2:	4622      	mov	r2, r4
 80145b4:	462b      	mov	r3, r5
 80145b6:	f7ec f847 	bl	8000648 <__aeabi_dmul>
 80145ba:	a379      	add	r3, pc, #484	; (adr r3, 80147a0 <__ieee754_pow+0x700>)
 80145bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145c0:	f7eb fe8c 	bl	80002dc <__adddf3>
 80145c4:	4622      	mov	r2, r4
 80145c6:	462b      	mov	r3, r5
 80145c8:	f7ec f83e 	bl	8000648 <__aeabi_dmul>
 80145cc:	a376      	add	r3, pc, #472	; (adr r3, 80147a8 <__ieee754_pow+0x708>)
 80145ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145d2:	f7eb fe83 	bl	80002dc <__adddf3>
 80145d6:	4622      	mov	r2, r4
 80145d8:	462b      	mov	r3, r5
 80145da:	f7ec f835 	bl	8000648 <__aeabi_dmul>
 80145de:	a374      	add	r3, pc, #464	; (adr r3, 80147b0 <__ieee754_pow+0x710>)
 80145e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145e4:	f7eb fe7a 	bl	80002dc <__adddf3>
 80145e8:	4622      	mov	r2, r4
 80145ea:	462b      	mov	r3, r5
 80145ec:	f7ec f82c 	bl	8000648 <__aeabi_dmul>
 80145f0:	a371      	add	r3, pc, #452	; (adr r3, 80147b8 <__ieee754_pow+0x718>)
 80145f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145f6:	f7eb fe71 	bl	80002dc <__adddf3>
 80145fa:	4622      	mov	r2, r4
 80145fc:	4606      	mov	r6, r0
 80145fe:	460f      	mov	r7, r1
 8014600:	462b      	mov	r3, r5
 8014602:	4620      	mov	r0, r4
 8014604:	4629      	mov	r1, r5
 8014606:	f7ec f81f 	bl	8000648 <__aeabi_dmul>
 801460a:	4602      	mov	r2, r0
 801460c:	460b      	mov	r3, r1
 801460e:	4630      	mov	r0, r6
 8014610:	4639      	mov	r1, r7
 8014612:	f7ec f819 	bl	8000648 <__aeabi_dmul>
 8014616:	4642      	mov	r2, r8
 8014618:	4604      	mov	r4, r0
 801461a:	460d      	mov	r5, r1
 801461c:	464b      	mov	r3, r9
 801461e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014622:	f7eb fe5b 	bl	80002dc <__adddf3>
 8014626:	ec53 2b18 	vmov	r2, r3, d8
 801462a:	f7ec f80d 	bl	8000648 <__aeabi_dmul>
 801462e:	4622      	mov	r2, r4
 8014630:	462b      	mov	r3, r5
 8014632:	f7eb fe53 	bl	80002dc <__adddf3>
 8014636:	4642      	mov	r2, r8
 8014638:	4682      	mov	sl, r0
 801463a:	468b      	mov	fp, r1
 801463c:	464b      	mov	r3, r9
 801463e:	4640      	mov	r0, r8
 8014640:	4649      	mov	r1, r9
 8014642:	f7ec f801 	bl	8000648 <__aeabi_dmul>
 8014646:	4b6c      	ldr	r3, [pc, #432]	; (80147f8 <__ieee754_pow+0x758>)
 8014648:	2200      	movs	r2, #0
 801464a:	4606      	mov	r6, r0
 801464c:	460f      	mov	r7, r1
 801464e:	f7eb fe45 	bl	80002dc <__adddf3>
 8014652:	4652      	mov	r2, sl
 8014654:	465b      	mov	r3, fp
 8014656:	f7eb fe41 	bl	80002dc <__adddf3>
 801465a:	9c04      	ldr	r4, [sp, #16]
 801465c:	460d      	mov	r5, r1
 801465e:	4622      	mov	r2, r4
 8014660:	460b      	mov	r3, r1
 8014662:	4640      	mov	r0, r8
 8014664:	4649      	mov	r1, r9
 8014666:	f7eb ffef 	bl	8000648 <__aeabi_dmul>
 801466a:	4b63      	ldr	r3, [pc, #396]	; (80147f8 <__ieee754_pow+0x758>)
 801466c:	4680      	mov	r8, r0
 801466e:	4689      	mov	r9, r1
 8014670:	2200      	movs	r2, #0
 8014672:	4620      	mov	r0, r4
 8014674:	4629      	mov	r1, r5
 8014676:	f7eb fe2f 	bl	80002d8 <__aeabi_dsub>
 801467a:	4632      	mov	r2, r6
 801467c:	463b      	mov	r3, r7
 801467e:	f7eb fe2b 	bl	80002d8 <__aeabi_dsub>
 8014682:	4602      	mov	r2, r0
 8014684:	460b      	mov	r3, r1
 8014686:	4650      	mov	r0, sl
 8014688:	4659      	mov	r1, fp
 801468a:	f7eb fe25 	bl	80002d8 <__aeabi_dsub>
 801468e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014692:	f7eb ffd9 	bl	8000648 <__aeabi_dmul>
 8014696:	4622      	mov	r2, r4
 8014698:	4606      	mov	r6, r0
 801469a:	460f      	mov	r7, r1
 801469c:	462b      	mov	r3, r5
 801469e:	ec51 0b18 	vmov	r0, r1, d8
 80146a2:	f7eb ffd1 	bl	8000648 <__aeabi_dmul>
 80146a6:	4602      	mov	r2, r0
 80146a8:	460b      	mov	r3, r1
 80146aa:	4630      	mov	r0, r6
 80146ac:	4639      	mov	r1, r7
 80146ae:	f7eb fe15 	bl	80002dc <__adddf3>
 80146b2:	4606      	mov	r6, r0
 80146b4:	460f      	mov	r7, r1
 80146b6:	4602      	mov	r2, r0
 80146b8:	460b      	mov	r3, r1
 80146ba:	4640      	mov	r0, r8
 80146bc:	4649      	mov	r1, r9
 80146be:	f7eb fe0d 	bl	80002dc <__adddf3>
 80146c2:	9c04      	ldr	r4, [sp, #16]
 80146c4:	a33e      	add	r3, pc, #248	; (adr r3, 80147c0 <__ieee754_pow+0x720>)
 80146c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146ca:	4620      	mov	r0, r4
 80146cc:	460d      	mov	r5, r1
 80146ce:	f7eb ffbb 	bl	8000648 <__aeabi_dmul>
 80146d2:	4642      	mov	r2, r8
 80146d4:	ec41 0b18 	vmov	d8, r0, r1
 80146d8:	464b      	mov	r3, r9
 80146da:	4620      	mov	r0, r4
 80146dc:	4629      	mov	r1, r5
 80146de:	f7eb fdfb 	bl	80002d8 <__aeabi_dsub>
 80146e2:	4602      	mov	r2, r0
 80146e4:	460b      	mov	r3, r1
 80146e6:	4630      	mov	r0, r6
 80146e8:	4639      	mov	r1, r7
 80146ea:	f7eb fdf5 	bl	80002d8 <__aeabi_dsub>
 80146ee:	a336      	add	r3, pc, #216	; (adr r3, 80147c8 <__ieee754_pow+0x728>)
 80146f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146f4:	f7eb ffa8 	bl	8000648 <__aeabi_dmul>
 80146f8:	a335      	add	r3, pc, #212	; (adr r3, 80147d0 <__ieee754_pow+0x730>)
 80146fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146fe:	4606      	mov	r6, r0
 8014700:	460f      	mov	r7, r1
 8014702:	4620      	mov	r0, r4
 8014704:	4629      	mov	r1, r5
 8014706:	f7eb ff9f 	bl	8000648 <__aeabi_dmul>
 801470a:	4602      	mov	r2, r0
 801470c:	460b      	mov	r3, r1
 801470e:	4630      	mov	r0, r6
 8014710:	4639      	mov	r1, r7
 8014712:	f7eb fde3 	bl	80002dc <__adddf3>
 8014716:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014718:	4b38      	ldr	r3, [pc, #224]	; (80147fc <__ieee754_pow+0x75c>)
 801471a:	4413      	add	r3, r2
 801471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014720:	f7eb fddc 	bl	80002dc <__adddf3>
 8014724:	4682      	mov	sl, r0
 8014726:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014728:	468b      	mov	fp, r1
 801472a:	f7eb ff23 	bl	8000574 <__aeabi_i2d>
 801472e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014730:	4b33      	ldr	r3, [pc, #204]	; (8014800 <__ieee754_pow+0x760>)
 8014732:	4413      	add	r3, r2
 8014734:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014738:	4606      	mov	r6, r0
 801473a:	460f      	mov	r7, r1
 801473c:	4652      	mov	r2, sl
 801473e:	465b      	mov	r3, fp
 8014740:	ec51 0b18 	vmov	r0, r1, d8
 8014744:	f7eb fdca 	bl	80002dc <__adddf3>
 8014748:	4642      	mov	r2, r8
 801474a:	464b      	mov	r3, r9
 801474c:	f7eb fdc6 	bl	80002dc <__adddf3>
 8014750:	4632      	mov	r2, r6
 8014752:	463b      	mov	r3, r7
 8014754:	f7eb fdc2 	bl	80002dc <__adddf3>
 8014758:	9c04      	ldr	r4, [sp, #16]
 801475a:	4632      	mov	r2, r6
 801475c:	463b      	mov	r3, r7
 801475e:	4620      	mov	r0, r4
 8014760:	460d      	mov	r5, r1
 8014762:	f7eb fdb9 	bl	80002d8 <__aeabi_dsub>
 8014766:	4642      	mov	r2, r8
 8014768:	464b      	mov	r3, r9
 801476a:	f7eb fdb5 	bl	80002d8 <__aeabi_dsub>
 801476e:	ec53 2b18 	vmov	r2, r3, d8
 8014772:	f7eb fdb1 	bl	80002d8 <__aeabi_dsub>
 8014776:	4602      	mov	r2, r0
 8014778:	460b      	mov	r3, r1
 801477a:	4650      	mov	r0, sl
 801477c:	4659      	mov	r1, fp
 801477e:	e606      	b.n	801438e <__ieee754_pow+0x2ee>
 8014780:	2401      	movs	r4, #1
 8014782:	e6a0      	b.n	80144c6 <__ieee754_pow+0x426>
 8014784:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80147d8 <__ieee754_pow+0x738>
 8014788:	e60d      	b.n	80143a6 <__ieee754_pow+0x306>
 801478a:	bf00      	nop
 801478c:	f3af 8000 	nop.w
 8014790:	4a454eef 	.word	0x4a454eef
 8014794:	3fca7e28 	.word	0x3fca7e28
 8014798:	93c9db65 	.word	0x93c9db65
 801479c:	3fcd864a 	.word	0x3fcd864a
 80147a0:	a91d4101 	.word	0xa91d4101
 80147a4:	3fd17460 	.word	0x3fd17460
 80147a8:	518f264d 	.word	0x518f264d
 80147ac:	3fd55555 	.word	0x3fd55555
 80147b0:	db6fabff 	.word	0xdb6fabff
 80147b4:	3fdb6db6 	.word	0x3fdb6db6
 80147b8:	33333303 	.word	0x33333303
 80147bc:	3fe33333 	.word	0x3fe33333
 80147c0:	e0000000 	.word	0xe0000000
 80147c4:	3feec709 	.word	0x3feec709
 80147c8:	dc3a03fd 	.word	0xdc3a03fd
 80147cc:	3feec709 	.word	0x3feec709
 80147d0:	145b01f5 	.word	0x145b01f5
 80147d4:	be3e2fe0 	.word	0xbe3e2fe0
 80147d8:	00000000 	.word	0x00000000
 80147dc:	3ff00000 	.word	0x3ff00000
 80147e0:	7ff00000 	.word	0x7ff00000
 80147e4:	43400000 	.word	0x43400000
 80147e8:	0003988e 	.word	0x0003988e
 80147ec:	000bb679 	.word	0x000bb679
 80147f0:	08015c38 	.word	0x08015c38
 80147f4:	3ff00000 	.word	0x3ff00000
 80147f8:	40080000 	.word	0x40080000
 80147fc:	08015c58 	.word	0x08015c58
 8014800:	08015c48 	.word	0x08015c48
 8014804:	a3b5      	add	r3, pc, #724	; (adr r3, 8014adc <__ieee754_pow+0xa3c>)
 8014806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801480a:	4640      	mov	r0, r8
 801480c:	4649      	mov	r1, r9
 801480e:	f7eb fd65 	bl	80002dc <__adddf3>
 8014812:	4622      	mov	r2, r4
 8014814:	ec41 0b1a 	vmov	d10, r0, r1
 8014818:	462b      	mov	r3, r5
 801481a:	4630      	mov	r0, r6
 801481c:	4639      	mov	r1, r7
 801481e:	f7eb fd5b 	bl	80002d8 <__aeabi_dsub>
 8014822:	4602      	mov	r2, r0
 8014824:	460b      	mov	r3, r1
 8014826:	ec51 0b1a 	vmov	r0, r1, d10
 801482a:	f7ec f99d 	bl	8000b68 <__aeabi_dcmpgt>
 801482e:	2800      	cmp	r0, #0
 8014830:	f47f adf8 	bne.w	8014424 <__ieee754_pow+0x384>
 8014834:	4aa4      	ldr	r2, [pc, #656]	; (8014ac8 <__ieee754_pow+0xa28>)
 8014836:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801483a:	4293      	cmp	r3, r2
 801483c:	f340 810b 	ble.w	8014a56 <__ieee754_pow+0x9b6>
 8014840:	151b      	asrs	r3, r3, #20
 8014842:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8014846:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801484a:	fa4a f303 	asr.w	r3, sl, r3
 801484e:	445b      	add	r3, fp
 8014850:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014854:	4e9d      	ldr	r6, [pc, #628]	; (8014acc <__ieee754_pow+0xa2c>)
 8014856:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801485a:	4116      	asrs	r6, r2
 801485c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8014860:	2000      	movs	r0, #0
 8014862:	ea23 0106 	bic.w	r1, r3, r6
 8014866:	f1c2 0214 	rsb	r2, r2, #20
 801486a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801486e:	fa4a fa02 	asr.w	sl, sl, r2
 8014872:	f1bb 0f00 	cmp.w	fp, #0
 8014876:	4602      	mov	r2, r0
 8014878:	460b      	mov	r3, r1
 801487a:	4620      	mov	r0, r4
 801487c:	4629      	mov	r1, r5
 801487e:	bfb8      	it	lt
 8014880:	f1ca 0a00 	rsblt	sl, sl, #0
 8014884:	f7eb fd28 	bl	80002d8 <__aeabi_dsub>
 8014888:	ec41 0b19 	vmov	d9, r0, r1
 801488c:	4642      	mov	r2, r8
 801488e:	464b      	mov	r3, r9
 8014890:	ec51 0b19 	vmov	r0, r1, d9
 8014894:	f7eb fd22 	bl	80002dc <__adddf3>
 8014898:	2400      	movs	r4, #0
 801489a:	a379      	add	r3, pc, #484	; (adr r3, 8014a80 <__ieee754_pow+0x9e0>)
 801489c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148a0:	4620      	mov	r0, r4
 80148a2:	460d      	mov	r5, r1
 80148a4:	f7eb fed0 	bl	8000648 <__aeabi_dmul>
 80148a8:	ec53 2b19 	vmov	r2, r3, d9
 80148ac:	4606      	mov	r6, r0
 80148ae:	460f      	mov	r7, r1
 80148b0:	4620      	mov	r0, r4
 80148b2:	4629      	mov	r1, r5
 80148b4:	f7eb fd10 	bl	80002d8 <__aeabi_dsub>
 80148b8:	4602      	mov	r2, r0
 80148ba:	460b      	mov	r3, r1
 80148bc:	4640      	mov	r0, r8
 80148be:	4649      	mov	r1, r9
 80148c0:	f7eb fd0a 	bl	80002d8 <__aeabi_dsub>
 80148c4:	a370      	add	r3, pc, #448	; (adr r3, 8014a88 <__ieee754_pow+0x9e8>)
 80148c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ca:	f7eb febd 	bl	8000648 <__aeabi_dmul>
 80148ce:	a370      	add	r3, pc, #448	; (adr r3, 8014a90 <__ieee754_pow+0x9f0>)
 80148d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148d4:	4680      	mov	r8, r0
 80148d6:	4689      	mov	r9, r1
 80148d8:	4620      	mov	r0, r4
 80148da:	4629      	mov	r1, r5
 80148dc:	f7eb feb4 	bl	8000648 <__aeabi_dmul>
 80148e0:	4602      	mov	r2, r0
 80148e2:	460b      	mov	r3, r1
 80148e4:	4640      	mov	r0, r8
 80148e6:	4649      	mov	r1, r9
 80148e8:	f7eb fcf8 	bl	80002dc <__adddf3>
 80148ec:	4604      	mov	r4, r0
 80148ee:	460d      	mov	r5, r1
 80148f0:	4602      	mov	r2, r0
 80148f2:	460b      	mov	r3, r1
 80148f4:	4630      	mov	r0, r6
 80148f6:	4639      	mov	r1, r7
 80148f8:	f7eb fcf0 	bl	80002dc <__adddf3>
 80148fc:	4632      	mov	r2, r6
 80148fe:	463b      	mov	r3, r7
 8014900:	4680      	mov	r8, r0
 8014902:	4689      	mov	r9, r1
 8014904:	f7eb fce8 	bl	80002d8 <__aeabi_dsub>
 8014908:	4602      	mov	r2, r0
 801490a:	460b      	mov	r3, r1
 801490c:	4620      	mov	r0, r4
 801490e:	4629      	mov	r1, r5
 8014910:	f7eb fce2 	bl	80002d8 <__aeabi_dsub>
 8014914:	4642      	mov	r2, r8
 8014916:	4606      	mov	r6, r0
 8014918:	460f      	mov	r7, r1
 801491a:	464b      	mov	r3, r9
 801491c:	4640      	mov	r0, r8
 801491e:	4649      	mov	r1, r9
 8014920:	f7eb fe92 	bl	8000648 <__aeabi_dmul>
 8014924:	a35c      	add	r3, pc, #368	; (adr r3, 8014a98 <__ieee754_pow+0x9f8>)
 8014926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801492a:	4604      	mov	r4, r0
 801492c:	460d      	mov	r5, r1
 801492e:	f7eb fe8b 	bl	8000648 <__aeabi_dmul>
 8014932:	a35b      	add	r3, pc, #364	; (adr r3, 8014aa0 <__ieee754_pow+0xa00>)
 8014934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014938:	f7eb fcce 	bl	80002d8 <__aeabi_dsub>
 801493c:	4622      	mov	r2, r4
 801493e:	462b      	mov	r3, r5
 8014940:	f7eb fe82 	bl	8000648 <__aeabi_dmul>
 8014944:	a358      	add	r3, pc, #352	; (adr r3, 8014aa8 <__ieee754_pow+0xa08>)
 8014946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801494a:	f7eb fcc7 	bl	80002dc <__adddf3>
 801494e:	4622      	mov	r2, r4
 8014950:	462b      	mov	r3, r5
 8014952:	f7eb fe79 	bl	8000648 <__aeabi_dmul>
 8014956:	a356      	add	r3, pc, #344	; (adr r3, 8014ab0 <__ieee754_pow+0xa10>)
 8014958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801495c:	f7eb fcbc 	bl	80002d8 <__aeabi_dsub>
 8014960:	4622      	mov	r2, r4
 8014962:	462b      	mov	r3, r5
 8014964:	f7eb fe70 	bl	8000648 <__aeabi_dmul>
 8014968:	a353      	add	r3, pc, #332	; (adr r3, 8014ab8 <__ieee754_pow+0xa18>)
 801496a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801496e:	f7eb fcb5 	bl	80002dc <__adddf3>
 8014972:	4622      	mov	r2, r4
 8014974:	462b      	mov	r3, r5
 8014976:	f7eb fe67 	bl	8000648 <__aeabi_dmul>
 801497a:	4602      	mov	r2, r0
 801497c:	460b      	mov	r3, r1
 801497e:	4640      	mov	r0, r8
 8014980:	4649      	mov	r1, r9
 8014982:	f7eb fca9 	bl	80002d8 <__aeabi_dsub>
 8014986:	4604      	mov	r4, r0
 8014988:	460d      	mov	r5, r1
 801498a:	4602      	mov	r2, r0
 801498c:	460b      	mov	r3, r1
 801498e:	4640      	mov	r0, r8
 8014990:	4649      	mov	r1, r9
 8014992:	f7eb fe59 	bl	8000648 <__aeabi_dmul>
 8014996:	2200      	movs	r2, #0
 8014998:	ec41 0b19 	vmov	d9, r0, r1
 801499c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80149a0:	4620      	mov	r0, r4
 80149a2:	4629      	mov	r1, r5
 80149a4:	f7eb fc98 	bl	80002d8 <__aeabi_dsub>
 80149a8:	4602      	mov	r2, r0
 80149aa:	460b      	mov	r3, r1
 80149ac:	ec51 0b19 	vmov	r0, r1, d9
 80149b0:	f7eb ff74 	bl	800089c <__aeabi_ddiv>
 80149b4:	4632      	mov	r2, r6
 80149b6:	4604      	mov	r4, r0
 80149b8:	460d      	mov	r5, r1
 80149ba:	463b      	mov	r3, r7
 80149bc:	4640      	mov	r0, r8
 80149be:	4649      	mov	r1, r9
 80149c0:	f7eb fe42 	bl	8000648 <__aeabi_dmul>
 80149c4:	4632      	mov	r2, r6
 80149c6:	463b      	mov	r3, r7
 80149c8:	f7eb fc88 	bl	80002dc <__adddf3>
 80149cc:	4602      	mov	r2, r0
 80149ce:	460b      	mov	r3, r1
 80149d0:	4620      	mov	r0, r4
 80149d2:	4629      	mov	r1, r5
 80149d4:	f7eb fc80 	bl	80002d8 <__aeabi_dsub>
 80149d8:	4642      	mov	r2, r8
 80149da:	464b      	mov	r3, r9
 80149dc:	f7eb fc7c 	bl	80002d8 <__aeabi_dsub>
 80149e0:	460b      	mov	r3, r1
 80149e2:	4602      	mov	r2, r0
 80149e4:	493a      	ldr	r1, [pc, #232]	; (8014ad0 <__ieee754_pow+0xa30>)
 80149e6:	2000      	movs	r0, #0
 80149e8:	f7eb fc76 	bl	80002d8 <__aeabi_dsub>
 80149ec:	e9cd 0100 	strd	r0, r1, [sp]
 80149f0:	9b01      	ldr	r3, [sp, #4]
 80149f2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80149f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80149fa:	da2f      	bge.n	8014a5c <__ieee754_pow+0x9bc>
 80149fc:	4650      	mov	r0, sl
 80149fe:	ed9d 0b00 	vldr	d0, [sp]
 8014a02:	f000 fb4d 	bl	80150a0 <scalbn>
 8014a06:	ec51 0b10 	vmov	r0, r1, d0
 8014a0a:	ec53 2b18 	vmov	r2, r3, d8
 8014a0e:	f7ff bbe0 	b.w	80141d2 <__ieee754_pow+0x132>
 8014a12:	4b30      	ldr	r3, [pc, #192]	; (8014ad4 <__ieee754_pow+0xa34>)
 8014a14:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8014a18:	429e      	cmp	r6, r3
 8014a1a:	f77f af0b 	ble.w	8014834 <__ieee754_pow+0x794>
 8014a1e:	4b2e      	ldr	r3, [pc, #184]	; (8014ad8 <__ieee754_pow+0xa38>)
 8014a20:	440b      	add	r3, r1
 8014a22:	4303      	orrs	r3, r0
 8014a24:	d00b      	beq.n	8014a3e <__ieee754_pow+0x99e>
 8014a26:	a326      	add	r3, pc, #152	; (adr r3, 8014ac0 <__ieee754_pow+0xa20>)
 8014a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a2c:	ec51 0b18 	vmov	r0, r1, d8
 8014a30:	f7eb fe0a 	bl	8000648 <__aeabi_dmul>
 8014a34:	a322      	add	r3, pc, #136	; (adr r3, 8014ac0 <__ieee754_pow+0xa20>)
 8014a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a3a:	f7ff bbca 	b.w	80141d2 <__ieee754_pow+0x132>
 8014a3e:	4622      	mov	r2, r4
 8014a40:	462b      	mov	r3, r5
 8014a42:	f7eb fc49 	bl	80002d8 <__aeabi_dsub>
 8014a46:	4642      	mov	r2, r8
 8014a48:	464b      	mov	r3, r9
 8014a4a:	f7ec f883 	bl	8000b54 <__aeabi_dcmpge>
 8014a4e:	2800      	cmp	r0, #0
 8014a50:	f43f aef0 	beq.w	8014834 <__ieee754_pow+0x794>
 8014a54:	e7e7      	b.n	8014a26 <__ieee754_pow+0x986>
 8014a56:	f04f 0a00 	mov.w	sl, #0
 8014a5a:	e717      	b.n	801488c <__ieee754_pow+0x7ec>
 8014a5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014a60:	4619      	mov	r1, r3
 8014a62:	e7d2      	b.n	8014a0a <__ieee754_pow+0x96a>
 8014a64:	491a      	ldr	r1, [pc, #104]	; (8014ad0 <__ieee754_pow+0xa30>)
 8014a66:	2000      	movs	r0, #0
 8014a68:	f7ff bb9e 	b.w	80141a8 <__ieee754_pow+0x108>
 8014a6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a70:	f7ff bb9a 	b.w	80141a8 <__ieee754_pow+0x108>
 8014a74:	9000      	str	r0, [sp, #0]
 8014a76:	f7ff bb76 	b.w	8014166 <__ieee754_pow+0xc6>
 8014a7a:	2100      	movs	r1, #0
 8014a7c:	f7ff bb60 	b.w	8014140 <__ieee754_pow+0xa0>
 8014a80:	00000000 	.word	0x00000000
 8014a84:	3fe62e43 	.word	0x3fe62e43
 8014a88:	fefa39ef 	.word	0xfefa39ef
 8014a8c:	3fe62e42 	.word	0x3fe62e42
 8014a90:	0ca86c39 	.word	0x0ca86c39
 8014a94:	be205c61 	.word	0xbe205c61
 8014a98:	72bea4d0 	.word	0x72bea4d0
 8014a9c:	3e663769 	.word	0x3e663769
 8014aa0:	c5d26bf1 	.word	0xc5d26bf1
 8014aa4:	3ebbbd41 	.word	0x3ebbbd41
 8014aa8:	af25de2c 	.word	0xaf25de2c
 8014aac:	3f11566a 	.word	0x3f11566a
 8014ab0:	16bebd93 	.word	0x16bebd93
 8014ab4:	3f66c16c 	.word	0x3f66c16c
 8014ab8:	5555553e 	.word	0x5555553e
 8014abc:	3fc55555 	.word	0x3fc55555
 8014ac0:	c2f8f359 	.word	0xc2f8f359
 8014ac4:	01a56e1f 	.word	0x01a56e1f
 8014ac8:	3fe00000 	.word	0x3fe00000
 8014acc:	000fffff 	.word	0x000fffff
 8014ad0:	3ff00000 	.word	0x3ff00000
 8014ad4:	4090cbff 	.word	0x4090cbff
 8014ad8:	3f6f3400 	.word	0x3f6f3400
 8014adc:	652b82fe 	.word	0x652b82fe
 8014ae0:	3c971547 	.word	0x3c971547

08014ae4 <__ieee754_sqrt>:
 8014ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ae8:	ec55 4b10 	vmov	r4, r5, d0
 8014aec:	4e56      	ldr	r6, [pc, #344]	; (8014c48 <__ieee754_sqrt+0x164>)
 8014aee:	43ae      	bics	r6, r5
 8014af0:	ee10 0a10 	vmov	r0, s0
 8014af4:	ee10 3a10 	vmov	r3, s0
 8014af8:	4629      	mov	r1, r5
 8014afa:	462a      	mov	r2, r5
 8014afc:	d110      	bne.n	8014b20 <__ieee754_sqrt+0x3c>
 8014afe:	ee10 2a10 	vmov	r2, s0
 8014b02:	462b      	mov	r3, r5
 8014b04:	f7eb fda0 	bl	8000648 <__aeabi_dmul>
 8014b08:	4602      	mov	r2, r0
 8014b0a:	460b      	mov	r3, r1
 8014b0c:	4620      	mov	r0, r4
 8014b0e:	4629      	mov	r1, r5
 8014b10:	f7eb fbe4 	bl	80002dc <__adddf3>
 8014b14:	4604      	mov	r4, r0
 8014b16:	460d      	mov	r5, r1
 8014b18:	ec45 4b10 	vmov	d0, r4, r5
 8014b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b20:	2d00      	cmp	r5, #0
 8014b22:	dc10      	bgt.n	8014b46 <__ieee754_sqrt+0x62>
 8014b24:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014b28:	4330      	orrs	r0, r6
 8014b2a:	d0f5      	beq.n	8014b18 <__ieee754_sqrt+0x34>
 8014b2c:	b15d      	cbz	r5, 8014b46 <__ieee754_sqrt+0x62>
 8014b2e:	ee10 2a10 	vmov	r2, s0
 8014b32:	462b      	mov	r3, r5
 8014b34:	ee10 0a10 	vmov	r0, s0
 8014b38:	f7eb fbce 	bl	80002d8 <__aeabi_dsub>
 8014b3c:	4602      	mov	r2, r0
 8014b3e:	460b      	mov	r3, r1
 8014b40:	f7eb feac 	bl	800089c <__aeabi_ddiv>
 8014b44:	e7e6      	b.n	8014b14 <__ieee754_sqrt+0x30>
 8014b46:	1509      	asrs	r1, r1, #20
 8014b48:	d076      	beq.n	8014c38 <__ieee754_sqrt+0x154>
 8014b4a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8014b4e:	07ce      	lsls	r6, r1, #31
 8014b50:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8014b54:	bf5e      	ittt	pl
 8014b56:	0fda      	lsrpl	r2, r3, #31
 8014b58:	005b      	lslpl	r3, r3, #1
 8014b5a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8014b5e:	0fda      	lsrs	r2, r3, #31
 8014b60:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8014b64:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8014b68:	2000      	movs	r0, #0
 8014b6a:	106d      	asrs	r5, r5, #1
 8014b6c:	005b      	lsls	r3, r3, #1
 8014b6e:	f04f 0e16 	mov.w	lr, #22
 8014b72:	4684      	mov	ip, r0
 8014b74:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014b78:	eb0c 0401 	add.w	r4, ip, r1
 8014b7c:	4294      	cmp	r4, r2
 8014b7e:	bfde      	ittt	le
 8014b80:	1b12      	suble	r2, r2, r4
 8014b82:	eb04 0c01 	addle.w	ip, r4, r1
 8014b86:	1840      	addle	r0, r0, r1
 8014b88:	0052      	lsls	r2, r2, #1
 8014b8a:	f1be 0e01 	subs.w	lr, lr, #1
 8014b8e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8014b92:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014b96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014b9a:	d1ed      	bne.n	8014b78 <__ieee754_sqrt+0x94>
 8014b9c:	4671      	mov	r1, lr
 8014b9e:	2720      	movs	r7, #32
 8014ba0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8014ba4:	4562      	cmp	r2, ip
 8014ba6:	eb04 060e 	add.w	r6, r4, lr
 8014baa:	dc02      	bgt.n	8014bb2 <__ieee754_sqrt+0xce>
 8014bac:	d113      	bne.n	8014bd6 <__ieee754_sqrt+0xf2>
 8014bae:	429e      	cmp	r6, r3
 8014bb0:	d811      	bhi.n	8014bd6 <__ieee754_sqrt+0xf2>
 8014bb2:	2e00      	cmp	r6, #0
 8014bb4:	eb06 0e04 	add.w	lr, r6, r4
 8014bb8:	da43      	bge.n	8014c42 <__ieee754_sqrt+0x15e>
 8014bba:	f1be 0f00 	cmp.w	lr, #0
 8014bbe:	db40      	blt.n	8014c42 <__ieee754_sqrt+0x15e>
 8014bc0:	f10c 0801 	add.w	r8, ip, #1
 8014bc4:	eba2 020c 	sub.w	r2, r2, ip
 8014bc8:	429e      	cmp	r6, r3
 8014bca:	bf88      	it	hi
 8014bcc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014bd0:	1b9b      	subs	r3, r3, r6
 8014bd2:	4421      	add	r1, r4
 8014bd4:	46c4      	mov	ip, r8
 8014bd6:	0052      	lsls	r2, r2, #1
 8014bd8:	3f01      	subs	r7, #1
 8014bda:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8014bde:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8014be2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014be6:	d1dd      	bne.n	8014ba4 <__ieee754_sqrt+0xc0>
 8014be8:	4313      	orrs	r3, r2
 8014bea:	d006      	beq.n	8014bfa <__ieee754_sqrt+0x116>
 8014bec:	1c4c      	adds	r4, r1, #1
 8014bee:	bf13      	iteet	ne
 8014bf0:	3101      	addne	r1, #1
 8014bf2:	3001      	addeq	r0, #1
 8014bf4:	4639      	moveq	r1, r7
 8014bf6:	f021 0101 	bicne.w	r1, r1, #1
 8014bfa:	1043      	asrs	r3, r0, #1
 8014bfc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8014c00:	0849      	lsrs	r1, r1, #1
 8014c02:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8014c06:	07c2      	lsls	r2, r0, #31
 8014c08:	bf48      	it	mi
 8014c0a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8014c0e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8014c12:	460c      	mov	r4, r1
 8014c14:	463d      	mov	r5, r7
 8014c16:	e77f      	b.n	8014b18 <__ieee754_sqrt+0x34>
 8014c18:	0ada      	lsrs	r2, r3, #11
 8014c1a:	3815      	subs	r0, #21
 8014c1c:	055b      	lsls	r3, r3, #21
 8014c1e:	2a00      	cmp	r2, #0
 8014c20:	d0fa      	beq.n	8014c18 <__ieee754_sqrt+0x134>
 8014c22:	02d7      	lsls	r7, r2, #11
 8014c24:	d50a      	bpl.n	8014c3c <__ieee754_sqrt+0x158>
 8014c26:	f1c1 0420 	rsb	r4, r1, #32
 8014c2a:	fa23 f404 	lsr.w	r4, r3, r4
 8014c2e:	1e4d      	subs	r5, r1, #1
 8014c30:	408b      	lsls	r3, r1
 8014c32:	4322      	orrs	r2, r4
 8014c34:	1b41      	subs	r1, r0, r5
 8014c36:	e788      	b.n	8014b4a <__ieee754_sqrt+0x66>
 8014c38:	4608      	mov	r0, r1
 8014c3a:	e7f0      	b.n	8014c1e <__ieee754_sqrt+0x13a>
 8014c3c:	0052      	lsls	r2, r2, #1
 8014c3e:	3101      	adds	r1, #1
 8014c40:	e7ef      	b.n	8014c22 <__ieee754_sqrt+0x13e>
 8014c42:	46e0      	mov	r8, ip
 8014c44:	e7be      	b.n	8014bc4 <__ieee754_sqrt+0xe0>
 8014c46:	bf00      	nop
 8014c48:	7ff00000 	.word	0x7ff00000

08014c4c <__ieee754_asinf>:
 8014c4c:	b538      	push	{r3, r4, r5, lr}
 8014c4e:	ee10 5a10 	vmov	r5, s0
 8014c52:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014c56:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8014c5a:	ed2d 8b04 	vpush	{d8-d9}
 8014c5e:	d10c      	bne.n	8014c7a <__ieee754_asinf+0x2e>
 8014c60:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8014dd8 <__ieee754_asinf+0x18c>
 8014c64:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8014ddc <__ieee754_asinf+0x190>
 8014c68:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014c6c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014c70:	eeb0 0a67 	vmov.f32	s0, s15
 8014c74:	ecbd 8b04 	vpop	{d8-d9}
 8014c78:	bd38      	pop	{r3, r4, r5, pc}
 8014c7a:	dd04      	ble.n	8014c86 <__ieee754_asinf+0x3a>
 8014c7c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014c80:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8014c84:	e7f6      	b.n	8014c74 <__ieee754_asinf+0x28>
 8014c86:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8014c8a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8014c8e:	da0b      	bge.n	8014ca8 <__ieee754_asinf+0x5c>
 8014c90:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8014c94:	da52      	bge.n	8014d3c <__ieee754_asinf+0xf0>
 8014c96:	eddf 7a52 	vldr	s15, [pc, #328]	; 8014de0 <__ieee754_asinf+0x194>
 8014c9a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014c9e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8014ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ca6:	dce5      	bgt.n	8014c74 <__ieee754_asinf+0x28>
 8014ca8:	f000 fb54 	bl	8015354 <fabsf>
 8014cac:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8014cb0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8014cb4:	ee20 8a08 	vmul.f32	s16, s0, s16
 8014cb8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8014de4 <__ieee754_asinf+0x198>
 8014cbc:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8014de8 <__ieee754_asinf+0x19c>
 8014cc0:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8014dec <__ieee754_asinf+0x1a0>
 8014cc4:	eea8 7a27 	vfma.f32	s14, s16, s15
 8014cc8:	eddf 7a49 	vldr	s15, [pc, #292]	; 8014df0 <__ieee754_asinf+0x1a4>
 8014ccc:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014cd0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8014df4 <__ieee754_asinf+0x1a8>
 8014cd4:	eea7 7a88 	vfma.f32	s14, s15, s16
 8014cd8:	eddf 7a47 	vldr	s15, [pc, #284]	; 8014df8 <__ieee754_asinf+0x1ac>
 8014cdc:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014ce0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8014dfc <__ieee754_asinf+0x1b0>
 8014ce4:	eea7 9a88 	vfma.f32	s18, s15, s16
 8014ce8:	eddf 7a45 	vldr	s15, [pc, #276]	; 8014e00 <__ieee754_asinf+0x1b4>
 8014cec:	eee8 7a07 	vfma.f32	s15, s16, s14
 8014cf0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8014e04 <__ieee754_asinf+0x1b8>
 8014cf4:	eea7 7a88 	vfma.f32	s14, s15, s16
 8014cf8:	eddf 7a43 	vldr	s15, [pc, #268]	; 8014e08 <__ieee754_asinf+0x1bc>
 8014cfc:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014d00:	eeb0 0a48 	vmov.f32	s0, s16
 8014d04:	eee7 8a88 	vfma.f32	s17, s15, s16
 8014d08:	f000 f926 	bl	8014f58 <__ieee754_sqrtf>
 8014d0c:	4b3f      	ldr	r3, [pc, #252]	; (8014e0c <__ieee754_asinf+0x1c0>)
 8014d0e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8014d12:	429c      	cmp	r4, r3
 8014d14:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8014d18:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014d1c:	dd3d      	ble.n	8014d9a <__ieee754_asinf+0x14e>
 8014d1e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8014d22:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8014e10 <__ieee754_asinf+0x1c4>
 8014d26:	eee0 7a26 	vfma.f32	s15, s0, s13
 8014d2a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8014ddc <__ieee754_asinf+0x190>
 8014d2e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014d32:	2d00      	cmp	r5, #0
 8014d34:	bfd8      	it	le
 8014d36:	eeb1 0a40 	vnegle.f32	s0, s0
 8014d3a:	e79b      	b.n	8014c74 <__ieee754_asinf+0x28>
 8014d3c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8014d40:	eddf 6a28 	vldr	s13, [pc, #160]	; 8014de4 <__ieee754_asinf+0x198>
 8014d44:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8014de8 <__ieee754_asinf+0x19c>
 8014d48:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8014dfc <__ieee754_asinf+0x1b0>
 8014d4c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014d50:	eddf 6a27 	vldr	s13, [pc, #156]	; 8014df0 <__ieee754_asinf+0x1a4>
 8014d54:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014d58:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8014df4 <__ieee754_asinf+0x1a8>
 8014d5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014d60:	eddf 6a25 	vldr	s13, [pc, #148]	; 8014df8 <__ieee754_asinf+0x1ac>
 8014d64:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014d68:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8014dec <__ieee754_asinf+0x1a0>
 8014d6c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014d70:	eddf 6a23 	vldr	s13, [pc, #140]	; 8014e00 <__ieee754_asinf+0x1b4>
 8014d74:	eee7 6a86 	vfma.f32	s13, s15, s12
 8014d78:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8014e04 <__ieee754_asinf+0x1b8>
 8014d7c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8014d80:	eddf 6a21 	vldr	s13, [pc, #132]	; 8014e08 <__ieee754_asinf+0x1bc>
 8014d84:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014d88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014d8c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8014d90:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8014d94:	eea0 0a27 	vfma.f32	s0, s0, s15
 8014d98:	e76c      	b.n	8014c74 <__ieee754_asinf+0x28>
 8014d9a:	ee10 3a10 	vmov	r3, s0
 8014d9e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014da2:	f023 030f 	bic.w	r3, r3, #15
 8014da6:	ee07 3a10 	vmov	s14, r3
 8014daa:	eea7 8a47 	vfms.f32	s16, s14, s14
 8014dae:	ee70 7a07 	vadd.f32	s15, s0, s14
 8014db2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014db6:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8014dba:	eddf 7a07 	vldr	s15, [pc, #28]	; 8014dd8 <__ieee754_asinf+0x18c>
 8014dbe:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8014dc2:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8014dc6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8014e14 <__ieee754_asinf+0x1c8>
 8014dca:	eeb0 6a40 	vmov.f32	s12, s0
 8014dce:	eea7 6a66 	vfms.f32	s12, s14, s13
 8014dd2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014dd6:	e7aa      	b.n	8014d2e <__ieee754_asinf+0xe2>
 8014dd8:	b33bbd2e 	.word	0xb33bbd2e
 8014ddc:	3fc90fdb 	.word	0x3fc90fdb
 8014de0:	7149f2ca 	.word	0x7149f2ca
 8014de4:	3811ef08 	.word	0x3811ef08
 8014de8:	3a4f7f04 	.word	0x3a4f7f04
 8014dec:	3e2aaaab 	.word	0x3e2aaaab
 8014df0:	bd241146 	.word	0xbd241146
 8014df4:	3e4e0aa8 	.word	0x3e4e0aa8
 8014df8:	bea6b090 	.word	0xbea6b090
 8014dfc:	3d9dc62e 	.word	0x3d9dc62e
 8014e00:	bf303361 	.word	0xbf303361
 8014e04:	4001572d 	.word	0x4001572d
 8014e08:	c019d139 	.word	0xc019d139
 8014e0c:	3f799999 	.word	0x3f799999
 8014e10:	333bbd2e 	.word	0x333bbd2e
 8014e14:	3f490fdb 	.word	0x3f490fdb

08014e18 <__ieee754_atan2f>:
 8014e18:	ee10 2a90 	vmov	r2, s1
 8014e1c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8014e20:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014e24:	b510      	push	{r4, lr}
 8014e26:	eef0 7a40 	vmov.f32	s15, s0
 8014e2a:	dc06      	bgt.n	8014e3a <__ieee754_atan2f+0x22>
 8014e2c:	ee10 0a10 	vmov	r0, s0
 8014e30:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8014e34:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014e38:	dd04      	ble.n	8014e44 <__ieee754_atan2f+0x2c>
 8014e3a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8014e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8014e42:	bd10      	pop	{r4, pc}
 8014e44:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8014e48:	d103      	bne.n	8014e52 <__ieee754_atan2f+0x3a>
 8014e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e4e:	f000 b9ad 	b.w	80151ac <atanf>
 8014e52:	1794      	asrs	r4, r2, #30
 8014e54:	f004 0402 	and.w	r4, r4, #2
 8014e58:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8014e5c:	b943      	cbnz	r3, 8014e70 <__ieee754_atan2f+0x58>
 8014e5e:	2c02      	cmp	r4, #2
 8014e60:	d05e      	beq.n	8014f20 <__ieee754_atan2f+0x108>
 8014e62:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8014f34 <__ieee754_atan2f+0x11c>
 8014e66:	2c03      	cmp	r4, #3
 8014e68:	bf08      	it	eq
 8014e6a:	eef0 7a47 	vmoveq.f32	s15, s14
 8014e6e:	e7e6      	b.n	8014e3e <__ieee754_atan2f+0x26>
 8014e70:	b941      	cbnz	r1, 8014e84 <__ieee754_atan2f+0x6c>
 8014e72:	eddf 7a31 	vldr	s15, [pc, #196]	; 8014f38 <__ieee754_atan2f+0x120>
 8014e76:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8014f3c <__ieee754_atan2f+0x124>
 8014e7a:	2800      	cmp	r0, #0
 8014e7c:	bfb8      	it	lt
 8014e7e:	eef0 7a40 	vmovlt.f32	s15, s0
 8014e82:	e7dc      	b.n	8014e3e <__ieee754_atan2f+0x26>
 8014e84:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014e88:	d110      	bne.n	8014eac <__ieee754_atan2f+0x94>
 8014e8a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014e8e:	f104 34ff 	add.w	r4, r4, #4294967295
 8014e92:	d107      	bne.n	8014ea4 <__ieee754_atan2f+0x8c>
 8014e94:	2c02      	cmp	r4, #2
 8014e96:	d846      	bhi.n	8014f26 <__ieee754_atan2f+0x10e>
 8014e98:	4b29      	ldr	r3, [pc, #164]	; (8014f40 <__ieee754_atan2f+0x128>)
 8014e9a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014e9e:	edd4 7a00 	vldr	s15, [r4]
 8014ea2:	e7cc      	b.n	8014e3e <__ieee754_atan2f+0x26>
 8014ea4:	2c02      	cmp	r4, #2
 8014ea6:	d841      	bhi.n	8014f2c <__ieee754_atan2f+0x114>
 8014ea8:	4b26      	ldr	r3, [pc, #152]	; (8014f44 <__ieee754_atan2f+0x12c>)
 8014eaa:	e7f6      	b.n	8014e9a <__ieee754_atan2f+0x82>
 8014eac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014eb0:	d0df      	beq.n	8014e72 <__ieee754_atan2f+0x5a>
 8014eb2:	1a5b      	subs	r3, r3, r1
 8014eb4:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8014eb8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8014ebc:	da1a      	bge.n	8014ef4 <__ieee754_atan2f+0xdc>
 8014ebe:	2a00      	cmp	r2, #0
 8014ec0:	da01      	bge.n	8014ec6 <__ieee754_atan2f+0xae>
 8014ec2:	313c      	adds	r1, #60	; 0x3c
 8014ec4:	db19      	blt.n	8014efa <__ieee754_atan2f+0xe2>
 8014ec6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8014eca:	f000 fa43 	bl	8015354 <fabsf>
 8014ece:	f000 f96d 	bl	80151ac <atanf>
 8014ed2:	eef0 7a40 	vmov.f32	s15, s0
 8014ed6:	2c01      	cmp	r4, #1
 8014ed8:	d012      	beq.n	8014f00 <__ieee754_atan2f+0xe8>
 8014eda:	2c02      	cmp	r4, #2
 8014edc:	d017      	beq.n	8014f0e <__ieee754_atan2f+0xf6>
 8014ede:	2c00      	cmp	r4, #0
 8014ee0:	d0ad      	beq.n	8014e3e <__ieee754_atan2f+0x26>
 8014ee2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8014f48 <__ieee754_atan2f+0x130>
 8014ee6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8014eea:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8014f4c <__ieee754_atan2f+0x134>
 8014eee:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014ef2:	e7a4      	b.n	8014e3e <__ieee754_atan2f+0x26>
 8014ef4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8014f38 <__ieee754_atan2f+0x120>
 8014ef8:	e7ed      	b.n	8014ed6 <__ieee754_atan2f+0xbe>
 8014efa:	eddf 7a15 	vldr	s15, [pc, #84]	; 8014f50 <__ieee754_atan2f+0x138>
 8014efe:	e7ea      	b.n	8014ed6 <__ieee754_atan2f+0xbe>
 8014f00:	ee17 3a90 	vmov	r3, s15
 8014f04:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014f08:	ee07 3a90 	vmov	s15, r3
 8014f0c:	e797      	b.n	8014e3e <__ieee754_atan2f+0x26>
 8014f0e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8014f48 <__ieee754_atan2f+0x130>
 8014f12:	ee77 7a80 	vadd.f32	s15, s15, s0
 8014f16:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8014f4c <__ieee754_atan2f+0x134>
 8014f1a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014f1e:	e78e      	b.n	8014e3e <__ieee754_atan2f+0x26>
 8014f20:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8014f4c <__ieee754_atan2f+0x134>
 8014f24:	e78b      	b.n	8014e3e <__ieee754_atan2f+0x26>
 8014f26:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8014f54 <__ieee754_atan2f+0x13c>
 8014f2a:	e788      	b.n	8014e3e <__ieee754_atan2f+0x26>
 8014f2c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014f50 <__ieee754_atan2f+0x138>
 8014f30:	e785      	b.n	8014e3e <__ieee754_atan2f+0x26>
 8014f32:	bf00      	nop
 8014f34:	c0490fdb 	.word	0xc0490fdb
 8014f38:	3fc90fdb 	.word	0x3fc90fdb
 8014f3c:	bfc90fdb 	.word	0xbfc90fdb
 8014f40:	08015c68 	.word	0x08015c68
 8014f44:	08015c74 	.word	0x08015c74
 8014f48:	33bbbd2e 	.word	0x33bbbd2e
 8014f4c:	40490fdb 	.word	0x40490fdb
 8014f50:	00000000 	.word	0x00000000
 8014f54:	3f490fdb 	.word	0x3f490fdb

08014f58 <__ieee754_sqrtf>:
 8014f58:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014f5c:	4770      	bx	lr

08014f5e <fabs>:
 8014f5e:	ec51 0b10 	vmov	r0, r1, d0
 8014f62:	ee10 2a10 	vmov	r2, s0
 8014f66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014f6a:	ec43 2b10 	vmov	d0, r2, r3
 8014f6e:	4770      	bx	lr

08014f70 <finite>:
 8014f70:	b082      	sub	sp, #8
 8014f72:	ed8d 0b00 	vstr	d0, [sp]
 8014f76:	9801      	ldr	r0, [sp, #4]
 8014f78:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8014f7c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014f80:	0fc0      	lsrs	r0, r0, #31
 8014f82:	b002      	add	sp, #8
 8014f84:	4770      	bx	lr
	...

08014f88 <rint>:
 8014f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014f8a:	ec51 0b10 	vmov	r0, r1, d0
 8014f8e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014f92:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8014f96:	2e13      	cmp	r6, #19
 8014f98:	ee10 4a10 	vmov	r4, s0
 8014f9c:	460b      	mov	r3, r1
 8014f9e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8014fa2:	dc58      	bgt.n	8015056 <rint+0xce>
 8014fa4:	2e00      	cmp	r6, #0
 8014fa6:	da2b      	bge.n	8015000 <rint+0x78>
 8014fa8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8014fac:	4302      	orrs	r2, r0
 8014fae:	d023      	beq.n	8014ff8 <rint+0x70>
 8014fb0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8014fb4:	4302      	orrs	r2, r0
 8014fb6:	4254      	negs	r4, r2
 8014fb8:	4314      	orrs	r4, r2
 8014fba:	0c4b      	lsrs	r3, r1, #17
 8014fbc:	0b24      	lsrs	r4, r4, #12
 8014fbe:	045b      	lsls	r3, r3, #17
 8014fc0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8014fc4:	ea44 0103 	orr.w	r1, r4, r3
 8014fc8:	4b32      	ldr	r3, [pc, #200]	; (8015094 <rint+0x10c>)
 8014fca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014fce:	e9d3 6700 	ldrd	r6, r7, [r3]
 8014fd2:	4602      	mov	r2, r0
 8014fd4:	460b      	mov	r3, r1
 8014fd6:	4630      	mov	r0, r6
 8014fd8:	4639      	mov	r1, r7
 8014fda:	f7eb f97f 	bl	80002dc <__adddf3>
 8014fde:	e9cd 0100 	strd	r0, r1, [sp]
 8014fe2:	463b      	mov	r3, r7
 8014fe4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014fe8:	4632      	mov	r2, r6
 8014fea:	f7eb f975 	bl	80002d8 <__aeabi_dsub>
 8014fee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014ff2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8014ff6:	4639      	mov	r1, r7
 8014ff8:	ec41 0b10 	vmov	d0, r0, r1
 8014ffc:	b003      	add	sp, #12
 8014ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015000:	4a25      	ldr	r2, [pc, #148]	; (8015098 <rint+0x110>)
 8015002:	4132      	asrs	r2, r6
 8015004:	ea01 0702 	and.w	r7, r1, r2
 8015008:	4307      	orrs	r7, r0
 801500a:	d0f5      	beq.n	8014ff8 <rint+0x70>
 801500c:	0851      	lsrs	r1, r2, #1
 801500e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8015012:	4314      	orrs	r4, r2
 8015014:	d00c      	beq.n	8015030 <rint+0xa8>
 8015016:	ea23 0201 	bic.w	r2, r3, r1
 801501a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801501e:	2e13      	cmp	r6, #19
 8015020:	fa43 f606 	asr.w	r6, r3, r6
 8015024:	bf0c      	ite	eq
 8015026:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801502a:	2400      	movne	r4, #0
 801502c:	ea42 0306 	orr.w	r3, r2, r6
 8015030:	4918      	ldr	r1, [pc, #96]	; (8015094 <rint+0x10c>)
 8015032:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8015036:	4622      	mov	r2, r4
 8015038:	e9d5 4500 	ldrd	r4, r5, [r5]
 801503c:	4620      	mov	r0, r4
 801503e:	4629      	mov	r1, r5
 8015040:	f7eb f94c 	bl	80002dc <__adddf3>
 8015044:	e9cd 0100 	strd	r0, r1, [sp]
 8015048:	e9dd 0100 	ldrd	r0, r1, [sp]
 801504c:	4622      	mov	r2, r4
 801504e:	462b      	mov	r3, r5
 8015050:	f7eb f942 	bl	80002d8 <__aeabi_dsub>
 8015054:	e7d0      	b.n	8014ff8 <rint+0x70>
 8015056:	2e33      	cmp	r6, #51	; 0x33
 8015058:	dd07      	ble.n	801506a <rint+0xe2>
 801505a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801505e:	d1cb      	bne.n	8014ff8 <rint+0x70>
 8015060:	ee10 2a10 	vmov	r2, s0
 8015064:	f7eb f93a 	bl	80002dc <__adddf3>
 8015068:	e7c6      	b.n	8014ff8 <rint+0x70>
 801506a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801506e:	f04f 36ff 	mov.w	r6, #4294967295
 8015072:	40d6      	lsrs	r6, r2
 8015074:	4230      	tst	r0, r6
 8015076:	d0bf      	beq.n	8014ff8 <rint+0x70>
 8015078:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801507c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8015080:	bf1f      	itttt	ne
 8015082:	ea24 0101 	bicne.w	r1, r4, r1
 8015086:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801508a:	fa44 f202 	asrne.w	r2, r4, r2
 801508e:	ea41 0402 	orrne.w	r4, r1, r2
 8015092:	e7cd      	b.n	8015030 <rint+0xa8>
 8015094:	08015c80 	.word	0x08015c80
 8015098:	000fffff 	.word	0x000fffff
 801509c:	00000000 	.word	0x00000000

080150a0 <scalbn>:
 80150a0:	b570      	push	{r4, r5, r6, lr}
 80150a2:	ec55 4b10 	vmov	r4, r5, d0
 80150a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80150aa:	4606      	mov	r6, r0
 80150ac:	462b      	mov	r3, r5
 80150ae:	b99a      	cbnz	r2, 80150d8 <scalbn+0x38>
 80150b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80150b4:	4323      	orrs	r3, r4
 80150b6:	d036      	beq.n	8015126 <scalbn+0x86>
 80150b8:	4b39      	ldr	r3, [pc, #228]	; (80151a0 <scalbn+0x100>)
 80150ba:	4629      	mov	r1, r5
 80150bc:	ee10 0a10 	vmov	r0, s0
 80150c0:	2200      	movs	r2, #0
 80150c2:	f7eb fac1 	bl	8000648 <__aeabi_dmul>
 80150c6:	4b37      	ldr	r3, [pc, #220]	; (80151a4 <scalbn+0x104>)
 80150c8:	429e      	cmp	r6, r3
 80150ca:	4604      	mov	r4, r0
 80150cc:	460d      	mov	r5, r1
 80150ce:	da10      	bge.n	80150f2 <scalbn+0x52>
 80150d0:	a32b      	add	r3, pc, #172	; (adr r3, 8015180 <scalbn+0xe0>)
 80150d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150d6:	e03a      	b.n	801514e <scalbn+0xae>
 80150d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80150dc:	428a      	cmp	r2, r1
 80150de:	d10c      	bne.n	80150fa <scalbn+0x5a>
 80150e0:	ee10 2a10 	vmov	r2, s0
 80150e4:	4620      	mov	r0, r4
 80150e6:	4629      	mov	r1, r5
 80150e8:	f7eb f8f8 	bl	80002dc <__adddf3>
 80150ec:	4604      	mov	r4, r0
 80150ee:	460d      	mov	r5, r1
 80150f0:	e019      	b.n	8015126 <scalbn+0x86>
 80150f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80150f6:	460b      	mov	r3, r1
 80150f8:	3a36      	subs	r2, #54	; 0x36
 80150fa:	4432      	add	r2, r6
 80150fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015100:	428a      	cmp	r2, r1
 8015102:	dd08      	ble.n	8015116 <scalbn+0x76>
 8015104:	2d00      	cmp	r5, #0
 8015106:	a120      	add	r1, pc, #128	; (adr r1, 8015188 <scalbn+0xe8>)
 8015108:	e9d1 0100 	ldrd	r0, r1, [r1]
 801510c:	da1c      	bge.n	8015148 <scalbn+0xa8>
 801510e:	a120      	add	r1, pc, #128	; (adr r1, 8015190 <scalbn+0xf0>)
 8015110:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015114:	e018      	b.n	8015148 <scalbn+0xa8>
 8015116:	2a00      	cmp	r2, #0
 8015118:	dd08      	ble.n	801512c <scalbn+0x8c>
 801511a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801511e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015122:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015126:	ec45 4b10 	vmov	d0, r4, r5
 801512a:	bd70      	pop	{r4, r5, r6, pc}
 801512c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015130:	da19      	bge.n	8015166 <scalbn+0xc6>
 8015132:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015136:	429e      	cmp	r6, r3
 8015138:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801513c:	dd0a      	ble.n	8015154 <scalbn+0xb4>
 801513e:	a112      	add	r1, pc, #72	; (adr r1, 8015188 <scalbn+0xe8>)
 8015140:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d1e2      	bne.n	801510e <scalbn+0x6e>
 8015148:	a30f      	add	r3, pc, #60	; (adr r3, 8015188 <scalbn+0xe8>)
 801514a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801514e:	f7eb fa7b 	bl	8000648 <__aeabi_dmul>
 8015152:	e7cb      	b.n	80150ec <scalbn+0x4c>
 8015154:	a10a      	add	r1, pc, #40	; (adr r1, 8015180 <scalbn+0xe0>)
 8015156:	e9d1 0100 	ldrd	r0, r1, [r1]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d0b8      	beq.n	80150d0 <scalbn+0x30>
 801515e:	a10e      	add	r1, pc, #56	; (adr r1, 8015198 <scalbn+0xf8>)
 8015160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015164:	e7b4      	b.n	80150d0 <scalbn+0x30>
 8015166:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801516a:	3236      	adds	r2, #54	; 0x36
 801516c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015170:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8015174:	4620      	mov	r0, r4
 8015176:	4b0c      	ldr	r3, [pc, #48]	; (80151a8 <scalbn+0x108>)
 8015178:	2200      	movs	r2, #0
 801517a:	e7e8      	b.n	801514e <scalbn+0xae>
 801517c:	f3af 8000 	nop.w
 8015180:	c2f8f359 	.word	0xc2f8f359
 8015184:	01a56e1f 	.word	0x01a56e1f
 8015188:	8800759c 	.word	0x8800759c
 801518c:	7e37e43c 	.word	0x7e37e43c
 8015190:	8800759c 	.word	0x8800759c
 8015194:	fe37e43c 	.word	0xfe37e43c
 8015198:	c2f8f359 	.word	0xc2f8f359
 801519c:	81a56e1f 	.word	0x81a56e1f
 80151a0:	43500000 	.word	0x43500000
 80151a4:	ffff3cb0 	.word	0xffff3cb0
 80151a8:	3c900000 	.word	0x3c900000

080151ac <atanf>:
 80151ac:	b538      	push	{r3, r4, r5, lr}
 80151ae:	ee10 5a10 	vmov	r5, s0
 80151b2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80151b6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80151ba:	eef0 7a40 	vmov.f32	s15, s0
 80151be:	db10      	blt.n	80151e2 <atanf+0x36>
 80151c0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80151c4:	dd04      	ble.n	80151d0 <atanf+0x24>
 80151c6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80151ca:	eeb0 0a67 	vmov.f32	s0, s15
 80151ce:	bd38      	pop	{r3, r4, r5, pc}
 80151d0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8015308 <atanf+0x15c>
 80151d4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801530c <atanf+0x160>
 80151d8:	2d00      	cmp	r5, #0
 80151da:	bfd8      	it	le
 80151dc:	eef0 7a40 	vmovle.f32	s15, s0
 80151e0:	e7f3      	b.n	80151ca <atanf+0x1e>
 80151e2:	4b4b      	ldr	r3, [pc, #300]	; (8015310 <atanf+0x164>)
 80151e4:	429c      	cmp	r4, r3
 80151e6:	dc10      	bgt.n	801520a <atanf+0x5e>
 80151e8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80151ec:	da0a      	bge.n	8015204 <atanf+0x58>
 80151ee:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8015314 <atanf+0x168>
 80151f2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80151f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80151fa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80151fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015202:	dce2      	bgt.n	80151ca <atanf+0x1e>
 8015204:	f04f 33ff 	mov.w	r3, #4294967295
 8015208:	e013      	b.n	8015232 <atanf+0x86>
 801520a:	f000 f8a3 	bl	8015354 <fabsf>
 801520e:	4b42      	ldr	r3, [pc, #264]	; (8015318 <atanf+0x16c>)
 8015210:	429c      	cmp	r4, r3
 8015212:	dc4f      	bgt.n	80152b4 <atanf+0x108>
 8015214:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8015218:	429c      	cmp	r4, r3
 801521a:	dc41      	bgt.n	80152a0 <atanf+0xf4>
 801521c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015220:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015224:	eea0 7a27 	vfma.f32	s14, s0, s15
 8015228:	2300      	movs	r3, #0
 801522a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801522e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015232:	1c5a      	adds	r2, r3, #1
 8015234:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8015238:	eddf 5a38 	vldr	s11, [pc, #224]	; 801531c <atanf+0x170>
 801523c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8015320 <atanf+0x174>
 8015240:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8015324 <atanf+0x178>
 8015244:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8015328 <atanf+0x17c>
 8015248:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801524c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8015250:	eddf 5a36 	vldr	s11, [pc, #216]	; 801532c <atanf+0x180>
 8015254:	eee6 5a07 	vfma.f32	s11, s12, s14
 8015258:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8015330 <atanf+0x184>
 801525c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8015260:	eddf 5a34 	vldr	s11, [pc, #208]	; 8015334 <atanf+0x188>
 8015264:	eee6 5a07 	vfma.f32	s11, s12, s14
 8015268:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8015338 <atanf+0x18c>
 801526c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8015270:	eddf 5a32 	vldr	s11, [pc, #200]	; 801533c <atanf+0x190>
 8015274:	eee7 5a05 	vfma.f32	s11, s14, s10
 8015278:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8015340 <atanf+0x194>
 801527c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8015280:	eddf 5a30 	vldr	s11, [pc, #192]	; 8015344 <atanf+0x198>
 8015284:	eee5 5a07 	vfma.f32	s11, s10, s14
 8015288:	eea5 0a87 	vfma.f32	s0, s11, s14
 801528c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8015290:	eea6 0a26 	vfma.f32	s0, s12, s13
 8015294:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015298:	d121      	bne.n	80152de <atanf+0x132>
 801529a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801529e:	e794      	b.n	80151ca <atanf+0x1e>
 80152a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80152a4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80152a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80152ac:	2301      	movs	r3, #1
 80152ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80152b2:	e7be      	b.n	8015232 <atanf+0x86>
 80152b4:	4b24      	ldr	r3, [pc, #144]	; (8015348 <atanf+0x19c>)
 80152b6:	429c      	cmp	r4, r3
 80152b8:	dc0b      	bgt.n	80152d2 <atanf+0x126>
 80152ba:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80152be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80152c2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80152c6:	2302      	movs	r3, #2
 80152c8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80152cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80152d0:	e7af      	b.n	8015232 <atanf+0x86>
 80152d2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80152d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80152da:	2303      	movs	r3, #3
 80152dc:	e7a9      	b.n	8015232 <atanf+0x86>
 80152de:	4a1b      	ldr	r2, [pc, #108]	; (801534c <atanf+0x1a0>)
 80152e0:	491b      	ldr	r1, [pc, #108]	; (8015350 <atanf+0x1a4>)
 80152e2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80152e6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80152ea:	ed93 7a00 	vldr	s14, [r3]
 80152ee:	ee30 0a47 	vsub.f32	s0, s0, s14
 80152f2:	2d00      	cmp	r5, #0
 80152f4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80152f8:	ed92 0a00 	vldr	s0, [r2]
 80152fc:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015300:	bfb8      	it	lt
 8015302:	eef1 7a67 	vneglt.f32	s15, s15
 8015306:	e760      	b.n	80151ca <atanf+0x1e>
 8015308:	3fc90fdb 	.word	0x3fc90fdb
 801530c:	bfc90fdb 	.word	0xbfc90fdb
 8015310:	3edfffff 	.word	0x3edfffff
 8015314:	7149f2ca 	.word	0x7149f2ca
 8015318:	3f97ffff 	.word	0x3f97ffff
 801531c:	3c8569d7 	.word	0x3c8569d7
 8015320:	3d4bda59 	.word	0x3d4bda59
 8015324:	bd15a221 	.word	0xbd15a221
 8015328:	be4ccccd 	.word	0xbe4ccccd
 801532c:	3d886b35 	.word	0x3d886b35
 8015330:	3dba2e6e 	.word	0x3dba2e6e
 8015334:	3e124925 	.word	0x3e124925
 8015338:	3eaaaaab 	.word	0x3eaaaaab
 801533c:	bd6ef16b 	.word	0xbd6ef16b
 8015340:	bd9d8795 	.word	0xbd9d8795
 8015344:	bde38e38 	.word	0xbde38e38
 8015348:	401bffff 	.word	0x401bffff
 801534c:	08015c90 	.word	0x08015c90
 8015350:	08015ca0 	.word	0x08015ca0

08015354 <fabsf>:
 8015354:	ee10 3a10 	vmov	r3, s0
 8015358:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801535c:	ee00 3a10 	vmov	s0, r3
 8015360:	4770      	bx	lr
	...

08015364 <_init>:
 8015364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015366:	bf00      	nop
 8015368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801536a:	bc08      	pop	{r3}
 801536c:	469e      	mov	lr, r3
 801536e:	4770      	bx	lr

08015370 <_fini>:
 8015370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015372:	bf00      	nop
 8015374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015376:	bc08      	pop	{r3}
 8015378:	469e      	mov	lr, r3
 801537a:	4770      	bx	lr
